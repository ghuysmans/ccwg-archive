{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1656644400000,"hide_scoreboard":true,"hide_scoreboard_config":{"embed_video_url":"https://www.youtube.com/embed/PThnKCZ1ZDI"},"id":"00000000008f4a94","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"Thanks for participating in Coding Practice with Kick Start Session #2! Feel free to continue practicing the problems in practice-mode and <a href=\"https://youtu.be/ys2akzpjl3k\">watch the welcome video</a> if you are just getting started. Read through the analyses and download the test set data by clicking on each problem statement to learn more about how to approach solving each problem. If you missed the Problem Walkthrough video or want to reference it, please find the <a href=\"https://codingcompetitionsonair.withgoogle.com/events/cpwks-2022/watch?talk=cpwks-2\">on-demand video here</a>. You can also try out other past problems at <a href=\"https://g.co/kickstart/archive\">g.co/kickstart/archive</a>.<br><br>\nThanks again for participating and hope to see in <a href=\"https://codingcompetitions.withgoogle.com/kickstart/schedule?utm_medium=email&utm_source=emailer&utm_campaign=cpwks&src=Online%2FTOPs%2FKS\"><b>future Kick Start rounds</a></b>. You can participate in as many rounds as you wish! ","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1656345600000,"tasks":[{"analysis":"<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a href=\"https://youtu.be/PThnKCZ1ZDI?t=55\" target=\"_blank\"\n    >View problem and solution walkthrough video\n  </a>\n</p>\n<p>\n  The problem translates to finding the maximum number of balanced non-empty\n  substrings possible in a string, generated from the given number of left and\n  right parentheses. A string $$$S$$$ consisting only of characters\n  <code>(</code> and/or <code>)</code> is <i>balanced</i> if:\n</p>\n\n<ul>\n  <li>It is an empty string, or:</li>\n  <li>\n    It has the form <code>(</code>$$$S$$$<code>)</code>, where $$$S$$$ is a\n    balanced string, or:\n  </li>\n  <li>\n    It has the form $$$S_1S_2$$$, where $$$S_1$$$ is a balanced string and\n    $$$S_2$$$ is a balanced string.\n  </li>\n</ul>\n\n<h3>Test Set 1</h3>\n\n<p>\n  Naively, we can generate all the permutations of strings possible from $$$\\mathbf{L}$$$\n  left parentheses <code>(</code> and $$$\\mathbf{R}$$$ right parentheses <code>)</code>. The\n  time complexity of generating all the permutations will be in order of\n  possible permutations i.e. $$$O(\\frac{(\\mathbf{L}+\\mathbf{R})!}{\\mathbf{L}! \\times \\mathbf{R}!})$$$.\n</p>\n<p>\n  For counting the number of balanced non-empty substrings in a string, we can\n  use a basic counter which increases by $$$1$$$ for a left parenthesis\n  <code>(</code> and decreases by $$$1$$$ for a right parenthesis\n  <code>)</code>. While iterating a given string, if the value of the counter\n  becomes negative before reaching the end, then this string cannot be a\n  balanced string because it denotes the occurrence of right\n  <code>)</code> parenthesis before it's matching left <code>(</code>\n  paranthesis. If the counter is $$$0$$$ at the end of the string, avoiding\n  being negative throughout the string then it denotes a balanced string. We can\n  do this check for all the substrings in a efficient way using a nested for\n  loop, which results in a Time complexity of $$$O(N^{2})$$$ where N is the\n  length of the string:\n</p>\n<pre><code class=\"language-cpp\">\n<var>int</var> CountBalancedSubstrings(<var>String</var> S) {\n  <var>int</var> N = S.length();\n  <var>int</var> balanced_substrings = 0;\n  for (<var>int</var> i = 0; i < N; i++) {\n    <var>int</var> counter = 0;\n    for (<var>int</var> j = i; j < N; j++) {\n      if (S[j] == '(')\n        counter++;\n      else\n        counter--;\n      if (counter < 0) break;\n      if (counter == 0) balanced_substrings++;\n    }\n  }\n  return balanced_substrings;\n}\n</code></pre>\n\n<p>\n  So overall, we can generate all the permutations of the string, count the\n  balanced substrings and return the maximum possible number of balanced\n  non-empty substrings in $$$O(\\frac{(\\mathbf{L}+\\mathbf{R})!}{\\mathbf{L}! \\times \\mathbf{R}!} \\times\n  (\\mathbf{L}+\\mathbf{R})^{2})$$$ Time complexity.\n</p>\n\n<h3>Test Set 2</h3>\n\n<p>\n  We cannot generate all the possible permutations of strings as the solution\n  would timeout. We cannot even count the number of balanced substrings in a\n  string using our earlier $$$O(N^{2})$$$ algorithm as N can go upto\n  $$$10^{5}$$$.\n</p>\n\n<p>\n  We need to identify the optimal strategy to get the maximum number of balanced\n  substrings. We can observe few things from our CountBalancedSubstrings\n  algorithm:\n</p>\n<ul>\n  <li>\n    The counter should not become <i>negative</i> while iterating throughout the\n    string.\n  </li>\n  <li>\n    The number of balanced substrings we get is directly proportional to the\n    number of times the counter becomes $$$0$$$.\n  </li>\n</ul>\n<p>\n  So this translates to the optimal strategy of arranging left parentheses\n  <code>(</code> and right parentheses <code>)</code> like this\n  <code>()()()()()....</code>.\n  <br />\n  Now every left parenthesis requires a right parenthesis and vice versa for\n  forming a balanced string. So we can say this pattern will follow till $$$2\n  \\times N$$$ length where $$$N = min(\\mathbf{L}, \\mathbf{R})$$$, and the rest of the string\n  would not be a part of any balanced substring as it would either include all\n  left <code>(</code> parantheses or all right <code>)</code> parantheses.\n\n  <br />\n  Now in this pattern we can see that the first left parenthesis\n  <code>(</code> forms a balanced substring with all the N right parentheses\n  <code>)</code> ahead of it. Similarly, every left parenthesis\n  <code>(</code> forms a balanced substring with all the right parentheses\n  <code>)</code> ahead of it till $$$2 \\times N$$$ length. So the total number\n  of balanced non-empty substrings will be $$$1 + 2 + 3 + 4 + \\cdots + N =\n  \\frac{N \\times (N+1)}{2}$$$\n</p>\n<p>\n  So for each test case, we can calculate $$$N$$$ and then the maximum possible\n  number of balanced non-empty substrings in $$$O(1)$$$ Time and Space\n  complexity.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2V7g1wpx784LwewO7E6zNWLlBSb5vd1xwONrIltG7UnvlUK2GodEUbtQAhcpXAFR0S6HpxxVHk/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000b5496b","statement":"<h3>Problem</h3>\n<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a target=\"_blank\" href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1jSewfL69qmqCfkUnphaP2qI5DIp8EJaI_UJC7XYiRF7ATynDjmj9CzsoS7aePx075GqUful4KnTf2/starter_code.zip?dl=1\">Download the Starter Code!</a>\n</p>\n<p>\n  Sherlock and Watson have recently enrolled in a computer programming course.\n  Today, the tutor taught them about the balanced parentheses problem. A string\n  $$$S$$$ consisting only of characters <code>(</code> and/or <code>)</code> is\n  <i>balanced</i> if:<br />\n</p>\n\n<ul>\n  <li>It is an empty string, or:</li>\n  <li>\n    It has the form <code>(</code>$$$S$$$<code>)</code>, where $$$S$$$ is a\n    balanced string, or:\n  </li>\n  <li>\n    It has the form $$$S_1S_2$$$, where $$$S_1$$$ is a balanced string and\n    $$$S_2$$$ is a balanced string.\n  </li>\n</ul>\n\n<p>\n  Sherlock coded up the solution very quickly and started bragging about how\n  good he is, so Watson gave him a problem to test his knowledge. He asked\n  Sherlock to generate a string $$$S$$$ of `L + R` characters, in which there\n  are a total of $$$\\mathbf{L}$$$ left parentheses <code>(</code> and a total of $$$\\mathbf{R}$$$ right\n  parentheses <code>)</code>. Moreover, the string must have as many different\n  balanced non-empty substrings as possible. (Two substrings are considered\n  different as long as they start and end at different indexes of the string,\n  even if their content happens to be the same). Note that $$$S$$$ itself does\n  not have to be balanced.<br />\n\n  Sherlock is sure that once he knows the maximum possible number of balanced\n  non-empty substrings, he will be able to solve the problem. Can you help him\n  find that maximum number?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow.<br/> Each test case consists of one line with two integers: $$$\\mathbf{L}$$$ and\n  $$$\\mathbf{R}$$$.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the test case number\n  (starting from $$$1$$$) and $$$y$$$ is the answer, as described above.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n $$$1 \\le \\mathbf{T} \\le 100$$$.<br /> </p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$0 \\le \\mathbf{L} \\le 20$$$.<br />\n  $$$0 \\le \\mathbf{R} \\le 20$$$.<br />\n  $$$1 \\le \\mathbf{L}+\\mathbf{R} \\le 20$$$.<br />\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$0 \\le \\mathbf{L} \\le 10^{5}$$$.<br />\n  $$$0 \\le \\mathbf{R} \\le 10^{5}$$$.<br />\n  $$$1 \\le \\mathbf{L}+\\mathbf{R} \\le 10^{5}$$$.<br />\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3zaGhxabdR9ilznrQypKkESTRqB3S-_6KyU5PD3tmyFwZGx-kMD6iU7agb4Oyc6buwXp4iMkCJMutBZl476dGJV1FvPS4b53hA8GDsVt0ijclP8ueGpwc/sherlock_and_parentheses_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n1 0\n1 1\n3 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1HHwOIzrIcdj5liyJuCw3o02NmdDvsD39O_5ACIrLXqLzcaUkh8_DBQVrY3hwJ7cYcx8QFOSq_GUG7JCITOsmsxDBhfaM_qub2E1ZJGy_98lFw3c8B-VHh/sherlock_and_parentheses_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0\nCase #2: 1\nCase #3: 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    In Sample Case #1, the only possible string is <code>(</code>. There are no\n    balanced non-empty substrings.\n  </p>\n  <p>\n    In Sample Case #2, the optimal string is <code>()</code>. There is only one\n    balanced non-empty substring: the entire string itself.\n  </p>\n  <p>\n    In Sample Case #3, both strings <code>()()(</code> and\n    <code>(()()</code> give the same optimal answer.<br />\n    For the case <code>()()(</code>, for example, the three balanced substrings\n    are <code>()</code> from indexes $$$1$$$ to $$$2$$$, <code>()</code> from\n    indexes $$$3$$$ to $$$4$$$, and <code>()()</code> from indexes $$$1$$$ to\n    $$$4$$$.\n  </p>\n</sampleio>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":1,"type__str":"VISIBLE","value":7}],"title":"Sherlock and Parentheses","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a href=\"https://youtu.be/PThnKCZ1ZDI?t=306\" target=\"_blank\"\n    >View problem and solution walkthrough video\n  </a>\n</p>\n<p>\n  For each of Bob's questions, we have to figure out if it is possible to rearrange a string of\n  letters to form a palindrome. The set of letters is the substring $$$\\left[ \\mathbf{L_i}, \\mathbf{R_i} \\right]$$$\n  from the original string from the test case.\n</p>\n<p>\n  One possible approach is to enumerate all permutations of the substring and check if any are\n  palindromes. For a substring of length $$$l$$$, this would involve checking up to\n  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Factorial\">$$$Factorial$$$</a>$$$(l)$$$\n  permutations, each of which costs $$$O(l)$$$ to check if the permutation is a palindrome.\n  Sometimes, \"brute force\" solutions like this are sufficient to solve competition problems, but in\n  this case, even the $$$\\mathbf{N}$$$-max of $$$20$$$ from the smaller test set would take on the order of\n  $$$20 \\times Factorial(20) \\approx 4.9 \\times 10^{19}$$$ operations to perform. This is orders of\n  magnitude more than can be accomplished within the time limit.\n</p>\n<p>\n  One important observation is that a palindrome can be described as an arbitrary string of zero or\n  more letters, followed by the reverse of that string, optionally with one extra letter between\n  them. For example, <code>ABCCBA</code> (without a middle letter) and <code>ABCXCBA</code> (with a\n  middle letter) are both palindromes. These examples illustrate an important property of\n  palindromes, which is that all letters, with the exception of the optional middle letter, must\n  occur an even number of times.\n</p>\n<p>\n  This property holds true for all palindromes, and it turns out that a set of letters with this\n  property can <i>always</i> be arranged to form a palindrome. We can do this by selecting pairs of\n  letters and using them to construct two identical strings. Eventually, we will have at most one\n  letter left over. Finally, we can take one of the strings and concatenate the reverse of the other,\n  optionally with the leftover letter in between. The resulting string will be a palindrome!\n</p>\n<h3>Test set 1</h3>\n<p>\n  For each question, we can count the frequencies of all letters in the substring and decide if it\n  is possible to rearrange them to form a palindrome. For each question, the cost of calculating the\n  frequency of each letter is $$$O(\\mathbf{N})$$$. With $$$\\mathbf{Q}$$$ questions per test case, this approach has a\n  complexity of $$$O\\left(\\mathbf{Q} \\times \\mathbf{N} \\right)$$$, which is sufficient for Test set 1.\n</p>\n<h3>Test set 2</h3>\n<p>\n  This test set has much larger limits for $$$\\mathbf{Q}$$$ and $$$\\mathbf{N}$$$, so the approach from Test set 1 will be too\n  slow to complete within the time limit. An important observation is that for a given test case,\n  Bob's questions are not independent - rather, they are all questions about substrings of the\n  <i>same</i> string. Can we use this to our advantage and share or reuse calculations among the\n  questions?\n</p>\n<p>\n  Thinking about the approach used in Test set 1, we can observe that the process of counting the\n  letters in each substring ends up being repeated many times between the different questions. For\n  example, if one question asked about the range $$$\\left[20, 70\\right]$$$ and another asked about\n  the range $$$\\left[30, 80\\right]$$$, these both involve repeating the same counting process for\n  the range $$$\\left[30, 70\\right]$$$. It turns out we can perform the counting process for\n  <i>every possible question</i> ahead of time by generating a\n  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Prefix_sum\">prefix sum</a> for the\n  frequency of each letter.\n</p>\n<p>\n  Generating a prefix sum for the letter frequencies in a string of length $$$\\mathbf{N}$$$ has a complexity of\n  $$$O(\\mathbf{N})$$$. Furthermore, once the prefix sum is generated, answering any of Bob's questions can\n  be done in constant time! For any question $$$\\left[ \\mathbf{L_i}, \\mathbf{R_i} \\right]$$$, the frequency of letters\n  in the substring is just the difference in value between the prefix sum at the beginning and the\n  end of the substring. This reduces the computational complexity of each test case from\n  $$$O\\left(\\mathbf{Q} \\times \\mathbf{N} \\right)$$$ to $$$O\\left(\\mathbf{Q} + \\mathbf{N} \\right)$$$, which is sufficient for\n  Test set 2.\n</p>\n<p>\n  It is also worth mentioning that while the 1GB memory limit is more than sufficient for this\n  approach, we don't actually need to store the letter frequencies themselves. Because we only need\n  to check whether a letter occurs an even or odd number of times, we can actually calculate a\n  \"prefix parity\" and compare the parity at the beginning and end of a substring. If at most one\n  letter has a different parity, then the substring can be arranged to form a palindrome.\n</p>\n<h3>Example Solution</h3>\n<pre><code>\nSolve(<var>N</var>, <var>Q</var>, <var>letters</var>, <var>questions</var>) {\n  answer = 0\n  prefix[1]['A':'Z'] = 0\n  for i in 1:<var>N</var> {\n    prefix[i+1] = prefix[i]\n    prefix[i+1][<var>letters</var>[i]]++\n  }\n  for i in 1:<var>Q</var> {\n    [L,R] = <var>questions</var>[i]\n    frequencies = prefix[R+1] - prefix[L]\n    odds = 0\n    for c in 'A':'Z' {\n      if IsOdd(frequencies[c]) {\n        odds++\n      }\n    }\n    if odds &lt;= 1 {\n      answer++\n    }\n  }\n  return answer\n}\n</code></pre>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2oMPp0JDqrSmrXllGYGqA7vEBKC_tG80IICn82PE6ZPQwveY4LDRl2Yzmaq4-PlxENFhG7Qb3c/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000b54d3b","statement":"<h3>Problem</h3>\n<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a target=\"_blank\" href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3BB0M8DdEn416TtHqFB1IBwoOQY0jb-lmCW40BK_93_By9_omCss8JCcyjC67OAfvTXVdfHEmQ9G-k/starter_code.zip?dl=1\">Download the Starter Code!</a>\n</p>\n<p>\n  Anna has a row of $$$\\mathbf{N}$$$ blocks, each with exactly one letter from <code>A</code> to <code>Z</code> written on it.\n  The blocks are numbered $$$1, 2, \\cdots, \\mathbf{N}$$$ from left to right.\n</p><p>\n  Today, she is learning about palindromes.\n  A palindrome is a string that is the same written forwards and backwards.\n  For example, <code>ANNA</code>, <code>RACECAR</code>, <code>AAA</code> and <code>X</code> are all palindromes, while\n  <code>AB</code>, <code>FROG</code> and <code>YOYO</code> are not.\n</p><p>\n  Bob wants to test how well Anna understands palindromes, and will ask her $$$\\mathbf{Q}$$$ questions.\n  The i-th question is: can Anna form a palindrome using all of the blocks numbered from $$$L_i$$$\n  to $$$R_i$$$, inclusive? She may rearrange the blocks if necessary. After each question, Anna puts\n  the blocks back in their original positions.\n</p><p>\n  Please help Anna by finding out how many of Bob's questions she can answer \"yes\" to.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n  Each test case starts with a line containing the two integers $$$\\mathbf{N}$$$ and $$$\\mathbf{Q}$$$, the number of blocks and the number of questions, respectively.\n  Then, another line follows, containing a string of $$$\\mathbf{N}$$$ uppercase characters (<code>A</code> to <code>Z</code>).\n  Then, $$$\\mathbf{Q}$$$ lines follow. The i-th line contains the two integers $$$L_i$$$ and $$$R_i$$$, describing the i-th question.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the\n  test case number (starting from $$$1$$$) and $$$y$$$ is\n  the number of questions Anna can answer \"yes\" to.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$1 \\le L_i \\le R_i \\le \\mathbf{N}$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{N} \\le 20$$$.<br/>\n  $$$1 \\le \\mathbf{Q} \\le 20$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$1 \\le \\mathbf{N} \\le 100000$$$.<br/>\n  $$$1 \\le \\mathbf{Q} \\le 100000$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1MNrwfD5B8f4BAS9u0xpuWvFvDro1VFa44xF3XGE1vnrdnd7HPR82tC-u14hHqt8LxvROrLnliibKPKHpMK5lCdjdXUhEYUFxERVHmqzf_zZPP2g/building_palindromes_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n7 5\nABAACCA\n3 6\n4 4\n2 5\n6 7\n3 7\n3 5\nXYZ\n1 3\n1 3\n1 3\n1 3\n1 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3DURlr3p39kDhi9q_IzEElFJUzL32BSjRWJ0LP_zdt7FkxU75FkBWLC4WY2EHmQGTbcuZDcDOzU3lGb0e6hLBdHSZhf_6H6yDp8FihqG1YjPPpxpw/building_palindromes_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 0\n\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, $$$\\mathbf{N}$$$ = $$$7$$$ and $$$\\mathbf{Q}$$$ = $$$5$$$.\n  <ul>\n    <li>For the first question, Anna must use the blocks <code>AACC</code>. She can rearrange these blocks into the palindrome <code>ACCA</code> (or <code>CAAC</code>). </li>\n    <li>For the second question, Anna must use the blocks <code>A</code>. This is already a palindrome, so she does not need to rearrange them. </li>\n    <li>For the third question, Anna must use the blocks <code>BAAC</code>. These blocks cannot be rearranged into a palindrome. </li>\n    <li>For the fourth question, Anna must use the blocks <code>CA</code>. These blocks cannot be rearranged into a palindrome. </li>\n    <li>For the fifth question, Anna must use the blocks <code>AACCA</code>. She can rearrange these blocks to form the palindrome <code>ACACA</code> (or <code>CAAAC</code>). </li>\n  </ul>\n  In total, she is able to answer \"yes\" to $$$3$$$ of Bob's questions, so the answer is $$$3$$$.\n</p><p>\n  In Sample Case #2, $$$\\mathbf{N}$$$ = $$$3$$$ and $$$\\mathbf{Q}$$$ = $$$5$$$. For the first question, Anna must use the blocks <code>XYZ</code> to create a palindrome.\n  This is impossible, and since the rest of Bob's questions are the same as the first one, the answer is $$$0$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":6},{"type":1,"type__str":"VISIBLE","value":8}],"title":"Building Palindromes","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a href=\"https://youtu.be/ys2akzpjl3k?t=126\" target=\"_blank\"\n    >View problem and solution walkthrough video\n  </a>\n</p>\n<p>\n  Solving this problem involves a number of steps. First, we must determine the total number of\n  candies we have available to distribute. We can calculate this by summing together the number of\n  candies in each bag, $$${total} := \\sum_{i=1}^{\\mathbf{N}} \\mathbf{C_i}$$$. Once we have the total number\n  of candies, we must determine the number of candies that will remain after evenly distributing as\n  many as possible among $$$\\mathbf{M}$$$ kids. We can calculate this by dividing the total number of candies by\n  the number of kids. $$$\\mathbf{M}$$$ may not evenly divide $$$total$$$, so $$$({total} \\div \\mathbf{M})$$$\n  will have an integer part (the amount each kid receives) and a remainder part (the amount left\n  over). Because we only care about the remainder, we can use the\n  <a target=\"_blank\" href=\" https://en.wikipedia.org/wiki/Modulo_operation\">modulo operation</a> which\n  does exactly this.\n</p>\n<h3>Example solution:</h3>\n<p>\n<pre><code>\nSolve(<var>N</var>, <var>M</var>, <var>C</var>) {\n  <var>total</var> = 0\n  for <var>i</var> in 1:<var>N</var> {\n    <var>total</var> = <var>total</var> + <var>C</var>[<var>i</var>]\n  }\n  <var>remainder</var> = modulo(<var>total</var>, <var>M</var>)\n  return <var>remainder</var>\n}\n</code></pre>\n</p>\n<h3>Limits and complexity:</h3>\n<p>\n  With the input limits for this problem, the default integer size for most programming languages\n  will be sufficient to perform all arithmetic without risk of overflow. Specifically, the largest\n  possible value is $$${total}=({\\mathbf{N_{max}}} \\times {\\mathbf{{C_{i}}_{max}}})=10^8$$$, which is easily stored\n  in a 32-bit signed integer (<!-- NOTYPO -->$$${int_{max}} \\approx 2.147 \\times 10^9$$$). If the\n  limits were larger, we could take advantage of the transitive and symmetric properties of modular\n  arithmetic to calculate the remainder provided by each bag, and the running remainder after each\n  addition:\n<pre><code>\nSolve(<var>N</var>, <var>M</var>, <var>C</var>) {\n  <var>remainder</var> = 0\n  for <var>i</var> in 1:<var>N</var> {\n    <var>remainder</var> = <var>remainder</var> + modulo(<var>C</var>[<var>i</var>], <var>M</var>)\n    <var>remainder</var> = modulo(<var>remainder</var>, <var>M</var>)\n  }\n  return <var>remainder</var>\n}\n</code></pre>\n  This reduces the largest intermediate value to $$$2 \\times ({\\mathbf{M_{max}}} - 1)$$$ with only a small\n  amount of extra computation. When solving other problems in this competition, you are likely to\n  encounter limits that will require this kind of optimization.\n</p>\n<p>\n  Computational complexity is also an important factor to consider when deciding how to approach a\n  problem. Both approaches presented here have the same complexity, $$$O(\\mathbf{N})$$$, which is sufficient\n  to solve the problem within the time limit. Other problems in this competition can often be solved\n  using a variety of approaches, but only some will be sufficiently fast to solve all test sets\n  within the time limit. An algorithm with complexity $$$O(\\mathbf{G}^3)$$$ may work for a small test set\n  with $$$\\mathbf{G}_{max}=20$$$, but that same algorithm will be too slow for a large test set with\n  $$$\\mathbf{G}_{max}=10^6$$$.\n</p>\n<p>\n  In general, time and memory limits for the problems in this competition, and the bounds for their\n  test sets, are chosen so that algorithms pass or fail based on their overall time and memory\n  complexity order. In other words, if a problem has a time limit of 60 seconds, it is unlikely\n  that a fast algorithm would take 40 seconds while a slow one took 80 seconds. Instead, you will\n  find that a fast algorithm might take 5 seconds while a slow one takes 5 years. So if you find\n  your solution exceeding the time limit for a problem, take a moment to reevaluate your algorithm.\n  There may be another approach that is many times faster.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U18EK2D3bxfZZWUyFHvMemtNZ4nEiOeJcmv_BNNLjZXyyoufRMYPTn6vJqDMLcmitqA7H0uydQ-/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000b5503a","statement":"<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a href=\"https://youtu.be/ys2akzpjl3k?t=126\" target=\"_blank\"\n    >View problem and solution walkthrough video\n  </a>\n</p>\n<h3>Problem</h3>\n<p>\n  You have gathered $$$\\mathbf{N}$$$ bags of candy and you want to distribute the candy\n  amongst $$$\\mathbf{M}$$$ kids. The $$$i$$$-th bag contains $$$\\mathbf{C_i}$$$ pieces of candy. You want\n  to make sure that every kid get the same amount of candy and that the number\n  of pieces of candy they receive is the greatest possible. You can open each\n  bag and mix all pieces of candy before distributing them to the kids.\n</p>\n<p>\n  How many pieces of candy will remain after you share the candy amongst kids,\n  based on the rules described above?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow.\n</p>\n<p>\n  Each test case consists of two lines. The first line of each test case\n  contains two integers: integer $$$\\mathbf{N}$$$, the number of candy bags, and $$$\\mathbf{M}$$$, the\n  number of kids.\n</p>\n<p>\n  The next line contains $$$\\mathbf{N}$$$ non-negative integers $$$\\mathbf{C_1},\\mathbf{C_2},\\dots,\\mathbf{C_N}$$$\n  representing array $$$\\mathbf{C}$$$, where the $$$i$$$-th integer represents the number of\n  candies in the $$$i$$$-th bag.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from $$$1$$$) and\n  <code>y</code> is the number of candies that will remain if you divide candies\n  between kids according to the rules described above.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 60 seconds.<br/>\nMemory limit: 1 GB.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n  $$$1 \\le \\mathbf{N} \\le 10^5$$$.<br />\n  $$$1 \\le \\mathbf{M} \\le 10^4$$$.<br />\n  $$$0 \\le \\mathbf{C_i} \\le 1000$$$, for all $$$i$$$ from $$$1$$$ to $$$\\mathbf{N}$$$.<br />\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2J4B4s70DpX5DnRYE7KZzzg0uzGNyiJF8j3diiwetRrd0AB80OljlY8tFIAXlP2G6AIq411Sd1zhP26KP1_5bLe0L0SCt1DK0WDpPshg/sample_problem_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n7 3\n1 2 3 4 5 6 7\n5 10\n7 7 7 7 7\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U14rbz06pbAkiz9SoGbDgi8wItr4qVbPo1POl9-30VOotN4iEm_dP_erB4cSAnzKXF85bK40X-wE25J0TzjW56unlIOc_Hd1zhuAxeCMP4/sample_problem_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nIn Sample Case #1, we have $$$\\mathbf{N}=7$$$ bags of candy. In total we have $$$1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$$$\ncandies that we want to divide between $$$\\mathbf{M} = 3$$$ kids.\nEvery kid can get $$$9$$$ pieces of candy, so $$$28 - 3 \\times 9 = 1$$$ pieces of candy will remain.\n</p>\n<p>\nIn Sample Case #2, we have $$$\\mathbf{N}=5$$$ bags of candy. In total we have $$$7 + 7 + 7 + 7 + 7 = 35$$$\ncandies that we want to divide between $$$\\mathbf{M} = 10$$$ kids.\nEvery kid can get $$$3$$$ pieces of candy, so $$$35 - 10 \\times 3 = 5$$$ pieces of candy will remain.\n</p>\n\n<h3>Sample codes</h3>\n\n<p>If you want to learn how to structure your code, read from the standard input,\n  or print to the standard output, please find the sample solutions to this problem below\n  in all the programming languages that are available on our platform.\n</p>\n\n<ul>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U33hknqzdOPMbnHIBIqlbUNlXyHmWC5SaYLxPDRWTSi9IzJRoK00tAlGNjaLd9Kyhm1h1aGgC5aCM5o/sample.c?dl=1\">C</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2bqYt6fCN7Wpfr2bs5CeRWJqtxb-G_qhHvaD3pPmmEhm4wwxviIxTrQCwzjf-nX1b6vzxJfnwUFqOjjd8/sample.clj?dl=1\">Clojure</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U03bBLDUQpwOpNqcpJfwjms8Akty3s2tJIw_e96_Hfmby4RiAGeuYWVwn3gjbHrh-IQYtANFt-7I562FgY/sample.cpp?dl=1\">C++</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1l2euYZJCYkMZz6rkO2adbEjayybQk3Cb3mvxr6RK_CXC4IvhzKaspdAGc5dJctdN4WfC4eVanCMDpIQ/sample.cs?dl=1\">C#</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1ffinoD9iLD65eTu5bmAnMmf2-p08sWvTNtKvvdtJH4zawo-i_gbB5lMgIk4TCaQgGeB16QFdSgtrJ/sample.d?dl=1\">D</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U17tmWxmMBERWOKzLBWNGf-1pvVOxA8LlTy6nK3uYavgPwxQUFdEwes2cbIRzQ1KXra5V0TcDksP3xR2uEo/sample.dart?dl=1\">Dart</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U28dXA68Tddix4NEZD5Ru6NRf_1BAk2mOa83IXD3cjipUGKlr6jeiRTrgoG0Cv_CONomqUAzuf3g8URZg/sample.fs?dl=1\">F#</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U246IRA6qQHp_4VxgsxHucW2CFIzDQBifC62OCPNDfbLHVMEC7ujDzojvUVm1no8uzO_XQwuY9-2hn9LA/sample.go?dl=1\">Go</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U33lYPOks_aO8KDin9Rq33a2Nj2Qx0lqhH7XNP1fcHKvrSw2H00UmKiCxPi1s7fzwB8CbZHflsV0V1QIzzjb0Q/sample.groovy?dl=1\">Groovy</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1T-z_YXdU06gwzBMv8hBVw8gCXxjpF1AJDJO9GMtOAnjsTjXgO3ZIvaIhLSTnBemCfFRzySY7Z98Ql5g/sample.hs?dl=1\">Haskell</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0eEcQIUaTQsO2rOHZ85179B0lPj2GvFSyKzYZLCkd_wgHTumj7Hnz0tW0f7E7pl5ogTs9JVAtu6kAB5b_Z/sample.java?dl=1\">Java</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U29QM1pL9spdt-9BwciSS0RWKRMK1fZngMU0ryRIJKC0kJBa0qz6WvRAzRLME3gyGasOb_dtrlrwEev7g/sample.jl?dl=1\">Julia</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U150aEujRIcBg7cMU2yg8ybLbiCyNMfcVlMlBqGiYkzG-whPHvZqcqHGK9YQZ8gTsqyniEgXP1o_4Za-Q/sample.js?dl=1\">JavaScript</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3pcnFvKzKQHDIFYPiU29PwCaGIzpsQHWz5Y_Ti-SyhVawGM-6-J1YeWxsM3G_1fA9zMCRPIJWVF7Sn3Q/sample.kt?dl=1\">Kotlin</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0J4V6del9ad_Fy9cODJ9-VkGsOuYaz-rBYZ4qWXOkyXffgMpHHeVXSvlgzBOFRB7YgUYnnPkN6x_0SsBwZ/sample.lisp?dl=1\">Lisp</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3yAMryorWQkIC5fI4kUDFgPIUO6gX57pSGC91luRoUY9NeHiQoz8652RpeULr-D1TYohFTmReXoObzTa0/sample.lua?dl=1\">Lua</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U08zvDoK_Y9lYqErDQrrFKySI2DIH-w_Aj0Het9_XZwDB16yYZVwdPVRmz3aMZVq9vUftB92uuuMETvC7KyT5oBeQ/sample_octave.m?dl=1\">Octave</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0byroFtABS-WAQ9p_UAY_DHf_fqlUpBtSm_sZUnDlVZs_-KUXv_F9WNQxi3IM4bBKtxB4mceRTCRg8LotLrtbo8ZBDyOd_/sample_objective_c.m?dl=1\">Objective-C</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U25m0DKsYC2uHM_2AlAGOnyuR6ZVXRBMsTAGWPl4xWgQyrl4Ga4-P5-kuH3z8C1hG_IlpD0ljYtfVs4BQ/sample.ml?dl=1\">OCaml</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0nlLZnLEEGU1vV4CUi9CQbEn5740yT8jcj9ybvrZ0EtAuYN0PYzvxVjtUERr7_wV0e8Gbb7mTCmHx501Y/sample.pas?dl=1\">Pascal</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U36updtj0YKNTC0KK5RrNmSfSQhXMzluIaS_sC7VJtVmhBcuUuROvAMgejBN0GG_A7u64md6Fq3Q4-F3wk/sample.php?dl=1\">PHP</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0AuVZKfbN8GANOTx0CkHW9QaUpaAMULcjj1YSonXL2jYMA1wuYLKjQczSBihvycyJWpVw_iQvL2IvZkg/sample.pl?dl=1\">Perl</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2AucU2q5Vf6-8XW7zhhOkCz-6dq5zd-DNyn2bR74K-VexghUgoJdFzFc8ri6RV8RzhCfEWVIHMn4huToE/sample.py3?dl=1\">Python3</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1MePCtBmSmou53YRktQjSNEUFJgkRBqOiHivbx6GZoWhmmf2W981PuBRsBfPfKcCD2oCag8AqGWyMqIRcn-A/sample.pypy3?dl=1\">PyPy 3</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3KfsRmrG2_T6UOal1TpdAv9oPvsXsEo4kHmuNAoeQnBXLbWiJMQBzEn9NZjRZgSZg9cv30OCDWcURN/sample.r?dl=1\">R</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2o2qbwrlkawBiHtTR3jO5J-M3FbAgPWGx6bBJ1Q2tmRUHTSLA-UbnGL6MlJjEgD_RRoo8UgR5BPpysbA/sample.rb?dl=1\">Ruby</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0hNNsbEBoXoLQ0zdxZqSIQIbLjhxlxRZtxT_LH4ASxJfAf9I6P6-2cF7KQPwbnvZqz4SWms9MyxIyUPw/sample.rs?dl=1\">Rust</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U19PINPCM1kUmVeb5eVADT837VB9P19p6w07RYK_2xjJzwZ45MFms6eehaNz7MnHD-wlXcLG3ewPNLgk-eTzA/sample.scala?dl=1\">Scala</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U23_swVxtXN_WBEt59ObxSadccj2o4uUUSbSnOf4x9f0ts-M6QAOnCE13avgHD9HSd9TpmFOGBxWObJhw/sample.sh?dl=1\">Bash</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2l9IYbGR-tQGgAd1B17s49_aqklA3ctBVknYPL1EWQWG6lr0b784kGzYklXStC7hwt210wu-MxGrizF4v0ug/sample.swift?dl=1\">Swift</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2KaHPmY7ZoGLkgBNeQ2SltTUHn1Og-d_TiCnwIrn8Qi9LLko5xR9HOZpudw4foNxIt1K3E19AWW5KL4A/sample.ts?dl=1\">TypeScript</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1T2rx8FtLKtMIRvu6Ha_g1gPGS_ZwLvSOjV-x9Ts3P9zIqwjIiQ_lXOvPjlN_iylk5vMh4wbmY5TyjRg/sample.vb?dl=1\">Visual Basic</a></li>\n</ul>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":1}],"title":"Sample Problem","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a href=\"https://youtu.be/PThnKCZ1ZDI?t=570\" target=\"_blank\"\n    >View problem and solution walkthrough video\n  </a>\n</p>\n<p>\n  The problem translates to determining whether the given string contains a substring (<code>spell</code>)\n  satisfying the given conditions:\n\n  <li>The spell must have $$$3$$$ \"words\": <code>start, middle, end</code></li>\n  <li>The start word must equal end word, and must be at least $$$2$$$ syllables</li>\n  <li>The middle word must have at least $$$1$$$ syllable</li>\n\n  Recall that a word is defined as a string of characters of any length with at least one syllable.\n  A syllable is a string that must have at least one vowel in <code>a, e, i, o, u</code> and can be of any\n  length.\n\n</p>\n<p> Let $$$S = E$$$ be the start and end word, and $$$M$$$ be the middle word. Let $$$v_i$$$\n  represent the $$$i$$$-th vowel in the string.\n</p>\n<p>\n  We can make a few observations and begin iterating through the string.\n  <ol>\n\n  <li>We can assume that $$$S$$$ begins at $$$v_1$$$. We can ignore all\n    the consonants before $$$v_1$$$, and assume they are either not part of\n    the spell (in the case for $$$S$$$), or they are part of $$$M$$$ (in the case for $$$E$$$),\n    since $$$M$$$'s only constraint is that it contains at least $$$1$$$ vowel.</li>\n  <li>We must assume that $$$S$$$ stops at $$$v_2$$$. This is the first string we encounter which\n    satisfies the constraint that $$$S$$$\n  has $$$2$$$ syllables, and stopping here ensures we do not miss any valid spells.\n    Similar to the above observation, we can do this because\n  we can simply tack on any extra consonants after $$$S$$$ to $$$M$$$, and any extra consonants after\n  $$$E$$$ does not matter.</li>\n  <li>Then, we can start looking for $$$M$$$. Once we see $$$v_3$$$, we should stop. We have now\n    satisfied the only constraint for $$$M$$$. Note that $$$M$$$ can have more vowels or consonants after\n    $$$v_3$$$, and no constraints will be broken. </li>\n  <li>After seeing $$$v_3$$$, we can begin our search for $$$E$$$. We already established what substring\n    $$$E$$$ must be, so we can simply do a search on the rest of the string starting from the character\n    after $$$v_3$$$. If $$$S$$$ appears, then our search is finished. Otherwise, a spell with\n    $$$S = E$$$ does not exist. In this case, we need to repeat the process and look for\n    a new $$$S$$$ and $$$E$$$.</li>\n</ol>\n\n<p>\n  If we need to look for a new $$$S$$$ and $$$E$$$, where should we start? We can\n  look for a new $$$S$$$ starting at $$$v_2$$$ and ending and $$$v_3$$$, and follow the same logic as\n  above. If we iterate through all the vowels and still do not find a valid spell, then we know\n  that the string does not contain one, and can return <code>Nothing</code>.\n</p>\n\n<p>\n  Now let us look at the runtime of this solution. Let $$$\\mathbf{N}$$$ be the length of the given string.\n  We iterate through the entire string to look for\n  a valid $$$S$$$, $$$M$$$, and $$$E$$$, at most $$$\\mathbf{N}$$$ times in the worst case. Thus, the runtime\n  is $$$O(\\mathbf{N}^2)$$$.\n</p>\n<p>\n  Another simple solution is to use RegEx to search whether a spell satisfies the given constraints.\n  The runtime of this solution is $$$O(\\mathbf{N})$$$, but keep in mind that the RegEx construction could take up\n  to $$$O(2^\\mathbf{C})$$$ construction time and space, where $$$\\mathbf{C}$$$ is the size of the regex.\n</p>\n","id":"0000000000b55464","statement":"<h3>Problem</h3>\n<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a target=\"_blank\" href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2jns2GW3V9CWGyIFJd97T7c0kuUmgEOgj6M_9eG_Xk86cuIg9C2DCKLro9nHOuFpbTwKq2n09s84wH/starter_code.zip?dl=1\">Download the Starter Code!</a>\n</p>\n<p>\n  You are competing at the 2011 World Witch and Warlock Tournament. In this\n  round of the competition, the Head Witch challenges all contestants to test\n  their spell deflection skills. Contestants stand in a circle, and the Head\n  Witch stands in the center and starts casting spells. The contestants then\n  have to cast counter-spells as quickly as possible. Any contestant who is too\n  slow risks being turned into a toad or petrified.\n</p>\n<p>\n  Each spell that the Head Witch casts consists of three words -- the start, the\n  middle and the end. Each word consists of one or more syllables. The start\n  word is always the same as the end word and consists of at least two\n  syllables. A syllable consists of any number of letters, including exactly one\n  vowel. There are 5 vowels: <code>'a', 'e', 'i', 'o'</code> and\n  <code>'u'</code>. All other letters are considered to be consonants, including\n  the letter <code>'y'</code>.\n</p>\n<p>\n  Examples of valid syllables are <code>\"ab\", \"ra\", \"cad\", \"o\"</code> and\n  <code>\"shabbr\"</code>. Strings like <code>\"ero\"</code> and\n  <code>\"grrgh\"</code> are not valid syllables.\n</p>\n<p>\n  To make things more difficult, the Head Witch speaks very fast, so you cannot\n  easily figure out where one word ends and another one begins. What's worse,\n  she sometimes says some useless gibberish before and after the spell in order\n  to confuse the contestants, or she may not even cast any spell at all and say\n  something completely unrelated instead.\n</p>\n<p>\n  For example, she may say <code>\"abracadabra\"</code>, which is a valid spell\n  because it consists of the words <code>\"abra\", \"cad\"</code> and\n  <code>\"abra\"</code>, with the start word and the end word being the same. The\n  word <code>\"abra\"</code> consists of two syllables -- <code>\"ab\"</code> and\n  <code>\"ra\"</code>. The word <code>\"cad\"</code> consists of one syllable --\n  <code>\"cad\"</code>. (Alternatively, <code>\"abra\"</code> could also be\n  interpreted as <code>\"a-bra\"</code> or <code>\"abr-a\"</code>.)\n</p>\n<p>\n  The Head Witch might also say <code>\"kajabbamajabbajab\"</code>, which contains\n  the spell <code>\"jabba ma jabba\"</code>. Or she might say\n  <code>\"frufrumfuffle\"</code>, which is gibberish and does not contain any\n  spells.\n</p>\n<p>\n  For each expression that the Head Witch says, you want to determine quickly\n  whether the expression contains a spell or not. Your molecular integrity\n  depends on it! Fortunately, you have managed to conjure up a computer. Now all\n  you need to do is determine which of the Witch's expressions contain spells.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ lines\n  follow. Each one contains an expression, consisting of one or more lower case\n  English letters and no spaces.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the case number\n  (starting from 1) and $$$y$$$ is either \"Spell!\" or \"Nothing.\" (be careful\n  with spelling and punctuation).\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds.<br/>\nMemory limit: 1 GB.<br/>\n $$$1 \\le \\mathbf{T} \\le 100$$$.<br /> </p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  <p>At most 20 characters in each expression.</p>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  <p>At most 100 characters in each expression.</p>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0wGCVoLTrNyf0E2NcbNB6Cz0-xomZskYV4g8PR_5ne2g9Dj-L7vcaOhmHpptJuuc47FLkiPorEuuFc44FApeQzIkO5EPvhBriLVQPNY2YHQp92yDU/irregular_expressions_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\nabracadabra\nkajabbamajabbajab\nfrufrumfuffle\nschprexityschprex\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0sNq0SYfTeRU20rR_rCxh0pAhuO2YX0hJzrr4w8cDBVkU0MN86okVVy1PG7T9W9mBSHlrhBwOVMzd93GripxTRYoFAKDbakUzi7JISjX828JYRsak9/irregular_expressions_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: Spell!\nCase #2: Spell!\nCase #3: Nothing.\nCase #4: Nothing.\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n </sampleio>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":1,"type__str":"VISIBLE","value":12}],"title":"Irregular Expressions","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a href=\"https://youtu.be/PThnKCZ1ZDI?t=1021\" target=\"_blank\"\n    >View problem and solution walkthrough video\n  </a>\n</p>\n<h3>Test Set 1</h3>\n<p>\n  For Test Set 1, we are able to check all possible locations for the new\n  delivery office in order to find the one that minimizes delivery time. We will\n  do this in two stages. First, we will compute the delivery time for each\n  square given the existing delivery offices. Second, we will try all possible\n  locations for the new office. The precomputation in the first part will allow\n  us to find the delivery time in the second part more efficiently.\n</p>\n<p>\n  For the first stage, we compute the delivery time of a square by iterating\n  over the entire grid and finding the minimum manhattan distance to a square\n  that has a delivery office. This has a time complexity of $$$O(\\mathbf{RC})$$$ per\n  square for a total time complexity of $$$O((\\mathbf{RC})^\\mathbf{2})$$$.\n</p>\n<p>\n  For the second stage, we iterate over all possible locations for the new\n  delivery office and for each location, search the entire grid for the square\n  with the maximum new delivery time. The new delivery time is the minimum of\n  the delivery time computed in the first part and the manhattan distance to the\n  new delivery office. This also has a time complexity of $$$O(\\mathbf{RC})$$$ per\n  delivery location for a total time complexity of $$$O((\\mathbf{RC})^\\mathbf{2})$$$, which is\n  sufficient for Test Set 1.\n</p>\n<p>\n  Alternatively, we could skip the first stage if we use a faster way of\n  computing the delivery time for each square such as breadth-first search. See\n  the next section for more details.\n</p>\n<h3>Test Set 2</h3>\n<p>\n  We can use a similar approach for Test Set 2, however we will need a more\n  efficient way to compute the maximum delivery time for a new delivery\n  location. We will do this by solving the following subproblem: given a value\n  of $$$\\mathbf{K}$$$, can we add a new delivery office so that the maximum delivery time is\n  at most $$$\\mathbf{K}$$$? The solution to this subproblem will be similar to Test Set 1,\n  however having a target value of $$$\\mathbf{K}$$$ allows us to identify exactly which\n  squares need to be serviced by the new delivery office. We can use this\n  difference to create a faster solution.\n</p>\n<p>\n  Note that if the answer to the original problem is $$$\\mathbf{K}$$$, then the answer to our\n  subproblem will be <code>'No'</code> for values in the range [$$$1$$$,\n  $$$\\mathbf{K}$$$-$$$1$$$] and <code>'Yes'</code> for values in the range [$$$\\mathbf{K}$$$,\n  <code>infinity</code>]. For these kinds of subproblems, we can use binary\n  search: if a given value works, then it is an upper bound for the answer;\n  otherwise it's a strict lower bound for the answer. Hence, once we have a\n  solution for the subproblem, we can use binary search to solve the original\n  problem. This is a common technique to transform optimization problems into\n  decision problems.\n</p>\n<p>\n  First, we efficiently compute the existing delivery time of every square by\n  inverting the problem: instead of finding the shortest distance to a delivery\n  office for each square, we find the shortest distance to each square from a\n  delivery office. This can be done using a multiple-source,\n  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Breadth-first_search\">\n    breadth-first search\n  </a>\n  starting at all of the delivery offices. A multiple-source BFS is the same as\n  a regular BFS except that you use multiple starting locations instead of one.\n  This search visits each square at most once, which gives us a time complexity\n  of $$$O(\\mathbf{RC})$$$.\n</p>\n<p>\n  Second, we identify all of the squares which have a delivery time greater than\n  $$$\\mathbf{K}$$$ and then determine if there exists a location that is within a distance of\n  $$$\\mathbf{K}$$$ to each of these squares. In order to do this efficiently, we note that\n  the manhattan distance has an equivalent formula:\n</p>\n<p>\n  dist(($$$\\mathbf{x_1}$$$, $$$\\mathbf{y_1}$$$), ($$$\\mathbf{x_2}$$$, $$$\\mathbf{y_2}$$$)) = max(abs($$$\\mathbf{x_1}$$$ + $$$\\mathbf{y_1}$$$ - ($$$\\mathbf{x_2}$$$ +\n  $$$\\mathbf{y_2}$$$)), abs($$$\\mathbf{x_1}$$$ - $$$\\mathbf{y_1}$$$ - ($$$\\mathbf{x_2}$$$ - $$$\\mathbf{y_2}$$$)))\n</p>\n<p>\n  This formula is based on the fact that for any point, the set of points within\n  a manhattan distance of $$$\\mathbf{K}$$$ form a square rotated by $$$45$$$ degrees. The\n  benefit of this formula is that if we fix ($$$\\mathbf{x_2}$$$, $$$\\mathbf{y_2}$$$), the distance will be\n  maximized when $$$\\mathbf{x_1}$$$ + $$$\\mathbf{y_1}$$$ and $$$\\mathbf{x_1}$$$ - $$$\\mathbf{y_1}$$$ are either maximized or\n  minimized.\n</p>\n<p>\n  Hence, we can compute the maximum and minimum values of both $$$\\mathbf{x_1}$$$ + $$$\\mathbf{y_1}$$$ and\n  $$$\\mathbf{x_1}$$$ - $$$\\mathbf{y_1}$$$ for all squares with a delivery time greater than $$$\\mathbf{K}$$$. Then, we\n  can try all possible locations for the new delivery office and check if the\n  maximum distance from the location to a square with a current delivery time\n  greater than $$$\\mathbf{K}$$$ is at most $$$\\mathbf{K}$$$ in constant time. Hence, we can check if the\n  answer is at most $$$\\mathbf{K}$$$ with a time complexity of $$$O(\\mathbf{RC})$$$.\n</p>\n<p>\n  With the binary search, the time complexity becomes $$$O(\\mathbf{RC} \\log\n  (\\mathbf{R}+\\mathbf{C}))$$$, which is sufficient for the test set. There is a way to improve\n  this to $$$O(\\mathbf{RC})$$$ time by computing the min/max values mentioned above for\n  all possible $$$\\mathbf{K}$$$ in a single pass over the grid and then using casework to\n  determine if a viable new delivery office location exists for each $$$\\mathbf{K}$$$, but\n  this optimization is unnecessary.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U08MDV86q9VWtC9_8kO-pLDVOMFDBPsZN8CvzeciVrl9SaYtItw8GxkERKS2PPWnVTxhSIXsGAQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000b55465","statement":"<h3>Problem</h3>\n<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a target=\"_blank\" href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1yHjsJiGo7c_Nj5OAJnFvLG7gf-mJFkMnQ0IuECjPklVes4inuE3uMoCWtdzfYGEesjk_HdmC68O0Q/starter_code.zip?dl=1\">Download the Starter Code!</a>\n</p>\n<p>\n  You have been hired recently as the Chief Decision Maker (CDM) at a famous parcel delivery\n  company, congratulations! Customers love speedy deliveries of their parcels and you have decided\n  to decrease the time it takes to deliver parcels around the world to win customers. You have\n  introduced this idea to the authorities and they have allocated you enough budget to build\n  <i>at most one</i> new delivery office.\n</p>\n<p>\n  The world can be divided into an $$$\\mathbf{R} \\times \\mathbf{C}$$$ grid of squares. Each square either\n  contains a delivery office or is empty. You may pick a grid square that does not already\n  contain a delivery office and build a new delivery office there.\n</p>\n<p>\n  The delivery time of a parcel to a square is $$$0$$$ if that square contains a delivery office.\n  Otherwise, it is defined as the minimum Manhattan distance between that square and any other\n  square containing a delivery office. The overall delivery time is the maximum of delivery times\n  of all the squares. What is the minimum overall delivery time you can obtain by building\n  <i>at most one</i> new delivery office?\n</p>\n<p>\n  Note: The <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Taxicab_geometry\">Manhattan\n  distance</a> between two squares $$$(r_1,c_1)$$$ and $$$(r_2,c_2)$$$ is defined as\n  $$$|r_1 - r_2| + |c_1 - c_2|$$$, where $$$|x|$$$ denotes the absolute value of $$$x$$$.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n  The first line of each test case contains the number of rows $$$\\mathbf{R}$$$ and number of columns\n  $$$\\mathbf{C}$$$ of the grid. Each of the next $$$\\mathbf{R}$$$ lines contains a string of $$$\\mathbf{C}$$$ characters, where each\n  character is either $$$0$$$ or $$$1$$$. $$$0$$$ denotes the absence of a\n  delivery office and $$$1$$$ denotes the presence of a delivery office in that square.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n\n  <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the test case number (starting from 1) and\n  $$$y$$$ is the minimum overall delivery time you can obtain after adding at most one additional\n  delivery office.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 15 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n<p>\n  $$$ 1 \\le \\mathbf{T} \\le 100 $$$. <br/>\n  There is at least one delivery office in the initial grid.<br/>\n</p>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n<p>\n  $$$ 1 \\le \\mathbf{R} \\le 10 $$$. <br/>\n  $$$ 1 \\le \\mathbf{C} \\le 10 $$$. <br/>\n</p>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n<p>\n  $$$ 1 \\le \\mathbf{R} \\le 250 $$$. <br/>\n  $$$ 1 \\le \\mathbf{C} \\le 250 $$$. <br/>\n</p>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2sMiZhFoFR2HYYJP3krgQEXrFufed0ftXiKxc9EaYU7HC55DPyepRTZNE-vEkSnjem8Oua1uM6WX31eBbTOfMNoNK8Yvuq/parcels_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3 3\n101\n000\n101\n1 2\n11\n5 5\n10001\n00000\n00000\n00000\n10001\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0f-bIeh5gfiSoKaZnJ_FldKuXNFLaToeUYsO8quDwxzAMVSdVtloLA4eTFYc17tpNlH71N8nVmUg1_CTFHsQj_2rqHQgnYNg/parcels_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 0\nCase #3: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, you get a minimum overall delivery time of $$$1$$$ by building a new delivery office\n  in any one of the five squares without a delivery office.\n</p>\n<p>\n  In Sample Case #2, all the squares already have a delivery office and so the minimum\n  overall delivery time is $$$0$$$. Note that, in this case, you do not need to build an additional\n  delivery office.\n</p>\n<p>\n  In Sample Case #3, to get a minimum overall delivery time of $$$2$$$, you can build a new\n  delivery office in any of these squares: $$$(2, 3), (3, 2), (3, 3), (3, 4)$$$ or $$$(4, 3)$$$.\n  Any other possibility results in a higher overall delivery time than $$$2$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":12},{"type":1,"type__str":"VISIBLE","value":20}],"title":"Parcels","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000008f4a94","type":1,"type__str":"SPECTATOR"},"title":"Coding Practice with Kick Start Session #2","ui_appearance":1,"ui_appearance__str":"APPEARANCE_TYPE_CODING_PRACTICE_WITH_KS"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
