{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1647759600000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"00000000008cb33e","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Thank you for participating in Kick Start 2022 Round A!</p>\n<hr>\n<p><b>Cast</b></p>\n<p>Speed Typing: Written by Sumedha Agarwal and prepared by Bryan (Seunghyun) Jo.</p>\n<p>Challenge Nine: Written by Bartosz Kostka and prepared by Swapnil Gupta.</p>\n<p>Palindrome Free Strings: Written by Alex Li and prepared by Vijay Krishan Pandey.</p>\n<p>Interesting Integers: Written by Bartosz Kostka and prepared by Shadman Protik.</p>\n<p>Solutions, other problem preparation, reviews and contest monitoring by\nAbhilash Tayade, Abhishek Saini, Abhishek Singh, Alex Li, Aman Singh, Anthony, Anushi Maheshwari, Arjun Sanjeev, Bartosz Kostka, Bohdan Pryshchenko, Chu-ling Ko, Chun-nien Chan, Cristhian Bonilha, Deeksha Kaurav, Diksha Saxena, Duong Hoang, Ekanshi Agrawal, Ishank Bhardwaj, Jared Gillespie, Khaled Hamed, Krists Boitmanis, Kritagya Agarwal, Lizzie Sapiro Santor, Maks Verver, Michał Łowicki, Nitish Rai, Pratibha Jagnere, Prince Kumar, Rohan Garg, Sadia Atique, Sanyam Garg, Sarah Young, Sasha Fedorova, Shadman Protik, Shubham Garg, Sumedha Agarwal, Swapnil Gupta, Tanuj Garg, Umang Goel, Vijay Krishan Pandey, Vinay Khilwani, Wei Zhou, Yulian Yarema.</p>\n<p>Analysis authors:</p><ul>\n<li>Speed Typing: Ekanshi Agrawal</li>\n<li>Challenge Nine: Chu-ling Ko</li>\n<li>Palindrome Free Strings: Krists Boitmanis</li>\n<li>Interesting Integers: Chun-nien Chan</li>\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1647748800000,"tasks":[{"analysis":"<p>\n  For better understanding, let us define some variables: <br />\n\n   $$$N$$$: Length of string $$$\\mathbf{I}$$$ <br />\n   $$$M$$$: Length of string $$$\\mathbf{P}$$$ <br /><br />\n</p>\n\n<h3>Test Set 1</h3>\n<p>\n  All the characters in String $$$\\mathbf{I}$$$ are the same, let us say that character is $$$C$$$. This means that $$$\\mathbf{I}$$$ is made up entirely of character $$$C$$$\n  occurring $$$N$$$ times.\n  <br />\n  We need to check if $$$\\mathbf{P}$$$ contains $$$C$$$ at least $$$N$$$ number of times (recall that\n  $$$N$$$ denotes the length of string $$$\\mathbf{I}$$$). This can be done by simply\n  maintaining a count of $$$C$$$ in $$$\\mathbf{P}$$$.\n  If this count is greater than or equal to $$$N$$$, then the number of\n  characters to be removed would be $$$(M - N)$$$, which is the number of extra characters in $$$\\mathbf{P}$$$. Else, the answer is\n  <code>IMPOSSIBLE</code>. <br />\n</p>\n\n<p>\n  <b>Time and Space Complexity:</b> All operations including counting the appearances of $$$C$$$ in $$$\\mathbf{P}$$$ can be done in\n  $$$O(M)$$$ time, which is the overall time complexity of this\n  solution. Extra space required would be of the order of $$$O(1)$$$.\n</p>\n\n<h3>Test Set 2</h3>\n<p>\n  Observe that we are trying to condense $$$\\mathbf{P}$$$ to $$$\\mathbf{I}$$$ by deleting some characters\n  from $$$\\mathbf{P}$$$ without disturbing their order. This directly leads us to the\n  definition of a subsequence:\n  <br />\n  <i>\n    A subsequence is a sequence that can be derived from another sequence by\n    deleting some elements without changing the order of the remaining elements.\n  </i>\n</p>\n\n<ul>\n  <li>\n    <p>\n    If $$$\\mathbf{I}$$$ is not a subsequence of $$$\\mathbf{P}$$$, the answer is\n    <code>IMPOSSIBLE</code>. This can take place when:\n    </p>\n    <ul>\n      <li><p>Case 1: $$$\\mathbf{P}$$$ is shorter than $$$\\mathbf{I}$$$</p></li>\n      <li><p>Case 2: A character in $$$\\mathbf{I}$$$ is not present in $$$\\mathbf{P}$$$</p></li>\n      <li>\n        <p>\n          Case 3: A character in $$$\\mathbf{I}$$$ is present in $$$\\mathbf{P}$$$, but not at the right\n          place\n        </p>\n      </li>\n    </ul>\n  </li>\n  <li>\n    <p>\n      If $$$\\mathbf{I}$$$ is a subsequence of $$$\\mathbf{P}$$$, then $$$\\mathbf{P}$$$ contains all characters of $$$\\mathbf{I}$$$ in the\n      same order along with some extra characters (possibly $$$0$$$). Barbara will\n      have to hit backspace on these extra characters to correct the string. The\n      answer would be $$$(M - N)$$$.\n    </p>\n  </li>\n</ul>\n\n<p>\n  <b>Time and Space Complexity:</b> Subsequence check can be done in $$$O(M)$$$ time using a two-pointer\n  approach. The overall time complexity of this solution comes out to be\n  $$$O(M)$$$ as well. Extra space required would be of the order of\n  $$$O(1)$$$. <br><br>\n</p>\n\n<h3>\n  Pseudocode for Subsequence Check:\n</h3>\n<pre>\n<code>\nFUNCTION checkSubSequence(String I, String P) RETURNS BOOLEAN\n\n    // Assign lengths of I and P to variables N and M\n    N <- Length of I\n    M <- Length of P\n\n    // Declare pointers ptrI and ptrP to the current position in I and P respectively\n    // and assign them to position 0\n    ptrI <- 0\n    ptrP <- 0\n\n    // Traverse both strings, and compare current character of P with first unmatched char of I\n    // While making sure the pointers do not go out of bounds of their respective strings\n    WHILE ptrI is less than N AND ptrP is less than M\n\n        // If characters at current positions match, then move ahead in both I and P\n        IF I[ptrI] equals P[ptrP]\n          ptrI <- ptrI + 1\n          ptrP <- ptrP + 1\n\n        // If the characters at current the positions do not match, then move ahead only in P\n        ELSE\n          ptrP <- ptrP + 1\n\n        ENDIF\n\n    ENDWHILE\n\n\n    // If we reach past the end of I, we have successfully matched all the characters of I\n    // to some characters of P\n    // If not, some characters in I remain unmatched and it is not a subsequence of P\n    IF ptrI equals N\n      RETURN True;\n\n    ELSE\n      RETURN False;\n\n    ENDIF\n\nENDFUNCTION\n</code>\n</pre>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1Bmxvk39p97uppRUaACpCFpVQI4mHkpkuxHA8Y0sE5Av3UrnGGNEjGr8maWK2QrdcORBwisBL4/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000009e7021","statement":"<h3>Problem</h3>\n<p>\n  Barbara is a speed typer. In order to check her typing speed, she performs a speed test.\n  She is given a string $$$\\mathbf{I}$$$ that she is supposed to type.\n</p><p>\n  While Barbara is typing, she may make some mistakes, such as pressing the wrong key. As her typing\n  speed is important to her, she does not want to spend additional time correcting the mistakes, so\n  she continues to type with the errors until she finishes the speed test.\n  After she finishes the speed test, she produces a $$$\\mathbf{P}$$$.</p><p>\n  Now she wonders how many extra letters she needs to delete in order to get $$$\\mathbf{I}$$$ from $$$\\mathbf{P}$$$.\n  It is possible that Barbara made a mistake and $$$\\mathbf{P}$$$ cannot be converted back to $$$\\mathbf{I}$$$  just by deleting some letters.\n  In particular, it is possible that Barbara missed some letters.\n</p><p>\n  Help Barbara find out how many extra letters she needs to remove in order to obtain\n  $$$\\mathbf{I}$$$ or if $$$\\mathbf{I}$$$ cannot be obtained from $$$\\mathbf{P}$$$ by removing letters\n  then output <code>IMPOSSIBLE</code>.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.</p><p>\nEach test case has $$$2$$$ lines. The first line of each test case is an input string $$$\\mathbf{I}$$$\n  (that denotes the string that the typing test has provided). The next line is the produced string $$$\\mathbf{P}$$$ (that Barbara has entered).\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from $$$1$$$) and $$$y$$$ is the number of extra letters\n  that need to be removed in order to obtain $$$\\mathbf{I}$$$.\n  If it is not possible to obtain $$$\\mathbf{I}$$$ then output <code>IMPOSSIBLE</code> as $$$y$$$.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\nBoth the strings contain letters from <code>a</code>-<code>z</code> and <code>A</code>-<code>Z</code>.<br/>\nLength of the given strings will be $$$1 \\le |\\mathbf{I}|, |\\mathbf{P}| \\le 10^5$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  All letters in $$$\\mathbf{I}$$$ are the same.\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2O51uGoxN313ZzROcQwP_4VHhxIRR5UPxBBDnnOUmZzndCHvt3Ydts8rplIarJRyOjtMECodP9Dp1sgyTfBMjNtrum0eT9eQpoRdw/speed_typing_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\naaaa\naaaaa\nbbbbb\nbbbbc\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U35FHCeZjdLLunasJSVaPMDL2vaLafd1bH7ccZqQqoPrpzXLCMhs0aeBDCP7cQ2UyUzZnzi79Y482tno6WY5z5MYik6_mKJWLYvuyiI/speed_typing_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: IMPOSSIBLE\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn the first test case, $$$\\mathbf{P}$$$ contains one extra <code>a</code>, so she needs to remove $$$1$$$ extra letter in order to obtain $$$\\mathbf{I}$$$. <br/>\nIn the second test case, Barbara typed only $$$4$$$ letters <code>b</code>, while $$$\\mathbf{I}$$$ consists of $$$5$$$ letters <code>b</code> so the answer is <code>IMPOSSIBLE</code>.\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U14ByUfsMQxa23Zs5DiKh-V3WP4wwpEmiVr9H4GzkJVQZDuUqo2FIL0Xp5GoOjr-uqM3ozVT1IEdSyZrvPYFl_1Lj4Fkao3d9alESE/speed_typing_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">2\nIlovecoding\nIIllovecoding\nKickstartIsFun\nkkickstartiisfun\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3aP-6qEnr1GeNf4WA3F-47zV65N5DBprXWVQZjRFFeMUEDGkKl5upa_YralW44ofS1vgqbOlL2RVvQhETeE7VMmvQ039WNigBnn1cB/speed_typing_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 2\nCase #2: IMPOSSIBLE\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n  <p>\nIn the first test case, $$$\\mathbf{P}$$$ has $$$2$$$ extra letters, <code>I</code> and <code>l</code>. The other letters are in the order given in $$$\\mathbf{I}$$$.\nSo she needs to remove $$$2$$$ letters in order to obtain $$$\\mathbf{I}$$$.<br/>\nIn the second test case, there is no letter <code>K</code> in $$$\\mathbf{P}$$$ so the answer is <code>IMPOSSIBLE</code>.\n  </p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":1,"type__str":"VISIBLE","value":9}],"title":"Speed Typing","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  For simplicity, let us use $$$L_N$$$ to represent the number of digits in an\n  integer $$$N$$$. Note that $$$L_N$$$ is actually equal to $$$\\lceil\n  \\log_{10}(N + 1) \\rceil$$$.\n</p>\n\n<h3>Test Set 1</h3>\n\n<p>\n  For the small test set, we can simply enumerate all integers in the range from\n  $$$\\mathbf{A}$$$ to $$$\\mathbf{B}$$$ and check if each integer is an interesting integer individually.\n  Determining if an integer is interesting or not takes $$$O(L_\\mathbf{B})$$$ time (to\n  calculate the sum and product of the digits), where $$$L_\\mathbf{B}$$$ is the maximum\n  number of digits in all integers in the range.\n</p>\n\n<p>\n  The overall time complexity is $$$O((\\mathbf{B}-\\mathbf{A}) \\times L_\\mathbf{B})$$$ or just\n  $$$O(\\mathbf{B}\\log_{10}\\mathbf{B})$$$.\n</p>\n\n<h3>Test Set 2</h3>\n\n<p>\n  If we have a function $$$CountInterestingIntegers(N)$$$ to get the number of\n  interesting integers between $$$1$$$ and $$$N$$$, then the number of\n  interesting integers between two positive integers $$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$\n  inclusively can be computed by\n  $$$CountInterestingIntegers(\\mathbf{B})-CountInterestingIntegers(\\mathbf{A}-1)$$$. If $$$N\n  \\lt 1$$$, $$$CountInterestingIntegers(N)$$$ is trivially equal to $$$0$$$.\n</p>\n\n<p>\n  The following are two different methods to compute the value of\n  $$$CountInterestingIntegers(N)$$$.\n</p>\n\n<h4>Method 1</h4>\n\n<p>\n  To compute the return value of $$$CountInterestingIntegers(N)$$$, first of all\n  let us define a function $$$f_1(L, P, S)$$$ which returns the number of\n  combinations of arbitrary $$$L$$$ digits $$$d_1,d_2,\\dots,d_L$$$ which satisfy\n  the condition that $$$P \\times \\prod_{i=1}^{L}{d_i}$$$ is divisible by $$$S +\n  \\sum_{i=1}^{L}{d_i}$$$, which can be written as $$$(P \\times\n  \\prod_{i=1}^{L}{d_i}) \\% (S + \\sum_{i=1}^{L}{d_i}) = 0$$$.\n</p>\n\n<p>\n  Based on the definition above, for $$$L=0$$$, the return value of $$$f_1(L, P,\n  S)$$$ is $$$1$$$ if $$$P \\% S = 0$$$, and $$$0$$$ otherwise. For $$$L \\gt\n  0$$$, the return value of $$$f_1(L, P, S)$$$ is $$$\\sum_{digit=0}^{9}{f_1(L-1,\n  P\\times digit, S + digit)}$$$. In the implementation, we can use top-down\n  dynamic programming to memoize the return values of $$$f_1$$$ with different\n  parameter sets in a hash table to speed up the function calls.\n</p>\n\n<p>\n  Afterward, we can compute the value of $$$CountInterestingIntegers(N)$$$ by\n  recursively visiting each digit of $$$N$$$ from left (0, the most significant\n  digit) to right ($$$L_N - 1$$$, the least significant digit) to construct\n  integers smaller than $$$N$$$ and check the number of interesting integers\n  with function $$$f_1$$$. The following is the pseudo code for\n  $$$CountInterestingIntegers$$$:\n</p>\n\n<pre><code class=\"language-py\">\ndef CountInterestingIntegers(N):\n  if N == 0:\n    return 0\n  count = 0\n  for L in (1 to (CountDigits(N) - 1)):\n    count += CountInterestingIntegersWithNumberOfDigits(L)\n\n  count += CountInterestingIntegersWithPrefixOfN(N, P=1, S=0, digit_index=0, is_first_digit=True)\n  return count\n\ndef CountInterestingIntegersWithNumberOfDigits(L):\n  count = 0\n  for digit in (1 to 9):\n    count += f1(L - 1, P=digit, S=digit)\n  return count\n\ndef CountInterestingIntegersWithPrefixOfN(N, P, S, digit_index, is_first_digit):\n  if digit_index == CountDigits(N):\n    return 1 if S > 0 and P % S == 0 else 0\n\n  if is_first_digit:\n    digit_start = 1\n  else:\n    digit_start = 0\n\n  count = 0\n  for digit in (digit_start to (GetIthDigit(N, digit_index) - 1)):\n    count += f1(CountDigits(N) - digit_index - 1, P * digit, S + digit)\n\n  count += CountInterestingIntegersWithPrefixOfN(N,\n                                                 P * GetIthDigit(N, digit_index),\n                                                 S + GetIthDigit(N, digit_index),\n                                                 digit_index + 1, is_first_digit=False)\n  return count\n</code></pre>\n\n<p>\n  Let $$$M$$$ be the number of digits in the maximum number in all possible\n  ranges from $$$\\mathbf{A}$$$ to $$$\\mathbf{B}$$$. The number of possible parameter sets of\n  $$$f_1(L, P, S)$$$ is bounded by $$$M \\times (\\frac{(M+9-1)!}{(9-1)!M!} + 1)\n  \\times (9 \\times M)$$$, where the number of possible products is bounded by\n  the combinations of choosing $$$M$$$ digits from $$$\\{1,2,3,\\dots,9\\}$$$\n  without repetitions, plus 1 (the zero product). Besides, computing the return\n  value of $$$f_1(L, P, S)$$$ takes $$$O(1)$$$ time with memoization.\n  Therefore, the overall time complexity of $$$f_1(L, P, S)$$$ is $$$O(M \\times\n  (\\frac{(M+9-1)!}{(9-1)!M!} + 1) \\times (9 \\times M))$$$. Since $$$ \\mathbf{A}, \\mathbf{B}\n  \\le 10^{12}$$$ from the problem statement, we can derive that $$$M=13$$$ and\n  the number of parameter sets is at most $$$13 \\times 203,491 \\times (9 \\times\n  13)$$$, which is equal to $$$309,509,811$$$.\n</p>\n<p>\n  A tighter estimate for the number of possible sets of $$$f_1(L, P, S)$$$ is\n  $$$O(\\sum_{L=1}^{M}{(\\frac{(L+9-1)!}{(9-1)!L!} + 1) \\times (9 \\times L)})$$$,\n  which is bounded by $$$52,379,145$$$ when $$$M=13$$$. In fact, only\n  $$$188,701$$$ entries are kept in the memoization of $$$f_1$$$ after solving\n  all the test cases in test set 2, which is much smaller than the estimate.\n</p>\n<p>\n  The function $$$CountInterestingIntegers(N)$$$ takes $$$O(M)$$$ to get the\n  number of interesting integers from $$$0$$$ to $$$N$$$ with the memoization\n  of $$$f_1$$$. Therefore, the overall time complexity for method 1 is\n  $$$O(M)$$$, where $$$M$$$ is equal to $$$\\lceil \\log_{10}(\\mathbf{B} + 1) \\rceil$$$.\n</p>\n<p>\n  Notice that the memoization for the return values of $$$f_1(L, P, S)$$$ can\n  be reused in all the test cases. Clearing and rebuilding the memoization for\n  every test case may make the implementation exceed time limit since there are\n  100 test cases in test set 2.\n</p>\n\n<h5>Optimization for Method 1 with Prime Factorization</h5>\n\n<p>\n  Since the value of parameter $$$P$$$ passed to $$$f_1(L, P, S)$$$ is always a\n  product of digits, it can be written as $$$P = 2^w \\times 3^x \\times 5^y\n  \\times 7^z$$$, where $$$2, 3, 5, 7$$$ are what we call \"interesting prime\n  factors\" and $$$w, x, y, z$$$ are powers of these prime factors. Moreover, the\n  maximum possible value of parameter $$$S$$$ is $$$9M$$$. From these two\n  observations, we can find out that if $$$2^w \\gt 9M$$$, then $$$P \\% S = 0$$$\n  if and only if $$$(P/2) \\% S = 0$$$ for any $$$S \\le 9M$$$. This observation\n  applies to other interesting prime factors as well.\n</p>\n<p>\n  Based on the observation aforementioned, we can further improve the\n  performance by reducing the number of possible parameter sets of $$$f_1(L, P,\n  S)$$$ by the idea of capping the power of interesting prime factors. Let us\n  define a helper function $$$CapInterestingPrimeFactors(P)$$$ which does the\n  following things:\n</p>\n<ol>\n  <li>\n    <p>\n      Compute the power of interesting prime factors $$$w,x,y,z$$$ of input $$$P\n      = 2^w \\times 3^x \\times 5^y \\times 7^z$$$.\n    </p>\n  </li>\n  <li>\n    <p>\n      For each interesting prime factor $$$p$$$, define the power of it as\n      $$$v$$$ and compute the new power as the maximum value of $$$v'$$$ which\n      satisfies $$$p^{v'} \\le 9M$$$ and $$$v' \\le v$$$.\n    </p>\n  </li>\n  <li>\n    <p>\n      Construct the new product $$$P' = 2^{w'} \\times 3^{x'} \\times 5^{y'}\n      \\times 7^{z'}$$$ and return it.\n    </p>\n  </li>\n</ol>\n<p>\n  Afterwards, we can replace all the function calls $$$f_1(L, P, S)$$$ with\n  $$$f_1(L, CapInterestingPrimeFactors(P), S)$$$. Since the maximum possible\n  value of $$$S = 9 \\times 13 = 117$$$ in test set 2 (this is just an upper\n  bound based on the definition above), the maximum value of $$$P'$$$ after\n  capping is $$$2^{6} \\times 3^{4} \\times 5^{2} \\times 7^{2}$$$, and the total\n  number of possible values of $$$CapInterestingPrimeFactors(P)$$$ is $$$7\n  \\times 5 \\times 3 \\times 3 = 315$$$. Therefore, the number of parameter sets\n  of the improved $$$f_1(L, P', S)$$$ is at most $$$13 \\times 315 \\times\n  (9\\times13) = 479,115$$$ which is a huge improvement over the pre-optimized\n  method 1. In fact, only 56,853 entries are kept in the memoization of\n  $$$f_1$$$ after solving all the test cases in test set 2.\n</p>\n\n<h4>Method 2</h4>\n\n<p>\n  Method 2 is similar to method 1 but we set a fixed target digit sum when\n  computing the number of interesting integers, then add up the number of\n  interesting integers with all possible digit sums.\n</p>\n\n<p>\n  Let us define another function $$$f_2(L, P, S, S_{target})$$$ which returns\n  the number of combinations of arbitrary $$$L$$$ digits $$$d_1,d_2,\\dots,d_L$$$\n  that satisfy the conditions:\n</p>\n<ul>\n  <li><p>$$$S + \\sum_{i=1}^{L}{d_i} = S_{target}$$$</p></li>\n  <li>\n    <p>\n      $$$P \\times \\prod_{i=1}^{L}{d_i}$$$ is divisible by $$$S_{target}$$$\n      ($$$(P \\times \\prod_{i=1}^{L}{d_i}) \\% S_{target} = 0$$$)\n    </p>\n  </li>\n</ul>\n<p>\n  Notice that $$$f_2(L, P, S, S_{target}) = f_2(L, P \\% S_{target}, S,\n  S_{target})$$$. For $$$L=0$$$, the return value is $$$1$$$ if\n  $$$S=S_{target}$$$ and $$$P\\%S_{target}=0$$$, and $$$0$$$ otherwise. For\n  $$$L\\gt 0$$$, the return value of $$$f_2(L, P, S, S_{target})$$$ is equal to\n  $$$\\sum_{digit=0}^{9}{f_2(L-1, (P\\times digit) \\% S_{target}, S + digit,\n  S_{target})}$$$.\n</p>\n<p>\n  In the implementation, we can pre-compute return values of $$$f_2$$$ with all\n  possible parameter sets and store the values in a 4-dimensional array or hash\n  map. Let $$$M$$$ be the number of digits in the maximum number in all possible\n  ranges from $$$\\mathbf{A}$$$ to $$$\\mathbf{B}$$$, the possible digits sum ranges from $$$1$$$ to $$$9\n  \\times M$$$. Therefore, the number of parameter combinations is bounded by\n  $$$M(9M)^3$$$, and it takes $$$O(M\\times(9M)^3)$$$ time and space to build the\n  memoization with top-down dynamic programming. Since $$$ \\mathbf{A}, \\mathbf{B} \\le\n  10^{12}$$$ from the problem statement, we can derive that $$$M=13$$$ and the\n  number of parameter sets is at most $$$13 \\times (9 \\times 13)^3$$$, which is\n  equal to $$$20,820,969$$$. Notice that this memoization can be built only\n  once and reused in all test cases. Clearing and rebuilding the memoization\n  for every test case may make the implementation time out since there are 100\n  test cases in test set 2.\n</p>\n<p>\n  Afterward, we can compute the value of $$$CountInterestingIntegers(N)$$$ by\n  enumerating all possible values of $$$S_{target}$$$ and recursively visiting\n  each digit of $$$N$$$ from left (0, the most significant digit) to right\n  ($$$L_N - 1$$$, the least significant digit) to construct integers smaller\n  than $$$N$$$ and check the number of interesting integers with function\n  $$$f_2$$$. The following is the pseudo code for\n  $$$CountInterestingIntegers$$$:\n</p>\n\n<pre><code class=\"language-py\">\ndef CountInterestingIntegers(N):\n  if N == 0:\n    return 0\n\n  count = 0\n  for S_target in (1 to (9 * CountDigits(N))):\n    for L in (1 to (CountDigits(N) - 1)):\n      count += CountInterestingIntegersWithNumberOfDigits(S_target, L)\n\n    count += CountInterestingIntegersWithPrefixOfN(S_target, N, P=1, S=0,\n                                                   digit_index=0, is_first_digit=True)\n  return count\n\ndef CountInterestingIntegersWithNumberOfDigits(S_target, L):\n  count = 0\n  for digit in (1 to 9):\n    count += f2(L - 1, P=(digit % S_target), S=digit, S_target)\n  return count\n\ndef CountInterestingIntegersWithPrefixOfN(S_target, N, P, S, digit_index, is_first_digit):\n  if digit_index == CountDigits(N):\n    return 1 if P % S == 0 and S == S_target else 0\n\n  if is_first_digit:\n    digit_start = 1\n  else:\n    digit_start = 0\n\n  count = 0\n  for digit in (digit_start to (GetIthDigit(N, digit_index) - 1)):\n    count += f2(CountDigits(N) - digit_index - 1, (P * digit) % S_target, S + digit, S_target)\n\n  count += CountInterestingIntegersWithPrefixOfN(S_target, N,\n                                                 (P * GetIthDigit(N, digit_index)) % S_target,\n                                                 S + GetIthDigit(N, digit_index),\n                                                 digit_index + 1, is_first_digit=False)\n  return count\n</code></pre>\n\n<p>\n  The overall time complexity is $$$O(M\\times(9M)^3)$$$ to pre-compute the\n  memoization of $$$f_2$$$, and $$$O(9M \\times M)$$$ to get the number of\n  interesting integers between $$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$ with memoization. Although method 2\n  adds one more parameter that is seemingly redundant, it has better and clearer\n  time and space complexity estimates for building the memoization considering\n  that the product can be a seemingly arbitrary number, while product modulo sum\n  is bounded by a much smaller value. However, after solving all the test cases\n  in test set 2, $$$2,406,887$$$ entries are kept in the memoization of\n  $$$f_2$$$, which takes more time and space than method 1. We may apply some\n  optimizations to $$$f_2$$$ to further reduce the memoization size and make it\n  more performant, like returning $$$0$$$ early when $$$S_{target} \\gt 9 \\times\n  L$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3uU7J3lCH-AKFwyTilvxq-Be9FYIBWSf4xzA9dTqIDDMaybkSCnfepd8u4ItL-Q1dkRbY1UMh7/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000009e73ea","statement":"<h3>Problem</h3>\n<p>\n  Let us call an integer <i>interesting</i> if the product of its digits is\n  <a href=\"https://en.wikipedia.org/wiki/Divisor#Definition\" target=\"_blank\">divisible</a> by the\n  sum of its digits.  You are given two integers $$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$.  Find the number of interesting\n  integers between $$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$ (both inclusive).\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ lines follow.\n</p>\n<p>\n  Each line represents a test case and contains two integers: $$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$\n  is the test case number (starting from 1) and $$$y$$$ is the number of interesting integers\n  between $$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$ (inclusive).\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n$$$1 \\le \\mathbf{A} \\le \\mathbf{B} \\le 10^5 $$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n$$$1 \\le \\mathbf{A} \\le \\mathbf{B} \\le 10^{12}$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0OgypBbzw0w0X8XJopzqsVGvClRMBBC1KfmCFNpEt91K8qpXwIPk2y4SwEn8p9G6s6_VMYV84n4-bL_Wv9WEI4VpvgxrVwOqpKenb9YO_q7CWjEQ/interesting_integers_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n1 9\n91 99\n451 460\n501 1000\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2kKZ6ivTmXUcGF5T1vLpJg5buObO1oZJr9j8a2IW7uxIh_VX8gMDysWjgYY2YGHYJcJKF-IiCBDUgiiUQYMtxSHQbbEd3aVH4bXuKalfbW5SeRrq4/interesting_integers_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 9\nCase #2: 0\nCase #3: 5\nCase #4: 176\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, since the product and the sum of digits are the same for single-digit integers,\n  all integers between $$$1$$$ and $$$9$$$ are interesting.\n</p>\n\n<p>\n  In Sample Case #2, there are no interesting integers between $$$91$$$ and $$$99$$$.\n</p>\n\n<p>\n  In Sample Case #3, there are five interesting integers between $$$451$$$ and $$$460$$$:\n  <ol>\n    <li>$$$451$$$ (product of its digits is $$$4 \\times 5 \\times 1 = 20$$$, sum of its digits is\n      $$$4 + 5 + 1 = 10$$$).</li>\n    <li>$$$453$$$ (product of its digits is $$$4 \\times 5 \\times 3 = 60$$$, sum of its digits is\n      $$$4 + 5 + 3 = 12$$$).</li>\n    <li>$$$456$$$ (product of its digits is $$$4 \\times 5 \\times 6 = 120$$$, sum of its digits is\n      $$$4 + 5 + 6 = 15$$$).</li>\n    <li>$$$459$$$ (product of its digits is $$$4 \\times 5 \\times 9 = 180$$$, sum of its digits is\n      $$$4 + 5 + 9 = 18$$$).</li>\n    <li>$$$460$$$ (product of its digits is $$$4 \\times 6 \\times 0 = 0$$$, sum of its digits is\n      $$$4 + 6 + 0 = 10$$$).</li>\n  </ol>.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":11},{"type":1,"type__str":"VISIBLE","value":24}],"title":"Interesting Integers","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\n  Test Set 1\n</h3>\n\n<p>\n  Since $$$\\mathbf{N}$$$ is small in this test set, we can enumerate all different ways to fill in the question\n  marks recursively, which produces at most $$$2^\\mathbf{N}$$$ candidate strings. Then, we check for each\n  string if it contains a palindromic substring of $$$5$$$ or more characters.\n  If it does not, we have found a solution.\n</p>\n\n<p>\n  Checking for the presence of palindromic substrings can be done naively, by checking every\n  possible substring, which takes $$$O(\\mathbf{N}^3)$$$ time ($$$O(\\mathbf{N}^2)$$$ substrings times $$$O(\\mathbf{N})$$$\n  to check if a substring is palindromic).\n  It is possible to achieve a lower complexity by searching for the\n  <a href=\"https://en.wikipedia.org/wiki/Longest_palindromic_substring\" target=\"_blank\">longest\n    palindromic substring</a> in $$$O(\\mathbf{N}^2)$$$ or $$$O(\\mathbf{N})$$$ time.\n</p>\n\n<p>\n  The overall time complexity will be between $$$O(2^\\mathbf{N} \\times \\mathbf{N})$$$ and\n  $$$O(2^\\mathbf{N} \\times \\mathbf{N}^3)$$$ but with the given constraints, even the slowest solution should pass.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  If $$$\\mathbf{N} \\lt 5$$$ the answer is trivially <code>POSSIBLE</code>, so without loss of generality,\n  we will assume $$$\\mathbf{N} \\ge 5$$$ in the following discussion.\n</p>\n\n<p>\n  <em>Observation 1:</em> If a string contains a palindromic substring $$$P$$$ of length\n  $$$|P| \\gt 6$$$, then it must also contain a palindromic substring of length $$$5$$$ or $$$6$$$.\n  For example, we can take the middle $$$6$$$ characters of $$$P$$$ if $$$|P|$$$ is even, and the\n  middle $$$5$$$ characters otherwise. Consequently, as we fill in the question marks in $$$\\mathbf{S}$$$, our only\n  concern is to avoid introducing palindromes of length $$$5$$$ or $$$6$$$.\n</p>\n\n<p>\n  If at any point in the recursive solution described above, the last $$$5$$$ or $$$6$$$ characters of\n  the prefix generated so far form a palindrome, we can backtrack immediately, thus pruning the\n  search space. If we  manage to generate the entire binary string of length $$$\\mathbf{N}$$$ without forming a\n  palindrome of length $$$5$$$ or $$$6$$$, the answer is <code>POSSIBLE</code>. Otherwise, we have\n  exhausted the search space with no success, and the answer is <code>IMPOSSIBLE</code>.\n</p>\n\n<p>\n  This reduces the upper bound to $$$O(2^\\mathbf{N})$$$, which is an improvement over the solution for\n  Test Set 1, but it is still prohibitively slow for Test Set 2. It turns out that the complexity\n  is much lower in practice.\n</p>\n\n<p>\n  Consider again that if we have a valid solution prefix, only its last five characters determine\n  whether it is possible to append a <code>0</code> or <code>1</code> without introducing a\n  palindrome. That means that all  valid strings can be generated by a finite state machine with\n  exactly $$$24$$$ states ($$$32$$$ five-character strings, minus $$$8$$$ palindromes).\n  A transition from <code>abcde</code> to <code>bcdef</code> is possible if and\n  only if neither <code>abcde</code> nor <code>bcdef</code> is a $$$5$$$-character palindrome and\n  <code>abcdef</code> is not a $$$6$$$-character palindrome.\n  All state transitions are shown in the directed graph below:\n</p>\n\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0u4dLUxKNV6j_vQBHLj6oLOhbHd4ykfp2ROQj6PJtd0rEk3o6whDa_lNv5jvW-vjU6YMz9hvCB5qKrCNublAdhfmNr_mu9qrhX/finite-state-machine.png\" alt=\"Finite state machine\">\n\n<p>\n  The graph shows, for example, that if the last five characters were <code>11101</code> then we can add\n  <code>0</code> to obtain <code>11010</code>, but we cannot add <code>1</code>, which would create\n  the palindrome <code>11011</code>. Any valid string can be formed by starting from some vertex\n  (corresponding with the first $$$5$$$ characters of the string) and then following edges of the\n  graph, appending the labels on the edges to the string.\n</p>\n\n<p>\n  <em>Observation 2:</em> The graph contains only two cycles, which do not overlap and neither is\n  reachable from the other. That means that the only way to form long strings is by repeating the\n  pattern <code>001101</code> (going through the left cycle, colored blue) or <code>110010</code>\n  (going through the right cycle, colored red).\n  Since we can start and end at any vertex of the graph, there are a few variations possible\n  at both ends of the string, but since the longest path before entering a cycle has length $$$2$$$,\n  and the longest path after exiting from a cycle has length $$$2$$$, all characters in the string\n  except for the first and last two must consist of repetitions of one of the two $$$6$$$-character\n  patterns mentioned before.\n  This gives an upper bound of $$$4 \\times 12 \\times 4 = 192$$$ palindrome-free strings of any fixed\n  length, though this is an overestimation and it can be shown that the real maximum is only\n  $$$36$$$.\n</p>\n\n<p>\n  The resursive solution will generate each possible prefix once. Therefore, it takes $$$O(M)$$$\n  time, where $$$M$$$ is the number of palindrome-free prefixes of the solution. We have shown above\n  that $$$M \\le 36\\mathbf{N}$$$,  which makes the overall runtime $$$O(\\mathbf{N})$$$ and allows it to\n  pass without any additional memory.\n</p>\n\n<h4>Dynamic programming solutions</h4>\n<p>\n  It seems unlikely that contestants would take the time to draw the state graph before attempting\n  to solve the problem, so they might have missed the second observation. Fortunately, it is also\n  possible to solve the problem with only the first observation, by using dynamic programming.\n</p>\n\n<p>\n  The simplest way to reduce the runtime of the backtracking solution is to add\n  <a href=\"https://en.wikipedia.org/wiki/Memoization\" target=\"_blank\">memoization</a>.\n\n  If the solution is implemented as a function $$$f(p)$$$ where $$$p$$$ is a partial solution\n  string, we can replace this with a function $$$f'(p', i)$$$ where $$$p'$$$ is the $$$5$$$-character\n  suffix of $$$p$$$  and $$$i = |p|$$$ (the length of the prefix, or, equivalently, the position in\n  the input).\n  Observation 1 tells us that these representations are equivalent. We can simply cache the results\n  of $$$f'$$$ for each pair of arguments which requires $$$O(2^5 \\times \\mathbf{N})$$$ = $$$O(\\mathbf{N})$$$ time\n  and space.\n</p>\n\n<p>\n  A second approach is bottom-up dynamic programming. We process the characters in the input from\n  left to right, while maintaining a set of possible prefixes truncated to the last five characters.\n  To process an input character, we calculate a new set by extending the prefixes from the old set.\n  For example, if the set contains <code>10100</code> and the next input character is <code>1</code>\n  then we can add <code>01001</code> to the next set. If the input character were <code>?</code>\n  instead, then we could also add <code>01000</code>.\n  If it becomes empty at any point, the answer is <code>IMPOSSIBLE</code>.\n  If it is nonempty when we reach the end of the input, then the answer is <code>POSSIBLE</code>.\n</p>\n\n<p>\n  The second approach effectively executes a nondeterministic finite state automaton corresponding\n  with the graph shown above.\n  It is nondeterministic because whenever the input contains a question mark, the transitions\n  labeled with <code>0</code> and <code>1</code> are both possible, hence the need to track a set of\n  states rather than a single current state only.\n  This approach takes $$$O(2^5 \\times \\mathbf{N})$$$ = $$$O(\\mathbf{N})$$$ time too, but since we only maintain a\n  single set of possible states, the space requirement is reduced to $$$O(2^5) = O(1)$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1b97tiJvS8RAbnaFmtL0jj9fdBiNV3Vl_oheFfIdCqBotDIV3Cyt5hapvn1Chi3oFXCdtfGyj_/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000009e762e","statement":"<h3>Problem</h3>\n<p>\n    You are given a string $$$\\mathbf{S}$$$ consisting of characters <code>0</code>, <code>1</code>, and <code>?</code>. You can\n  replace each <code>?</code> with either <code>0</code> or <code>1</code>. Your task is to find if it\n  is possible to assign each <code>?</code> to either <code>0</code> or <code>1</code> such that the\n  resulting string has no <a href=\"https://en.wikipedia.org/wiki/Substring\" target=\"_blank\">substrings</a> that are\n  <a href=\"https://en.wikipedia.org/wiki/Palindrome\" target=\"_blank\">palindromes</a> of length $$$5$$$ or more.\n\n</p>\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n\n</p>\n<p>\n  Each test case consists of two lines.<br/>\n  The first line of each test case contains an integer $$$\\mathbf{N}$$$,\ndenoting the length of the string $$$\\mathbf{S}$$$.<br/>\n  The second line of each test case contains a string $$$\\mathbf{S}$$$ of length $$$\\mathbf{N}$$$.\n</p>\n\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1)\n  and $$$y$$$ is <code>POSSIBLE</code> if there is a possible resulting string that has no palindromic\n  substrings of length $$$5$$$ or more, or <code>IMPOSSIBLE</code> otherwise.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$\\mathbf{S}$$$ only consists of characters <code>0</code>, <code>1</code> and <code>?</code>.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 15$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 90 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 5 \\times 10^4$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1WxcWDH5O7J-RjY-RW2hSfHM_L5EfCt4wYE8a0yv4u-g1h1WbtzSDojEWSwL02cuTUDmOA68uEv2kJJUQKldifsNiJ0-V8cqFM6hWTFqSHZDL7YOcHAg/palindrome_free_strings_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n9\n100???001\n5\n100??\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0RQ_PeBm35wp_cG-T2_dLIGBg6Gk9vLva3ec7WZHXzCBtKDqa_8TCTl_y6n8hoKjGp7idvChdZCwhYLeoptGRh12NmEBgUJKRSVuyWb_A6WdnsZMVD9nA/palindrome_free_strings_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: IMPOSSIBLE\nCase #2: POSSIBLE\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n    In Sample Case #1, to prevent the whole string from being a palindrome, the first and last\n  question mark must be different characters.\n  <p>\n  If we replace first question mark with <code>0</code> and replace the last question mark with <code>1</code>, we get <code>1000?1001</code>.\n  If the remaining <code>?</code> is replaced by <code>1</code>, we get 100011001, then the first $$$5$$$ characters form a\n  palindrome of length $$$5$$$. Otherwise, we get <code>100001001</code>, the first $$$6$$$ characters are a palindrome of length $$$6$$$.\n</p>\n  <p>\n    If we replace first question mark with <code>1</code> we get 1001?0001.\n  If the remaining <code>?</code> is replaced by <code>1</code>, we get 100110001, then the last $$$5$$$ characters form a\n  palindrome of length $$$5$$$. Otherwise, we get <code>100100001</code>, the last $$$6$$$ characters are a palindrome of length $$$6$$$.\n  </p>\n  <p>\n    Hence, there is no way to get a valid string.\n  </p>\n<p>\n    In Sample Case #2, one of the valid strings after replacing all the <code>?</code> is <code>10011</code>.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":13},{"type":1,"type__str":"VISIBLE","value":18}],"title":"Palindrome Free Strings","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  For simplicity, let us use $$$L$$$ to represent the number of digits in $$$\\mathbf{N}$$$, note the scale of\n  $$$L$$$ is actually $$$O(log_{10}\\mathbf{N})$$$. And let us use $$$\\{a_{L-1}, a_{L-2}, \\dots , a_1, a_0\\}$$$\n  to represent the digits of $$$\\mathbf{N}$$$, where $$$a_{L-1}$$$ is the most significant digit and $$$a_0$$$ is\n  the least significant digit ($$$0 \\le a_i \\le 9$$$ for all $$$i \\lt L-1$$$, and $$$1 \\le a_{L-1} \\le 9$$$).\n  We can read $$$\\mathbf{N}$$$ as a string, where the characters in the string\n  $$$\\{s[0], s[1], \\dots, s[L-2], s[L-1]\\}$$$ represent $$$\\{a_{L-1}, a_{L-2}, \\dots , a_1, a_0\\}$$$.\n  Or, we can read $$$\\mathbf{N}$$$ as an integer, whose value equals\n  $$$a_{L-1} \\times 10^{L-1}+ a_{L-2} \\times 10^{L-2} + \\cdots +a_1 \\times 10 + a_0$$$. Inserting\n  a new digit $$$d$$$ in the $$$k-$$$th position in $$$\\mathbf{N}$$$ means inserting it after the first $$$L-k$$$ digits (on the left side)\n  and before the last $$$k$$$ digits (on the right side) of $$$\\mathbf{N}$$$. If $$$\\mathbf{N}$$$ is string type, then the new number can be built\n  by slicing and concatenating the string as $$$s[0 \\dots L-k] + string(d) + s[L-k \\dots L]$$$ in\n  linear time, where $$$s[i \\dots j]$$$ means characters of string $$$s$$$ from index $$$i$$$ to\n  index $$$j$$$. On the other hand, if $$$\\mathbf{N}$$$ is integer type, then the new number can be calculated as\n  $$$(\\mathbf{N}-\\mathbf{N} \\% 10^k)\\times 10 + d\\times 10^k + (\\mathbf{N} \\% 10^k)$$$ in constant time.\n</p>\n\n<h3>\n  Test Set 1\n</h3>\n\n<p>\n  Since $$$\\mathbf{N} \\le 10^5$$$, the number of digits of $$$\\mathbf{N}$$$ is at most $$$6$$$, which means there are at\n  most $$$7$$$ positions to insert a new digit. As for the new digit, there are at most $$$10$$$ options (<code>0</code> $$$\\dots$$$ <code>9</code>),\n  therefore the total number of results is at most $$$70$$$. We can enumerate all these $$$70$$$ results,\n  eliminate those ones which are not multiples of $$$9$$$ or have leading zeros, then find the smallest\n  one from them.\n</p>\n\n<p>\n  In this solution, there are $$$O(L)$$$ positions to insert a new digit, and a constant number\n  of choices for the new digit (<code>0</code> $$$\\dots$$$ <code>9</code>). If $$$\\mathbf{N}$$$ is read as an\n  integer, then we need constant time to insert a new digit, decide if the inserted result is\n  a multiple of $$$9$$$ and compare the candidates, so the time complexity of this solution is $$$O(L)$$$.\n  If $$$\\mathbf{N}$$$ is read as a string, then every operation such as the insertion of a new digit or value comparison among candidates will take $$$O(L)$$$\n  time, so the time complexity will be $$$O(L^2)$$$.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  Now that $$$\\mathbf{N}$$$ is at most $$$10^{123456}$$$, we cannot read $$$\\mathbf{N}$$$ as 32-bit/64-bit integer. Instead, we\n  should read $$$\\mathbf{N}$$$ as string where each character represents a digit of $$$\\mathbf{N}$$$. Since $$$L$$$ is at most\n  $$$123456+1$$$, the brute force enumeration method with time complexity $$$O(L^2)$$$ is\n  unacceptable. We need a more efficient algorithm.\n</p>\n\n<p>\n  First, let us decide which digit to insert. In fact, a number is a multiple of $$$9$$$ if and only if\n  the sum of its all digits is a multiple of $$$9$$$. Therefore, we can add up all the $$$L$$$ digits of the given\n  $$$\\mathbf{N}$$$, and use $$$9-(sum \\enspace mod \\enspace 9)$$$ to get the new digit we want. Wherever we insert it, the sum of\n  all digits of the new number and the new number itself will be a multiple of $$$9$$$.\n  Note that when $$$sum \\enspace mod \\enspace 9=0$$$, adding either a new $$$0$$$ or a new $$$9$$$ can make the result be a multiple\n  of $$$9$$$, but $$$0$$$ is always more preferable than $$$9$$$ because we are looking for the smallest answer.\n</p>\n\n<p>\n  Secondly, let us decide where to insert the new digit. Let us use $$$d$$$ to represent the new digit we are going to insert.\n  We can start from the most significant digit $$$a_{L-1}$$$, then $$$a_{L-2}$$$, and then\n  use this order to visit all the digits in $$$\\mathbf{N}$$$, to find the first digit in $$$\\mathbf{N}$$$ that is\n  larger than $$$d$$$. Then we should insert $$$d$$$ right before this digit. In other words, say\n  $$$a_k$$$ is the first digit in $$$\\mathbf{N}$$$ that is larger than $$$d$$$ (i.e. $$$a_i \\le d$$$ for all $$$k+1 \\le i \\le L-1$$$),\n  then the new number we are going to make is $$$\\{a_{L-1}, a_{L-2}, \\dots, a_{k+1}, d, a_k, \\dots, a_0\\}$$$,\n  whose value equals to\n  $$$N_g = a_{L-1} \\times 10^{L}+ a_{L-2} \\times 10^{L-1} + \\cdots + a_{k+1} \\times 10^{k+2} + d \\times 10^{k+1} + a_k \\times 10^k + \\cdots +a_0$$$.\n</p>\n\n<p>\n  Is this always the best choice? Yes, let us prove it. If we insert $$$d$$$ to a more significant\n  position, i.e. between $$$a_{q+1}$$$ and $$$a_q$$$ where $$$q>k$$$, then the new number we are\n  going to make is $$$\\{a_{L-1}, a_{L-2}, \\dots, a_{q+1}, d, a_q, \\dots, a_k, \\dots, a_0\\}$$$ with value\n  $$$N_o = a_{L-1} \\times 10^{L}+ a_{L-2} \\times 10^{L-1}+ \\cdots +a_{q+1} \\times 10^{q+2} + d \\times 10^{q+1} + a_q \\times 10^q + \\cdots a_k \\times 10^k + \\cdots +a_0$$$.\n  The difference between this solution and the solution we claimed is\n  $$$N_o-N_g=d \\times 10^{q+1}-9\\times(a_q\\times 10^q+a_{q-1}\\times 10^{q-1}+ \\cdots +a_{k+2}\\times 10^{k+2}+a_{k+1}\\times 10^{k+1})-d\\times 10^{k+1}$$$.\n  Since we have that $$$a_q$$$ is always no greater than $$$d$$$, we can make sure that\n  $$$9\\times(a_q\\times 10^q+a_{q-1}\\times 10^{q-1}+ \\cdots +a_{k+2}\\times 10^{k+2}+a_{k+1}\\times 10^{k+1})+d\\times 10^{k+1}$$$\n  is always no greater than $$$d \\times 10^{q+1}$$$. Therefore, no matter what other position $$$q$$$ we\n  choose to insert $$$d$$$, the result is always no less than inserting at $$$k$$$.\n</p>\n\n<p>\n  On the other hand, if we insert $$$d$$$ to a less significant position, i.e. between $$$a_{p+1}$$$\n  and $$$a_p$$$ where $$$p\\lt k$$$, then the new number we are going to make is\n  $$$\\{a_{L-1}, a_{L-2}, \\dots, a_k, \\dots, a_{p+1}, d, a_p, \\dots, a_0\\}$$$ with value\n  $$$N_o = a_{L-1} \\times 10^{L}+ a_{L-2} \\times 10^{L-1} + \\cdots + a_k \\times 10^{k+1}+ \\cdots +a_{p+1} \\times 10^{p+2} + d \\times 10^{p+1} + a_p \\times 10^p  + \\cdots +a_0$$$.\n  The difference between this solution and the solution we claimed is\n  $$$N_o-N_g=-d\\times 10^{k+1}+9\\times(a_k\\times 10^k+ \\cdots +a_{p+1}\\times 10^{p+1})+d\\times 10^{p+1}$$$.\n  Since we have that $$$a_k>d$$$, we can make sure that $$$9\\times(a_k\\times 10^k+ \\cdots +a_{p+1}\\times 10^{p+1})+d\\times 10^{p+1}$$$\n  is always greater than $$$d\\times 10^{k+1}$$$. Therefore, no matter what other position $$$p$$$ we\n  choose to insert $$$d$$$, the result is always greater than inserting at $$$k$$$.\n</p>\n\n<p>\n  Note that there are some edge cases. For example, all digits in $$$\\mathbf{N}$$$ are less than $$$d$$$. In\n  this case, we should append $$$d$$$ to the end of $$$\\mathbf{N}$$$. And if $$$d$$$ is $$$0$$$, we will find\n  that the first digit in $$$\\mathbf{N}$$$ that is larger than $$$d$$$ is the leading digit. Be careful that we\n  should not put $$$d$$$ before it because the result cannot have leading zeros. In this case, we\n  should put $$$0$$$ right after the leading digit of $$$\\mathbf{N}$$$ to get the smallest result.\n</p>\n\n<p>\n  The time complexity for finding out which $$$d$$$ to insert is $$$O(L)$$$ because we\n  need to add up all digits of $$$\\mathbf{N}$$$ to get the remainder of $$$\\mathbf{N}$$$ divided by $$$9$$$. Then to find where to insert $$$d$$$,\n  we also need $$$O(L)$$$ time to visit all the digits to find the first digit that is larger\n  than $$$d$$$ (or find out all the digits are no larger than $$$d$$$). Therefore, the total time\n  complexity of this solution is $$$O(L+L)=O(L)$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3iNmAkGFVlM1jbWEtTGQz3UljwVhFAZU40eoyYmKiy70weTw31n3u-J4i_LaUZfRuTmO4iHTwf/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000009e7997","statement":"<h3>Problem</h3>\n<p>\n  Ada gives John a positive integer $$$\\mathbf{N}$$$. She challenges him to construct a new number (without\n  leading zeros), that is a multiple of $$$9$$$, by inserting <i>exactly</i> one digit (<code>0</code> $$$\\dots$$$ <code>9</code>)\n  anywhere in the given number $$$\\mathbf{N}$$$.  It is guaranteed that $$$\\mathbf{N}$$$ does not have any leading zeros.\n</p>\n\n<p>\n  As John prefers smaller numbers, he wants to construct the <i>smallest</i> such number possible.\n  Can you help John?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n</p>\n<p>\n  Each test case has a single line containing a positive integer $$$\\mathbf{N}$$$: the number Ada gives John.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$\n  is the test case number (starting from 1) and $$$y$$$ is the new number constructed by John.  As\n  mentioned earlier, $$$y$$$ cannot have leading zeros.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\nFor at most 10 cases:<br/>\n$$$1 \\le \\mathbf{N} \\le 10^{123456}$$$.<br/>\nFor the remaining cases:<br/>\n$$$1 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U179dfDo3u3nazPOcV6Wj6U_1520xUH8kKT9fZ03jv2-i0OjfHUa6Km8tqiurRDJEUodVwcX6_ELC4TotpJSQoSiJpFJNope-I4Pt_XSw/challenge_nine_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n5\n33\n12121\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0L9BbSLNZXupwJFbMc7pH22qBYASn5rPjeKkL5-0yxv_lClUxDKIb-J506uRreR7PImSjtWQcbWvFjdOBbmvKGyVGaHvQ2_RluXqxfEnQ/challenge_nine_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 45\nCase #2: 333\nCase #3: 121212\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, there are only two numbers that can be constructed satisfying the divisibility\n  constraint: $$$45$$$ and $$$54$$$. John chooses the smaller number.\n</p>\n\n<p>\n  In Sample Case #2, $$$333$$$ is the only number possible.\n</p>\n\n<p>\n  In Sample Case #3, there are four possible options - $$$212121$$$, $$$122121$$$, $$$121221$$$ and\n  $$$121212$$$ - out of which the smallest number is $$$121212$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":8},{"type":1,"type__str":"VISIBLE","value":12}],"title":"Challenge Nine","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000008cb33e","type":1,"type__str":"SPECTATOR"},"title":"Round A 2022","ui_appearance":0,"ui_appearance__str":"APPEARANCE_TYPE_DEFAULT"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
