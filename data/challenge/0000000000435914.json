{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1636869600000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000435914","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Thank you for participating in Kick Start 2021 Round H!</p>\r\n<hr>\r\n<p><b>Cast</b></p>\r\n<p>Transform the String: Written by Bartosz Kostka and prepared by Chu-ling Ko.</p>\r\n<p>Painter: Written by Bartosz Kostka and prepared by Jared Gillespie.</p>\r\n<p>Silly Substitutions: Written by Kevin Tran and prepared by Nikolai Artemiev.</p>\r\n<p>Dependent Events: Written by Siddharth Nayyar and prepared by Lucas Maciel.</p>\r\n<p>Solutions, other problem preparation, reviews and contest monitoring by\r\nAlan Lou, Anson Ho, Anurag Singh, Anushi Maheshwari, Bartosz Kostka, Bianca Shimizu Oe, Bohdan Pryshchenko, Brijesh Panara, Chu-ling Ko, Chun-nien Chan, Cristhian Bonilha, Deeksha Kaurav, Duong Hoang, Federico Brubacher, Guilherme Rodrigues Nogueira de Souza, Hsin-Yi Wang, Jakub Kuczkowiak, Jared Gillespie, Kashish Bansal, Kevin Tran, Laksh Nachiappan, Lizzie Sapiro Santor, Lucas Maciel, Maneeshita Sharma, Michał Łowicki, Mohamed Yosri Ahmed, Motty Porat, Nikolai Artemiev, Phil Sun, Rahul Goswami, Rishabh Agarwal, Robert O'Connor, Ruoyu Zhang, Samiksha Gupta, Sarah Young, Shahed Shahriar, Shubham Garg, Shweta Karwa, Siddharth Nayyar, Subhasmita Sahoo, Surya Upadrasta, Swapnil Gupta, Swapnil Mahajan, Swetank Modi, Tarun Khullar, Teja Vardhan Reddy Dasannagari, Umang Goel, Vijay Krishan Pandey, Wendi Wang, Yulian Yarema, Zhitao Li.</p>\r\n<p>Analysis authors:</p><ul>\r\n<li>Transform the String: Deeksha Kaurav</li>\r\n<li>Painter: Vijay Krishan Pandey</li>\r\n<li>Silly Substitutions: Motty Porat</li>\r\n<li>Dependent Events: Phil Sun</li>\r\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1636858800000,"tasks":[{"analysis":"<p>\n  In this problem, each replacement shortens the string by one character, so the number of\n  replacements is no more than $$$\\mathbf{N}$$$. It is the complexity of each replacement that may bother us.\n</p>\n\n<h3>\n    Test Set 1\n</h3>\n<p>\n  The basic step that we are asked to do is the \"replace all\" operation; that is, to find all the\n  occurrences of a given substring within a given string, and replace them with another string.\n</p>\n<p>\n  Many programming languages have a built-in function that does exactly this; for example, in both\n  Python and Java it is called <code>replace()</code>.\n  In other languages you may implement the \"replace all\" operation by using a few basic operations\n  or completely from scratch. Either way, the typical implementation of \"replace all\" would take\n  <i>linear</i> time, because it has to:\n</p>\n<ul>\n  <li>search the entire string for all occurrences of the substring, and</li>\n  <li>(if found) build the resulting string.</li>\n</ul>\n<p>\n  And then, we are asked to apply \"replace all\" until there is nothing to change. This would look\n  like (pseudo-code):\n</p>\n<pre><code class=\"language-py\">\n  while True:\n    previous = s\n    s = s.replace_all('01', '2').replace_all('12', '3')....replace_all('90', '1')\n    if s == previous:\n      return s\n</code></pre>\n<p>\n  This loop makes up to $$$\\mathbf{N}$$$ iterations, each iteration attempts the \"replace all\" operation\n  $$$10$$$ times, and, as said, each attempt takes $$$O(\\mathbf{N})$$$.\n</p>\n<p>\n  Therefore, <i>complexity: $$$O(\\mathbf{N} ^ 2)$$$ per test case.</i>\n</p>\n\n<h3>\n    Test Set 2\n</h3>\n<p>\n  To reduce the complexity we should implement our own \"replace all\" and optimize the two\n  things that it does:\n</p>\n<ul>\n  <li>Instead of searching the entire string every time, we will maintain a set of \"locations of\n    interest\". More accurately, 10 sets: all locations of the substring <code>01</code>, all\n    locations of the substring <code>12</code>, and so on.\n    How to define a location in a string that keeps changing? The next bullet solves this.</li>\n  <li>To quickly replace characters, we will convert the string to a bidirectional linked list where\n    each node holds a character. Thus, a location in the string is actually a pointer to a node, and\n    each local change, such as removing two nodes or inserting a node, takes $$$O(1)$$$ time.\n  </li>\n</ul>\n<p>\n  A \"replace all\" operation might still take linear time in the optimized version. For example, if\n  $$$\\mathbf{S} = $$$<code>010101010101</code> then the first replacement (of all the <code>01</code>s to\n  <code>2</code>s) will have to replace $$$\\mathbf{N}/2$$$ occurrences. But then, the next operations will\n  be either few enough or fast enough to compensate for the long one. This is known as\n  <a href=\"https://en.wikipedia.org/wiki/Amortized_analysis\" target=\"_blank\">amortized analysis</a>.\n</p>\n<p>\n  More accurately, whenever a location becomes interesting, one of the future replacement operations\n  will have to handle it (as said, by $$$O(1)$$$ manipulations of the linked list). How many times\n  can locations become interesting? In the initial string, maybe all the $$$\\mathbf{N}$$$ characters (except the\n  last one) start as interesting. Later on, whenever we replace a pair of characters with a new one,\n  that new character may turn one or both its neighbors to be interesting. For example, when\n  changing <code>1013</code> to <code>123</code> it creates two interesting substrings:\n  <code>12</code> and <code>23</code>. Finer analysis can show that we only need to mark the\n  <code>12</code> as interesting, but it does not really matter for our conclusion.\n</p>\n<p>\n  So, since we replace characters at most $$$\\mathbf{N}$$$ times, the event of a location becoming interesting\n  can happen at most $$$3\\mathbf{N}$$$ times (or $$$2\\mathbf{N}$$$ with finer analysis).\n</p>\n<p>\n  Therefore, <i>complexity: $$$O(\\mathbf{N})$$$ per test case</i>\n</p>\n<p>\n  Notes:\n</p>\n<ol>\n  <li>We can even mark \"false interesting locations\". That is, mark <i>all</i> the initial locations\n    and <i>both</i> neighbors of every modification as interesting, even if they do not really start\n    a pair that should be replaced (like <code>01</code>). Of course, our \"replace all\" operation\n    will need to check if each \"interesting location\" should indeed be replaced, but this is a good\n    practice anyway. The best part is that our analysis with the $$$3\\mathbf{N}$$$ bound will still be\n    valid.</li>\n  <li>The <i>set</i> of locations of interest is indeed a set - each location should be marked once\n    and the order that we handle them does not matter. However, if your programming language makes\n    it harder (higher complexity) to maintain a set, you may as well store the locations of interest\n    in any other structure, like a vector or a list.</li>\n</ol>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1SoiTcZfABZAmoUsiGP4kkVHKlOWaVuZw67kULibakdptofnWJxi4_be7DLdlP_7yk5KuTN1c8/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000008d94f5","statement":"<h3>Problem</h3>\n<p>\n    You are given a string $$$\\mathbf{S}$$$ of length $$$\\mathbf{N}$$$ which consists of digits <code>0-9</code>. You do the\n    following operations on the string in the order given.\n</p>\n\n<ol style=\"text-align: center; list-style-position: inside;\">\n    <li>Find all the substrings <code>01</code> and replace each of them with <code>2</code>.</li>\n    <li>Find all the substrings <code>12</code> and replace each of them with <code>3</code>.</li>\n    <li>Find all the substrings <code>23</code> and replace each of them with <code>4</code>.</li>\n    <li>Find all the substrings <code>34</code> and replace each of them with <code>5</code>.</li>\n    .<br/>\n    .<br/>\n    .<br/>\n    <li value=\"9\">Find all the substrings <code>89</code> and replace each of them with <code>0</code>.</li>\n    <li value=\"10\">Find all the substrings <code>90</code> and replace each of them with <code>1</code>.</li>\n</ol>\n<p>\n    You repeat this process in the same given order until <i>none</i> of the above operations change\n    the string. For example, if $$$\\mathbf{S}$$$ is <code>12</code> then we do not stop at operation $$$1$$$\n    since it does not affect the string but perform operation $$$2$$$ and change the string to\n    <code>3</code>. We can see that the string does not change further no matter how many times\n    we repeat the above process.\n</p>\n<p>\n  Your task is to find how the final string will look like for the given $$$\\mathbf{S}$$$.\n</p>\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n  Each test case consists of two lines.\n</p>\n<p>\n  The first line of each test case contains an integer $$$\\mathbf{N}$$$,\n  denoting the length of the string $$$\\mathbf{S}$$$.\n</p>\n<p>\n  The second line of each test case contains a string $$$\\mathbf{S}$$$ of length $$$\\mathbf{N}$$$.\n</p>\n\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the final string obtained.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\nThe input string only consists of digits <code>0-9</code>.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 60 seconds.<br/>\n\nFor at most 10 cases:<br/>\n$$$1 \\le \\mathbf{N} \\le 5 \\times 10^5$$$.<br/>\nFor the remaining cases:<br/>\n$$$1 \\le \\mathbf{N} \\le 100$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1vd_v4U9hSvxmm8VsLVZCjv3UU-MaUIJf70TeaEWP1_l086U-xFyePJ2X_POCuGRR4jCP4D06JcXtuyZcygInhasK50Zn_nPli-O784K_ccFz8/silly_substitutions_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n3\n012\n4\n0145\n5\n00000\n11\n98765432101\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0-8qa6S7tgCjqhnkUv-RE2C_LXy999BVZp76bKeaxspHbnDGcJGfvVtARW7QQxgVZQ-8UD8hWTuMj8H1So9h8qAbRD5YUFxh5ek8VM97fNYzEMPg/silly_substitutions_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 22\nCase #2: 26\nCase #3: 00000\nCase #4: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n    In Sample Case #1, substring <code>01</code> is replaced with <code>2</code> and the resulting\n    string is <code>22</code> which is not affected further by any of the operations.\n    Therefore final string is <code>22</code>.\n</p>\n<p>\n    In Sample Case #2, substring <code>01</code> is replaced with <code>2</code> and the resulting\n    string is <code>245</code>. The substring <code>45</code> is replaced with <code>6</code> and the\n    resulting string is <code>26</code> which is not further affected by any of the operations.\n    Therefore final string is <code>26</code>.\n</p>\n<p>\n    In Sample Case #3, since the operations cannot be performed on the given string, the string\n    does not change.\n</p>\n<p>\n    In Sample Case #4, all the operations can be performed sequentially on the string and the final\n    string is <code>1</code>.\n</p>\n\n  \n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":10},{"type":1,"type__str":"VISIBLE","value":16}],"title":"Silly Substitutions","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\nFor this problem, we are given a <a href=\"https://en.wikipedia.org/wiki/Graphical_model\" target=\"_blank\">graphical model</a> in the form of a directed, rooted tree, where each vertex is an event. For any vertex $$$v$$$ on this tree, let $$$v=0$$$ and $$$v=1$$$ denote the non-occurrence and occurrence of event $$$v$$$, respectively. Let $$$l_j$$$ be the <a href=\"https://en.wikipedia.org/wiki/Lowest_common_ancestor\" target=\"_blank\">lowest common ancestor (LCA)</a> of $$$\\mathbf{u_j}$$$ and $$$\\mathbf{v_j}$$$. By the <a href=\"https://en.wikipedia.org/wiki/Law_of_total_probability\" target=\"_blank\">total probability rule</a>, $$$P[\\mathbf{u_j}=1, \\mathbf{v_j}=1]=\\sum_{i=0}^1 P[\\mathbf{u_j}=1, \\mathbf{v_j}=1, l_j=i]$$$. We know $$$\\mathbf{u_j}$$$ and $$$\\mathbf{v_j}$$$ are <a href=\"https://en.wikipedia.org/wiki/Conditional_independence\" target=\"_blank\">conditionally independent</a> given $$$l_j$$$, because the paths $$$l_j\\rightarrow \\mathbf{u_j}$$$ and $$$l_j\\rightarrow \\mathbf{v_j}$$$ are edge-disjoint due to the definition of LCA. This allows us to simplify the earlier sum into $$$\\sum_{i=0}^1 P[\\mathbf{u_j}=1 | l_j=i]P[\\mathbf{v_j}=1 | l_j = i]P[l_j=i]$$$. This formula forms the basis of our solution, and the approaches for the two test sets differ only in how to compute the required probabilities efficiently.\n</p>\n\n<p>\nTo deal with the output format of this problem, we store all results as fractions and take the numerator and denominator modulo $$$10^9+7$$$ after each operation to avoid overflow. If our final result is $$$\\frac{p}{q}$$$, we output $$$pq^{-1}\\pmod{10^9+7}$$$. Due to the nature of the problem, $$$q$$$ will always be a power of ten, so the inverse is guaranteed to exist, and can be efficiently computed via <a href=\"https://en.wikipedia.org/wiki/Extended_Euclidean_algorithm\" target=\"_blank\">extended Euclidean algorithm</a>. Alternatively, due to <a href=\"https://en.wikipedia.org/wiki/Fermat%27s_little_theorem\" target=\"_blank\">Fermat's little theorem</a>, we can equivalently raise $$$q$$$ to the $$$(10^9+5)$$$-th power to find its inverse; this can be done efficiently with <a href=\"https://en.wikipedia.org/wiki/Exponentiation_by_squaring\" target=\"_blank\">exponentiation by squaring</a>.\n</p>\n\n<h3> Test set 1 </h3>\n\n<p>\nFor this test set it suffices to naively compute $$$l_j$$$. We can then compute $$$P[\\mathbf{u_j}=1|l_j]$$$ and $$$P[\\mathbf{v_j}=1|l_j]$$$ by walking back down the tree from $$$l_j$$$. To do this, we can use the total probability rule similar to before; if $$$p(x)$$$ denotes the parent of $$$x$$$, then $$$P[x=1 | l_j=i] = \\sum_{k=0}^1P[x=1,p(x)=k | l_j=i] = \\sum_{k=0}^1 P[x=1 | p(x)=k]P[p(x)=k | l_j = i]$$$; note that the first term in this product comes from the input, and the second term comes from the previous step of our walk. We can use the same formula to compute $$$P[l_j=i]$$$, since $$$P[l_j=i]=\\sum_{k=0}^1P[l_j=i|r=k]P[r=k]$$$, where $$$r$$$ is the root of the tree.\n</p>\n\n<p>\nEach vertex is visited at most $$$O(1)$$$ times per query using this technique, so our overall time complexity is $$$O(\\mathbf{NQ})$$$ per test case, which is sufficient.\n</p>\n\n<h3> Test set 2 </h3>\n\n<p>\nThere are both more queries and a larger tree in this test set, so the naive solution is too slow. This test set requires computing $$$l_j$$$, the LCA of $$$\\mathbf{u_j}$$$ and $$$\\mathbf{v_j}$$$, in $$$O(\\log \\mathbf{N})$$$ time anyways, so we can think of ways to augment an LCA algorithm to also keep track of the necessary probabilities for us. For example, the binary lifting LCA algorithm pre-computes $$$p^i(v)$$$ for all vertices $$$v$$$, where $$$p^i(\\cdot)$$$ gives the $$$2^i$$$-th parent of a given vertex. We can extend the binary lifting algorithm to not only store the id of this parent, but to also store $$$P[v=1|p^i(v)]$$$. These probabilities can then be multiplied such that only $$$O(\\log \\mathbf{N})$$$ hops are needed to get from $$$\\mathbf{u_j}$$$ or $$$\\mathbf{v_j}$$$ up to $$$l_j$$$. The unconditional probability $$$P[l_j]$$$ can simply be pre-computed for the entire tree via <a href=\"https://en.wikipedia.org/wiki/Depth-first_search\" target=\"_blank\">DFS</a> in $$$O(\\mathbf{N})$$$ time. This allows us to answer each query in $$$O(\\log \\mathbf{N})$$$ time, so our overall time complexity is $$$O(\\mathbf{N}\\log \\mathbf{N}+\\mathbf{Q}\\log \\mathbf{N})$$$ per test case.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1HUFKX-2kP0QMdpGJsEje7udODIJ4gNcHbFTh1qkc-tZ2rzKdKF7hq1UhinVrZfBd-JhjikIEr/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000008d9970","statement":"<h3>Problem</h3>\n<p>\nThere are $$$\\mathbf{N}$$$ events, numbered $$$1$$$ through $$$\\mathbf{N}$$$. The probability of occurrence of each event depends upon the occurrence of\nexactly one other event called the parent event, except event $$$1$$$, which is an independent event.\nIn other words, for each event from $$$2$$$ to $$$\\mathbf{N}$$$, $$$3$$$ values are given: $$$\\mathbf{P_{i}}$$$ denoting the parent event of event $$$i$$$,\n$$$\\mathbf{A_{i}}$$$ denoting the probability of occurrence of event $$$i$$$ if its parent event occurs,\n  and $$$\\mathbf{B_{i}}$$$ denoting the probability of occurrence\nof event $$$i$$$ if its parent event does not occur. For event $$$1$$$, its probability of occurrence $$$\\mathbf{K}$$$\n  is given.\n\nThere are $$$\\mathbf{Q}$$$ queries that we want to answer. Each query consists of $$$2$$$ distinct events,\n  $$$\\mathbf{u_{j}}$$$ and $$$\\mathbf{v_{j}}$$$, and you need to find the probability that both events $$$\\mathbf{u_{j}}$$$ and $$$\\mathbf{v_{j}}$$$\nhave occurred.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$.\n  $$$\\mathbf{T}$$$ test cases follow.\n</p>\n<p>\n  The first line of each test case contains two integers $$$\\mathbf{N}$$$ and $$$\\mathbf{Q}$$$ denoting the number of events and\n  number of queries, respectively.\n  $$$\\mathbf{N}$$$ lines follow. The $$$i$$$-th line describes event $$$i$$$.\nThe first line contains a single integer $$$\\mathbf{K}$$$ denoting\n  the probability of occurrence of event $$$1$$$ multiplied by $$$10^6$$$. Each of the next $$$\\mathbf{N}-1$$$ lines consists of three\n  integers $$$\\mathbf{P_{i}}$$$,  $$$\\mathbf{A_{i}}$$$ and $$$\\mathbf{B_{i}}$$$ denoting\n  the parent event of event $$$i$$$, the probability of occurrence of event $$$i$$$ if its parent event occurs multiplied by $$$10^6$$$, and the probability of occurrence\n  of event $$$i$$$ if its parent event does not occur multiplied by $$$10^6$$$, respectively.\n  Then, $$$\\mathbf{Q}$$$ lines follow, describing the queries.\n  Each of these lines contains two distinct integers $$$\\mathbf{u_{j}}$$$ and $$$\\mathbf{v_{j}}$$$. For each\n  query, find the probability that both events $$$\\mathbf{u_{j}}$$$ and $$$\\mathbf{v_{j}}$$$ occurred.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$R_{1} \\ R_{2} \\ R_{3} \\ \\dots \\ R_{Q}$$$</code>, where <code>$$$x$$$</code> is the\n  test case number (starting from 1) and $$$R_{j}$$$ is the sought probability computed for $$$j$$$-th query\n  <i>modulo</i> $$$10^9+7$$$, which is defined precisely as follows.\n  Represent the answer of $$$j$$$-th query as an irreducible fraction\n  $$$\\frac{p}{q}$$$. The number $$$R_{j}$$$ then must satisfy the modular equation\n  $$$R_{j} \\times q \\equiv p \\pmod{(10^{9} + 7)}$$$, and be between $$$0$$$ and\n  $$$10^9+6$$$, inclusive. It can be shown that under the constraints of this problem such a\n  number $$$R_{j}$$$ always exists and is uniquely determined.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 60 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n   $$$1 \\le \\mathbf{P_{i}} \\lt \\mathbf{i}$$$, for each $$$i$$$ from $$$2$$$ to $$$\\mathbf{N}$$$.<br/>\n   $$$1 \\le \\mathbf{u_{j}}, \\mathbf{v_{j}} \\le \\mathbf{N}$$$ and $$$ \\mathbf{u_{j}} \\neq \\mathbf{v_{j}} $$$, for all $$$j$$$.<br/>\n   $$$0 \\le \\mathbf{A_{i}} \\le 10^6$$$, for each $$$i$$$ from $$$2$$$ to $$$\\mathbf{N}$$$.<br/>\n  $$$0 \\le \\mathbf{B_{i}} \\le 10^6$$$, for each $$$i$$$ from $$$2$$$ to $$$\\mathbf{N}$$$.<br/>\n  $$$0 \\le \\mathbf{K} \\le 10^6$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n$$$2 \\le \\mathbf{N} \\le 1000$$$.<br/>\n$$$1 \\le \\mathbf{Q} \\le 1000$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\nFor at most 5 cases:<br/>\n$$$2 \\le \\mathbf{N} \\le 2 \\times 10^{5}$$$.<br/>\n$$$1 \\le \\mathbf{Q} \\le 2 \\times 10^{5}$$$.<br/>\n<br/>\nFor the remaining cases:<br/>\n$$$2 \\le \\mathbf{N} \\le 1000$$$.<br/>\n$$$1 \\le \\mathbf{Q} \\le 1000$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3IpR4IGWJWOAlpcCr3QmjtqWoqxAq5aWJlF7tj0kreZgGVVAXLXs4KBgGjtVadwWQACggLJaaQKGAb3Yia19paoGY7esrPtABKUwmPp7-9/dependent_events_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5 2\n200000\n1 400000 300000\n2 500000 200000\n1 800000 100000\n4 200000 400000\n1 5\n3 5\n4 2\n300000\n1 100000 100000\n2 300000 400000\n3 500000 600000\n1 2\n2 4\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1lJr1kbcUbsfyogKoapIAXf7xahsqsAf2-jh3F2VvPXUT68cG5WqwII5bFiUNOddwzlhheGVhNOKS5hOFAVIzl5yrH3s_VcxgA64m7xbEqfg/dependent_events_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 136000001 556640004\nCase #2: 710000005 849000006\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  For Sample Case #1, for the first query, the probability that both events\n  $$$1$$$ and $$$5$$$ occurred is given by (the probability that event $$$1$$$ occurred) $$$\\times$$$\n  (probability that event $$$5$$$ occurs given event $$$1$$$ occurred).\n  Event $$$1$$$ would occur with probability $$$0.2$$$. Given that event $$$1$$$ occurred,\n  the probability that event $$$4$$$ occurs is $$$0.8$$$. Therefore, the probability of occurrence\n  of event $$$5$$$ given that event $$$1$$$ occurred is $$$0.2 \\times 0.8 + 0.4 \\times 0.2 = 0.24$$$\n  (probability of event $$$5$$$ occurring given than event $$$4$$$ occurred $$$+$$$ probability of event $$$5$$$\n  occurring given that event $$$4$$$ did not occur).\n  The probability that both events\n  $$$1$$$ and $$$5$$$ occurred is $$$0.2 \\times 0.24 = 0.048$$$. The answer $$$0.048$$$ can be converted into fraction of\n  $$$\\frac{6}{125}$$$, and one can confirm that the $$$136000001$$$ satisfies the conditions\n  mentioned in the output section as $$$136000001 \\times 125 \\equiv 6 \\pmod{ (10^{9} + 7)}$$$ and is uniquely determined.\n  For the second query, the probability that both events $$$5$$$ and $$$3$$$ occurred is\n  $$$0.10352$$$.\n  </p>\n<p>\n  For Sample Case #2, for the first query, the probability that both events $$$1$$$ and $$$2$$$ occurred\n  is given by (the probability that event $$$1$$$ occurred) $$$\\times$$$ (probability that event $$$2$$$ occurs given event $$$1$$$ occurred).\n  As $$$1$$$ is the parent event of event $$$2$$$, the\n  probability of event $$$2$$$ occurring given event $$$1$$$ occurred is $$$\\mathbf{A_{2}}$$$ which is $$$0.1$$$.\n  Hence, the probability that both events $$$1$$$ and $$$2$$$ occurred\n  is $$$0.3 \\times 0.1$$$. Hence, the output will be $$$ 3 \\times 10^{-2} \\bmod (10^9+7) = 710000005$$$.\n  For the second query, the probability of occurrence\n  of both events $$$2$$$ and $$$4$$$ is $$$0.057$$$.\n  </p>\n\n  \n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":18},{"type":1,"type__str":"VISIBLE","value":22}],"title":"Dependent Events","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Given the three primary colors: <i>Red</i>, <i>Yellow</i>, and <i>Blue</i>, we need to determine\n  the minimum number of strokes required to paint a 1-dimensional painting $$$\\mathbf{P}$$$ of length $$$\\mathbf{N}$$$. In $$$1$$$ stroke,\n  you can choose a color either <i>Red</i>, <i>Yellow</i>, or <i>Blue</i>, and two integers\n  $$$l$$$ and $$$r$$$,  such that $$$1 \\le l \\le r \\le \\mathbf{N}$$$, and apply the chosen color\n  to all squares $$$\\mathbf{P_j}$$$ such that $$$l \\le j \\le r$$$.\n</p>\n\n<p>\n  Note as the colors: <i>Red</i>, <i>Yellow</i>, and <i>Blue</i> are independent of each other and\n  the proportion and order of each color in the combination does not matter, the minimum number of\n  strokes to complete the paining will be the minimum number of <i>Red</i> strokes $$$+$$$ minimum\n  number of <i>Blue</i> strokes $$$+$$$ minimum number of <i>Yellow</i> strokes.\n</p>\n\n<p>\n  Let $$$F(x)$$$ be the minimum number of strokes\n  needed of primary color $$$x$$$. Notice minimum number of strokes of $$$x$$$ is same as number of\n  continuous blocks of squares that will need the primary color $$$x$$$ to form the required color.\n  To find $$$F(x)$$$ we will start from the leftmost end of the squares.\n  Whenever we encounter a square either with the color $$$x$$$ or with some color $$$y$$$ which is a\n  combination of $$$x$$$ and other primary colors, we paint the squares with the\n  color $$$x$$$ in $$$1$$$ stroke until we reach the rightmost end, or some color $$$y$$$\n  which is neither $$$x$$$ nor a combination of $$$x$$$ and any other primary color. We continue\n  this until we have encountered all the squares. The number of strokes used is equal to $$$F(x)$$$.\n</p>\n\n<h3>\n    Test Set 1\n</h3>\n\n<p>\n  We are given that $$$\\mathbf{P_i}$$$ will be one of {$$$Y, B, G$$$}. The final answer will be $$$F(Yellow) + F(Blue)$$$.\n</p>\n\n<p>\n<i>Complexity : $$$O(\\mathbf{N})$$$ per test case</i>\n</p>\n\n<h3>\n    Test Set 2\n</h3>\n\n<p>\n  We are given that $$$\\mathbf{P_i}$$$ will be one of {$$$U, R, Y, B, O, P, G, A$$$}. The final answer\n  will be $$$F(Red) + F(Yellow) + F(Blue)$$$.\n</p>\n\n<p>\n<i>Complexity : $$$O(\\mathbf{N})$$$ per test case</i>\n</p>\n\n<h5>Sample Code(C++)</h5>\n<pre><code class=\"language-cpp\">\n<var>int</var> minimum_number_of_strokes_for_primary_color_x(<var>string</var> S, <var>int</var> N, <var>char</var> x, map<<var>char, string</var>> color_to_primary_colors_mapping) {\n  <var>int</var> min_strokes = 0;\n  <var>int</var> last_stroke_position = INT_MIN;\n  for(<var>int</var> i = 0; i < N; i++) {\n    if (S[i] == 'U') {\n      continue;\n    }\n    if(S[i] == x || color_to_primary_colors[S[i]].find(x) != string::npos) {\n      if (last_stroke_position != i - 1) {\n        min_strokes++;\n      }\n      last_stroke_position = i;\n    }\n  }\n  return min_strokes;\n}\n</code></pre>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3wPcKNpaWwW6gKMn6hHp-PZqEXl47tMRHZrocui3oMJLV-frp_7Mj4g0jFHYvE_Zi8P3AAipm-/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000008d9a88","statement":"<h3>Problem</h3>\n<p>\n  You have recently started to study how to paint, and in one of the first classes\n  you learned about the three primary colors: <i>Red</i>, <i>Yellow</i>, and <i>Blue</i>.\n  If you combine these colors, you can produce many more colors.\n  For now, the combinations that you have studied are the following:\n</p>\n<ul>\n  <li><i>Red</i> + <i>Yellow</i> = <i>Orange</i></li>\n  <li><i>Red</i> + <i>Blue</i> = <i>Purple</i></li>\n  <li><i>Yellow</i> + <i>Blue</i> = <i>Green</i></li>\n  <li><i>Red</i> + <i>Yellow</i> + <i>Blue</i> = <i>Gray</i></li>\n</ul>\n<p>\n  You still do not understand shades of colors, therefore the proportion and order\n  of each color in the combination does not matter.\n  For example, combining <i>Red</i> and <i>Yellow</i> produces the same result\n  as combining <i>Yellow</i> and <i>Red</i>,\n  as well as the same result as combining <i>Red</i>, <i>Yellow</i>, and <i>Red</i> again.\n</p>\n<p>\n  To practice your skills, you want to paint a 1-dimensional painting $$$\\mathbf{P}$$$ of length $$$\\mathbf{N}$$$.\n  Your painting consists of $$$\\mathbf{N}$$$ squares.\n  From left to right, $$$\\mathbf{P_i}$$$ represents the color of the i-th square.\n  Initially all squares are <i>Uncolored</i>, that is,\n  $$$\\mathbf{P_i}$$$ = <i>Uncolored</i> for every $$$1 \\le i \\le \\mathbf{N}$$$.\n</p>\n<p>\n  In a single stroke, you can choose one of the three primary colors and apply it to a sequence of\n  consecutive squares.\n  In other words, you can choose a color $$$c$$$ and two integers $$$l$$$ and $$$r$$$,\n  such that $$$1 \\le l \\le r \\le \\mathbf{N}$$$,\n  and apply color $$$c$$$ to all squares $$$\\mathbf{P_j}$$$ such that $$$l \\le j \\le r$$$.\n  If the square being painted is currently <i>Uncolored</i>, then its color will become $$$c$$$.\n  Otherwise, the color will be a combination of all the colors applied on this square so far\n  and the new color $$$c$$$, as described in the list above.\n</p>\n<p>\n  In order to save time, you want to use as few strokes as possible.\n  Given the description of the painting that you want to paint,\n  figure out what is the minimum number of strokes required to paint it.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n</p>\n<p>\n  Each test case starts with a line containing an integer $$$\\mathbf{N}$$$, representing the length of\n  the painting.\n  Then on the next line, there will be a string $$$\\mathbf{P}$$$ of length $$$\\mathbf{N}$$$, representing the painting.\n  The $$$i$$$-th character represents the color of square $$$\\mathbf{P_i}$$$, according to the following list:\n</p>\n<ul>\n  <li><code>U</code> = <i>Uncolored</i></li>\n  <li><code>R</code> = <i>Red</i></li>\n  <li><code>Y</code> = <i>Yellow</i></li>\n  <li><code>B</code> = <i>Blue</i></li>\n  <li><code>O</code> = <i>Orange</i></li>\n  <li><code>P</code> = <i>Purple</i></li>\n  <li><code>G</code> = <i>Green</i></li>\n  <li><code>A</code> = <i>Gray</i></li>\n</ul>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\n  where $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is\n  the minimum number of strokes required to paint the painting.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$1 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  $$$\\mathbf{P_i}$$$ will be one of {<code>Y, B, G</code>}.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n  $$$\\mathbf{P_i}$$$ will be one of {<code>U, R, Y, B, O, P, G, A</code>}.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3yN1L_x3F3XZGxncA2tdUTs0gVmZBYqkjGts_xt-TchKVJ3ZIpfH_wkqTi4sHwllYu5Od83ob4UTEQgt9f152Xk2KoCDOC/painter_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n9\nYYYBBBYYY\n6\nYYGGBB\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0Bsu1li08MWjKEaEcmIE1DjsCjqlXW-SkeYo7jxfSbyvX9keupb8qt-svF8owG_ELnqgHCnEt-LI1OZDczyrobBh1DH2AyQw/painter_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the solution is to make $$$3$$$ strokes:\n  the first one using color <i>Yellow</i> from square $$$1$$$ through $$$3$$$,\n  the second one using color <i>Blue</i> from square $$$4$$$ through $$$6$$$,\n  and the third one using color <i>Yellow</i> from square $$$7$$$ through $$$9$$$.\n  Notice that this particular painting required only primary colors.\n</p>\n<p>\n  In Sample Case #2, the solution is to make $$$2$$$ strokes:\n  the first one using color <i>Yellow</i> from square $$$1$$$ through $$$4$$$,\n  and the second one using color <i>Blue</i> from square $$$3$$$ through $$$6$$$.\n  Notice that squares $$$3$$$ and $$$4$$$ will be painted with both colors\n  <i>Yellow</i> and <i>Blue</i>, which will result on it being <i>Green</i>.\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1UNuLjy583ZPOjhYzt9czQbnugwPlUW_VlhiuE9Mqbd-ssYbaUa7_qqQDH3V8ZDTYVNDL9jsPtSmf8uLXbrDk5t99Qu6h9/painter_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">1\n5\nROAOR\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3RkLBDpBeTTWNrn-QmAyXgsHVNTHrKrmcYJWs4n97qYRezVwILW-EuG0sBeTa90O3b1WwxJNGHPQW55DDx6IpCpV-OEQPOAQ/painter_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #3, the solution is to make $$$3$$$ strokes:\n  the first one using color <i>Red</i> from square $$$1$$$ through $$$5$$$,\n  the second one using color <i>Yellow</i> from square $$$2$$$ through $$$4$$$,\n  and the third one using color <i>Blue</i> on square $$$3$$$.\n  Notice that square $$$3$$$ is painted with all three primary colors,\n  which will result in it being <i>Gray</i>.\n</p>\n\n  \n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":9},{"type":1,"type__str":"VISIBLE","value":11}],"title":"Painter","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Let us first define the two operations that we can perform.</p>\n<ul>\n  <li><b>Clockwise</b>: Changing a letter to the one following it. For example, changing from <code>c</code> to <code>d</code>.</li>\n  <li><b>Counter-clockwise</b>: Changing a letter to the one preceding it. For example, changing from <code>a</code> to <code>z</code>.</li>\n</ul>\n<p>\nLet us denote the <a href=\"https://en.wikipedia.org/wiki/ASCII\" target=\"_blank\">ASCII</a> value of a character $$$c_x$$$ by $$$ASCII(c_x)$$$.\nIf we move the padlock from a character $$$c_a$$$ to another character $$$c_b$$$ such that $$$ASCII(c_a) &lt; ASCII(c_b)$$$,\nthe number of operations required in clockwise direction = $$$ASCII(c_b) - ASCII(c_a)$$$ and the number of\noperations required in counter-clockwise direction = $$$26 - (ASCII(c_b) - ASCII(c_a))$$$.\n</p>\n\n<p>\nFor example, if we move the padlock from <code>c</code> to <code>e</code>:\n</p>\n<ul>\n  <li>Number of operations required in clockwise direction = $$$ASCII(e) - ASCII(c) = 2$$$.</li>\n  <li>Number of operations required in counter-clockwise direction = $$$26 - (ASCII(e) - ASCII(c)) = 24$$$.</li>\n</ul>\n<p>\nSimilarly, if we move the padlock from a character $$$c_a$$$ to another character $$$c_b$$$ such that $$$ASCII(c_a) &gt; ASCII(c_b)$$$,\nthe number of operations required in clockwise direction = $$$26 - (ASCII(c_a) - ASCII(c_b))$$$ and the number\nof operations required in counter-clockwise direction = $$$ASCII(c_a) - ASCII(c_b))$$$.\n</p>\n<p>\n  For example, if we move the padlock from <code>g</code> to <code>b</code>:\n</p>\n <ul>\n  <li>Number of operations required in clockwise direction = $$$26 - (ASCII(g) - ASCII(b)) = 21$$$.</li>\n  <li>Number of operations required in counter-clockwise direction = $$$ASCII(g) - ASCII(b) = 5$$$.</li>\n</ul>\n\n<p>\nThus minimum number of operations required to change a character in the padlock from $$$c_a$$$ to $$$c_b$$$ =\n  $$$min(abs(ASCII(c_a) - ASCII(c_b)), 26 - abs(ASCII(c_a) - ASCII(c_b)))$$$.\n</p>\n<p>\nLet us call the above expression $$$f(c_a, c_b)$$$.\n</p>\n\n<h3>\n  Approach 1\n</h3>\n<h4>\n  Test Set 1\n</h4>\n<p>\n  When length of $$$\\mathbf{F}$$$ = $$$1$$$ we need to change every character in $$$\\mathbf{S}$$$ to that in $$$\\mathbf{F}$$$.\n  Therefore, the answer is the sum of $$$f(c_s, c_f)$$$ for every character $$$c_s$$$ in $$$\\mathbf{S}$$$ and $$$c_f$$$ in $$$\\mathbf{F}$$$.\n</p>\n\n<h4>\n  Test Set 2\n</h4>\n<p>\n  For this case, $$$\\mathbf{F}$$$ can have multiple characters.\n</p>\n<p>\n  For each character in $$$\\mathbf{S}$$$ we need to find a character\n  in $$$\\mathbf{F}$$$ such that $$$f(c_s, c_f)$$$ is minimized. Therefore, for every character $$$c_s$$$ in $$$\\mathbf{S}$$$,\n  we iterate over all possible characters $$$c_f$$$ in $$$\\mathbf{F}$$$ and find minimum of $$$f(c_s, c_f)$$$ and\n  add the minimum value to the final answer.\n</p>\n\n<h3>\n  Approach 2\n</h3>\n  <p>For each character in $$$\\mathbf{S}$$$, move the padlock in the clockwise direction and count the number of operations until we reach a character that\n  belongs to $$$\\mathbf{F}$$$. Similarly, for the same character in $$$\\mathbf{S}$$$, move the padlock in the counter-clockwise direction and count the number of operations\n  until we reach a character that belongs to $$$\\mathbf{F}$$$. Compare the number of operations in both directions and add minimum of the two to the final answer.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1F9jwvT9CysglxQmR4sTTO21PnJ4r_h7bq7jntUSRqbZL9VCX_OmilIMqovQY2-gPrKxhUsX_M/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000008da461","statement":"<h3>Problem</h3>\n<p>\n  You are given a string $$$\\mathbf{S}$$$ which denotes a padlock consisting of lower case English letters. You\n  are also given a string\n  $$$\\mathbf{F}$$$ consisting of set of favorite lower case English letters.\n  You are allowed to perform several operations on the padlock. In each operation, you can change one\n  letter of the string to the one following it or preceding it in the alphabetical order. For example: for\n  the letter <code>c</code>, you are allowed to change it to either <code>b</code> or <code>d</code> in an operation.\n  The letters can be considered in a cyclic order, i.e., the preceding letter for letter <code>a</code>\n  would be letter <code>z</code>. Similarly, the following letter for letter <code>z</code> would be letter <code>a</code>.\n</p>\n\n<p>\n  Your aim is to find the minimum number of operations that are required such that each letter in string $$$\\mathbf{S}$$$\n  after applying the operations, is present in string $$$\\mathbf{F}$$$.\n</p>\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n\n</p>\n<p>\n  Each test case consists of two lines.<br/>\n  The first line of each test case contains the string $$$\\mathbf{S}$$$.<br/>\n  The second line of each test case contains the string $$$\\mathbf{F}$$$.\n</p>\n\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1)\n  and $$$y$$$ is the minimum number of operations that are required such that each letter in string $$$\\mathbf{S}$$$\n  after applying the operations, is one of the characters in string $$$\\mathbf{F}$$$.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le$$$ the length of $$$\\mathbf{S} \\le 10^5$$$.<br/>\n$$$\\mathbf{S}$$$ only consists of lower case English letters.<br/>\n$$$\\mathbf{F}$$$ only consists of distinct lower case English letters.<br/>\nThe letters in string $$$\\mathbf{F}$$$ are lexicographically sorted.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\nThe length of $$$\\mathbf{F} = 1$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n$$$1 \\le $$$ the length of $$$\\mathbf{F} \\le 26$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0v0aKpIuHqEHYvubYOb55NNyWUc23V6bvleONBDhoRahkj4izXwJeTVYFXYa8WXOjEqCfSStecICfIg3rTFCkQJYIKzCf0Il9hB8CKUcS_Ss9ofA/transform_the_string_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\nabcd\na\npppp\np\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2f9eD1STf7xgdYg61Pg5cGa_ODGBwa-A-OrO5madWGMGetJ2z9duqdyDSjmNL8gL5H0yZfc47WOdUh3zEX6ZTyguo2tpFPU5aqCu0qiYDud1ntVq0/transform_the_string_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 6\nCase #2: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n    In Sample Case #1, all the letters in string $$$\\mathbf{S}$$$ should be converted to letter <code>a</code>.\n  We can keep on changing the letters to its preceding letter till we reach the letter <code>a</code>.\n  We do not need to change the first letter as it is already <code>a</code>. The second letter needs\n  $$$1$$$ operation to change it to <code>a</code>. The third letter needs\n  $$$2$$$ operations to change it to <code>a</code>. The fourth letter needs\n  $$$3$$$ operation to change it to <code>a</code>. Hence, we need a total of $$$6$$$ operations to\n  change string $$$\\mathbf{S}$$$ such that all letters are changed to <code>a</code>.\n  </p>\n\n  <p>\n  In Sample Case #2, string $$$\\mathbf{S}$$$ already contains only the favorite letter from string $$$\\mathbf{F}$$$.\n  Hence, we do not require any more operations.\n  </p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0E9_WVIvkKsYaXgwKeq8Q_qmzFvIiRitvV8dv29LkKCmEgkEahpXcaYWJ4PY6t28qPZgHb4W_bXpZv1-X229jC8KAh_SmcJoNFpDKM32gwkoa7sg/transform_the_string_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">3\npqrst\nou\nabd\nabd\naaaaaaaaaaaaaaab\naceg\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3eCp1wz7FjTnbO9fOIHplDqDF9PnbzBtef8Xa9BOQ_FLQECGmzYtL5tIi-epfwKHpeXkUJ0czhLcWemDVvUXfPmxknTf18kXLx6R8E0TJua7th6oo/transform_the_string_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 9\nCase #2: 0\nCase #3: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n    In Sample Case #1, all the letters in string $$$\\mathbf{S}$$$ should be converted to either the letter\n  <code>o</code> or the letter <code>u</code>.\n  For the first and second letters it is optimal to change them to preceding letters till they are changed\n  to letter <code>o</code>. The first letter would take $$$1$$$ operation to change to letter <code>o</code>.\n  The second letter would take $$$2$$$ operations to change to letter <code>o</code>.\n  For fourth and fifth letters it is optimal to change them to following letters till they are changed\n  to letter <code>u</code>. The fourth letter would take $$$2$$$ operations to change to letter <code>u</code>.\n  The fifth letter would take $$$1$$$ operation to change to letter <code>u</code>.\n  We can change the third letter to either <code>o</code> or <code>u</code> as both of them would require\n  $$$3$$$ operations.\n  Hence, we need a total of $$$9$$$ operations to\n  change string $$$\\mathbf{S}$$$ such that all letters are changed to either <code>o</code> or <code>u</code>.\n</p>\n\n<p>\n  In Sample Case #2, string $$$\\mathbf{S}$$$ already contains only the favorite letters from string $$$\\mathbf{F}$$$.\n  Hence, we do not require any more operations.\n  </p>\n\n  <p>\n    In Sample Case #3, we only need to change the last letter <code>b</code> to either <code>a</code> or <code>c</code>.\n    Thus, we only need $$$1$$$ operation.\n  </p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":6},{"type":1,"type__str":"VISIBLE","value":8}],"title":"Transform the String","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000435914","type":1,"type__str":"SPECTATOR"},"title":"Round H 2021"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
