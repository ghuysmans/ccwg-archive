{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1538344800000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000050e07","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  This Kickstart round began with <i>Common Anagrams</i>, which was a simple strings problem.\n  Then came <i>Specializing Villages</i>, which required some good graph theory insights.\n  Finally, we had <i>Palindromic Sequence</i>, whose large dataset involved an elegant observation on the possible characters of the required string.\n</p><p>\n  Thanks to everyone who participated!\n</p>\n<hr>\n<p>\n  <b>Cast</b>\n</p><p>\n  Problem A (Common Anagrams): Written by Kevin Tran and prepared by Satyaki Upadhyayâ€Ž.\n</p><p>\n  Problem B (Specializing Villages): Written and prepared by Lin Jin.\n</p><p>\n  Problem C (Palindromic Sequence): Written and prepared by Kevin Tran.\n</p><p>\n  Solutions, other problem preparation, reviews and contest monitoring by Akashdeep Nain, Ian Tullis, Jonathan Irvin Gunawan, Kevin Tran, Lalit Kundu, Satyaki Upadhyay, Shashank Gupta and Yang Xiao.\n</p>\n</p>\n<p>\nAnalysis authors:\n</p>\n<ul>\n  <li>Common Anagrams: Jonathan Irvin Gunawan</li>\n  <li>Specializing Villages: Lin Jin</li>\n  <li>Palindromic Sequence: Kevin Tran</li>\n</ul>\n","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1538334000000,"tasks":[{"analysis":"<h2>Common Anagrams: Analysis</h2>\n<h3>Small and Large dataset</h3>\n<p>\n  We can create a boolean function f(i, j, k, l) that returns whether the substring from the i-th\n  through the j-th characters of <b>A</b> (inclusive) is anagrammatic to the substring from the k-th\n  through the l-th characters of <b>B</b> (inclusive).\n</p><p>\n  To do this for the Small dataset, we only need to check that both substrings contain the same number of <code>A</code>s\n  and the same number of <code>B</code>s.\n</p><p>\n  To do this for the Large dataset, we can loop from i to j to get the number of occurrences of each character in <b>A</b>[i .. j].\n  Similarly, we also loop from k to l to get the occurrences of each character in <b>B</b>[k .. l].\n  We then check whether each character occurs the same number of times in the two substrings.\n</p><p>\n  We want to return the number of ordered pairs (i, j) such that there exists an ordered pair (k, l)\n  satisfying f(i, j, k, l). Since computing a single value of f(i, j, k, l) takes O(<b>L</b>), this\n  solution runs in O(<b>L</b><sup>5</sup>) time. We can optimize this by observing that if\n  j - i &ne; l - k, then f(i, j, k, l) will certainly return false. Therefore, for each value of\n  (i, j, k) we only need to check f(i, j, k, k + (j - i)). This removes one O(<b>L</b>) loop and\n  improves the algorithm to O(<b>L</b><sup>4</sup>) time.\n</p>\n\n<h3>Further improvements</h3>\n<p>\n  Although O(<b>L</b><sup>4</sup>) is fast enough, we can improve the algorithm further.\n  Instead of looping through all substrings of <b>B</b> for each substring of <b>A</b>, we can do\n  some preprocessing. Before we even process <b>A</b>, we can loop through all substrings of\n  <b>B</b>. For each substring, we count the occurrences of each character and store it in a\n  hashset. Note that this can be done in O(<b>L</b><sup>2</sup>) time, since we can use the\n  character occurrences of B[i .. j] to compute the character occurrences of B[i .. j+1].\n</p><p>\n  Once the preprocess is complete, we can loop through all substrings of <b>A</b>. Simiarly, for\n  each substring, we count the occurrences of each character. We then check whether these\n  occurrences of characters are present in our set. If they are, we can increment our answer\n  counter. We can also do this in O(<b>L</b><sup>2</sup>) time.\n</p><p>\n  Therefore, this solution runs in O(<b>L</b><sup>2</sup>) time overall.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2oP-ZA329XySUaWeFLLb-WhabZNwIYUN742bUKMV4sJ6LG0VX6KMfGkJdp8wfp0RSWdpuYrg/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000000510f2","statement":"<h3>Problem</h3>\n<p>\n  Ayla has two strings <b>A</b> and <b>B</b>, each of length <b>L</b>, and each of which is made of uppercase English alphabet letters.\n  She would like to know how many different substrings of <b>A</b> appear as anagrammatic substrings of <b>B</b>. More formally, she\n  wants the number of different ordered tuples (i, j), with 0 &le; i &le; j &lt; <b>L</b>, such that the i-th through j-th characters\n  of <b>A</b> (inclusive) are the same multiset of characters as at least one contiguous substring of length (j - i + 1) in <b>B</b>.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each test case\n  starts with one line, containing <b>L</b>: the length of the string.\n  The next two lines contain one string of <b>L</b> characters each: these are strings <b>A</b> and <b>B</b>, in that order.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the answer Ayla wants, as described above.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1 GB.<br/>\n  1 &le; <b>L</b> &le; 50.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  The two strings <b>A</b> and <b>B</b> will consist only of the characters <code>A</code> and <code>B</code>.\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  No additional constraints.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1PnpRYsk_JTAbiAaXoh8L47NC_6MQt8zXBk8WrXOMG7l-VS1Idik6plWxhCKfLFB7Ymf6IGtJaMJzvOBnjLVfEuGeLhFZ5gr_8rQQL/common_anagrams_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">6\n3\nABB\nBAB\n3\nBAB\nABB\n6\nCATYYY\nXXXTAC\n9\nSUBXXXXXX\nSUBBUSUSB\n4\nAAAA\nAAAA\n19\nPLEASEHELPIMTRAPPED\nINAKICKSTARTFACTORY\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3HpZnK3peFCXeTmmge10c29KeoLVAKjtbB98pkGz_u42GBZ6hO48zgsS9oRq704NWEPDzYraXKK7BpaLK4qtIi6ohi7qy7RItlH_NT2g/common_anagrams_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 5\nCase #2: 6\nCase #3: 6\nCase #4: 6\nCase #5: 10\nCase #6: 9\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, <b>L</b> = 3, <b>A</b> = <code>ABB</code>, and <b>B</b> = <code>BAB</code>\n  There are 6 substrings of <b>A</b>:\n  <ul>\n    <li> <code>A</code>. The substring <code>A</code> in <b>B</b> is (trivially) an anagram.</li>\n    <li> <code>B</code>. The substring <code>B</code> in <b>B</b> is (trivially) an anagram.</li>\n    <li> <code>B</code>. The substring <code>B</code> in <b>B</b> is (trivially) an anagram.</li>\n    <li> <code>AB</code>. The substring <code>AB</code> in <b>B</b> is (trivially) an anagram.</li>\n    <li> <code>BB</code>. There is no corresponding anagrammatic substring in <b>B</b>.</li>\n    <li> <code>ABB</code>. The substring <code>BAB</code> in <b>B</b> is an anagram.</li>\n  </ul>\n</p>\n<p>\n  In total, there are 5 substrings with a corresponding anagrammatic substring in <b>B</b>,\n  so the answer is 5.\n</p>\n<p>\n  In Sample Case #2, note that it is the same as Sample Case #1, except that <b>A</b> and <b>B</b> are swapped.\n  This changes the answer to 6!\n</p>\n<p>\n  In Sample Case #3, note that the substring <code>CAT</code> in <b>A</b> has the corresponding substring\n  <code>TAC</code> in <b>B</b> which is an anagram. This still counts, even though the strings are at different\n  indices in their respective strings.\n</p>\n<p>\n  In Sample Case #4, note that although the substring <code>SUB</code> in <b>A</b> has several corresponding substrings\n  in <b>B</b> which are anagrams, it only counts once.\n</p>\n<p>\n  In Sample Case #5, note that every substring of <b>A</b> has a corresponding anagrammatic substring in <b>B</b>, so the answer\n  is 10.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":8},{"type":2,"type__str":"HIDDEN","value":10}],"title":"Common Anagrams","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Specializing Villages: Analysis</h2>\n\n<h3>Small dataset</h3>\n<p>\nFor the Small dataset, we can enumerate all plans, find the average of the distances for the villages,\nand count the plans with a minimal average distance.\n</p>\n\n<h3>Large dataset</h3>\n<p>\n  If each village can get the other food it needs from its nearest neighbor, then the average distance is clearly minimized.\n  We will show that it is possible to construct this situation.\n</p>\n\n<p>\n  For each village v, let l(v) be the numerical label of v,\n  r(v) be the shortest of the roads that have v as an endpoint,\n  d(v) be the distance of r(v),\n  and f(v) be the other village to which r(v) connects v.\n  We first sort the villages by increasing d(v).\n  Since two villages might share the same d(v), we break ties by increasing l(v).\n</p>\n\n<p>\n  Then, we handle each village in sorted order.\n  We assign v the opposite food of f(v);\n  if f(v) does not have a food assigned, we can assign either food to v.\n  How do we know this will not cause problems later in the process?\n  Well, this situation can only happen when d(f(v)) &ge; d(v).\n  But we know that r(v) connects f(v) and v, so d(f(v)) &le; d(v),\n  and thus d(f(v)) = d(v) in this case,\n  which implies r(f(v)) = r(v) and l(f(v)) &gt; l(v).\n  Since r(f(v)) = r(v), f(f(v)) = v, so f(v) will be assigned the opposite food of v when we get to it.\n</p>\n\n<p>\n  In our approach, some villages may have their food choices forced by the food choices of other villages, whereas some villages may be able to choose either food.\n  So, the count of optimal plans is 2<sup>N</sup>, where N is the number of villages that can choose.\n  N is equal to the size of {v | f(f(v)) = v and l(f(v)) &gt; l(v)}.\n</p>\n\n<p>\n  Roads with length 0 pose a special case.\n  If a 0-length road connects villages x and y,\n  any village v other than x and y with f(v) in {x, y} has two choices,\n  since it can get one food through r(v) and the other from a combination of r(v) and the 0-length road.\n  So, with a 0-length road present, the answer will be 2<sup>N</sup>,\n  where N is the size of {v | f(f(v)) = v and l(f(v)) &gt; l(v)} &cup; {v | d(v) &gt; 0 and d(f(v)) = 0}.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U33UMim75QxKF-BaviAI85Wqc4TVdKJtiLYsXSIjU3aNcBI_qOF0Y9Rm2jmGziLCpxjjhcHAw/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000051134","statement":"<h3>Problem</h3>\n<p>\nThe countryside of Kickstartia consists of <b>V</b> villages, connected by <b>E</b> bidirectional roads.\nBecause the citizens appreciate diversity in their road construction, no two roads have the same length.\nEach road connects exactly two villages, and no two roads connect the same two villages.\n</p>\n<p>\nThe new king, eager to show off his progressiveness, would like to create a plan in which each village will specialize\nin producing exactly one food: either fruit or vegetables.\n\nIf a village produces fruit, then they will find a shortest path (perhaps using multiple roads) to some village that produces vegetables.\nSimilarly, if a village produces vegetables, then they will find a shortest path to some village that produces fruit.\n</p>\n<p>\nTo keep things running smoothly, the king would like to minimize the average of the distances that each village needs to travel to get\nthe food that it does not produce.\n</p>\n<p>\nThere could be many plans that minimize this average distance, so the king would like you to tell him how many there are.\nTwo plans are different if there is a village that produces fruit in one plan, but vegetables in the other.\nThe king guarantees that it is possible to find a plan which allows each village to get both fruit and vegetables.\n</p>\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each test case starts\nwith one line, containing two integers <b>V</b> and <b>E</b>: the number of villages, and the number of roads, respectively.\nThe villages are labeled from 1 to <b>V</b>.\n<b>E</b> lines follow; the i-th of these lines contains three integers <b>A<sub>i</sub></b>, <b>B<sub>i</sub></b> and <b>L<sub>i</sub></b>,\nindicating that the i-th road connects village <b>A<sub>i</sub></b> to village <b>B<sub>i</sub></b> and has length <b>L<sub>i</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\nthe answer the king wants, as described above.\n</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 100.<br/>\nTime limit: 20 seconds per test set.<br/>\nMemory limit: 1 GB.<br/>\n1 &le; <b>E</b> &le; min(1000, <b>V</b> * (<b>V</b> - 1) / 2).<br/>\n0 &le; <b>L<sub>i</sub></b> &le; 10<sup>5</sup>, for all i.<br/>\n<b>L<sub>i</sub></b> &ne; <b>L<sub>j</sub></b> for all i &ne; j.<br/>\n1 &le; <b>A<sub>i</sub></b> &lt; <b>B<sub>i</sub></b> &le; <b>V</b>, for all i.<br/>\n(<b>A<sub>i</sub></b>, <b>B<sub>i</sub></b>) &ne; (<b>A<sub>j</sub></b>, <b>B<sub>j</sub></b>)\nfor all i &ne; j.<br/>\nThere is at least one plan that allows every village to get both types of food.\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n2 &le; <b>V</b> &le; 10.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n2 &le; <b>V</b> &le; 50.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3uvrAZz3-VSvP8tBixmwynmESBVE7OsMfXg96KtZEqsxJKB3FwtVtKKlc1hxVpNqfgaNnVNqAds850e8ctB6Ry0x2UJXJio1v9snIAvQDYBUNt/specializing_villages_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3 3\n1 2 1\n1 3 6\n2 3 4\n6 5\n1 2 6\n3 4 0\n5 6 7\n3 5 1\n4 6 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3UlDL18lt1vmjkcCYo__C5b8brkWRxhLxrfRs7nrInRhY5RI9PXLHV1tq8uAWkkwnzHiWfnzrbtH2eoZtMBK55lsdG2yyPyLvNJ3bFV_BvBVkPOQ/specializing_villages_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 16\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn Sample Case #1, one possible plan is to make villages 1 and 3 produce fruit and make village 2 produce vegetables.\nVillage 1 and 2 can travel to each other to get to the food they lack, so they both have to travel distance of 1.\nVillage 3 needs to travel to village 2 to get vegetables, traveling a distance of 4. In total, the average distance\nis (1 + 1 + 4)/3 = 2, which is the minimum possible.\nThere is one other optimal plan (in which villages 1 and 3 produce vegetables\nand village 2 produces fruit), so the final answer is 2.\n</p>\n\n<p>\nIn Sample Case #2, there are 16 possible plans.\nOne way is to have villages 1, 3 and 5 produce fruit while villages 2, 4 and 6 produce vegetables.\nVillage 1 and 2 must travel to each other to get to the food they lack.\nVillages 3 and 5 can travel to village 4 to get vegetables,\nwhile villages 4 and 6 can travel to village 3 to get fruit.\nThe average distance is (6 + 6 + 0 + 1 + 0 + 2)/6 = 2.5, which turns out to be the minimum possible.\nEven if two villages are connected by a road of length 0, they are considered to be distinct villages.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":12},{"type":2,"type__str":"HIDDEN","value":18}],"title":"Specializing Villages","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  To solve the Small dataset, we will build up the palindrome one letter at a time. Suppose we know\n  the first X letters of the <b>K</b>th lexicographically least palindrome. Call this prefix of\n  the answer S. We can guess the next letter and see how many palindromes there are with the new\n  prefix (we will address this computation shortly). If there are more than <b>K</b>,\n  then we know we need to guess a lexicographically smaller letter. Let P(S) denote the\n  number of palindromes of Hannah's language that have S as a prefix. Then we are looking for the\n  lexicographically largest character c such that P(S + c) &leq; <b>K</b>.\n  Naively, we have to make O(<b>NL</b>) guesses.\n</p><p>\n  So how do we actually calculate the number of possible continuations? Fortunately, the bounds are\n  Small enough that we don't need to do anything sophisticated. For every possible length M, check\n  and see if the current prefix S is consistent with a palindrome of length M. If it is, then there\n  are <b>L</b><sup>D</sup> possible palindromes of length M, where D = max(0, floor((M+1)/2) - X).\n  d represents the number of characters that can be freely chosen (the rest are fixed to keep the\n  string a palindrome).\n\n  This can be done naively in O(<b>N</b><sup>2</sup>) time. In total, the Small\n  can be solved in O(<b>N</b><sup>3</sup><b>L</b>) time.\n</p><p>\n  To solve the Large dataset, notice that when <b>K</b> &leq; <b>N</b>, the answer is\n  a string that consists of the letter <code>a</code> repeated <b>K</b> times. When <b>K</b> > <b>N</b>, it's\n  important to notice that the answer is very close to <b>N</b>.\n</p><p>\n  For example, consider the case when <b>N</b> = 10<sup>5</sup> and <b>L</b> = 2. How many\n  palindromes begin and end with 49900 letter <code>a</code>s? To make a rough count, let's consider only the\n  palindromes with length exactly <b>N</b>. Of the 200 letters between the <code>a</code>s, the first 100 are\n  unconstrained, while the last 100 have to match the corresponding letter in the first 100. In\n  total this is 2<sup>100</sup> different palindromes, which far exceeds that maximum bound\n  for <b>K</b> (10<sup>18</sup> is about 2<sup>60</sup>).\n</p><p>\n  The example above can be generalised to state that whenever <b>K</b> > <b>N</b>,\n  the <b>K</b>th palindrome will begin and end with at least <b>N</b>-log<sub><b>L</b></sub>(<b>K</b>) copies of\n  the letter <code>a</code>, leaving at most 2*log<sub><b>L</b></sub>(<b>K</b>) letters in the middle that might\n  not be the letter <code>a</code>. The algorithm in the Small dataset can be adapted to solve the Large dataset\n  after these observations have been made. 2*log<sub><b>L</b></sub>(<b>K</b>) is no more than 100, so\n  this has a similar running time to the Small dataset.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0wGpt7lw5E9n6jgQYQhROPaZT25LBDuFd49xqR9W5wEQm36RiYAukd8tfzKBa7ftUArXKzKw/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000051186","statement":"<h3>Problem</h3>\n<p>\n  Hannah is working on a new language which consists only of first <b>L</b> lowercase letters of the\n  English alphabet. She is obsessed with palindromes, which are words that read the same forward\n  and backward, e.g. <code>hannah</code> and <code>civic</code>.  She has written down all of the\n  words in her language of length at most <b>N</b>, that are also palindromes.\n</p>\n<p>\n  Now, she is interested in finding the length of the word that is lexicographically\n  <b>K</b><sup>th</sup> smallest among all the words she has written. A word composed of ordered\n  letters a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>p</sub>\n  is lexicographically smaller than word b<sub>1</sub>, b<sub>2</sub>, ..., b<sub>q</sub>\n  if a<sub>i</sub> &lt; b<sub>i</sub>, where i is the first index where\n  characters differ in the two words. Also, a prefix of a word is considered lexicographically\n  smaller than the word itself. For example, the following words are arranged in lexicographically\n  increasing order: <code>a</code>, <code>aa</code>, <code>aba</code>, <code>cabac</code>, <code>d</code>.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases\n  follow. Each test case consists of one line containing three integers\n  <b>L</b>, <b>N</b>, and <b>K</b>, as described above.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the\n  test case number (starting from 1) and <code>y</code> is the length of the lexicographically\n  <b>K</b><sup>th</sup> smallest palindromic word among all palindromic words of length at most <b>N</b>\n  in Hannah's language.<br/>\n  If no such word exists, output <code>0</code>.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1 GB.<br/>\n  1 &le; <b>L</b> &le; 26.<br/>\n  1 &le; <b>K</b> &le; 10<sup>12</sup>.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  1 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  1 &le; <b>N</b> &le; 10<sup>12</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0jD_E-zAfr2fdERHpFFMaccVeJjJxNF5uKRrRgWWW5UO4SniTQ8CaWY5mLnEw7qqp4yWFIvFLKBvtbxTfVOY4zBZCX9DvvmSYO2k84QxlHBNg/palindromic_sequence_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2 3 4\n2 3 9\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0p08QWOm-wv4QYwqaw-zF7qI26lzZ3fYUdpzhs4ZJ3cayf5IOkqrXysBLxUh1C-ar7C17Cxa7dVghgHSVLoEBHSg5p5OwlKGlfoah4NqcIo9sA/palindromic_sequence_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Cases #1 and #2, Hannah's language consists only of the letters <code>a</code> and <code>b</code>.\n  All the palindromic words of length at most 3 in\n  her language, in lexicographic order, are: <code>a</code>, <code>aa</code>, <code>aaa</code>,\n  <code>aba</code>, <code>b</code>, <code>bab</code>, <code>bb</code> and <code>bbb</code>.<br/>\n</p>\n<p>\n  In Sample Case #1, the fourth-smallest word is <code>aba</code>, which is 3 characters long, so we output 3.\n</p>\n<p>\n  In Sample Case #2, <b>K</b> exceeds the total number of possible words, and hence we output 0.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":22},{"type":2,"type__str":"HIDDEN","value":30}],"title":"Palindromic Sequence","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000050e07","type":1,"type__str":"SPECTATOR"},"title":"Round F"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
