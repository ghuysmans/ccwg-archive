{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1542528000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000050ee2","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  This Kickstart round was easier than our previous rounds and began with <i>Big Buttons</i>, which was a simple problem solvable by the <i>Trie</i> data structure.\n  Then came <i>Mural</i>, whose large dataset required an interesting insight, but a rather easy implementation.\n  Finally, we had <i>Let Me Count The Ways</i>, whose large dataset involved the use of the <i>inclusion-exclusion principle</i>.\n</p><p>\n  Thanks to everyone who participated!\n</p>\n<hr>\n<p>\n  <b>Cast</b>\n</p><p>\n  Problem A (Big Buttons): Written by Akashdeep Nain and prepared by Lalit Kundu.\n</p><p>\n  Problem B (Mural): Written by Zhang Che and prepared by Kevin Tran.\n</p><p>\n  Problem C (Let Me Count The Ways): Written by Chao Liâ€Ž and prepared by Yan Li.\n</p><p>\n  Solutions, other problem preparation, reviews and contest monitoring by Akashdeep Nain, Anirudh GP, Celestine Lau, Ian Tullis, Jonathan Irvin Gunawan, Himanshu Jaju, Kevin Tran, Lalit Kundu, Satyaki Upadhyay, Tony Wong and Yan Li.\n</p>\n</p>\n<p>\nAnalysis authors:\n</p>\n<ul>\n  <li>Big Buttons: Himanshu Jaju</li>\n  <li>Mural: Lalit Kundu</li>\n  <li>Let Me Count The Ways: Jonathan Irvin Gunawan</li>\n</ul>\n","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1542517200000,"tasks":[{"analysis":"<h2>Big Buttons: Analysis</h2>\n\n<h3>Small dataset</h3>\n<p>\n  Since we have 2 choices at every step, there are 2<b><sup>N</sup></b> possible strings of\n  length <b>N</b>. We can generate all of these strings in O(2<b><sup>N</sup></b>) time using\n  a naive recursion. For each string, we need to check if any of the <b>P</b> strings is its\n  prefix. A simple implementation of the above would run in\n  O(2<b><sup>N</sup></b> &times; <b>P</b> &times; <b>N</b>) time for each case. Since <b>N</b> &le; 10 in this\n  dataset, this is fast enough.\n</p>\n\n<h3>Large dataset</h3>\n<p>\n  In this dataset, since <b>N</b> can be as large as 50, it is not feasible to generate all 2<b><sup>N</sup></b>\n  strings. The main idea in solving the Large dataset is to find the number of invalid strings\n  of length <b>N</b> and subtract it from the total number of strings (2<b><sup>N</sup></b>).\n</p>\n<p>\n  If a forbidden prefix has length L, we have 2<sup>(<b>N</b> - L)</sup> invalid strings of length\n  <b>N</b> with that prefix. Also, if we have two strings A and B, and A is a prefix of B, then all\n  strings that have B as their prefix will also have A as their prefix. So we can remove all\n  forbidden prefixes that themselves begin with a different forbidden prefix to avoid overcounting\n  the sum of invalid strings.\n</p>\n<p>\n  We can now easily count the sum of invalid strings by finding the number\n  of invalid strings for each remaining forbidden prefix. We can remove redundant forbidden prefixes\n  in O(<b>P</b> &times; <b>P</b> &times; <b>N</b>) time, and find the counts of strings with the remaining\n  forbidden prefixes in O(<b>P</b> &times; <b>N</b>) time, so the overall running time is\n  O(<b>P</b><sup>2</sup><b>N</b>). This is fast enough to solve the Large data set, but can you see\n  how to improve the first step to O(<b>P</b> &times; <b>N</b>) time by using\n  a <a href=\"https://en.wikipedia.org/wiki/Trie\">trie</a>?\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3pzU6ASVXU99s-T5e718jBbp9HDxdP5YP8LbIbLYqowbF1WxYHChj-sWHSf5RhVZJHIoNh7g/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000051136","statement":"<h3>Problem</h3>\n<p>\n  You are a contestant on a popular new game show and are playing for the grand prize!\n</p><p>\n  There are two big buttons, a red one and a black one. You will make a sequence of exactly <b>N</b>\n  button presses.\n</p><p>\n  There are lots of different sequences of presses you could make, but there are <b>P</b>\n  forbidden prefixes, each of length no greater than <b>N</b>.\n  If you make a sequence of presses which begins with <i>any</i> of the forbidden sequences,\n  you will not win the grand prize.\n  It is fine for your sequence to contain one or more forbidden prefixes as long as they do not appear at the start of your sequence.\n</p><p>\n  A <i>winning</i> sequence must consist of exactly <b>N</b> button presses and must not begin with one of the forbidden prefixes.\n  How many different winning sequences are there?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case starts with a line containing two integers <b>N</b> and <b>P</b>, as described above.\n  Then, there are <b>P</b> more lines, each of which contains a string of between 1 and <b>N</b> characters, inclusive,\n  describing one of the forbidden sequences of presses. An <code>R</code> represents pressing\n  the red button, whereas a <code>B</code> represents pressing the black button.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is the\n  number of winning sequences, as desribed above.\n</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 100.<br/>\nTime limit: 20 seconds per test set.<br/>\nMemory limit: 1 GB.<br/>\n1 &le; <b>P</b> &le; min(2<sup><b>N</b></sup>, 100).<br/>\nEach forbidden prefix is between 1 and <b>N</b> characters long, inclusive.<br/>\nNo two forbidden prefixes will be the same.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n1 &le; <b>N</b> &le; 10.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n1 &le; <b>N</b> &le; 50.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2zh9ODEStzHYE_MHrNHVkVNmvWOJXRej02QGLT9ifWw8EXe71pKQQuApGNSyHUFpU4-Tcl4sk4eOSUQxNOSzIpjK5wwDp5_wU/big_buttons_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3 2\nBBB\nRB\n5 1\nR\n4 3\nR\nB\nRBRB\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U19eaNhyw5dWsQQspVgQSFIqWSzxXRDlBkXStGzwQqEe_0VOXSbXzCoZyVpiXJ6LPQzv0ylQeLpPqKLaSK12VdCTXZjN-535gB4/big_buttons_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 5\nCase #2: 16\nCase #3: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In the first case, you must make a sequence of 3 presses. There are 8 possible sequences of three\n  presses, but some of them will cause you to lose the game. They are listed below:\n  <ul>\n    <li> <code>RBB</code>. This is forbidden since it starts with the first forbidden sequence (<code>RB</code>).</li>\n    <li> <code>RBR</code>. This is forbidden since it starts with the first forbidden sequence (<code>RB</code>).</li>\n    <li> <code>BBB</code>. This is forbidden since it starts with the second forbidden sequence (<code>BBB</code>).</li>\n  </ul>\n  Thus, there are only 5 winning sequences.\n</p><p>\n  In the second case, you must make a sequence of 5 presses. There is only one forbidden sequence,\n  which is <code>R</code>. This means that the first press must be <code>B</code>, and the next\n  4 presses can be either button. This gives a total of 16 different button presses.\n</p>\n<p>\n  In the third case, you must make a sequence of 4 presses. There are three forbidden sequences,\n  but since every possible sequence begins with either <code>R</code> (the first forbidden sequence) or\n  <code>B</code> (the second forbidden sequence), there are no winning sequences.\n  So the answer is 0.\n</p>\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Z-VxsRqD0jlc7PxmJAjQBArtSRv7_179F8tKTO0o2MLTGwjUHuoz_r4N1vf8ue9ShXOp85FsBJzz9CgdKBMhp5P5tTX9FnFo/big_buttons_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">1\n50 5\nBRBRBBBRBRRRBBB\nBRBRBRRRBRRRBRB\nBBBRBBBRBRRRBBB\nBRBRBRRRBRRRB\nBRBRBBBRBBBRB\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2hwC6d_BWbtmKSn6FqmUl0M1U_Nnp5iOIQK8yNqdxEBlZUSN9Mj9B7O2HIM59-2K7j9WOBWcf3wWDKzzYjfWa60FvjdPjZTed0/big_buttons_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 1125556309458944\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":9},{"type":2,"type__str":"HIDDEN","value":13}],"title":"Big Buttons","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Let Me Count The Ways: Analysis</h2>\n\n<h3>Small dataset</h3>\n<p>\n  We can solve the Small dataset using <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\">\n  dynamic programming</a>. Let <i>f(x, y, z)</i> (<i>x</i> and\n  <i>y</i> are non-negative integers, while <i>z</i> is 0 or 1) be the number of\n  ways to arrange a seating order for <i>x</i> non-newlywed people and <i>y</i> newlywed couples\n  (thus the total is <i>x</i> + 2<i>y</i> people and seats), such that:\n  <ul>\n    <li>There is no newlywed couple for which the two members are seated next to each other,\n        and</li>\n    <li>If <i>z</i> = 1, then one of the <i>x</i> non-newlywed people must not sit in the first\n        remaining unassigned seat.</li>\n  </ul>\n</p>\n<p>\n  The base case of this function occurs when there are no people left\n  (i.e. <i>x</i> = <i>y</i> = 0), then <i>f(x, y, z)</i> = 1. Otherwise, <i>f(x, y, 0)</i> can be\n  defined recursively as follows:\n  <ul>\n    <li>We can put one of the <i>x</i> non-newlywed people in the first seat. Therefore, we need to\n        assign the remaining <i>x</i> - 1 non-newlywed people and <i>y</i> newlywed couples. This\n        contributes <i>x</i> &times; <i>f(x - 1, y, 0)</i> to the total number of ways captured by\n        <i>f(x, y, 0)</i>.</li>\n    <li>We can put one of the member of the <i>y</i> newlywed couples in the first seat. The other\n        member of this couple can be considered as an additional non-newlywed person. Therefore, we\n        need to assign the remaining <i>x</i> + 1 non-newlywed people and <i>y</i> - 1 newlywed\n        couples. However, note that this additional person cannot be seated next to his/her newlywed\n        partner (i.e. cannot be seated on the first unassigned seat after his/her newlywed partner\n        sit down). Therefore, this contributes 2 &times; <i>y</i> &times; <i>f(x + 1, y - 1, 1)</i>\n        to the total number of ways captured by<i>f(x, y, 0)</i>.</li>\n  </ul>\n</p>\n<p>\n  Therefore, <i>f(x, y, 0)</i> =\n  <i>x</i> &times; <i>f(x - 1, y, 0)</i> + 2 &times; <i>y</i> &times; <i>f(x + 1, y - 1, 1)</i>. The\n  cases for <i>f(x, y, 1)</i> are similar, except that we can't put one of the <i>x</i> non-newlywed\n  people in the first seat. Therefore, <i>f(x, y, 1)</i> =\n  (<i>x</i> - 1) &times; <i>f(x - 1, y, 0)</i> + 2 &times; <i>y</i> &times; <i>f(x + 1, y - 1, 1)</i>.\n</p>\n<p>\n  This dynamic programming solution runs in O(<b>N</b> &times; <b>M</b>) space and time.\n</p>\n\n<h3>Large dataset</h3>\n<p>\n  We can solve the Large dataset using the\n  <a href=\"https://en.wikipedia.org/wiki/Inclusion%E2%80%93exclusion_principle\">inclusion-exclusion\n  principle</a>. Since <b>M</b> can be up to 100000, it is infeasible to iterate all possible subset\n  of the newlywed couples. However, we can observe that the number of ways to arrange a seating\n  order such that the newlywed couple P sits adjacently (i.e. the two members of a newlywed couple P\n  sit next to each other) is the same as the number of ways to arrange a seating order such that the\n  newlywed couple Q sits adjacently. In general, for a fixed number <i>k</i> of newlywed couples,\n  regardless of which particular couples we choose, the number of seating orders in which all of\n  those <i>k</i> newlywed couples have their two members adjacent is the same.\n</p>\n<p>\n  Therefore, we can define a function <i>g(k)</i> as the number of ways to arrange a seating order\n  such that for each of the first <i>k</i> newlywed couples, the two members of a couple are sitting\n  next to each other. <i>g(k)</i> can be computed by multiplying the following:\n  <ul>\n    <li>The number of ways these newlywed couples sit. Since the members of each newlywed couple\n        must sit next to each other, we can treat each newlywed couple as if it were one person.\n        Therefore, there are 2<b>N</b> - <i>k</i> seats for <i>k</i> couples. Since the couples are\n        not identical and the order of the couples matters, there are\n        C(2<b>N</b> - <i>k</i>, <i>k</i>) &times; <i>k</i>! ways, where C(n, k) is the number of\n        ways of picking k unordered outcomes from n possibilities (i.e. \"n choose k\").</li>\n    <li>The number of ways of ordering two people in each newlywed couple, which is\n        2<sup><i>k</i></sup>.</li>\n    <li>The number of ways in which the remaining people can sit, which is\n        (2(<b>N</b> - <i>k</i>))!.</li>\n  </ul>\n  Therefore, <i>g(k)</i> = C(2<b>N</b> - <i>k</i>, <i>k</i>) &times; <i>k</i>! &times;\n  2<sup><i>k</i></sup> &times; (2(<b>N</b> - <i>k</i>))!\n</p>\n<p>\n  Finally, we should not forget that <i>g(k)</i> counts the number of ways to arrange a seating\n  order such that the first <i>k</i> newlywed couples sit adjacently. To consider all subset of\n  newlywed couples of size <i>k</i>, we need to multiply <i>g(k)</i> by C(<b>M</b>, <i>k</i>).\n</p>\n<p>\n  Putting all the pieces together, the answer we are looking for is\n  &Sigma; (-1)<sup><i>k</i></sup> &times; <i>g(k)</i> &times; C(<b>M</b>, <i>k</i>) for all\n  0 &le; <i>k</i> &le; <b>M</b>. By precomputing the value of powers of two, factorials, and their\n  modular inverses, this answer can be computed in O(<b>N</b> + <b>M</b>) space and time.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U24oT2FYMnjyRc_x09m52NJ5bB_K0RSGADAPEPbclpS9W_jigDZZ4RGEvpMWawCWbrs-SuNpA/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000051189","statement":"<h3>Problem</h3>\n\n<p>\n  To celebrate the anniversary of Googleland, <b>N</b> couples are\n  going to go for a boat ride in a rowboat. The rowboat is very long, but it is only one person\n  wide, so the people will sit in a line from front to back.\n</p>\n\n<p>\n  However, during a rehearsal of the voyage, the boat did not move! After investigating, the\n  organizers found that some newlywed couples were not rowing, but writing love poems for each\n  other the whole time. Specifically, there are <b>M</b> pairs of newlywed couples. If the two\n  members of a newlywed couple are sitting next to each other, they will be so busy writing\n  poems that they will not row.\n</p>\n\n<p>\n  Now the organizers have come to you, the smartest person in Googleland, to ask, how many possible\n  ways are there to arrange all 2<b>N</b> people on the rowboat, such that for each of the\n  <b>M</b> newlywed couples, the two members are not sitting next to each other?\n  Two ways are different if there is some position in the boat at which the two ways use\n  different people. Notice that for the purpose of counting the number of ways, the two\n  members of a couple are not considered to be interchangeable.\n\n  Since the number can be very large, the organizers only want to know the value of the answer\n  modulo 1000000007(10<sup>9</sup>+7).\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case consists of one line with two integers <b>N</b> and <b>M</b> as\n  described above.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is the number of possible arrangements,\n  modulo 1000000007(10<sup>9</sup>+7).\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 40 seconds per test set.<br/>\n  Memory limit: 1 GB.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  1 &le; <b>M</b> &le; <b>N</b> &le; 100.\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  1 &le; <b>M</b> &le; <b>N</b> &le; 100000.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1FAmBpaOSm1tqCaOqSCZ4RvQjRI_iJXpSsxur4IPfXwQr8aO02eXZw4CIyZ_cEr-_wuoEaryOk9F0I20UENLwIxh7f3yHAiP35oPeNZYZbKSBQ/let_me_count_the_ways_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">5\n2 1\n2 2\n3 1\n3 2\n10 5\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1flHTsbfy4-eEcIwpCc2_8BEKdbXR1Lla6ldgex2lD3xGablBv6nqgz2xVhGNMYVRW1BVByl-nB5FCOvr_rjIwc2aAZmvIZ2kj0ATZ1NvEuyGkwA/let_me_count_the_ways_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 12\nCase #2: 8\nCase #3: 480\nCase #4: 336\nCase #5: 560963525\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, there are 2 couples. To make the\n  description simpler, we use the characters <code>A</code> and <code>a</code> to represent the\n  newlywed couple, and <code>B</code> and <code>b</code> to represent the other couple.\n  Per the rules of the problem, <code>A</code> and <code>a</code> cannot be adjacent.\n  There are 12 ways to arrange the four people:<br/>\n\n  <code>ABab</code> <code>ABba</code> <code>AbaB</code> <code>AbBa</code><br/>\n  <code>aBAb</code> <code>aBbA</code> <code>abAB</code> <code>abBA</code><br/>\n  <code>BAba</code> <code>BabA</code> <code>bABa</code> <code>baBA</code><br/>\n</p>\n<p>\n  In Sample Case #2, both two couples are newlywed couples, so <code>A</code> and\n  <code>a</code> cannot be adjacent, and <code>B</code> and\n  <code>b</code> cannot be adjacent. They can be arranged in the following 8 ways:<br/>\n\n  <code>ABab</code> <code>AbaB</code> <code>aBAb</code> <code>abAB</code><br/>\n  <code>BAba</code> <code>BabA</code> <code>bABa</code> <code>baBA</code><br/>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":20},{"type":2,"type__str":"HIDDEN","value":25}],"title":"Let Me Count The Ways","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Mural: Analysis</h2>\n\n<p>\n  We can observe that we will have painted ceil(<b>N</b>/2) sections in the end, and all these\n  sections would form a contiguous subarray of the input array. Since painting and destroying is done\n  alternatively, it might not be possible to paint any subarray of our choice. Our objective is to\n  find the maximum subarray sum among the set of \"paintable\" subarrays.\n</p>\n\n<h3>Small dataset</h3>\n<p>\n  An intuitive approach would rely on <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\">\n  Dynamic Programming</a> and try to define a DP state that could\n  encapsulate the state of the painted and the destroyed sections at any point in time.\n  Note that painted section is contiguous, and the destroyed sections are prefixes and suffixes of\n  the input array.\n  <br/>\n  Hence, we can define <i>f(i, j, l, r)</i> as the maximum possible achievable score if <i>i</i> and\n  <i>j</i> are the lengths of the destroyed prefix and suffix, respectively; whereas <i>l</i> and\n  <i>r</i> denote the left and the right boundaries of the painted subarray. A recurrence can easily\n  be derived by considering at most four further possibilities: we have two\n  ways to extend the mural (by painting the section either to the left or to the right of the already\n  painted boundary), and two ways to extend the destroyed part (either the prefix or the suffix).\n  <br/>\n  Note that it would seem that there are O(<b>N</b><sup>4</sup>) different valid states in the above\n  approach, but that is not the case since the sum of lengths of painted and destroyed parts is always\n  the same. We can get rid of the index of the right boundary of the painted subarray (i.e. variable <i>r</i>),\n  as it can be implicitly derived from the variables <i>i</i> and <i>j</i>.\n <br/>\n  The overall complexity of this approach is O(<b>N</b><sup>3</sup>) and that will suffice for the\n  Small dataset.\n</p>\n\n<h3>Large dataset</h3>\n<p>\n  The solution to the Large dataset relies on an interesting observation that all possible contiguous\n  subarrays of length ceil(<b>N</b>/2) are \"paintable\". If we can prove this fact, we can simply\n  do an O(<b>N</b>) rolling window approach over all such subarrays and output the maximum\n  possible sum.\n</p>\n<p>\n  Let's think of an intuitive way to prove this. Say, if we paint the <i>i</i>-th section on the first\n  day, what could be the smallest possible index of the left boundary of the mural in the worst case?\n  To achieve the smallest possible index, we will always extend the boundary on the left side; and\n  in the worst case the flood can always extend the prefix, allowing us to paint only the\n  indices after index <i>ceil(i/2)</i>(inclusive). And similarly, there would be an upper limit on\n  the maximum possible index of the right boundary.\n  <br/>\n  This means that given the desirable left boundary of the mural, we can figure out the \"central point\"\n  from which we would begin painting. Now, irrespective of the sequence of destructions, we can always\n  meet the desirable left boundary by always extending our subarray to the left whenever a section on the\n  left is destroyed. Similar arguments can be applied to the right boundary.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3mmyZzMBrofuozxiZbvl1_yn1XZQkm4VsHWGcB7uRAUAPBd4khqyPS8GPeOfRUyfQSEQtTVg/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000005118a","statement":"<h3>Problem</h3>\n<p>\n  Thanh wants to paint a wonderful mural on a wall that is <b>N</b> sections long. Each section of the\n  wall has a <i>beauty score</i>, which indicates how beautiful it will look if it is\n  painted. Unfortunately, the wall is starting to crumble due to a recent flood, so he will need to work fast!\n</p><p>\n  At the beginning of each day, Thanh will paint one of the sections of the wall. On the first day,\n  he is free to paint any section he likes. On each subsequent day, he must paint a new section\n  that is next to a section he has already painted, since he does not want to split up the mural.\n</p><p>\n  At the end of each day, one section of the wall will be destroyed.\n  It is always a section of wall that is adjacent to only one other section and is unpainted\n  (Thanh is using a waterproof paint, so painted sections can't be destroyed).\n</p><p>\n  The <i>total beauty</i> of Thanh's mural will be equal to the sum of\n  the beauty scores of the sections he has painted.\n  Thanh would like to guarantee that, no matter how the wall is destroyed, he can still achieve a total beauty of at least B.\n  What's the maximum value of B for which he can make this guarantee?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case starts with a line containing an integer <b>N</b>. Then, another line follows containing\n  a string of <b>N</b> digits from 0 to 9. The i-th digit represents the beauty score of the i-th section of the wall.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the\n  test case number (starting from 1) and <code>y</code> is the maximum beauty score that Thanh can\n  guarantee that he can achieve, as described above.\n</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 100.<br/>\nTime limit: 20 seconds per test set.<br/>\nMemory limit: 1 GB.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n2 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\nFor exactly 1 case, <b>N</b> = 5 &times; 10<sup>6</sup>; for the other <b>T</b> - 1 cases,\n2 &le; <b>N</b> &le; 100.</br>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Ox9aoOOskYuGpnGAAWmHCsV9JNYGwbKRqUXbf5wWQlaMpnb38MH_hdiXeBLyTVhNg-3aEjIC4MnO_97vcqwvLrJ4/mural_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n4\n1332\n4\n9583\n3\n616\n10\n1029384756\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U25-UdR1u4CQRf9EYcSTWsf3AiLfDTGvo8OR8N5eJmqfVnAT-C8sWPbWj61aIm2yxf_nRlwe4g5sBdjbOpK-fveVtUX/mural_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 6\nCase #2: 14\nCase #3: 7\nCase #4: 31\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In the first sample case, Thanh can get a total beauty of 6, no matter how the wall is destroyed.\n  On the first day, he can paint either section of wall with beauty score 3.\n  At the end of the day, either the 1st section or the 4th section will be destroyed, but it does\n  not matter which one. On the second day, he can paint the other section with beauty score 3.\n</p><p>\n  In the second sample case, Thanh can get a total beauty of 14, by painting the leftmost section of\n  wall (with beauty score 9). The only section of wall that can be destroyed is the\n  rightmost one, since the leftmost one is painted.\n  On the second day, he can paint the second leftmost section with beauty score 5.\n  Then the last unpainted section of wall on the right is destroyed. Note that on the second\n  day, Thanh cannot choose to paint the third section of wall (with beauty score 8), since it is\n  not adjacent to any other painted sections.\n</p><p>\n  In the third sample case, Thanh can get a total beauty of 7. He begins by painting the section\n  in the middle (with beauty score 1). Whichever section is destroyed at the\n  end of the day, he can paint the remaining wall at the start of the second day.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":14},{"type":2,"type__str":"HIDDEN","value":19}],"title":"Mural","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000050ee2","type":1,"type__str":"SPECTATOR"},"title":"Round H"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
