{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1445155200000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"000000000043487f","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1445144400000,"tasks":[{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1o15ixp4y6_lR2-qn43n0nMlchnLor3qaniJ8mpwdaHUOfxj2bTqX-p_5kgF8tnSC3kPzH2Ual/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000043474d","statement":"<h3>Problem</h3>\n<p>\nAlien tech company G has a very old file transfer tool that is still in use today. While the tool is running, it reassures users by giving status updates on both the percentage of files transferred so far and the number of files transferred so far. The status updates during the process might look like this:\n</p>\n<pre>\n 20% |==&gt;-------|     1 files transferred\n100% |==========|     5 files transferred\n</pre>\n<p>\nBut the percentage isn't precise; it is simply truncated before the decimal point (i.e. floored to the next lowest or equal 1%). That is, both 1.2% and 1.7% would be displayed as 1%.\n</p>\n<p>\nSome users may want to know the exact total number of files, so you want to modify the tool so that the status updates look like this:\n</p>\n<pre>\n 20% |==&gt;-------|     1 out of <b>5</b> files transferred\n100% |==========|     5 out of <b>5</b> files transferred\n</pre>\n<p>\nBut you've realized that it may or may not be possible to know the number of files. Given the status updates that the tool displays, either figure out how many files there are, or determine that it can't be done (i.e., there are multiple possible values for the number of files). The status updates are not guaranteed to occur at regular intervals and are not guaranteed to occur whenever a file is transferred.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line contains <b>T</b>, the number of test cases. <b>T</b> test cases follow. Each test case consists of one line with an integer <b>N</b>, the number of status updates output by the tool, followed by <b>N</b> lines with the format P<sub>i</sub> K<sub>i</sub>, where P<sub>i</sub> and K<sub>i</sub> are integers representing the percentage and number of files transferred at some point in the process. The updates are given listed in chronological order -- that is, both the P<sub>i</sub> values and the K<sub>i</sub> values are nondecreasing throughout a test case.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each case, output a line starts with \"Case #x: y\", where x is the number of the case (starting from 1), and y is either the total number of files, or <code>-1</code> if that number is ambiguous.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds per test set.<br/>\nMemory limit: 1 GB.<br/>\n1 &le; <b>T</b> &le; 50.<br/>\n1 &le; <b>N</b> &le; 100.<br/>\n0 &le; P<sub>i</sub> &le; 100<br/>\n</p>\n\n<h4>Small dataset (Test Set 1 - Visible)</h4>\n<p>\n0 &le; K<sub>i</sub> &le; 2000<br/>\nThe answer is guaranteed not to exceed 2000.\n</p>\n\n<h4>Large dataset (Test Set 2 - Hidden)</h4>\n<p>\n0 &le; K<sub>i</sub> &le; 10<sup>15</sup><br/>\nThe answer is guaranteed not to exceed 10<sup>15</sup>.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2KX3tWTPOxN90S0kqqyaU_1jXpzLbuRexhttPPj2iwHbHSiQx3mFeAyijy39eaP5Qc3DqucHWQp-uCuoa0ZVKkP9dvfI4/gfiles_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n2\n20 1\n100 5\n10\n25 241\n27 262\n43 407\n44 413\n57 536\n64 601\n67 637\n84 789\n95 893\n96 903\n10\n0 0\n8 2\n8 2\n17 4\n30 7\n39 9\n69 16\n73 17\n82 19\n91 21</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1dkKgNpZfUw2QpdB8EYaLyPdpkNTDLKSiQtm4-F-K1D3KBj8yHYGbpMnRV8vOxmF4eeEZmMrrrBJqezCT3bJMhTU1m7MVY/gfiles_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 5\nCase #2: -1\nCase #3: 23\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":9},{"type":2,"type__str":"HIDDEN","value":17}],"title":"gFiles","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2uZxAjEzqR2lNYn5WPzXCRGR-eGbTIhCwbHrDEeQtlB5b802wY0gtmYmY-6fwiGGsfVIvcNa1g/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000434948","statement":"<h3>Problem</h3>\n<p>\nThere are many great athletes in the world, and it's very hard to say who is the best in the world at a particular sport, especially when different athletes have won different competitions. Here's one possible system for ranking athletes:\n</p>\n<p>\n1. Determine the number <b>P</b> of finishing places in any competition that will be worth points for athletes, and how many points <b>S<sub>i</sub></b> each of those finishing places is worth. For example, for <b>P</b> = 3, one possible assignment would be 1000 points for 1st place, 500 for 2nd place, and 300 for 3rd place, and 0 for anything below that. (We assume there are no ties within competitions.)\n</p>\n<p>\n2. Since not all competitions are equally important, assign a weight <b>W<sub>i</sub></b> to each one. The score gained by an athlete for a competition will be the points from step 1, modified by the weight for that competition. For example, we may decide that Olympics has a weight of 5, and, continuing with our example from above, the winner of the Olympics would receive 5 * 1000 = 5000 points.\n</p>\n<p>\n3. Since we don't want to reward athletes simply for participating in many competitions, we count only the <b>M</b> highest scores received by an athlete across all competitions. For example, if <b>M</b> = 2 and an athlete earns scores of 1000*5, 500*1, and 300*3 in three different competitions, only the 5000 and 900 would be counted.\n</p>\n<p>\nYou are given the points per finishing place, the weights of the competitions, and the results of the competitions. Can you rank all of the athletes who appeared in the competitions? If multiple athletes have the same score, they will share the same rank and listed in alphabetical order of their names.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow; each test case consists of the following:\n</p>\n<p>\n1. One line with an integer <b>P</b>, the number of top places for which points are awarded.<br>\n2. One line consists with <b>P</b> integers representing the scores <b>S<sub>i</sub></b> for the top places, starting with first place and continuing down the places.<br>\n3. One line with an integer <b>N</b>, the number of competitions.\n4. <b>N</b> lines, each of which represents a competition. Each line begins with <b>W<sub>i</sub></b>, the weight of this competition, and continues with the <b>P</b> names of the athletes who finished in the top <b>P</b> places. They are listed in descending order starting from first place.<br>\n5. One line with an integer <b>M</b>, the maximum number of competitions counted toward an athlete's score.<br>\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x:\", where x is the test case number (starting from 1). Then output one line for each athlete, from highest rank to lowest rank, with the format <code>r: name</code>, where <code>r</code> is the rank of the athlete and <code>name</code> is the name of the athlete. You need to rank all of the athletes that appeared in the input.<br/>\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds per test set.<br/>\nMemory limit: 1 GB.<br/>\n1 &le; <b>T</b> &le; 10.<br/>\n1 &le; <b>S<sub>i</sub></b> &le; 1000.<br/>\n<b>S<sub>i</sub></b> &gt; <b>S<sub>i+1</sub></b>.<br/>\n1 &le; <b>W<sub>i</sub></b> &le; 1000.<br/>\nEach name consists only of characters <code>A</code> through <code>Z</code>, and is at most 10 characters long.\n</p>\n\n<h4>Small dataset (Test Set 1 - Visible)</h4>\n<p>\n1 &le; <b>P</b> &le; 10.<br/>\n1 &le; <b>N</b> &le; 10.<br/>\n1 &le; <b>M</b> &le; 10.<br/>\n</p>\n\n<h4>Large dataset (Test Set 2 - Hidden)</h4>\n<p>\n1 &le; <b>P</b> &le; 100.<br/>\n1 &le; <b>N</b> &le; 100.<br/>\n1 &le; <b>M</b> &le; 100.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U34ZLb1GQBqngbGtyQJ5iGismJFXF5oMh7nV_555QXlPFzLBs0_DVRxGWCUAhS8LfEfez4TYNdXPRJ185KE-kIbLuxZwlA/granks_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">1\n2\n1000 500\n6\n5 BOLT GAY\n4 GAY BOLT\n1 GAY TIANBING\n1 GAY PEIMENG\n1 TIANBING LARRY\n1 PEIMENG LARRY\n2</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0ugsYt9xdLfoGDk1rF6OROhuLM12QyWsGKlX37OlQQUoUBmrhxtCZKaVFwbyJb89mcI8r-riRcsoQ7CHTZQml2-5CsAJmJ/granks_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1:\n1: BOLT\n2: GAY\n3: PEIMENG\n3: TIANBING\n5: LARRY</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\nIn the first case, Bolt scored a total of 7000 in his two competitions. Gay would have scored a total of 8500 if all competitions were counted, but since only the top 2 competitions are counted in this case, Gay scored 6500 and ranked second. Since Peimeng and Tianbing both scored 1500, they both ranked 3rd and listed by their names. Larry is last, since he scored only 1000.\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":6},{"type":2,"type__str":"HIDDEN","value":10}],"title":"gRanks","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2bbHt--RstjJpppyXV-hB_gB7WICRW8HDqkIz8Zcjj8VGf5vk_xn9Mly5aLrzXThf-Abh_OkSw/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000434c0f","statement":"<h3>Problem</h3>\n<p>\nYou have a square <b>N</b> by <b>N</b> matrix M of nonnegative integers. We would like to make a list of the maximum values in every sub-matrix of size <b>K</b> by <b>K</b> within M, and then find the sum of those values together. (Note that the same entry of M might be the maximum value in more than one sub-matrix, in which case it will show up multiple times in the list.) Can you find that sum?\n</p>\n<p>\nTo simplify the input of the matrix, you are given two arrays <b>A</b> and <b>B</b> of length <b>N</b>, and two integers <b>C</b> and <b>X</b>. Then the entry M<sub>ij</sub> (for the ith row and jth column of the matrix) equals (<b>A<sub>i</sub></b>*i+<b>B<sub>j</sub></b>*j + <b>C</b>) mod <b>X</b>, where i and j are in the range [1, <b>N</b>].\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.  Each test case begins with one line with four integers, <b>N</b>, <b>K</b>, <b>C</b> and <b>X</b>. Then there are two lines with <b>N</b> integers each, representing the arrays <b>A</b> and <b>B</b>.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the test case number (starting from 1) and y is the sum of the maximum values in all sub-matrices of size <b>K</b> by <b>K</b>.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n1 &le; <b>T</b> &le; 100.<br/>\n1 &le; <b>A<sub>i</sub></b>, <b>B<sub>i</sub></b> &le; 100000.<br/>\n1 &le; <b>C</b> &le; 100000.<br/>\n1 &le; <b>X</b> &le; 1000000007.<br/>\n1 &le; <b>K</b> &le; <b>N</b>. <br/>\n</p>\n\n<h4>Small dataset (Test Set 1 - Visible)</h4>\n<p>\nTime limit: 30 seconds.<br/>\n1 &le; <b>N</b> &le; 50.<br/>\n</p>\n\n<h4>Large dataset (Test Set 2 - Hidden)</h4>\n<p>\nTime limit: 90 seconds.<br/>\n1 &le; <b>N</b> &le; 3000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3wk4RiR11JQOis99Ac5nchS6W176ecDt9T6iC2rlJWoFbxNaiKZtGiwxQrqDOn6oxYAuZwqhy7WKQw0UB9zrojrn01N_H1/gmatrix_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n1 1 1 5\n1\n1\n2 1 5 11\n1 2\n3 4\n3 2 3 109\n6 4 3\n2 1 5\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1iROrdbRVpwLD2Ig5xMAwCAmM4AjpPdMatr9CEn_KXmWsS1Z6ZWfoqGJmMhUcMkrEjj7uggOvLSdTTXxHfXX1sUFoSyNH4QA/gmatrix_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 19\nCase #3: 80</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\nIn the first test case, the matrix is:<br/>\n<code>3</code><br/>\nSo the sum of maximum values is 3.<br/>\n<br/>\nIn the second test case, the matrix is:<br/>\n<code>9 3</code><br/>\n<code>1 6</code><br/>\nSo the sum of maximum values is 19.<br/>\n<br/>\nIn the third test case, the matrix is:<br/>\n<code>11 11 24</code><br/>\n<code>13 13 26</code><br/>\n<code>14 14 27</code><br/>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":11},{"type":2,"type__str":"HIDDEN","value":19}],"title":"gMatrix","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"Uses DFS to generate one of the possible orders.\nSome optimizations for large datasets:\n1. Pre-process: checks whether there will be one elf who have at least 2^n-2^(n-i) friends and don't want to meet its friends at the first (n-i) matches.\n2. Pre-process: checks whether there are 3 different elves who don't want to meet each other at the first n - 1 matches. (n &gt;= 1)\n3. Pre-process: checks whether there are 5 different elves who don't want to meet each other at the first n - 2 matches. (n &gt;= 2)\n4. Changes the order of searching by arranging the elves who have more restrictions on their friends at first.\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U249GCsyUA4ugUNyybJScfLh1AtycE8oUwAkAWocXOCpaW3iDVqPgrpDLtKnBgYXhIvoK4_UBev/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000434da1","statement":"<h3>Problem</h3>\n<p>\nThe country of elves is planning to hold an elimination tournament, and there are 2<sup><b>N</b></sup> elves who would like to take part. At the start of the tournament, they will be given unique ID numbers from 1 to 2<sup><b>N</b></sup>, and the Elf President will line them up in some order.\n</p>\n\n<p>\nThe tournament is a series of matches between two elves, and every match has one winner and one loser (there are no ties). In the first round, the first elf in the line competes against the second elf in the line, the third elf competes against the fourth elf, and so on. After the first round, the 2<sup><b>N-1</b></sup> elves who lost leave the line, and the 2<sup><b>N-1</b></sup> elves who won remain where they are. Then, the remaining elves play the second round in the same way: the first remaining elf in the line competes against the second remaining elf in the line, the third remaining elf competes against the fourth remaining elf, and so on. After <b>N</b> rounds, there will be only one elf remaining, and that elf is the winner.\n</p>\n\n<p>\n<b>M</b> of the elves are sensitive, which means that they will be very sad if they have to compete in matches against their friends during the games. Specifically, the ith elf will be sad if they have to compete with their friends in the first <b>K<sub>i</sub></b> rounds. (Note that friendship is not necessarily mutual: if one elf considers another elf to be a friend, the other elf does not necessarily consider that elf to be a friend.) \n</p>\n\n<p>\nThe Elf President wants to know: is there a way to specify the initial positions of all 2<sup><b>N</b></sup> elves to guarantee that no elf will be sad, no matter what happens in the tournament?\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each test case consists of one line with two integers <b>N</b> and <b>M</b>, then <b>M</b> sets of two lines each, in which the first line has integers <b>E<sub>i</sub></b>, <b>K<sub>i</sub></b>, and <b>B<sub>i</sub></b> for one elf, and the second has <b>B<sub>i</sub></b> integer ID numbers of that elf's friends.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: \", where x is the case number (starting from 1), followed by <code>YES</code> or <code>NO</code>.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds per test set.<br/>\nMemory limit: 1 GB.<br/>\n1 &le; <b>T</b> &le; 200.<br>\n0 &le; <b>M</b> &le; 2<sup><b>N</b></sup>.<br>\n1 &le; <b>E<sub>i</sub></b> &le; 2<sup><b>N</b></sup>.<br>\n1 &le; <b>K<sub>i</sub></b> &le; <b>N</b>.<br>\n<b>M</b> &le; sum(<b>B<sub>i</sub></b>) &le; min(2 * <b>M</b>, 2<sup><b>N</b></sup>).\n</p>\n\n<h4>Small dataset (Test Set 1 - Visible)</h4>\n<p>\n1 &le; <b>N</b> &le; 3.\n</p>\n\n<h4>Large dataset (Test Set 2 - Hidden)</h4>\n<p>\n<b>N</b> = 4.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0y44jWN4z5HrHeeLUm8uVBFrcUR8I-jj8p8Sln5-kMhC03JzPwswacjSyaF0tlnE4TwpugXrXZmtqpGXGdBlFtSNlYd2o/ggames_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n1 1\n1 1 1\n2\n2 2\n1 1 1\n2\n3 1 1\n4\n3 3\n1 2 2\n3 4\n2 2 2\n5 6\n7 1 1\n8\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2lxb8HejjlkgCUqDWMfP1ErQo7oSSBy7R19uPqORG9qFmRo93nUmZHxRuSwombGu2JT5X4ExWmGWbd3OXJDjFAycV_5pMi/ggames_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: NO\nCase #2: YES\nCase #3: YES\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":18}],"title":"gGames","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"000000000043487f","type":1,"type__str":"SPECTATOR"},"title":"Round C 2015"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
