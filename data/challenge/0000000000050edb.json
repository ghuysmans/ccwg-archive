{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1566720000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000050edb","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\nThank you for participating in Kick Start 2019 Round E!\n</p>\n\n<hr>\n\n<p>\n<b>Cast</b>\n</p><p>\n\nCherries Mesh: Written by Bartosz Kostka and prepared by Seunghyun Jo and Lalit Kundu.\n</p><p>\nCode-Eat Switcher: Written by Archie Pusaka and prepared by Reyno Tilikaynen.\n</p><p>\nStreet Checkers: Written by Bartosz Kostka and prepared by Jonathan Irvin Gunawan.\n</p><p>\n\nSolutions, other problem preparation, reviews and contest monitoring by Anushi Maheshwari, Himanshu Jaju, Zhang Chen, Sadia Atique, Yang Xiao, Teja Vardhan Reddy Dasannagari.\n\n</p><p>\nAnalyses were authored by Kevin Tran, Alan Huang and Anushi Maheshwari.\n</p>\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1566709200000,"tasks":[{"analysis":"<h3>Test set 1 (Visible)</h3>\n<p>\n  First, let's rephrase the problem: Given a <a href=\"https://en.wikipedia.org/wiki/Complete_graph\">complete</a> undirected graph, where each edge has weight\n  1 or 2, what is the cost of the <a href=\"https://en.wikipedia.org/wiki/Minimum_spanning_tree\">Minimum Spanning Tree</a>?\n\n  There are a few different algorithms for solving this problem, such as\n  <a href=\"https://en.wikipedia.org/wiki/Prim%27s_algorithm\">Prim's Algorithm</a> and\n  <a href=\"https://en.wikipedia.org/wiki/Kruskal%27s_algorithm\">Kruskal's algorithm</a>.\n  Using Kruskal's Algorithm gives an O(<b>N</b><sup>2</sup> log <b>N</b>) solution per test case,\n  while Prim's Algorithm gives an O(<b>N</b><sup>2</sup>) solution per test case.\n</p>\n<h3>Test set 2 (Hidden)</h3>\n<p>\n  Intuitively, we want to include as many edges of weight 1 as possible.\n  Once we have included as many such edges as we can, then we know that the remaining edges in the\n  spanning tree will be of weight 2.\n</p><p>\n  Using this idea, we have the following solution: first create a <a href=\"https://en.wikipedia.org/wiki/Spanning_tree#Spanning_forests\">spanning forest</a>\n  using only edges of weight 1. We can now connect each of the components of the spanning forest together\n  using X-1 edges of weight 2, where X is the number of components (we can always connect these components since the graph is complete).\n</p><p>\n  Since we only need to print the minimum cost and not the actual minimum spanning tree, we can simplify\n  the problem to simply counting the number of components in the graph where we only consider the edges\n  of weight 1.\n</p><p>\n  This solves the problem in O(<b>N</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3-81BfHjsRCKISzvuZ8mRVGEzaSV4lJXYVOilXugBbaA5cSgBW87Y7S8MCmioZ9d4A6ygkuQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000170721","statement":"<h3>Problem</h3>\n<p>\nYour friend is recently done with cooking class and now he wants to boast in front of his school friends by making a nice dessert.\nHe has come up with an amazing dessert called Cherries Mesh. To make the dish, he has already collected cherries numbered 1 to <b>N</b>.\nHe has also decided to connect each distinct and unordered pair of cherries with a sweet strand, made of sugar.\nSweet strands are either red or black, depending on the sugar content in them. Each black strand contains one units of sugar, and each red strand contains two units of sugar.\n</p>\n<p>\nBut it turns out that the dessert is now too sweet, and these days his school friends are dieting and they usually like dishes with less sugar.\nHe is really confused now and comes to your rescue. Can you help him find out which all sweet strands he should remove such that each pair of cherries is connected directly or indirectly via a sugar strand, and the dish has the minimum possible sugar content?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of input gives the number of test cases, <b>T</b>.\n  <p>\n    Each test case begins with a line containing two integers <b>N</b> and <b>M</b>, the number of cherries and the number of <i>black</i> sweet strands, respectively.\n  </p>\n<p>\n  Then <b>M</b> lines follow, each describing a pair of cherries connected to a black strand. The i-th line contains cherries numbered <b>C<sub>i</sub></b> and <b>D<sub>i</sub></b>, it indicates that <b>C<sub>i</sub></b> and <b>D<sub>i</sub></b> cherry are connected with a black strand of sugar.</p>\n<p>\n  Note: Any other pair of cherries not present in the input means that they are connected by a red strand.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is minimum possible sugar content.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 15 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n1 &le; <b>T</b> &le; 100<br/>\n<b>M</b> &le; <b>N*(N-1)/2</b><br/>\n1 &le; <b>C<sub>i</sub></b> &le; <b>N</b>, for all i.<br/>\n1 &le; <b>D<sub>i</sub></b> &le; <b>N</b>, for all i.<br/>\n<b>C<sub>i</sub></b> &ne; <b>D<sub>i</sub></b>, for all i.<br/>\nEvery {<b>C<sub>i</sub></b>, <b>D<sub>i</sub></b>} is distinct.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n1 &le; <b>N</b> &le; 100.<br/>\n0 &le; <b>M</b> &le; 100.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  For at least 90% of the test cases:<br/>\n1 &le; <b>N</b> &le; 1000.<br/>\n0 &le; <b>M</b> &le; 1000.<br/>\n  <br/>\n  For all test cases:<br/>\n1 &le; <b>N</b> &le; 10<sup>5</sup>.<br/>\n0 &le; <b>M</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0L-yuI5xPI1JjeHSLM9byFdH4IyZJtp_c9J7OIkVsUsym_b6RJ3oB1aNzeOG_80WkockldmNLnTTtcK3JUWbp-SSfT43R4GUlG1A/cherries_mesh_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2 1\n1 2\n3 1\n2 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3SLvRZTDx0dSkWdk5axtBAS5W_z0smWqtAQB88miXG-I9OBs41gUCp_ueVsDyyrp1C5fD_dWms9k9pGKNU6wltWdnDyiQsV7EHP5c/cherries_mesh_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\nIn the first sample case, there are two cherries and they are connected with a black strand. Removing any of the strand causes cherries to get disconnected. Hence, the minimum sugar content is 1.\n<p>\nn the second sample case, we can keep the black strand between cherry numbered 2 and cherry numbered 3, and remove any of the red strands, which leads to a minimum sugar content of 3.\n  </p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":9},{"type":2,"type__str":"HIDDEN","value":13}],"title":"Cherries Mesh","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test set 1 (Visible)</h3>\n<p>\nLet's start with the brute force way of solving the problem. We can iterate through all possible coding units for slot 1, let's say X. Now, we can calculate the coding unit left for slot 2 (<b>A<sub>i</sub></b>  - <b>X</b>). Using this we can calculate\neating unit we can achieve for both slot 1 and slot 2 and compare it with <b>B<sub>i</sub></b>.\nTime complexity for each test case would be O(<b>C<sub>max</sub></b>*<b>D</b>).\n</p>\n\n<h3>Test set 2 (Hidden)</h3>\n<p>\nLet's first solve for only 1 day. So assuming two time slots <b>S<sub>i</sub></b>(<b>E<sub>i</sub></b>, <b>C<sub>i</sub></b>)\nand <b>S<sub>j</sub></b>(<b>E<sub>j</sub></b>, <b>S<sub>j</sub></b>) we can see\nthat to achieve every 1 unit of eating in <b>S<sub>i</sub></b> slot we are losing <b>C<sub>i</sub></b>/<b>E<sub>i</sub></b> unit of coding, similarly for <b>S<sub>j</sub></b> slot.\nHence, we can observe that it's always a better choice to choose time slot <b>S<sub>i</sub></b> if <b>C<sub>i</sub></b>/<b>E<sub>i</sub></b> &le; <b>C<sub>j</sub></b>/<b>E<sub>j</sub></b>.\nNow, we have the order in which we should achieve the required eating unit.\n\n<p>\nFor calculating minimum coding requirement we can maintain prefix cumulative and\nsuffix cumulative sum of maximum coding and eating unit that can be achieved in a time slot. Then using binary\nsearch on prefix cumulative sum array, we can find out which minimum indexed time slot will give us eating more than required and we can remove the excess fraction of time for use in coding.\nWe can compute the maximum coding unit achieved from unused time slots by using the suffix cumulative sum.\nThis will take O(<b>SlogS</b> + <b>S</b>) preprocessing time and O(<b>DlogS</b>) for each test case.\n</p>\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U11N4MEE15SCW8o0EwAnqILa-H_LcDfJs4kMIqUD2iHR0MH4UsNAdw-tVl3s1oCmUb1C1EmKw/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000001707b8","statement":"<h3>Problem</h3>\n<p>\n  Umon is a foodie coder.\n  Do you know what two activities that he loves the most?\n  Of course, coding and eating!\n  He always spends the whole day doing only those two activities.\n  However, he thinks that some times of the day are better spent coding, and others are better spent eating.\n</p><p>\n  To illustrate this problem, Umon divides his day into <b>S</b> time slots.\n  During the i-th time slot, if Umon codes 100% of the time, he will achieve <b>C<sub>i</sub></b> units of coding.\n  On the other hand, if he eats 100% of the time, he will achieve <b>E<sub>i</sub></b> units of eating.\n  But of course, Umon can also use only a fraction of the time for coding, and the remaining for eating.\n  Formally, he will choose a real number <i>f</i> (0 &le; <i>f</i> &le; 1), code for <i>f</i> of the time, and use the remaining (1 - <i>f</i>) time to eat.\n  This way, he will achieve <i>f</i> &times; <b>C<sub>i</sub></b> units of coding and (1 - <i>f</i>) &times; <b>E<sub>i</sub></b> units of eating.\n  The total amount of coding Umon achieves for the day is simply the sum of all units of coding he achieved in each of the time slots.\n  The total amount of eating is calculated in a similar way.\n</p><p>\n  Umon needs to plan his schedule for the next <b>D</b> days.\n  On the i-th day, he needs to achieve at least a total amount of <b>A<sub>i</sub></b> units of coding and <b>B<sub>i</sub></b> units of eating.\n  For each day, determine whether there is a way for Umon to achieve his target.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow.\n  Each test case begins with a line containing two integers <b>D</b> and <b>S</b>, the number of days and the number of time slots in a day, respectively.\n</p><p>\n  Then <b>S</b> lines follow, each describing a time slot.\n  The i-th line contains two integers <b>C<sub>i</sub></b> and <b>E<sub>i</sub></b>, the amount of coding units achieved if Umon codes for 100% of the time slot, and the amount of eating units achieved if he eats for 100% of the time slot, respectively.\n</p><p>\n  Then <b>D</b> lines follow, each describing a day.\n  The i-th line contains two integers <b>A<sub>i</sub></b> and <b>B<sub>i</sub></b>, the minimal total amount of coding and eating that needs to be achieved on that day.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is a string with <b>D</b> characters, where the i-th character is <code>Y</code> if there exists a schedule that can fulfill the target for the i-th day, otherwise it should be <code>N</code>.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>C<sub>i</sub></b> &le; 10<sup>4</sup>, for all i.<br/>\n  1 &le; <b>E<sub>i</sub></b> &le; 10<sup>4</sup>, for all i.<br/>\n  0 &le; <b>A<sub>i</sub></b> &le; 10<sup>8</sup>, for all i.<br/>\n  0 &le; <b>B<sub>i</sub></b> &le; 10<sup>8</sup>, for all i.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  1 &le; <b>S</b> &le; 2.<br/>\n  1 &le; <b>D</b> &le; 10.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  For at least TODO% of the test cases:<br/>\n  1 &le; <b>S</b> &le; 10<sup>3</sup>.<br/>\n  1 &le; <b>D</b> &le; 10<sup>3</sup>.<br/>\n  <br/>\n  For all test cases:<br/>\n  1 &le; <b>S</b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>D</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0_f3FsTGy4irW9kfUUtZVnccKpA5YRbSFICvFSATK_eFsCZOzj5T-xTVQCUvEnoylXWoWmXRvuE-ApWGl8n12KGKNWoHoudjjeQXls5Cw/code-eat_switcher_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n4 2\n3 8\n6 10\n0 18\n3 13\n10 0\n7 3\n1 2\n4 4\n4 4\n0 0\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3xQU054OYbwZWHmvMUUtsy0YVOEkDV2yEySIXylf5YS5SCTNlgXVG4-zQzd-vezQuTnxZ3q7Ji_15A-Hh9MFM5SptpOluhZOurTwJ-9YVT/code-eat_switcher_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: YYNY\nCase #2: Y\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In the first sample case, there are 4 days and 2 time slots for each day.\n  <ul>\n    <li>\n      For day 1, Umon can just eat 100% for both time slots, and therefore achieving a total of 0 units of coding and 8 + 10 = 18 units of eating, thus reaching the target.\n    </li><li>\n      For day 2, Umon can eat 100% of the time for the first time slot, and use 50% of the second time slot for coding and 50% for eating, achieving a total of 0 &times; 3 + 0.5 &times; 6 = 3 units of coding, and 1 &times; 8 + 0.5 &times; 10 = 13 units of eating, thus reaching the target.\n    </li><li>\n      For day 3, it is impossible to get a total of 10 units of coding.\n    </li><li>\n      For day 4, there are an infinite amount of ways to achieve the target.\n      One possible strategy is to code 42% (and eat 58%) in the first time slot, then code 98.76% (and eat 1.24%) in the second time slot.\n      That strategy yields a total of 0.42 &times; 3 + 0.9876 &times; 6 = 7.1856 units of coding, and 0.58 &times; 8 + 0.0124 &times; 10 = 4.764 units of eating.\n    </li>\n  </ul>\n  Thus, the answer should be YYNY.\n</p><p>\n  In the second sample case, note that the value of characteristics for the time slots may not necessarily be different from each other.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":11},{"type":2,"type__str":"HIDDEN","value":25}],"title":"Code-Eat Switcher","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test set 1 (Visible)</h3>\n<p>\nLet's rephrase the problem into counting the number of values X within the range [<b>L</b>, <b>R</b>]\nthat satisfies |(# of odd divisors) - (# of even divisors)| &le; 2.\n</p>\n<p>\nTo solve this problem under the constraint that <b>R</b> &lt; 10<sup>6</sup>. We can simply\npreprocesses each X between 1 and 10<sup>6</sup> whether X is\ninteresting or not. To find whether X is interesting, we can apply any O(&radic;X)\ntime algorithm finding out all divisors of X. After storing the result for each X, we\n  build a prefix sum array <b>F</b> storing for counts. Thus, each query can be answered by computing\n  <b>F</b>[<b>R</b>] - <b>F</b>[<b>L</b>-1] in constant time.\n  The total time complexity would then be O(<b>R<sub>max</sub></b>&radic;<b>R<sub>max</sub></b> + <b>T</b>),\n  which suffices to pass the first test set.\n</p>\n<h3>Test set 2 (Hidden)</h3>\n<p>\nWe need a slightly sophisticated observation here. The intuition comes from observing that any\ndivisor to an odd integer is still odd. For any integer X we can extract all power of 2 factors\nand rewrite as X=<b>A</b>*2<sup>X</sup>, where <b>A</b> is an odd integer and X is a\nnon-negative integer.\n</p>\n<p>\nNow, we can partition all divisors to X into sets of divisors leading with each odd divisors\n<b>d<sub>1</sub></b>, <b>d<sub>2</sub></b>, ..., <b>d<sub>k</sub></b> of <b>A</b>:\n</p>\n<p>\n  <blockquote>\n    {<b>d<sub>1</sub></b>, <b>d<sub>1</sub></b>*2, <b>d<sub>1</sub></b>*2<sup>2</sup>, ...,\n  <b>d<sub>1</sub></b>*2<sup>X</sup>},<br />\n  {<b>d<sub>2</sub></b>, <b>d<sub>2</sub></b>*2, <b>d<sub>2</sub></b>*2<sup>2</sup>, ...,\n  <b>d<sub>2</sub></b>*2<sup>X</sup>},<br />\n  ...<br />\n  {<b>d<sub>k</sub></b>, <b>d<sub>k</sub></b>*2, <b>d<sub>k</sub></b>*2<sup>2</sup>, ...,\n  <b>d<sub>k</sub></b>*2<sup>X</sup>}.\n  </blockquote>\n</p>\n<p>\n  By looking at the above diagram we can infer that X has X odd divisors and\n  X*X even divisors. The criteria to a number being interesting is now equivalent to\n  |X*(X-1)| &le; 2.\n</p>\n<p>\n  There are only a few cases of (X, X) pairs that satisfies the above expression:\n</p>\n<p>\n  <ul>\n  <li>Case 1: X=0, X=1 or 2.</li>\n  <li>Case 2: X=1, X can be any value.</li>\n  <li>Case 3: X=2, X=1 or 2.</li>\n  <li>Case 4: X=3, X=1.</li>\n  </ul>\n</p>\n<p>\nSo, what we really need to do here is to count the number of X's in the range [<b>L</b>, <b>R</b>]\nsatisfying each case.\n</p>\n<p>\n  Case 1 implies that X=1 or a odd prime. One can count the number of primes within range\n  [<b>L</b>, <b>R</b>] using <a href=\"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\">Sieve\n  of Eratosthenes</a>.\n  Case 2 implies that <b>A</b> can be any odd integer, so in this case X is in the form of\n  (4*X+2) and hence can be counted in O(1) time.\n  Case 3 implies that <b>A</b>=1 or an odd prime. One can count the number of primes within range\n  [<b>L</b>/4, <b>R</b>/4].\n  Case 4 implies that X=8. Count it whenever 8 belongs to the range.\n</p>\n<p>\nFrom the above case analysis, one can see that the running time is dominated by\nSieve of Eratosthenes. Fortunately, we only need to use sieve method on arrays of size\nO(<b>R</b>-<b>L</b>+1) to count the number of odd primes within ranges [<b>L</b>, <b>R</b>] and\n[<b>L</b>/4, <b>R</b>/4]. If we apply sieving using numbers 2, 3, 4, ..., &radic;<b>R</b>, the\nalgorithm runs in O(<b>T</b>*(<b>R</b> - <b>L</b> + 1)*log(&radic;<b>R</b>)) time,\nwhich suffices to pass this test set.\n</p>\n<p>\nFor a more efficient algorithm, one can sieve using prime numbers no more than &radic;<b>R</b>.\n  These prime numbers again can be\nobtained by a sieving algorithm. At the end you will get an algorithm that runs in\nO(&radic;<b>R</b> log log &radic;<b>R</b>) + O((<b>R</b> - <b>L</b> + 1) log log &radic;<b>R</b>) time\n  per test case.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U23E-_Znppd7MCVOoGOjOQSxaxXbN8N6qJD_249LqEoc3-Gec2ipbD_FEs5N5gpxEWLHQbyZg/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000001707b9","statement":"<h3>Problem</h3>\n<p>\n  Alice and Bob are playing a new virtual reality team game - Street Checkers. The game is set on an\n  insanely long street divided into tiles which are numbered from 0 to 10<sup>9</sup>(inclusive of both).\n  At the start of the game, Alice and Bob are standing on tile number 0 and are given a random number X\n  in range [<b>L</b>, <b>R</b>] (both ends are inclusive). Alice only jumps to odd numbered tiles,\n  while Bob only jumps to even numbered tiles. If the number\n  on the tile divides X, then the player landing on it has to color it with their favorite color.\n  The game is over after tile X has been colored.\n</p>\n<p>A game is considered interesting by both the players\n  if the absolute difference between the number of tiles painted by each is not greater than 2. Help\n  Alice and Bob find how many numbers in the interval [<b>L</b>, <b>R</b>] could make for an interesting game.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> lines follow\n  each containing two integers <b>L</b> and <b>R</b>, the start and end of the interval used to\n  generate the random number X.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is the count of numbers in interval\n  [<b>L</b>, <b>R</b>] which results in an interesting game for Alice and Bob.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 40 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n1 &le; <b>T</b> &le; 100.<br/>\n0 &le; <b>R</b> - <b>L</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  1 &le; <b>L</b> &le; <b>R</b> &le; 10<sup>6</sup>.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  1 &le; <b>L</b> &le; <b>R</b> &le; 10<sup>9</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0aKt-uPA2poLlAT56JKIJwFjlOyn8S5vOtVIngEREQA-_Wo5TbTycQ0WPSk7KGboAf-0dRlsBDs0HyfHYUSeqymtJrzct88SdeOBwJ/street_checkers_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5 10\n102 102\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3obcraECCoHmUmKBbqyZykA9XRvwDr7agLhrSuGvvlz0pPzhD4WQ69J-Mxmy9OeTToF-nSvO9HcxdER_cfK4lzRvwvYoRYduEv-c3Kqg/street_checkers_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 5\nCase #2: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n  <p>\n  For the first sample case, let us look at all the possible number in range [5, 10]:\n    <ul>\n      <li>5 - Alice would paint 2 tiles : {1, 5}, and Bob would not paint any tile. The\n          game would be interesting since the absolute difference is 2.\n      </li>\n\n      <li>6 - Alice would paint 2 tiles : {1, 3}, and Bob would paint 2 tiles : {2, 6}. The\n          game would be interesting since the absolute difference is 0.\n      </li>\n\n      <li>7 - Alice would paint 2 tiles : {1, 7}, and Bob would not paint any tile. The\n          game would be interesting since the absolute difference is 2.\n      </li>\n\n      <li>8 - Alice would paint 1 tile : {1}, and Bob would paint 3 tiles : {2, 4, 8}. The\n          game would be interesting since the absolute difference is 2.\n      </li>\n\n      <li>9 - Alice would paint 2 tiles : {1, 3, 9}, and Bob would not paint any tile. The\n          game would not be interesting since the absolute difference is greater than 2.\n      </li>\n\n      <li>10 - Alice would paint 2 tiles : {1, 5}, and Bob would paint 2 tiles : {2, 10}. The\n          game would be interesting since the absolute difference is 0.\n      </li>\n  </ul>\n  Thus, the answer for this test case is 5.\n</p>\n<p>\n  In the second sample case, we have only one number 102. Alice would paint 4 tiles : {1, 3, 17, 51}\n  while Bob would paint 4 tiles : {2, 6, 34, 102}. The game would be interesting since the absolute\n  difference is 0.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":13},{"type":2,"type__str":"HIDDEN","value":29}],"title":"Street Checkers","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000050edb","type":1,"type__str":"SPECTATOR"},"title":"Round E 2019"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
