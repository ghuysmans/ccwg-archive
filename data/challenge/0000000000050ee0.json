{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1527408000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000050ee0","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"Thanks to everyone who participated!  <br> <br> <br>\n  \nCast   <br> <br>\n  \nProblem A (Planet Distance): Written and prepared by Anirudh GP.   <br>\n\nProblem B (Fairies and Witches): Written by Akashdeep Nain and prepared by Satyaki Upadhyay.   <br>\n\nProblem C (Kickstart Alarm): Written by Harshil Shah and prepared by Lalit Kundu.   <br>\n <br> <br>\nSolutions and other problem preparation and review by Ian Tullis and Jonathan Irvin Gunawan.   <br>\n <br> <br>\nAnalysis authors:   <br> <br>\n\nPlanet Distance: Anirudh GP  <br>\nFairies and Witches: Akashdeep Nain  <br>\nKickstart Alarm: Harshil Shah  <br>\n","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1527397200000,"tasks":[{"analysis":"<h2>Planet Distance: Analysis</h2>\n<p>\n  The problem statement explains that we have an undirected connected graph with N nodes and N\n  edges, and exactly one cycle in it. Our task here is to first find the nodes that are part of the\n  cycle, and then find the minimum distance from each of the other nodes to this cycle.\n  From the input, we can form an adjacency list and use this to solve the problem.\n</p>\n<h3>Small dataset</h3>\n<p>\n  We can perform a DFS from every node, keeping track of visited and parent nodes, to get the nodes\n  that are a part of the cycle.\n  During the DFS for node i, if the first visited node we encounter (that is not the parent),\n  is the node i, then node i is part of the cycle.<br>\n  Time complexity for this method is O(N<sup>2</sup>).\n</p>\n<p>\n  Once we have identified all the nodes in the cycle, we can do a BFS from each of these cyclic\n  nodes, keeping track of the number of edges we have travelled so far, to get the minimum distance\n  to all the other nodes. We initially mark all the cyclic nodes as visited, to ensure that we dont\n  traverse the cycle during the BFS.\n</p><p>\n  The overall time complexity is O(N<sup>2</sup>).\n</p>\n<h3>Large dataset</h3>\n<p>\n  We can identify which nodes are part of the cycle in many ways. One way is to do a DFS, while\n  keeping track of the parent node. If you encounter a node that is visited, and is not the parent\n  of the previous node, it means that this node is part of the cycle. You can then backtrack using\n  the parent nodes to get all the nodes of the cycle. The time complexity is O(N).\n</p>\n<p>\n  The second way is to recursively remove all vertices of degree 1. This can be done efficiently by\n  storing a map of vertices to their degrees.\n</p><p>\n  Initially, traverse the map and store all the vertices with degree = 1 in a queue.\n  Traverse the queue as long as it is not empty. For each node in the queue, mark it as visited,\n  and iterate through all the nodes that are connected to it (using the adjacency list),\n  and decrement the degree of each of those nodes by one in the map.\n  Add all nodes whose degree becomes equal to one to the queue. At the end of this algorithm,\n  all the nodes that are unvisited are part of the cycle.<br>\n  The time complexity for this method is O(N).\n</p>\n<p>\n  Once we have identified all the nodes in the cycle, we can do a BFS from each of these cyclic\n  nodes, keeping track of the number of edges we have travelled so far, to get the minimum distance\n  to all the other nodes. We initially mark all the cyclic nodes as visited, to ensure that we dont\n  traverse the cycle during the BFS.\n</p><p>\n  The overall time complexity is O(N).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U340nnPSjzgfTU0wMx7DB-EJDCPpcVBwJ4hbtUBax3pKV_0Mdx9iVaYpgZ_VZplx0mkXuZN4w/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000051005","statement":"<h3>Problem</h3>\n<p>\n  There are <b>N</b> planets in the universe, and Google's Space division has installed <b>N</b> vacuum tubes\n  through which you can travel from one planet to another. The tubes are bidirectional; travelers\n  may use a tube between two planets to travel from either of those planets to the other. Each\n  vacuum tube connects two planets and no two vacuum tubes connect the same pair of planets.\n  These tubes connect the planets such that it is possible to travel from any planet to any other\n  planet using one or more of them. Some of these tubes\n  are connected such that there exists exactly one cycle in the universe. Google has hidden\n  gifts in all the planets that are part of this cycle. Now, Google wants to know how far\n  away each of the planets in the universe is from the gifts.\n</p>\n<p>\n  Your task is to find the minimum distance\n  (in terms of the number of vacuum tubes) between each planet and a planet that is part of the\n  cycle.\n  Planets that are part of the cycle are assumed to be at distance 0.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line contains an integer <b>T</b>, the number of test cases. <b>T</b> test cases follow.\n  The first line of each test case contains an integer <b>N</b>, the number of planets\n  and vacuum tubes. The planets are numbered from 1 to <b>N</b>.<br>\n  <b>N</b> lines follow, the i-th of these lines contains two integers <b>x<sub>i</sub></b> and\n  <b>y<sub>i</sub></b>, indicating that the i-th vacuum tube connects planet <b>x<sub>i</sub></b>\n  and planet <b>y<sub>i</sub></b>.\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>y</code> is a list of <b>N</b>\n  space-separated values in which the i-th value represents the minimum distance between the i-th\n  planet and a planet in the cycle.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1 GB.<br/>\n  1 &le; <b>x<sub>i</sub></b> &le; <b>N</b>, for all i.<br/>\n  1 &le; <b>y<sub>i</sub></b> &le; <b>N</b>, for all i.<br/>\n  <b>x<sub>i</sub></b> &ne; <b>y<sub>i</sub></b>, for all i.<br/>\n  (<b>x<sub>i</sub></b>, <b>y<sub>i</sub></b>) &ne; (<b>x<sub>j</sub></b>, <b>y<sub>j</sub></b>),\n  for all i &ne; j.<br/>\n</p>\nThe graph in which planets are nodes and tubes are edges is connected and has exactly one cycle.\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n3 &le; <b>N</b> &le; 30.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n3 &le; <b>N</b> &le; 1000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U25_V1nW_S9Htir_tEpEa4Jszy_qPKdcoU0fYCrjPbP3h_X6G3OuuYuleKiRfqXuB-CqGB-K-7GBKVXbnUWfAiNewfJWGPH-pH9M3or/planet_distance_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5\n1 2\n2 3\n3 4\n2 4\n5 3\n3\n1 2\n3 2\n1 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U29UjxXFmHFOlgu1tLdqQdDJHx81mPwKhaP2LOrjUqdwReYYhN0H8hyVC5sZv_GMVNiTw0dE8TjGzsDldSKYUxh6nt1C2v8cY3JqW5H2g/planet_distance_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1 0 0 0 1\nCase #2: 0 0 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the cycle consists of planets 2, 3, and 4. Therefore, the distances for planets\n  2, 3, and 4 are 0. There is a vacuum tube between 1 and 2, and another vacuum tube between 3 and 5.\n  Thus, planets 1 and 5 are at a distance 1 from the cycle.\n</p>\n\n<p>\n  In Sample Case #2, all the planets are part of the cycle. Hence, their distances are 0.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":15}],"title":"Planet Distance","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Fairies and Witches: Analysis</h2>\n<p>\n  The problems asks us to choose a subset of edges of a graph such that no two edges share the same vertex and these edges can be used to form a convex polygon with non-zero area.\n</p>\n<p>\n  There are two key observations:\n  <ol>\n    <li>The number of ways to choose a subset of edges such that no two edges share same vertex is fairly small. In fact, for a complete graph with 15 nodes, the total number of such pairings is 10349536.</li>\n    <li>A convex polygon with non-zero area can be formed with sides of length l<sub>1</sub>,l<sub>2</sub>, ... ,l<sub>k</sub> if and only if <b>k</b> &ge; 3 and 2 * max(l<sub>1</sub>,l<sub>2</sub>, ... ,l<sub>k</sub>) &lt; sum(l<sub>1</sub>,l<sub>2</sub>, ... ,l<sub>k</sub>).</li>\n  </ol>\n</p>\n<p>\n  Let's try to prove the upper bound on the total number of different pairings. Let's consider the case in which the total number of nodes (<b>N</b>) is even and we have exactly <b>N</b>/2 pairings; let us denote the total number of ways to create these <b>N</b> / 2 pairings as f(<b>N</b>).\n</p>\n<p>If we try to generate all possibilities via brute-force code, then one strategy can be to choose the minimum numbered (starting from 1) unused vertex and try to pair it with all the remaining vertices (see code in later section). We can say that at every level when we are forming a new pairing we are choosing one vertex of the pairing in exactly one way (i.e. minimum numbered (starting from 1) unused vertex) and the other vertex of pairing can be any of the remaining vertices. For example, if the unused vertices are (2,5,6,8,9,10), then we start by choosing 2 (the minimum number) as one vertex, and then we try to pair it with all 5 of the remaining vertices. Whenever we choose a particular pair, we mark both vertices as used, and then we recursively pair up the rest. In mathematical terms, we can represent the total number of ways to form such pairings as follows:\n<p>\n  f(<b>N</b>) = (<b>N</b> - 1) * (<b>N</b> - 3) .... * 1\n</p>\n<p>\n  But in our problem there can be any number of edges in final polygon, not just <b>N</b>/2. It might be a good idea to try to derive a more general expression before you keep reading!\n</p>\n<p>\n  So we can calculate the total pairings by choosing any set of an even number of vertices and pairing them all up, which gives us the total number as:\n</p>\n<p>\n  g(<b>N</b>) = &Sigma; C(<b>N</b>, i) * f(i), where i is even and C(<b>N</b>, i) is the number of ways of choosing i objects out of <b>N</b> different objects.\n</p>\n<h3>Small dataset</h3>\n<p>\n  We can observe that for <b>N</b> = 6, we must use all 6 vertices so that we can have 3 edges, since a valid polygon must have at least 3 edges. All possibilities can be generated by enumerating all 6! permutations of arranging 6 numbers, and using the pairs of the first and second, third and fourth, and fifth and sixth numbers to get edges between those node numbers (if they exist).\n</p>\n<p>\n  Our C++ function for checking whether a polygon is valid can be something like this:\n</p>\n<pre>\nbool isGoodPolygon(const vector<int> &edges) {\n  if(edges.size() < 3) {\n    return false;\n  }\n  int tot = 0;\n  int mx = 0;\n  for(int i = 0; i < edges.size(); i++) {\n    tot += edges[i];\n    mx = max(mx, edges[i]);\n  }\n  return tot - mx > mx;\n}\n</pre>\n<p>\n  The overall time complexity is O(N!).\n</p>\n<h3>Large dataset</h3>\n<p>\n  The Large dataset uses the same overall strategy, but we need an efficient way to code the intended brute-force solution. One way of doing that is the following C++ code, which is using <a href=\"https://en.wikipedia.org/wiki/Bit_manipulation\" target=\"_blank\">bit masks</a> to store whether a vertex is used or not.\n</p>\n<pre>\nint n;\nint L[N][N];\n// Whether the i-th bit of mask is on.\nint bit(int mask, int i) {\n  return (mask >> i) & 1;\n}\n\nint solve(int mask, vector<int> &edges) {\n  int res = 0;\n  if(mask + 1 == (1 << n)) {\n    res = isGoodPolygon(edges);\n    return res;\n  }\n\n  for(int i = 0; i < n; i++) if(!bit(mask, i)) {\n    res += solve(mask | (1 << i), edges);\n    for(int j = i + 1; j < n; j++) if(!bit(mask, j) && L[i][j]) {\n      edges.push_back(L[i][j]);\n      res += solve(mask | (1 << i) | (1 << j), edges);\n      edges.pop_back();\n    }\n    break;\n  }\n  return res;\n}\n</pre>\n<p>\n  The overall time complexity is O(g(N) * N).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U115cH_nb8-_AoogKPsG8AFaLtdsJeln12NECepgS269NleLAyVEaC30i1d_KNqKDGQPu4uQA/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000051132","statement":"<h3>Problem</h3>\n<p>\n  Pari is a powerful fairy who is fighting to protect Fairyland from evil witches. The witches are becoming more powerful every day, so Pari must use magical sticks to cast a protection spell. She can do this by arranging the sticks to form a convex polygon with non-zero area.\n</p>\n<p>\n  However, Pari cannot necessarily use whichever sticks she wants! All of the available sticks in Fairyland are packed together, forming a graph in which the edges are sticks and the nodes are endpoints of one or more sticks. (The sticks never touch each other except at endpoints; they are magical!) Whenever Pari removes a stick to use in her spell, all sticks that were adjacent to that stick (that is, that shared a node with that stick) disappear forever and cannot be used in the future.\n</p>\n<p>\n  Pari is wondering how many distinct subsets of sticks can be removed from the graph and used to form a convex polygon with nonzero area. All of the sticks are considered distinct, even sticks that have the same length. Two subsets of sticks are distinct if and only if there is at least one stick that is present in one subset but not the other. As stated above, a subset is only valid if there is a way to remove all of the sticks in that subset from the graph without any of them disappearing.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each case begins with one line containing one integer <b>N</b>: the number of nodes in the graph formed by the sticks.\n  Then <b>N</b> lines follow; each contains <b>N</b> integers <b>L</b><sub>i, j</sub>. The j-th value on the i-th line represents the length of the stick that has its endpoints at the i-th and j-th nodes, or 0 if there is no such stick.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is the number of valid subsets, as described above.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 40 seconds per test set.<br/>\n  Memory limit: 1 GB.<br/>\n  0 &le; <b>L</b><sub>i, j</sub> &le; 1000 for all i, j.<br/>\n  <b>L</b><sub>i, i</sub> = 0, for all i.<br/>\n  <b>L</b><sub>i, j</sub> = <b>L</b><sub>j, i</sub>, for all i, j.<br/>\n</p>\n\n<h4>Small dataset</h4>\n<p>\n  <b>N</b> = 6.<br/>\n</p>\n\n<h4>Large dataset</h4>\n<p>\n  6 &le; <b>N</b> &le; 15.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2UXR0_Sgtu5gJ8dxOFynub18E5hDH_6AoCx3cztD0G7cBs36LhZhTjO1XJ5Uu2Ewri6ybDNyDPRzDntV0isSRnbGjkMrbPyoCT4Nckw45IDA/fairies_and_witches_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n6\n0 1 0 0 0 0\n1 0 1 0 0 0\n0 1 0 1 0 0\n0 0 1 0 1 0\n0 0 0 1 0 1\n0 0 0 0 1 0\n6\n0 2 0 0 0 0\n2 0 0 0 0 0\n0 0 0 3 0 0\n0 0 3 0 0 0\n0 0 0 0 0 4\n0 0 0 0 4 0\n6\n0 1 0 0 0 0\n1 0 0 0 0 0\n0 0 0 2 0 0\n0 0 2 0 0 0\n0 0 0 0 0 4\n0 0 0 0 4 0\n6\n0 1 1 1 1 1\n1 0 0 0 0 0\n1 0 0 0 0 0\n1 0 0 0 0 0\n1 0 0 0 0 0\n1 0 0 0 0 0\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Fp0oUbG3m5aCKJnCUmcNB-_fK8hLplnxEkmVKtJBfvO155YkHOr9klxMRL5bjqkAWIm3knxZyRVAvTAkIv0kFX8djwKzzR-WneVpOVArihIk/fairies_and_witches_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 1\nCase #3: 0\nCase #4: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, the packing graph contains 5 edges of equal length; representing these by the nodes they connect, these are 1-2, 2-3, 3-4, 4-5, and 5-6. To form a closed polygon, we need at least 3 sides, but the only way to remove 3 sticks is to select sticks 1-2, 3-4, and 5-6.\n</p>\n\n<p>\n  In Sample Case #2, the graph contains 3 sticks, 1-2, 3-4, and 5-6. Note that graph can be disconnected. We can form a triangle with side lengths of 2, 3, and 4.\n</p>\n\n<p>\n  In Sample Case #3, the graph contains 3 sticks, 1-2, 3-4, and 5-6. But we cannot form a closed polygon using sticks of lengths 1,2 and 4.\n</p>\n\n<p>\n  In Sample Case #4, we cannot remove more than 1 stick.\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U27B9HHRR_C2JIU0RZDdXtFb2tmt3-NSuivCz_J6tMJIQO-kQqT0cXtaVqztRLkGKkV1d0qyOZ0fmes8jPAXq3oT6JB5PT1FeFp4SNiJSt3yg/fairies_and_witches_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">1\n8\n0 5 0 0 0 0 0 0\n5 0 0 0 0 0 0 0\n0 0 0 5 0 0 0 0\n0 0 5 0 0 0 0 0\n0 0 0 0 0 5 0 0\n0 0 0 0 5 0 0 0\n0 0 0 0 0 0 0 5\n0 0 0 0 0 0 5 0\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3qnLqBIN3yQ9STUsb7tDppGH9wg40yYYvROR3iuNBWiOnJIZzmbRhG-1oHK-FsaHacGX4EY-N8C-M4Y22GwyEa8r8YCKn7rjsLgNwoZ8QtwuA/fairies_and_witches_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, all 4 sticks are of the same length. There are 4 ways to form a triangle and one way to form a square.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":15},{"type":2,"type__str":"HIDDEN","value":21}],"title":"Fairies and Witches","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Kickstart Alarm: Analysis</h2>\n<p>\n  The problem asks us to calculate the summation of power of each wakeup call: $$$POWER_1 + POWER_2 + \\ldots + POWER_K $$$, where $$$POWER_i$$$ is just the summation of the $$$i$$$-th exponential-power of all the contiguous subarrays of the Parameter Array.\n</p>\n<h3>Small dataset</h3>\n<p>\n  For Small dataset, we can iterate over every subarray of the given array and calculate the summation of $$$POWER_i$$$ for all $$$i \\le K$$$. Thus, the simplest brute solution will work for Small dataset.\n</p>\n<p>\n  Pseudocode for Small dataset:\n</p>\n<pre>\n  result = 0\n  for(k in 1 to K) {\n    for(L in 1 to N) {\n      for(R in L to N) {\n        for(j in L to R) {\n          result = result + A[j] * pow(j-L+1,k)\n          result %= 1000000007\n        }\n      }\n    }\n  }\n</pre>\n<p>\n  In the above pseudcode, we can precompute all the $$$pow(a,b)$$$ values for $$$1 \\le a \\le n$$$ and $$$1\\le b \\le k$$$.\n  <br/>\n  The overall time complexity is $$$O(N^3 \\times K)$$$.\n</p>\n<h3>Large dataset</h3>\n<p>\n  The above solution will not work for Large dataset.\n  To solve for Large dataset, let's iterate over every position $$$x$$$ and calculate the contribution by $$$A_x$$$ to the result\n  for all subarrays where this element is $$$y$$$-th element in the subarray.\n  <ul>\n  <li> If $$$y>x$$$, there is no subarray such that $$$A_x$$$ can be $$$y$$$-th element.</li>\n  <li> For $$$y \\le x$$$, there is exactly one index where the subarray must start (i.e $$$y-1$$$ places before $$$x$$$).\n    Hence, all the subarrays\n  starting at $$$(n-(y-1))$$$ and ending on or after index $$$x$$$ will have $$$A_x$$$ at position $$$y$$$ in the subarray. Therefore, the number of\n  subarrays with element $$$A_x$$$ at $$$y$$$-th position in the subarray will be $$$(n-x+1)$$$.<br/>\n    Contribution from this element as $$$y$$$-th element in one subarray =\n    $$$A_x \\times y^1 + A_x \\times y^2 + \\ldots + A_x \\times y^K$$$.\n  <br/>\n    Let us denote with $$$S(x,y)$$$ as the contribution from this element as $$$y$$$-th element in all subarrays.\n    Combining above observations, we can show that\n    $$$S(x,y) = (n-x+1) \\times A_x \\times  (y^1 + y^2  + \\ldots  +y^K) $$$. </li>\n  <li>$$$ S(x,y) = 0 $$$ for $$$ y > x $$$. </li>\n  <li>$$$S(x,y) = A_x \\times K\\times (n-x+1)$$$ for $$$y=1$$$.</li>\n  <li>$$$S(x,y) = \\frac{(n-x+1) \\times  A_x \\times  y\\times (y^K-1)}{(y-1)}$$$ for $$$y \\le x$$$ and $$$y>1$$$. </li>\n  </ul>\n</p>\n<p>\nContribution by element at position $$$x$$$ to the result (let us say $$$C(x)$$$ ) = $$$\\sum S(x,y)$$$ for $$$1 \\le y \\le n$$$ <br/>\n  $$$= (n-x+1)\\times  A_x \\times (K + \\frac{2\\times (2^K-1)}{(2-1)} + \\frac{3\\times (3^K - 1)}{(3-1)} + \\ldots \\frac{x\\times (x^K-1)}{(x-1)})$$$.\n</p>\n\n<p>\nSo we can find the contribution by element at position $$$x$$$ in $$$O(N\\times \\log(K))$$$. This gives us a $$$O(N^2 \\times  \\log(K))$$$ solution to compute contribution of all\nthe elements.\n</p>\n<p>\n\n  Let us define $$$G(x) = \\frac{C(x)}{(A_x\\times (n-x+1))} = K + \\frac{2\\times (2^K-1)}{(2-1)} + \\frac{3\\times (3^K - 1)}{(3-1)} + \\ldots \\frac{x\\times (x^K-1)}{(x-1)}$$$.<br/>\n  Now if we look closely at $$$G(x)$$$ and $$$G(x+1)$$$, we can observe that\n  <br/>\n  $$$G(x+1) = G(x) + \\frac{(x+1)\\times ((x+1)^K -1)}{x}$$$.<br/>\nHence we can compute $$$G(x+1)$$$ from $$$G(x)$$$ in $$$O(\\log(K))$$$ time. And subsequently $$$C(x+1)$$$.\n</p>\n<p>\nTherefore the total time complexity  = $$$O(N\\times \\log(K))$$$.\n</p>\n<p>\n  Pseudocode for Large dataset:\n</p>\n<pre>\n  G[1] = K\n  C[1] = A[1] * K * n\n  result = C[1]\n  for(i in 2 to n){\n    // Using the formula derived above to get G[i] from C[i-1]\n    G[i+1] = G[i] + i * (i^K - 1) / (i - 1)\n    C[i] = G[i] * A[i] * (n - i + 1) <br/>\n    result = result + C[i]\n    result %= 1000000007\n  }\n</pre>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U14m2HK9uTqr0_DUy-352Q__qCIusOHww0c9rSiX1mR9P3y_yCyrTmpXxIbtPXHDT8eDgTKdQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000051133","statement":"<h3>Problem</h3>\n<p>\n  Shil has a very hard time waking up in the morning each day, so he decides to buy a powerful alarm\n  clock to Kickstart his day. This Alarm is called a Kickstart Alarm. It comes pre-configured with\n  <b>K</b> powerful wakeup calls. Before going to bed, the user programs the clock with a Parameter\n  Array consisting of the values <b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>, ..., <b>A<sub>N</sub></b>.\n  In the morning, the clock will ring <b>K</b> times, with the i-th wakeup call having power POWER<sub>i</sub>.\n</p>\n<p>\n  To calculate POWER<sub>i</sub>, the alarm generates all the contiguous subarrays of the Parameter\n  Array and calculates the summation of the i-th exponential-power of all contiguous subarrays.\n  The i-th exponential-power of subarray <b>A<sub>j</sub></b>, <b>A<sub>j+1</sub></b>, ..., <b>A<sub>k</sub></b>\n  is defined as <b>A<sub>j</sub></b>  &times; 1<sup>i</sup> + <b>A<sub>j+1</sub></b> &times;\n  2<sup>i</sup> + <b>A<sub>j+2</sub></b> &times; 3<sup>i</sup> + ... + <b>A<sub>k</sub></b> &times; (k-j+1)<sup>i</sup>.\n  So POWER<sub>i</sub> is just the summation of the i-th exponential-power of all the contiguous subarrays of the Parameter Array.\n</p>\n<p>\n  For example, if i = 2, and <b>A</b> = [1, 4, 2], then the i-th exponential-power of <b>A</b> would be calculated as follows:<br/>\n  <ul>\n  <li>2-nd exponential-power of [1] = 1 &times; 1<sup>2</sup> = 1</li>\n  <li>2-nd exponential-power of [4] = 4 &times; 1<sup>2</sup> = 4</li>\n  <li>2-nd exponential-power of [2] = 2 &times; 1<sup>2</sup> = 2</li>\n  <li>2-nd exponential-power of [1, 4] = 1 &times; 1<sup>2</sup> + 4 &times; 2<sup>2</sup> = 17</li>\n  <li>2-nd exponential-power of [4, 2] = 4 &times; 1<sup>2</sup> + 2 &times; 2<sup>2</sup> = 12</li>\n  <li>2-nd exponential-power of [1, 4, 2] = 1 &times; 1<sup>2</sup> + 4 &times; 2<sup>2</sup> + 2 &times; 3<sup>2</sup> = 35</li>\n  </ul>\n  so the total is 71.\n</p>\n\n<p>\n  Tonight, Shil is using his Kickstart Alarm for the first time. Therefore, he is quite worried about\n  the sound the alarm might make in the morning. It may wake up the neighbors, or, worse yet, it may wake up the whole planet!\n  However, calculating the power of each wakeup call is quite difficult for him.\n  Given <b>K</b> and the Parameter Array <b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>, ..., <b>A<sub><b>N</b></sub></b>,\n  can you help him by calculating the summation of power of each wakeup call:\n  POWER<sub>1</sub> + POWER<sub>2</sub> + ... + POWER<sub>K</sub>?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b>\n  test cases follow. Each test case consists of one line with nine integers\n  <b>N, K, x<sub>1</sub>, y<sub>1</sub>, C, D, E<sub>1</sub>, E<sub>2</sub></b> and <b>F</b>.\n  <b>N</b> is the length of array <b>A</b>, <b>K</b> is the number of wakeup calls.\n  Rest of the values are parameters that you should use to generate the elements of the array <b>A</b>, as follows.\n</p>\n<p>\n   Use the recurrences below to generate x<sub>i</sub> and y<sub>i</sub> for i = 2 to <b>N</b>:\n   <ul>\n     <li>x<sub>i</sub> = ( <b>C</b> &times; x<sub>i-1</sub> + <b>D</b> &times; y<sub>i-1</sub> + <b>E<sub>1</sub></b> ) modulo <b>F</b>.</li>\n   <li>y<sub>i</sub> = ( <b>D</b> &times; x<sub>i-1</sub> + <b>C</b> &times; y<sub>i-1</sub> + <b>E<sub>2</sub></b> ) modulo <b>F</b>.</li>\n   </ul>\nWe define <b>A<sub>i</sub></b> = ( x<sub>i</sub> + y<sub>i</sub> ) modulo <b>F</b>, for all i = 1 to <b>N</b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: POWER</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>POWER</code> is the summation of POWER<sub>i</sub>, for i = 1 to <b>K</b>.\n  Since <code>POWER</code> could be huge, print it modulo 1000000007 (10<sup>9</sup> + 7).\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 90 seconds per test set.<br/>\n  Memory limit: 1 GB.<br/>\n  1 &le; <b>x<sub>1</sub></b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>y<sub>1</sub></b> &le; 10<sup>5</sup><br/>\n  1 &le; <b>C</b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>D</b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>E<sub>1</sub></b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>E<sub>2</sub></b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>F</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  1 &le; <b>N</b> &le; 100.<br/>\n  1 &le; <b>K</b> &le; 20.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  1 &le; <b>N</b> &le; 10<sup>6</sup>.<br/>\n  1 &le; <b>K</b> &le; 10<sup>4</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0LcLn0trELWHqKls2ItCbPvxfOdjZVE_srO6EQ1NPIbcGWOAmQ_m4Q39O-btJ-FU77Ox6RY6TxDUMrVsZLJGbDkkmEM5Iwk9WbQfzn/kickstart_alarm_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2 3 1 2 1 2 1 1 9\n10 10 10001 10002 10003 10004 10005 10006 89273\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1aBxquOpajV1IRPMTrSKr_WQdcjP9XpCVjjibypSLGAF4AaZQfNzQaOWiVIQkwAfDf1Nv40d8Zb0Rnj_2MGXojcvefh-robSU_SXyK8A/kickstart_alarm_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 52\nCase #2: 739786670\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, the Parameter Array is [3, 2].\n  All the contiguous subarrays are [3], [2], [3, 2].\n</p>\n<p>\n  For i = 1:\n  <ul>\n  <li>1-st Exponential-power of [3] = 3 &times; 1<sup>1</sup> = 3</li>\n  <li>1-st Exponential-power of [2] = 2 &times; 1<sup>1</sup> = 2</li>\n  <li>1-st Exponential-power of [3, 2] = 3 + 2 &times; 2<sup>1</sup> = 7</li>\n  </ul>\n  So POWER<sub>1</sub> is 12.<br/>\n</p>\n\n<p>\n  For i = 2:\n  <ul>\n  <li>2-nd Exponential-power of [3] = 3 &times; 1<sup>2</sup> = 3</li>\n  <li>2-nd Exponential-power of [2] = 2 &times; 1<sup>2</sup> = 2</li>\n  <li>2-nd Exponential-power of [3, 2] = 3 + 2 &times; 2<sup>2</sup> = 11</li>\n  </ul>\n  So POWER<sub>2</sub> is 16.<br/>\n</p>\n\n<p>\n  For i = 3:\n  <ul>\n  <li>3-rd Exponential-power of [3] = 3 &times; 1<sup>3</sup> = 3</li>\n  <li>3-rd Exponential-power of [2] = 2 &times; 1<sup>3</sup> = 2</li>\n  <li>3-rd Exponential-power of [3, 2] = 3 + 2 &times; 2<sup>3</sup> = 19</li>\n  </ul>\n  So POWER<sub>3</sub> is 24.<br/>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":13},{"type":2,"type__str":"HIDDEN","value":26}],"title":"Kickstart Alarm","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000050ee0","type":1,"type__str":"SPECTATOR"},"title":"Round C"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
