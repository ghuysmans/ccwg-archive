{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1492885800000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"000000000020187f","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  We're trotting through the Round 1s one weekend at a time, and Round 1B\n  featured a lot of horsepower. Perhaps you used a test harness, or\n  accidentally started your Java program with\n  <code>public static void mane</code>, or tried to print in C++ using\n  <code>colt &lt;&lt; </code>, or attempted to reserve memory in C using\n  <code>gallop</code>. At least we didn't give you a problem on the\n  <a href=\"https://en.wikipedia.org/wiki/Cantor_set\" target=\"_blank\">Canter set</a> or make you\n  write an\n  (e)<a href=\"https://en.wikipedia.org/wiki/Quine_(computing)\" target=\"_blank\">quine</a>!\n</p><p>\n  <i>Steed 2: Cruise Control</i> riffed on a\n  <a href=\"https://en.wikipedia.org/wiki/Speed_2:_Cruise_Control\" target=\"_blank\">1990s movie franchise</a>;\n  its author came up with it while stuck in slow traffic! It was a potentially\n  complicated-looking problem that turned out to have a straightforward\n  solution. In <i>Stable Neigh-bors</i>, figuring out how to arrange unicorns\n  was only half the fun; the implementation was potentially tricky! Finally,\n  <i>Pony Express</i> was a graph problem with an unconventional solution.\n</p><p>\n  This round's hardest problem proved significantly easier than Round 1A's, allowing JAPLJ to claim first place really early with a perfect score with no wrong tries in under 40 minutes! When the dust settled, 347 contestants achieved perfect scores. About 800 other contestants managed to solve all problems except one Large, and most of them had enough points or a low enough penalty to qualify to Round 2.\n</p><p>\n  Our top 1,000 from this round advance to Round 2, joining the 1,000 who\n  advanced from Round 1A. There's still one more chance to advance in Round 1C next week!\n</p>\n<hr>\n<p>\n  <b>Cast</b>\n</p><p>\n  Problem A (Steed 2: Cruise Control): Written and prepared by Ian Tullis.\n</p><p>\n  Problem B (Stable Neigh-bors): Written and prepared by Ian Tullis.\n</p><p>\n  Problem C (Pony Express): Written by Pablo Heiber. Prepared by Philipp\n  Hoffmann.\n</p><p>\n  Solutions and other problem preparation and review by Liang Bai, Shane Carr,\n  Md Mahbubul Hasan, Taman (Muhammed) Islam, Lalit Kundu, Petr Mitrichev, Rohan\n  Mukkamala, Igor Naverniouk, Chieu Nguyen, and Josef Ziegler.\n</p>\n<p>\n  Analysis authors:\n</p>\n<ul>\n  <li>Steed 2: Cruise Control: Ian Tullis</li>\n  <li>Stable Neigh-bors: Ian Tullis</li>\n  <li>Pony Express: Pablo Heiber</li>\n</ul>\n","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1492876800000,"tasks":[{"analysis":"<h2>Stable Neigh-bors: Analysis</h2>\n\n<h3>Small dataset</h3>\n<p>\n  In the Small dataset, all of the unicorns have manes with only a single\n  primary color: red, yellow, or blue. None of these manes share any primary\n  colors, so our only restriction is that two unicorns with the same mane color\n  cannot be next to each other. However, one color might be so common that it\n  is impossible to avoid putting two unicorns with that color next to each\n  other. If we space unicorns with the most common color out, with some other\n  unicorn between each pair of them, then we can accommodate up to\n  floor(<b>N</b>/2) of the most common color. If we have more than that number\n  with any color, the case is impossible.\n</p><p>\n  Otherwise, we can extend this \"every other stall\" strategy to work for any\n  case. Start at some arbitrary position on the ring of stalls, and place\n  unicorns in the first, third, fifth, etc. stalls, all the way around the\n  ring. When you reach the starting point again, continue to place unicorns in\n  the second, fourth, sixth, etc. stalls. As you do this, place all of the\n  unicorns with the most common mane color, and then all the unicorns with the\n  next most common mane color, and then all the rest. Because all of these\n  colors have a frequency no greater than floor(<b>N</b>/2), it is not possible\n  for this placement strategy to put two unicorns with the same color next to\n  each other.\n</p>\n<h3>Large dataset</h3>\n<p>\n  The Large dataset introduces more complications. Unicorns with a\n  secondary-colored mane (orange, green, or violet) can only have one type of\n  neighbor. An orange-maned unicorn must be next to two blue-maned unicorns;\n  similarly, a yellow must be next to purples, and a red must be next to greens.\n</p><p>\n  How many instances of a primary color do we need to \"surround\" all unicorns\n  with the corresponding secondary-colored mane? If the secondary color and its\n  primary neighbor are the only two colors available, then there must be equal\n  numbers of those two colors. Otherwise, if there are <i>S</i> instances of\n  the secondary color, we need at least <i>S</i> + 1 instances of the primary\n  color.\n</p><p>\n  Moreover, we might as well put all secondary colors of the same type together\n  (separated by the primary color, of course) in a single chain. Any valid\n  arrangement without that property can be rearranged to have that property.\n  For instance, suppose that we have two separate R-G-R chains separated by two\n  other valid chains Z and Z': R-G-R-Z-R-G-R-Z'-. We can just rearrange this to\n  R-G-R-G-R-Z-R-Z'-, which must also be valid.\n</p><p>\n  A final useful insight is that an R-G-R-G-R chain, for example, acts just\n  like a single R in terms of what can neighbor it on either side. So one\n  strategy for the Large is: first, check for the case mentioned above in which\n  only one secondary color and its neighboring primary color are present.\n  Otherwise, for each secondary color, check that there are enough\n  primary-color unicorns to surround the secondary-color unicorns in a chain.\n  Then pretend that each of these chains is just a single instance of the\n  primary-colored mane from that chain; this reduces the problem to primary\n  colors, and the algorithm for the Small dataset works. You can substitute\n  each chain back in (for some arbitrary instance of the appropriate primary\n  color) once that algorithm has finished.\n</p><p>\n  These Small and Large solutions run in O(<b>N</b>) time, and they are bound\n  by reading the input, checking color frequencies, and printing the output.\n  Other, more complex solutions (e.g., dynamic programming) also exist.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3sMwgG1zIgHZFH7_o0_sl8NWfDnRz3Us8OcXfrulLScNMITNQXGBOfvzee8MaRan78tsxmzsxG/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n\n","id":"0000000000201804","statement":"<h3>Problem</h3>\n\n<p>\n  You are lucky enough to own <b>N</b> pet unicorns. Each of your unicorns has\n  either one or two of the following kinds of hairs in its mane: red hairs,\n  yellow hairs, and blue hairs. The color of a mane depends on exactly which\n  sorts of colored hairs it contains:\n</p>\n<ul>\n  <li>A mane with only one color of hair appears to be that color. For example,\n    a mane with only blue hairs is blue.</li>\n  <li>A mane with red and yellow hairs appears orange.</li>\n  <li>A mane with yellow and blue hairs appears green.</li>\n  <li>A mane with red and blue hairs appears violet.</li>\n</ul>\n<p>\n  You have <b>R</b>, <b>O</b>, <b>Y</b>, <b>G</b>, <b>B</b>, and <b>V</b>\n  unicorns with red, orange, yellow, green, blue, and violet manes,\n  respectively.\n</p><p>\n  You have just built a circular stable with <b>N</b> stalls, arranged in a\n  ring such that each stall borders two other stalls. You would like to put\n  exactly one of your unicorns in each of these stalls. However, unicorns need\n  to feel rare and special, so no unicorn can be next to another unicorn that\n  shares at least one of the hair colors in its mane. For example, a unicorn\n  with an orange mane cannot be next to a unicorn with a violet mane, since\n  both of those manes have red hairs. Similarly, a unicorn with a green mane\n  cannot be next to a unicorn with a yellow mane, since both of those have\n  yellow hairs.\n</p><p>\n  Is it possible to place all of your unicorns? If so, provide any one\n  arrangement.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b>\n  test cases follow. Each consists of one line with seven integers: <b>N</b>,\n  <b>R</b>, <b>O</b>, <b>Y</b>, <b>G</b>, <b>B</b>, and <b>V</b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>y</code>\n  is <code>IMPOSSIBLE</code> if it is not possible to place all the unicorns,\n  or a string of <b>N</b> characters representing the placements of unicorns in\n  stalls, starting at a point of your choice and reading clockwise around the\n  circle. Use <code>R</code> to represent each unicorn with a red mane,\n  <code>O</code> to represent each unicorn with an orange mane, and so on with\n  <code>Y</code>, <code>G</code>, <code>B</code>, and <code>V</code>. This\n  arrangement must obey the rules described in the statement above.\n</p><p>\n  If multiple arrangements are possible, you may print any of them.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds per test set.<br/>\nMemory limit: 1 GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n  3 &le; <b>N</b> &le; 1000.<br/>\n  <b>R</b> + <b>O</b> + <b>Y</b> + <b>G</b> + <b>B</b> + <b>V</b> =\n  <b>N</b>.<br/>\n  0 &le; Z for each Z in {<b>R</b>, <b>O</b>, <b>Y</b>, <b>G</b>, <b>B</b>,\n  <b>V</b>}.<br/>\n</p>\n\n<h4>Small dataset (Test Set 1 - Visible)</h4>\n<p>\n  <b>O</b> = <b>G</b> = <b>V</b> = 0. (Each unicorn has only one hair color in\n  its mane.)<br/>\n</p>\n\n<h4>Large dataset (Test Set 2 - Hidden)</h4>\n<p>\n  No restrictions beyond the general limits. (Each unicorn may have either one\n    or two hair colors in its mane.)<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1wbwkpem2A9e1Lq9LUNus_SQCSF1oZXkvsZf9c1RIquW2tf7GPPmLekEd6lYjfZq621qQh7_7LkeNYO9yVyQN5qy6Pm-iXnFIXCMsQoOxVTA/stable_neigh-bors_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n6 2 0 2 0 2 0\n3 1 0 2 0 0 0\n6 2 0 1 1 2 0\n4 0 0 2 0 0 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1i7-NhJSRlxNN90tIrJG-fcW3Mz36RahdUVwZsq_dIDM7_RpY91PxBTli_nEdAYQtv7y6-Wk2ytmDBI4R20jNqLGYQjJCOgky8A4GQYgxMN-E/stable_neigh-bors_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: RYBRBY\nCase #2: IMPOSSIBLE\nCase #3: YBRGRB\nCase #4: YVYV\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  Note that the last two sample cases would not appear in the Small dataset.\n</p><p>\n  For sample case #1, there are many possible answers; for example, another is\n  <code>BYBRYR</code>. Note that <code>BYRYRB</code> would <i>not</i> be a\n  valid answer; remember that the stalls form a ring, and the first touches\n  the last!\n</p><p>\n  In sample case #2, there are only three stalls, and each stall is a neighbor\n  of the other two, so the two unicorns with yellow manes would have to be\n  neighbors, which is not allowed.\n</p><p>\n  For sample case #3, note that arranging the unicorns in the same color\n  pattern as the Google logo (<code>BRYBGR</code>) would not be valid, since a\n  unicorn with a blue mane would be a neighbor of a unicorn with a green mane,\n  and both of those manes share blue hairs.\n</p><p>\n  In sample case #4, no two unicorns with yellow manes can be neighbors, and\n  no two unicorns with violet manes can be neighbors.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":13},{"type":2,"type__str":"HIDDEN","value":22}],"title":"Stable Neigh-bors","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Pony Express: Analysis</h2>\n<h3>Small dataset</h3>\n<p>\nIn the Small dataset, we are given a line of cities and the distances between them, and we want to\ngo from the first to the last city in the line. However, we need to minimize the time and not the\ndistance, and the obvious way to transform between the two (divide by speed) does not work\ndirectly, because the horses we can use have different speeds. The solution, as in many\nminimization algorithms on a path that only moves forward, is to use\n<a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\">dynamic programming</a>.\n</p><p>\nLet us define f(i) as the quickest way to get from city i to the finish line, assuming we start\nusing the horse at city i. Of course, f(1) is the answer to the only query.\n</p><p>\nWe do not know where we need to change horses, but we can try every possible intermediate city j\nto change horses, thus completely defining f(i) by:\n</p>\n<ul>\n  <li>f(i) = min { distance(i, j) / speed(i) + f(j) : for all j such that distance(i, j) &le;\n        endurance(i) }, for i &lt; <b>N</b>.</li>\n  <li>f(<b>N</b>) = 0.</li>\n</ul>\n<p>\nThis solves the problem in O(<b>N</b><sup>2</sup>) because the domain of f is of size <b>N</b>\nand the iteration to calculate each value of the domain takes time O(<b>N</b>) if we memoize the\nresults. There are other dynamic programming approaches that also work in the same amount of time.\n</p>\n<h3>Large dataset</h3>\n<p>\nIn the Large dataset, we are given a graph G of cities with distances between\nthem instead of just a line, but the setup of the problem is otherwise the same.\n</p><p>\nAs mentioned above, one relatively unusual feature of this graph problem is that the desired\nresult (time) is not in the same units as the weights of the graph's edges (distance). Moreover,\nthe obvious way to transform between the two (speed) is not a constant.\nThis observation leads to a key insight: we should construct a new graph with weights of time\ninstead of distance. That way, we can apply a\n<a href=\"https://en.wikipedia.org/wiki/Shortest_path_problem\">shortest\npath</a> algorithm to get the result we want.\n</p><p>\nWe can do this by defining a graph G' that has the same nodes as G, but in which the weight\nof edge (i, j) is the time that it takes to go from\ncity i to city j. As we said above, there is no fixed speed, but we can\nfix it. The edge (i, j) then represents the time it takes to go from\ncity i to city j using a single horse, and the obvious choice is to\nuse the horse at the departure city i. Let us call that horse h.\nIn this way, the edge (i, j) on\nG' represents a path on G, traversed using a single horse. That means the\nedge (i, j) exists if and only if there is a path between i and j in G\nwith distance less than or equal to h's endurance. Moreover, the\nweight (i, j) is a time now defined by a single speed, h's speed, and\nthus it is just the distance between i and j in G, divided by h's speed.\nYou can see that a minimum path from a to b in G' represents a\nsuccession of edges in G', that is, a succession of single-horse paths\nin G, which is exactly what a solution looks like!\n</p><p>\nSince the limits are low enough, and we need all shortest paths in G\nto construct G', and many shortest paths in G' to answer many queries,\nthe best option is to use an all-pairs shortest path algorithm.\n<a href=\"https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm\">\nFloyd-Warshall</a> is the easiest and fastest to implement, but others would work too. To also\ncheck for existence of paths, you can use the trick of setting weights\nto \"infinity\", that is, a distance too large for an actual shortest\npath (larger than maximum distance &times; number of total edges). Thus,\nan infinity distance simply means the edge or path does not exist in the\ngraph.\n</p><p>\nTo summarize, this pseudocode solves the problem:\n</p><ol>\n<li>Apply Floyd-Warshall to input G getting distances between all pairs\n  of nodes.</li>\n<li>Create G' by adding all edges (i, j) such that the distance between\n  i and j in G is less than or equal to the horse starting at city i's\n  endurance, and set their weights to that same distance divided by that\n  horse's speed.</li>\n<li>Apply Floyd-Warshall to G' to get minimum times between all pairs\n  of nodes.</li>\n<li>Read queries and answer immediately from the output of the last\n  step.</li>\n</ol>\n<p>\nThis solution takes time O(<b>N</b><sup>3</sup>). Both uses of Floyd-Warshall take time\nO(<b>N</b><sup>3</sup>), and creating G' as an adjacency matrix only takes time\nO(<b>N</b><sup>2</sup>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2WfgKRF1L8iuU0nxAoUaT9DOXn51j4C7ruyooV8x2MvNJtkXwbW6-eNwK6AKW_m7LqTaAy0Zgf/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n\n","id":"000000000020184d","statement":"<h3>Problem</h3>\n<p>\n  It's the year 1860, and the Pony Express is the fastest mail delivery system\n  joining the East and West coasts of the United States. This system\n  serves <b>N</b> different cities. In each city, there is one horse (as in the\n  expression \"one-horse town\"); each horse travels at a certain constant speed\n  and has a maximum total distance it can travel before it becomes too tired to\n  continue.\n</p><p>\n  The Pony Express rider starts off on the starting city's horse. Every time the\n  rider reaches a city, they may continue to use their current horse or switch\n  to that city's horse; switching is instantaneous. Horses never get a chance to\n  rest, so whenever part of a horse's maximum total distance is \"used up\", it is\n  used up forever! When the rider reaches the destination city, the mail is\n  delivered.\n</p><p>\n  The routes between cities were established via complicated negotiations\n  between company owners, lawmakers, union delegates, and cousin Pete. That\n  means that the distances between cities do not necessarily follow common\n  sense: for instance, they do not necessarily comply with the triangle\n  inequality, and the distance from city A to city B might be different from the\n  distance from city B to city A!\n</p><p>\n  You are a time traveling entrepreneur, and you have brought a fast computer\n  from the future. A single computer is not enough for you to set up an e-mail\n  service and make the Pony Express obsolete, but you can use it to make optimal\n  routing plans for the Pony Express. Given all data about routes between cities\n  and the horses in each city, and a list of pairs of starting and ending\n  cities, can you quickly calculate the minimum time necessary for each\n  delivery? (You should treat all of these deliveries as independent; using\n  cities/horses on one route does not make them unavailable on other routes.)\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow. Each test case is described as follows:\n</p>\n<ul>\n  <li>One line with two integers: <b>N</b>, the number of cities with horses,\n  and <b>Q</b>, the number of pairs of stops we are interested in. Cities are\n  numbered from 1 to <b>N</b>.\n  </li>\n  <li>\n  <b>N</b> lines, each containing two integers <b>E</b><sub>i</sub>, the maximum\n  total distance, in kilometers, the horse in the i-th city can go\n  and <b>S</b><sub>i</sub>, the constant speed, in kilometers per hour, at which the\n  horse travels.\n  </li>\n  <li>\n  <b>N</b> lines, each containing <b>N</b> integers. The j-th integer on the\n  i-th of these lines, <b>D</b><sub>ij</sub>, is -1 if there is no direct route\n  from the i-th to the j-th city, and the length of that route in kilometers otherwise.\n  </li>\n  <li>\n  <b>Q</b> lines containing two integers <b>U</b><sub>k</sub>\n  and <b>V</b><sub>k</sub>, the starting and destination point, respectively, of\n  the k-th pair of cities we want to investigate.\n  </li>\n</ul>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y<sub>1</sub>\n  y<sub>2</sub> ...  y<sub><b>Q</b></sub></code>, where <code>x</code> is the\n  test case number (starting from 1) and <code>y<sub>k</sub></code> is the\n  minimum time, in hours, to deliver a letter from city <b>U</b><sub>k</sub> to\n  city <b>V</b><sub>k</sub>.\n</p><p>\n  Each <code>y<sub>k</sub></code> will be considered correct if it is within an\n  absolute or relative error of 10<sup>-6</sup> of the correct answer. See\n  the <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq\" target=\"_blank\">FAQ</a> for an explanation of\n  what that means, and what formats of real numbers we accept.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds per test set.<br/>\nMemory limit: 1 GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n  2 &le; <b>N</b> &le; 100.<br/>\n  1 &le; <b>E</b><sub>i</sub> &le; 10<sup>9</sup>, for all i.<br/>\n  1 &le; <b>S</b><sub>i</sub> &le; 1000, for all i.<br/>\n  -1 &le; <b>D</b><sub>ij</sub> &le; 10<sup>9</sup>, for all i, j.<br/>\n  <b>D</b><sub>ii</sub> = -1, for all i. (There are no direct routes from a city to itself.)<br/>\n  <b>D</b><sub>ij</sub> &ne; 0, for all i, j.<br/>\n  <b>U</b><sub>k</sub> &ne; <b>V</b><sub>k</sub>, for all k.<br/>\n  It is guaranteed that the delivery from <b>U</b><sub>k</sub> to <b>V</b><sub>k</sub> can be\n  accomplished with the given horses, for all k.<br/>\n  <b>U</b><sub>l</sub> &ne; <b>U</b><sub>m</sub> and/or <b>V</b><sub>l</sub> &ne; <b>V</b><sub>m</sub>,\n  for all different l, m. (No ordered pair of cities to investigate is repeated within a test case.)<br/>\n</p>\n\n<h4>Small dataset (Test Set 1 - Visible)</h4>\n<p>\n  <b>D</b><sub>ij</sub> = -1, for all i, j where i + 1 &ne; j.\n  (The cities are in a single line; each route goes from one city to the next city in line.)<br/>\n  <b>Q</b> = 1.<br/>\n  <b>U</b><sub>1</sub> = 1.<br/>\n  <b>V</b><sub>1</sub> = <b>N</b>.\n  (The only delivery to calculate is between the first and last cities in the line).<br/>\n</p>\n\n<h4>Large dataset (Test Set 2 - Hidden)</h4>\n<p>\n1 &le; <b>Q</b> &le; 100.<br/>\n1 &le; <b>U</b><sub>k</sub> &le; <b>N</b>, for all k.<br/>\n1 &le; <b>V</b><sub>k</sub> &le; <b>N</b>, for all k.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2CsXFjZHQoGZcaaYFd5H7fOIVKyT2Vke9Ni1su-bWs1cb4yOHHZl98G5AYWiyNIDKo5r8jsOdAKQo1vpDoDzD4uCWVPi3S3yMXbl0/pony_express_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3 1\n2 3\n2 4\n4 4\n-1 1 -1\n-1 -1 1\n-1 -1 -1\n1 3\n4 1\n13 10\n1 1000\n10 8\n5 5\n-1 1 -1 -1\n-1 -1 1 -1\n-1 -1 -1 10\n-1 -1 -1 -1\n1 4\n4 3\n30 60\n10 1000\n12 5\n20 1\n-1 10 -1 31\n10 -1 10 -1\n-1 -1 -1 10\n15 6 -1 -1\n2 4\n3 1\n3 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U29muEX5HTAjONowtJ7bVO6E1Zs1MftPF_celnUCxlAjisaOgtZFXsH8RkBo7JhBAKqKdnWYOn9uQD-TDTK3ueTyHocNiMx65WyJ4c8/pony_express_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0.583333333\nCase #2: 1.2\nCase #3: 0.51 8.01 8.0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  Note that the last sample case would not appear in the Small dataset.\n</p><p>\n  In Case #1 there are two options: use the horse in city 1 for the entire trip,\n  or change horses in city 2. Both horses have enough endurance, so both options\n  are viable. Since the horse in city 2 is faster, it is better to change, for a\n  total time of 1/3 + 1/4.\n</p><p>\n  In Case #2 there are two intermediate cities in which you can change\n  horses. If you change horses in city 2, however, your new horse, while\n  blazingly fast, will not have enough endurance, so you will be forced to\n  change again in city 3. If you keep your horse, you will have the option to\n  change horses (or not) in city 3. So, the three options, with their total\n  times, are:\n</p><ol>\n  <li>Change horses in both city 2 and 3 (1/10 + 1/1000 + 10/8 = 1.351).</li>\n  <li>Change horses just in city 3 (2/10 + 10/8 = 1.45).</li>\n  <li>Never change horses (12/10 = 1.2).</li>\n</ol><p>\n  In Case #3, there are lots of alternatives for each delivery. The optimal one\n  for the first delivery (city 2 to city 4) is to go to city 1 in time 10/1000,\n  change horses, and then go to cities 2, 3 and 4, in that order, using the\n  horse from city 1, which takes time (10 + 10 + 10) / 60.\n</p><p>\n  For the second delivery (city 3 to city 2) you have no choice but to first go\n  to city 4 which takes time 10/5. Your relatively fast horse does not have\n  enough endurance to get anywhere else, so you need to grab the horse in city\n  4. You could use it to get directly to city 1 in time 15, but that would be\n  slower than riding it to city 2 in time 6 and then using the blazingly fast\n  horse in city 2 to get to city 1 in just 10/1000 extra time.\n</p><p>\n  In the third delivery (city 3 to city 1) of Case #3 it is optimal to use the\n  first two steps of the previous one, for a total time of 10/5 + 6 = 8.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":16},{"type":2,"type__str":"HIDDEN","value":24}],"title":"Pony Express","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Pop quiz, hotshots! This problem seems pretty complicated at first glance.\n  What do you do?\n</p><p>\n  One natural strategy is to try binary searching on Annie's speed, but it is\n  difficult to directly determine whether a given speed avoids passing another\n  horse; the input data alone does not tell us where each horse is at any given\n  time, because horses might slow other horses down. In theory, we could figure\n  out when faster horses catch up to slower horses and slow down, determine the\n  exact path of each horse, and check whether our chosen speed crosses any of\n  those paths. With only up to two horses in test set 1, this sort of\n  calculation is feasible, but it would be laborious for test set 2.\n</p><p>\n  However, we can avoid all of that work via some observations. To maximize\n  cruising speed, Annie's horse should reach the destination at exactly the\n  same time as the horse ahead of her (let's call it Horse A); there is no\n  reason to leave a gap. Either Horse A will reach the destination without\n  having to slow down (and so it will be the one that directly limits Annie's\n  speed), or it will be slowed down at some point by the horse ahead of it\n  (let's call it Horse B). The same is true for Horse B: either it will never\n  have to slow down (and so it will be the one that ultimately limits Annie's\n  speed), or it will be slowed down by the horse ahead of <i>it</i>, and so on.\n  So there will be a single \"limiting horse\" on the road that ultimately\n  determines how fast Annie's horse can reach the destination. We claim that\n  this \"limiting horse\" is the only horse that matters, and we can disregard\n  all of the others!\n</p><p>\n  It is easy to see that we can ignore the horses to the east of the limiting\n  horse; they will reach and pass the destination before the limiting horse\n  gets there. What about the \"intermediate horses\" between Annie and the\n  limiting horse? We know from the way we have defined the limiting horse that\n  every intermediate horse will catch up to the limiting horse before reaching\n  the destination. (If one did not, then <i>it</i> would be the limiting\n  horse.) Suppose that Annie chooses a cruising speed that gets her to the\n  destination at exactly the same time as the limiting horse. We certainly\n  cannot go faster than this. Moreover, this speed is safe: it cannot possibly\n  cause Annie to pass any of the intermediate horses. If she were going fast\n  enough to overtake an intermediate horse, then she would definitely be\n  going fast enough to pass the limiting horse, since every intermediate\n  horse will catch up to the limiting horse. This would cause a contradiction.\n  Therefore, we do not need to worry about the intermediate horses or their\n  interactions with each other.\n</p><p>\n  So, once we have identified the limiting horse, the strategy is simple: go at\n  the exact speed that will cause Annie to reach the destination at the same\n  time as the limiting horse. This speed can be found in constant time. We could\n  identify the limiting horse directly via the argument in our third paragraph\n  above, but even this would be unnecessary work. Instead, for each horse in\n  turn, we can pretend that it is the limiting horse and calculate the cruising\n  speed that it would force. Then the smallest of those speeds is our answer.\n  (If any horse allows a faster cruising speed than another, it cannot be the\n  limiting horse, because that cruising speed would cause Annie to pass the\n  true limiting horse.) This takes O(<b>N</b>) time.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U16tugrX3FO3OZdWiS84_D7TlbMkLIFLdF7eNFD6ngxP4ghz9p6yxJgngiCuw9Ix0pz1RIkJyNX/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n\n","id":"000000000020190e","statement":"<h3>Problem</h3>\n<p>\n  Annie is a bus driver with a high-stress job. She tried to unwind by going on\n  a Caribbean cruise, but that also turned out to be stressful, so she has\n  recently taken up horseback riding.\n</p><p>\n  Today, Annie is riding her horse to the east along a long and narrow one-way\n  road that runs west to east. She is currently at kilometer 0 of the road, and\n  her destination is at kilometer <b>D</b>; kilometers along the road are\n  numbered from west to east.\n</p><p>\n  There are <b>N</b> other horses traveling east on the same road; all of them\n  will go on traveling forever, and all of them are currently between Annie's\n  horse and her destination. The i-th of these horses is initially at kilometer\n  <b>K<sub>i</sub></b> and is traveling at its maximum speed of\n  <b>S<sub>i</sub></b> kilometers per hour.\n</p><p>\n  Horses are very polite, and a horse H<sub>1</sub> will not pass (move ahead\n  of) another horse H<sub>2</sub> that started off ahead of H<sub>1</sub>. (Two\n  or more horses can share the same position for any amount of time; you may\n  consider the horses to be single points.) Horses (other than Annie's) travel\n  at their maximum speeds, except that whenever a horse H<sub>1</sub> catches\n  up to another slower horse H<sub>2</sub>, H<sub>1</sub> reduces its speed to\n  match the speed of H<sub>2</sub>.\n</p><p>\n  Annie's horse, on the other hand, does not have a maximum speed and can\n  travel at any speed that Annie chooses, as long as it does not pass another\n  horse. To ensure a smooth ride for her and her horse, Annie wants to choose\n  a single constant \"cruise control\" speed for her horse for the entire trip,\n  from her current position to the destination, such that her horse will not\n  pass any other horses. What is the maximum such speed that she can choose?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>;\n  <b>T</b> test cases follow. Each test case begins with two integers <b>D</b>\n  and <b>N</b>: the destination position of all of the horses (in kilometers)\n  and the number of other horses on the road. Then, <b>N</b> lines follow. The\n  i-th of those lines has two integers <b>K<sub>i</sub></b> and\n  <b>S<sub>i</sub></b>: the initial position (in kilometers) and maximum speed\n  (in kilometers per hour) of the i-th of the other horses on the road.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>y</code>\n  is the maximum constant speed (in kilometers per hour) that Annie can use\n  without colliding with other horses. <code>y</code> will be considered\n  correct if it is within an absolute or relative error of 10<sup>-6</sup> of\n  the correct answer. See the\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq\" target=\"_blank\">FAQ</a> for an explanation of what\n  that means, and what formats of real numbers we accept.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  0 &lt; <b>K<sub>i</sub></b> &lt; <b>D</b> &le; 10<sup>9</sup>, for all i.<br/>\n  <b>K<sub>i</sub></b> &ne; <b>K<sub>j</sub></b>, for all i &ne; j. (No two\n    horses start in the same position.)<br/>\n  1 &le; <b>S<sub>i</sub></b> &le; 10000.<br/>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n</p>\n\n<h4>Small Dataset (Test set 1 - Visible)</h4>\n<p>\n  1 &le; <b>N</b> &le; 2.<br/>\n</p>\n\n<h4>Large Dataset (Test set 2 - Hidden)</h4>\n<p>\n  1 &le; <b>N</b> &le; 1000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3XtIz0rgTbBxqpmSy0qGVtXvBR3JqKS4-BKFhJedeLzXbN0E7RaFehsFW19Iow0q40fzO0pL8d__dZlhX85dJsgMly9vMP-UjjWacjHxHqGzYUJzKe/steed_2_cruise_control_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n2525 1\n2400 5\n300 2\n120 60\n60 90\n100 2\n80 100\n70 10\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1_PvVmBKKSTW67AygaAW_agsTqM-FcZAnHmGVahjlXrXKKdW9hpeBhkxauLprjE0RCRsc8frmEaL5u72trHmF_MJoxAzntqH-Xv9P3r2R8RxU8Ryb3Mg/steed_2_cruise_control_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 101.000000\nCase #2: 100.000000\nCase #3: 33.333333\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, there is one other (very slow!) horse on the road; it will\n  reach Annie's destination after 25 hours. Anything faster than 101 kilometers\n  per hour would cause Annie to pass the horse before reaching the destination.\n</p><p>\n  In Sample Case #2, there are two other horses on the road. The faster horse\n  will catch up to the slower horse at kilometer 240 after 2 hours. Both horses\n  will then go at the slower horse's speed for 1 more hour, until the horses\n  reach Annie's destination at kilometer 300. The maximum speed that Annie can\n  choose without passing another horse is 100 kilometers per hour.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":11},{"type":2,"type__str":"HIDDEN","value":14}],"title":"Steed 2: Cruise Control","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"000000000020187f","type":1,"type__str":"SPECTATOR"},"title":"Round 1B 2017"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
