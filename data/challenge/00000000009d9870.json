{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1648312200000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"00000000009d9870","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\nCode Jam to I/O for Women returned for its ninth year. The round started with <i>Inversions Organize</i>, helping the I/O marketing team balance an advertising display. <i>Ingredient Optimization</i> followed where a greedy strategy could help Hathai use her Thai Basil leaves optimally to serve the most customers. Next, things ramped up with <i>Interesting Outing</i> which was a hit for anyone who likes to travel. Learning about diameters of a tree would help one solve this problem. Finally, <i>Inventor Outlasting</i> closed out the set with a game between two friends personifying theme park attraction inventors. You might see theme parks reappear in the future!\n</p><p>\n<b>SoulTch</b> was the first one to achieve a perfect score and landed at the top of the scoreboard once the round concluded. <b>limli</b> came in second place solving the set only 34 seconds later, and <b>damndelion</b> rounded out the top 3. In total, 4 people managed a perfect score. More than 1800 people scored points out of 3243 participants that submitted a solution.\n</p><p>\nWe hope you enjoyed Code Jam to I/O for Women 2022 and learned a new thing or two while participating. Congratulations to those in the top 150! You will receive Google I/O branded swag, access to invite-only virtual events, as well as a $150 USD stipend to enhance your I/O viewing experience. The Code Jam to I/O for Women team will contact you soon with more information about your prize. \n</p><p>\nWe look forward to seeing you on the scoreboard in 2023. Until then, <a href=\"http://codingcompetitions.withgoogle.com/codejam\">Code Jam's</a> Qualification Round will kick off on April 1. Hone your coding skills and get ready for the competition next year with <a href=\"http://codingcompetitions.withgoogle.com/kickstart\">Kick Start</a>, which offers challenges throughout the year.</p>\n<hr>\n<hr>\n<p>\n  <b>Cast</b>\n</p>\n<p>\n  Inversions Organize: Written by Melisa Halsband. Prepared by Salma Mustafa.\n</p><p>\n  Ingredient Optimization: Written by Sumedha Agarwal. Prepared by Michelle Wang.\n</p><p>\n  Interesting Outing: Written by Frances Cooper. Prepared by Chu-ling Ko.\n</p><p>\n  Inventor Outlasting: Written by Claire Yang. Prepared by Chun-nien Chan.\n</p><p>\nSolutions and other problem preparation and review by Balganym Tulebayeva, Bianca Oe, Chakradhar Reddy, Chu-ling Ko, Chun-nien Chan, Daria Tupikina, Deeksha Kaurav, Harshada Kumbhare, Hsin-Yi Wang, Jitesh Yadav, Lizzie Sapiro Santor, Maneeshita Sharma, Marina Vasilenko, Mary Yang, Melisa Halsband, Michelle Wang, Pablo Heiber, Sadia Atique, Samiksha Gupta, Sarah Young, Sasha Fedorova, Sona Mehra, Sreya Mittal, Sumedha Agarwal, Timothy Buzzelli, Vivian Tsai, and Wendi Wang.\n</p><p>\nAnalysis authors:\n</p><ul>\n  <li>Inversions Organize: Sarah Young.</li>\n  <li>Ingredient Optimization: Salma Mustafa.</li>\n  <li>Interesting Outing: Sadia Atique.</li>\n  <li>Inventor Outlasting: Chu-ling Ko.</li>\n</ul>\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1648303200000,"tasks":[{"analysis":"<p>\n  There is exactly one way to get from one interesting sight to another using these transportation\n  methods without using any transportation method more than once. So the set of interesting places\n  and modes of transportation is an unrooted <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Tree_(graph_theory)\">tree</a>.\n</p>\n <h4>Test Set 1</h4>\n<p>\n  For Test Set 1, the limits are small enough to calculate visit time for every order in which we can\n  visit the sights. Each of the order corresponds to one\n  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Permutation\">permutation</a> of the numbers $$$1$$$ to\n  $$$\\mathbf{N}$$$, and there are $$$\\mathbf{N}!$$$ such permutations.\n</p>\n<p>\n  Once we have fixed the order we will visit the sights, we simply need to compute the distance\n  from the first sight to the second, the second to the third, and so on until we reach the end\n  point. The distance between two sights can be computed in many different ways.\n  For example, with\n  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm\">Floyd-Warshal algorithm</a>\n  or\n  running <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Breadth-first_search\">BFS</a>\n  or <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Depth-first_search\">DFS</a> $$$\\mathbf{N}$$$ times.\n  Note that you can precompute all of these distances beforehand rather\n  than re-computing them every time. Each of the mentioned algorithm has a polynomial runtime.\n  So, time to precompute is $$$O(\\mathbf{N}^2)$$$ or $$$O(\\mathbf{N}^3)$$$ for each permutation.\n  Thus, the total time complexity is $$$O(\\mathbf{N} \\times \\mathbf{N}!)$$$, which is sufficient for Test Set 1.\n</p>\n <h4>Test Set 2</h4>\n<p>\n  For Test Set 2, we need a more efficient approach. From this point onwards, we will call the set of\n  sights and the transportation methods in the input <i>tree</i>,\n  where the sights are its\n  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Vertex_(graph_theory)\">nodes</a>\n  and the transportation methods are its <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Edge_(graph_theory)\">edges</a>.\n</p>\n<p>\n  Let us consider a fixed starting node $$$S$$$ and the tree as rooted with $$$S$$$ as its root.\n  There are $$$\\mathbf{N}$$$ choices for $$$S$$$ and we will try them all.\n  Our solution traverses the rooted tree top-down, while trying to minimise the total cost.\n  While traversing, the path will go only once into each subtree. Going back to any subtree after\n  visiting it once will never be optimal. The upper bound of the cost of visiting a rooted tree is\n  $$$2 \\times \\sum(\\mathbf{C_i})$$$ (think about traversing in DFS fashion, starting from and ending at the root).\n  If any path goes more than once into any subtree, it will result\n  additional cost.\n</p>\n<p>\n  One interesting observation is that the cost of visiting a subtree rooted at any node\n  depends on which of the child subtrees will be visited last.\n  For example, if we have four child subtrees of the root, and we have decided which subtree to visit last,\n  the total cost will be the same, regardless of which order we decide to visit the first three subtrees.\n  In order to visit all of the nodes, we must return to the\n  root every time we finish traversing each subtree, except the last one, to be able to move to the next one.\n</p>\n<p>\n  However, this observation is not true for all subtrees. When we are at a subtree that doesn't have\n  the starting point as the root, the cost of visiting the subtree depends on another factor, that\n  is, <i>whether this subtree was chosen as the last one to be visited from its parent or not</i>.\n</p>\n<p>\n  If it was not\n  the last one, then we need to go back to the parent, so the cost will be constant in the rooted tree,\n  no matter what order we visit the subtrees.\n</p>\n<p>\n  If it was the last one, then the traversal can end at any node, it doesn't need to go back to the\n  parent. In that case, the ordering of visiting subtrees will matter.\n</p>\n<p align=center>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U25PYup-Ljc4LOlQSZgY_AKmlP0eogIXaS1zDd8r_piNZl-cmFUhnHZjf7iDB_ayETkjR_zT5nt/image.png\" style=\"max-width:300px;\" alt=\"Illustration of an example case\">\n</p>\n<p>\n  In the example picture of a graph above, the cost of visting all the places if we start from node\n  $$$1$$$ will depend on which of the four child subtrees we are visiting last. Then, when we visit\n  any child subtree, we also need to consider whether that subtree is the last one visited from\n  its parent $$$1$$$, or not.\n</p>\n<p>\n  From the above observations, we can formulate a recurrence to find the optimal cost. Let's denote the\n  cost function as $$$F(x)$$$ for a subtree rooted at $$$x$$$, and it has been selected as the last\n  child subtree during the traversal from its parent, and $$$F_1 (x)$$$, when it has not been selected as the last\n  one. Then we can have,\n</p>\n<p>\n  $$$$F(x) = \\min_{y \\in Ch(x)}\\left(F(y) + E(x, y) + \\sum_{z \\in Ch(x) \\setminus \\{y\\}} (2 \\times E(x, z) + F_1 (z))\\right)$$$$\n  Here,\n</p>\n<ul>\n  <li>$$$Ch(x)$$$ are the set of nodes that are children of $$$x$$$,</li>\n  <li>$$$y$$$ is the selected last one to be visited from its parent $$$x$$$, and</li>\n  <li>$$$E(x,y)$$$ is the cost of travelling between $$$x$$$ and $$$y$$$.</li>\n</ul>\n<p>\n  $$$F_1 (x)$$$ is a constant function for a given weighted tree and fixed root. Since the starting\n  and ending nodes are the same, all the edge costs in the subtree rooted at $$$x$$$ will be included\n  in the total cost twice. We can precompute these values for a fixed root.\n</p>\n<p>\n  We can try all the nodes as a starting point. For each of them, we can calculate the cost using\n  the recurrence. At each node $$$x$$$, we will have at most $$$O(degree(x))$$$ options\n  to chose the last child subtree. However, the total number of choices are $$$\\sum(degree(\\mathbf{N}))$$$, which\n  is $$$O(\\mathbf{N})$$$ for a tree.\n</p>\n<p>\n  By using memorisation, we can make sure the function $$$F(x)$$$ and $$$F_1(x)$$$ is being\n  calculated only once per node.\n</p>\n<p>\n  We can avoid running the inner loop to calculate the sum\n  $$$\\sum_{z \\in Ch(x) \\setminus \\{y\\}} (2 \\times E(x, z) + F_1 (z))$$$ for every choice of $$$y$$$ by\n  calculating the sum $$$\\sum_{z \\in Ch(x)} (2 \\times E(x, z) + F_1 (z))$$$ at the beginning of the\n  loop, and for every $$$y$$$, subtracting $$$2 \\times E(x, y) + F_1 (y)$$$ from it.\n</p>\n<p>\n  These techniques enable us to execute the calculations for each choice in constant time.\n  We have $$$O(\\mathbf{N})$$$ options for starting points.\n  Hence, the total time complexity becomes $$$O(\\mathbf{N}^2)$$$, which is sufficient for Test Set 2.\n</p>\n<h5>\n  Alternate solution\n</h5>\n<p>\n  There's another approach to solve this problem. Let's think about any walk that\n  that visits all the places, has starting place $$$\\mathbf{S}$$$, and ending place $$$\\mathbf{T}$$$.\n  Let's consider extending this path to also walk back from $$$\\mathbf{T}$$$ to $$$\\mathbf{S}$$$ at the end. The length of such\n  enclosed path is exactly distance($$$\\mathbf{S}$$$, $$$\\mathbf{T}$$$) longer than the length of the walk.\n  But note that all enclosed paths that touch every node require a cost of at least\n  $$$2 \\times \\sum(\\mathbf{C_i})$$$ since we have to go \"down\" and \"up\" every edge. Thus, the optimal\n  enclosed path is to use  $$$2 \\times \\sum(\\mathbf{C_i})$$$. Then to find the cheapest walk,\n  we want to subtract off the largest distance($$$\\mathbf{S}$$$, $$$\\mathbf{T}$$$), which is exactly the longest path in the tree.\n</p>\n<p>\n  The longest path in a tree can be found in $$$O(\\mathbf{N})$$$ time using two cleverly selected DFSs.\n  Alternatively, we can simply run $$$\\mathbf{N}$$$ DFSs, one from each node, to find the distance between\n  every pair of nodes, then take the maximum, giving us an $$$O(\\mathbf{N}^2)$$$ algorithm.\n  Hence, the total time complexity becomes $$$O(\\mathbf{N})$$$ or $$$O(\\mathbf{N}^2)$$$, which is sufficient for Test Set 2.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0aYxKloYKW44Mu_SpgSSbuqpc-yVbHejPOj0BqYAtpxFcp5ILpmXJEEMrEg8zj5oZS_qiXWPIR/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000a33bc7","statement":"<h3>Problem</h3>\n<p>\nYou are hosting visitors from out of town, and want to take them out and show\nthem the most interesting places in town.\n</p><p>\nThere are $$$\\mathbf{N}$$$ interesting sights you want to tour. You have identified $$$\\mathbf{N}-1$$$ interesting\nmethods of transportation. Each method of transportation bidirectionally connects a pair of sights.\nLuckily, there is exactly one way to get from any interesting sight to another without using any\ntransportation method more than once.\n</p><p>\nYou know how much it would cost for the group to use each transportation method one time (you\npay once per use). You can decide the starting and ending sights of the tour (they can be the\nsame or different sights). You do not need to worry about the cost of getting to the starting point\nnor coming back from the ending point, only the cost of transportation between sights during\nthe tour. What is the cheapest way to see all sights at least once each?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case starts with a line containing a single integer $$$\\mathbf{N}$$$, the number of sights\nyou want to tour. Then, $$$\\mathbf{N}-1$$$ lines follow. The $$$i$$$-th of these lines contains\nthree integers $$$\\mathbf{A_i}$$$, $$$\\mathbf{B_i}$$$, and $$$\\mathbf{C_i}$$$, representing that the $$$i$$$-th method of\ntransportation can take your group from sight $$$\\mathbf{A_i}$$$ to sight $$$\\mathbf{B_i}$$$ or from sight\n$$$\\mathbf{B_i}$$$ to sight $$$\\mathbf{A_i}$$$ for a cost of $$$\\mathbf{C_i}$$$ coins per usage.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is an integer\nrepresenting the minimum cost of a tour that visits each sight at least once.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 10 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{A_i} \\lt \\mathbf{B_i} \\le \\mathbf{N}$$$, for all $$$i$$$.<br/>\nIt is possible to travel between any pair of sights using only the methods of transportation\n  given in the input. (This and the previous limits imply the sights and transportation\n  methods form an unrooted\n  <a href=\"https://en.wikipedia.org/wiki/Tree_(graph_theory)\" target=\"_blank\">tree</a>.)<br/>\n$$$1 \\le \\mathbf{C_i} \\le 10^9$$$ for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N} \\le 10$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N} \\le 1000$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1LTAB5CCRLtnO2qNvmQoQyvgXoACF7zWJj_SqHrT7Xwj5p08Lk0nkicadcbpYAHoWa1MJlRoNPHHyqnQ3DvhQTAKuUVsRJ7elSJvrCg6fWAk4/interesting_outing_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n6\n1 3 10\n4 5 10\n3 4 10\n4 6 20\n2 3 30\n6\n1 3 35\n4 5 10\n3 4 10\n4 6 20\n2 3 30\n5\n1 3 1000000000\n2 3 1000000000\n3 4 1000000000\n3 5 1000000000\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2NjDWgU3Wkzr6k9Sz8qHRhu6qnYf1B4kVfwQsuT7RxNA2-xi8qk8YB89oDpbeHeM9kYPbuSZ6FS9iY1jdZYVFJFEi7u99uB3YFRRr4_DMGahLX/interesting_outing_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 100\nCase #2: 145\nCase #3: 6000000000\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1 (as seen below), an optimal route (marked with a red line in the picture above)\n  goes through the following sights: $$$2, 3, 1, 3, 4, 5, 4, 6$$$.\n</p><p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U046gm75hlt-tbz3rrubuwA3EGsGMN6epeCsa_z_-wdKuZ6ypNiaAc3J08i_hNigpDxPTh4aWb354MrKQ/example_1.png\" alt=\"Illustration of Sample Case #1\">\n</p><p>\n  In Sample Case #2 (as seen above), the only change compared with the setup in Sample Case #1\n  is that the transportation between sights $$$1$$$ and $$$3$$$ got more expensive:\n  from $$$10$$$ to $$$35$$$. The route $$$2, 3, 1, 3, 4, 5, 4, 6$$$\n  costs $$$150$$$ in this scenario and it is not optimal.\n  The optimal route is $$$2, 3, 4, 6, 4, 5, 4, 3, 1$$$ instead (also marked in red in the picture).\n</p><p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1MvstGo6-PDIjvVtfu4wetSc7k4fIJTrRTSmsGCguujUCIH-h3FZmIH5OtXivs-V5Kt8eEwP2k-oAK3w/example_2.png\" alt=\"Illustration of Sample Case #2\">\n</p><p>\n  Notice in Sample Case #3 that the answer may be larger than $$$2^{32}$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":9},{"type":2,"type__str":"HIDDEN","value":15}],"title":"Interesting Outing","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n<p>\n  Since $$$\\mathbf{N} \\le 2$$$, there will be a maximum of $$$16$$$ elements in the matrix.\n  We can simply brute force this by trying every possible combination and checking which\n  installation that satisfies the organizational goal (top $$$\\mathbf{N}$$$ rows has the same number of\n  <code>I</code>s as the bottom $$$\\mathbf{N}$$$ rows, and left $$$\\mathbf{N}$$$ columns has the same number of\n  <code>I</code>s as the right $$$\\mathbf{N}$$$ columns) involves the minimum number of letter switches.\n  Since there are at most $$$2 ^ {16}$$$ total possible combinations, this is fast\n  enough for Test Set 1.\n</p>\n\n<h3>Test Set 2</h3>\n<p>\n   To solve Test Set 2, we can first split the matrix into quadrants.\n  Let $$$A, B, C$$$, and $$$D$$$ be the number of  <code>I</code>s in each quadrant,\n  in the following order:\n<pre>\n  A B\n  C D\n</pre>\nIn Sample Case #1, we would split it as follows:\n\n<pre>\nI I   O O\nO O   O I\n\n\nI I   I I\nO O   O I \n</pre>\nHere, $$$A = 2$$$, $$$B = 1$$$,\n$$$C = 2$$$, and $$$D = 3$$$.\n<p>\n  Similarly, let $$$A', B', C'$$$, and  $$$D'$$$ be the number of <code>I</code>s on each quadrant\n  of the output, in the same order as before. Then, we need $$$A', B', C'$$$, and $$$D'$$$\nsuch that $$$A' + B' = C' + D'$$$ and $$$A' + C' = B' + D'$$$.\n</p>\n<p>\nAdding the two equations, we obtain $$$A' = D'$$$, and replacing that in either equation, we obtain\n$$$B' = C'$$$. Notice that having $$$A'=C'$$$ and $$$B'=C'$$$ are also sufficient conditions\n  for the original equations. Therefore, we can solve the equivalent problem of minimizing the letter touches\n  to get $$$A'=D'$$$ and $$$B'=C'$$$. We can see now that fulfilling $$$A' = D'$$$ and $$$B' = C'$$$\n  are independent problems.\n</p>\n<p>\nThen, to find the minimum number of letter changes, we need to find the sum of the differences\nbetween each pair of sets, $$$A$$$ and $$$D$$$, and $$$B$$$ and $$$C$$$\n  (to achieve equalization, we can greedily switch that amount of <code>I</code>s to\n  <code>O</code>s from the side that has\n  more <code>I</code>s).\n</p>\n<p>\nTo implement this idea, we iterate through the matrix\nand keep track of the counts per quadrant, $$$A, B, C, D$$$, and return the summation of absolute differences:\n $$$|A-D| + |C-B|$$$.\n\n\n\n</p>\n\n\n<p>\n  This algorithm runs in $$$O(\\mathbf{N}^2)$$$ time,\n  since we are iterating through the matrix.\n\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2-qNBzTPOjBFTFRpvWfw-DBHhz8bQAcC6uBFzbGqLqD0ln65oRf7j4uC90U5PUCzL-OIWMEQ4z/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000a33e95","statement":"<h3>Problem</h3>\n<p>\nAfter the troubles with printing advertising for IO two years ago, the marketing team of the\nconference decided to use an interactive installation. It consists of a matrix of $$$2\\mathbf{N}$$$\nrows and $$$2\\mathbf{N}$$$ columns of touchscreens. Each touchscreen can display either an uppercase\n<code>I</code> or an uppercase <code>O</code>. When one of the screens is touched, it switches\nthe letter it displays to the one it was not displaying right before the touch occurred.\n</p><p>\nYou are looking at one of those installations, and find it to be disorganized. You want to\nchange some of the letters such that the top $$$\\mathbf{N}$$$ rows show the same number of letter\n<code>I</code>&NoBreak;'s as the bottom $$$\\mathbf{N}$$$ rows, and at the same time, the leftmost $$$\\mathbf{N}$$$ columns\nshow the same number of letter <code>I</code>&NoBreak;'s in total as the rightmost $$$\\mathbf{N}$$$ columns.\n</p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1FpN-pTDiVeyhWBHktyhlHTR54RDhtFWHEhwBdgYNYfbCDnBGPe76UN6eGqrVmzUA0uM-t1kmBbhsBtSmPf7bn4LfFle8/inversions_organize.png\" alt=\"Illustration of Sample #1.\"/></p>\n<p>\nFor example, in the left picture above, $$$\\mathbf{N}=2$$$. The top $$$2$$$ rows show $$$3$$$ letter\n<code>I</code>&NoBreak;'s in total, while the bottom $$$2$$$ rows show $$$5$$$. On the other hand,\nboth the leftmost $$$2$$$ columns and the rightmost $$$2$$$ columns show $$$4$$$ letter\n<code>I</code>&NoBreak;'s. By touching the two highlighted screens we can change the state to that\nshown in the right picture, which shows $$$4$$$ letter <code>I</code>&NoBreak;'s in the top $$$2$$$\ncolumns and in the bottom $$$2$$$ columns, and also maintains the balance between the left\nand right sides.\n</p><p>\nGiven the state of the installation, can you find the minimum number of letter changes needed\nto achieve your organizational goal?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case starts with a line containing a single integer $$$\\mathbf{N}$$$, half the number of rows\nand columns of the matrix. Then, $$$2\\mathbf{N}$$$ lines follow. The $$$i$$$-th of these\ncontains a string of $$$2\\mathbf{N}$$$ characters $$$\\mathbf{C_{i,1}}\\mathbf{C_{i,2}}\\cdots\\mathbf{C_{i,2N}}$$$.\n$$$\\mathbf{C_{i,j}}$$$ is the letter currently displayed in the screen in the $$$i$$$-th row and $$$j$$$-th\ncolumn of the matrix.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the minimum number of\ntouches required to make the installation simultaneously display the same number of letter\n<code>I</code>&NoBreak;'s in its top and bottom halves, and the same number of letter\n<code>I</code>&NoBreak;'s in its left and right halves.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$\\mathbf{C_{i,j}}$$$ is either an uppercase <code>I</code> or an uppercase <code>O</code>,\n  for all $$$i, j$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{N} \\le 2$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{N} \\le 100$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U30zixO5jQjZSTicRtXWJWPBNieM6pV_Xhg0ukcipenyPyTcIO-me4yHAyU7BX9JVlP_GoFOrAXzA69yIMFE3O0JzIUqR56BVGv7ibNyIflo84U/inversions_organize_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n2\nIIOO\nOOOI\nIIII\nOOOI\n1\nIO\nOO\n2\nOIOI\nIOIO\nOIOI\nIOIO\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1uQpHO4iArCogmgPCBg5HjQCYar_bfwE0H_aH3xBZLjqTXwtXDuxgOhziWIh5K8RJGzZTcX5ue_uIwYeHgZ4WE3zv1ETPOm4GP28VHG3ijSIVQwg/inversions_organize_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 1\nCase #3: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  Sample Case #1 is the one explained in the statement. Not touching anything does not work,\n  and a single touch would leave an odd number of letters <code>I</code> in total, so the\n  result cannot be balanced. It is explained in the statement how it can be balanced with\n  two touches (there are other ways).\n</p><p>\n  In Sample Case #2, changing the top left corner to <code>O</code> leaves no letter <code>I</code>,\n  so all halves have the same amount ($$$0$$$).\n</p><p>\n  In Sample Case #3, the installation is already organized according to your requirements, so no\n  touch is needed.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":6},{"type":2,"type__str":"HIDDEN","value":11}],"title":"Inversions Organize","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Since the available actions of any game state don't depend on whose turn it is, we can classify\n  each game state into two outcomes: The next player (the one whose turn it is) wins\n  (denoted as an $$$N$$$-position), or the previous player wins (denoted as a $$$P$$$-position).\n\n  For example:\n  <li>\n    $$$N$$$-position means: If it's Izabella's turn, then Izabella is going to win; if it's Olga's\n    turn, then Olga is going to win.\n  </li>\n  <li>\n    $$$P$$$-position means: If it's Izabella's turn, then Izabella is going to lose; if it's Olga's\n    turn, then Olga is going to lose.\n  </li>\n  This kind of game is called an <a href=\"https://en.wikipedia.org/wiki/Impartial_game\" target=\"_blank\">impartial game</a>.\n</p>\n\n<p>\n  With the game rules from the problem statement, to decide if a given game state $$$s$$$ is an $$$N$$$-position\n  or a $$$P$$$-position, we have the following recursion rules:\n  <li>\n    If there exists a spot where building an attraction on it can turn the current game\n    state $$$s$$$ into a $$$P$$$-position. In other words, forcing the opponent to lose. Then $$$s$$$ is\n    classified as an $$$N$$$-position.\n  </li>\n  <li>\n    Otherwise, $$$s$$$ is classified as a $$$P$$$-position because $$$s$$$ doesn't have any\n    available spots to build an attraction, or building an\n    attraction on any spot will always turn the current game state into an $$$N$$$-position. In\n    other words, letting the opponent win.\n  </li>\n</p>\n\n<p>\n  The goal of this problem is to find out how many spots there are on the given initial game state that the\n  player can build an attraction on it and turn the game state into a $$$P$$$-position state.\n</p>\n\n<p>\n  Take Sample Case #1 as example, the seven different next states and their position types are\n</p>\n\n<p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1tVy2EZhY_Qwkh3oG8DTY3yE1ae6CSQKKOTemJBy2Z5w8AcOGAeHF9Kft4yHfUXVQPZzfTkU21Ba7MBnDNMRSxRwW9p9zzcRkQlx3_/p_n_state_example_diagonal.png\" style=\"max-width:800px;\" alt=\"Seven boards representing all next states after building one attraction.\">\n</p>\n\n<p>\n  Since only one of those states is a P-position, the answer to Case #1 is 1.\n</p>\n\n<h3>\n  Test Set 1\n</h3>\n\n<p>\n  For this test set, since we only have at most $$$10$$$ spots available for new attractions, we can\n  simply use brute force search with the above recursion rules to decide whether a given game state\n  is $$$N$$$-position or $$$P$$$-position.\n</p>\n\n<p>\n  The game tree size and the state-space complexity of this game both have size $$$O(S!)$$$, where $$$S$$$\n  represents the number of spots available to build an attraction on the initial game state. For\n  each state, in addition to the recursion for next states, we also need $$$O(\\min(\\mathbf{R},\\mathbf{C}))$$$ time to mark\n  the new advertisement signs on the board. Therefore, the brute force search solution to this problem has time\n  complexity $$$O(S! \\times \\min(\\mathbf{R},\\mathbf{C}))$$$.\n</p>\n\n<p>\n  In this brute force search, using\n  <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\" target=\"_blank\">dynamic programming</a>\n  to store every seen state won't help decrease the time complexity because the\n  size of the dynamic programming table we will end up with is still up to $$$O(S!)$$$.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  Since the sign builders always extend in the diagonal direction like\n  <a href=\"https://en.wikipedia.org/wiki/Bishop_(chess)\" target=\"_blank\">chess bishops</a>, the cells on the game board can actually\n  be seen as two independent parts: the black cells and the white cells in a chessboard shown below.\n</p>\n\n<p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3McO3v2kWRVXboMAh7ksTNFqlYOAd1VGqLVGLIDVV3XqPxStCv9B0V-w4paFtKnTNcgVZn-jA0uJTtTlnt_PqeADwOdXuFIRWKkkA/black_white_parts_example.png\" style=\"max-width:800px;\" alt=\"Two independent parts of a board.\">\n</p>\n\n<p>\n  Formally, from each attraction, only cells that have the same <code>row_idx+col_idx</code>\n  parity can be affected. See the chess board above, the black cells have even\n  <code>row_idx+col_idx</code>, while the white cells have odd <code>row_idx+col_idx</code>.\n</p>\n\n<p>\n  Furthermore, since the sign builders only extend until they reach an occupied cell, the areas\n  that were previously divided by other extending signs are also independent. And the\n  independent areas with no available spot to build can simply be ignored.\n</p>\n\n<p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1uCyCjwxmGhRzB6Shxc_W0twt7kKq4M2VbemBtuCDwzN2yIBs17GpYJIlpGQ-uf8Bi9qBCNIdlLKZUNTJZLgcz5C7p-Pa2KZxWNOFmlPgr/diagonal_independence_example.png\" style=\"max-width:800px;\" alt=\"Six independent parts of a board.\">\n</p>\n\n<p>\n  For example, the top left is a board with $$$2$$$ attractions built on $$$(2,4)$$$ and $$$(3,6)$$$.\n  This board is equal to $$$6$$$ independent \"sub-games\" shown above. And from observation, we can see\n  only $$$3$$$ of them have available spots, and each of them will be completely occupied\n  in one move. Therefore, there are exactly $$$3$$$ moves remaining to finish the game no matter how\n  the players play. So we can easily figure out that this example is an $$$N$$$-position (the next player wins).\n</p>\n\n<p>\n  To formalize the calculation steps we demonstrated, we need the\n  <a href=\"https://en.wikipedia.org/wiki/Sprague-Grundy_theorem\" target=\"_blank\">Sprague-Grundy theorem</a>.\n  According to the Sprague-Grundy theorem, if we have an impartial game in which the players take\n  turns to play exactly one move and the player\n  who cannot move loses, we can assign each game state a value (called the $$$SG$$$-value).\n  Each game-state's $$$SG$$$-value only depends on the $$$SG$$$-value\n  of the game-states we can reach with exactly one move.\n</p>\n\n<p>\n  Specifically, for any game state $$$s$$$, we have:\n  <li>\n    $$$SG(s)=0$$$ if $$$s$$$ doesn't have any available spots to build an attraction.\n  </li>\n  <li>\n    Otherwise, let $$$\\{p_1, p_2, \\dots, p_n\\}$$$ be all possible game states\n    after building exactly one attraction at each of the available spots on $$$s$$$. Then we have that\n    $$$SG(s)=\\text{mex}(\\{SG(p_1), SG(p_2), \\dots, SG(p_n)\\})$$$, where $$$\\text{mex}(X)$$$ means\n    the minimum non-negative integer that doesn't exist in the set $$$X$$$.\n  </li>\n</p>\n\n<p>\n  If a state $$$s$$$ is split into several independent sub-games $$$\\{q_1, q_2, \\dots, q_k\\}$$$,\n  the $$$SG$$$-value of $$$s$$$ can be calculated as\n    $$$$SG(s)=SG(\\{q_1, q_2, \\dots, q_k\\})=SG(q_1) \\oplus SG(q_2) \\oplus \\cdots \\oplus SG(q_k),$$$$\n  where $$$\\oplus$$$ is the <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#XOR\" target=\"_blank\">binary xor function</a>.\n</p>\n\n<p>\n  Finally, if $$$SG(s)=0$$$, then $$$s$$$ is a $$$P$$$-position; otherwise $$$s$$$ is an $$$N$$$-position.\n  So the goal of this problem is to find out how many spots on the given initial game state the\n  player can build an attraction on and turn the game state into $$$SG$$$-value = 0.\n</p>\n\n<p>\n  The recursive function to calculate the $$$SG$$$-value of a given sub-game can be implemented as:\n</p>\n\n<p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U39fINBailnD4dKsrPQcFqsfsvFU59VBnB6XEEhakrvToRH2WaEpOpeKSE2yy9g3qbNOIkCAzuSlKSY4yrNUssOij5EdVrEPKym7kLDby3FfFTh/sub_game_representation_diagonal.png\" style=\"max-width:700px;\" alt=\"A demonstration about how to represent a sub-game.\">\n</p>\n\n<ul>\n  <li>\n    a sub-game can be represented by a tuple\n    <code>[row_idx_plus_col_idx_begin, row_idx_plus_col_idx_end, row_idx_minus_col_idx_begin, row_idx_minus_col_idx_end]</code>,\n    like the example shown above,\n  </li>\n  <li>\n    for each available spots in this range, put an attraction on it and calculate the new\n    $$$SG$$$-value. Then the $$$SG$$$-value of this sub-game is calculated by applying\n    $$$\\text{mex}$$$ to them. And\n  </li>\n</ul>\n\n<p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1HYbSBrb0rQ__hV7Vy4X3aEcsd-5bHCOfQdpsmDp4uejrxFuc_6Dw8-99wj-fOtWi9OJ1Wka54ZFx2bN5LVT-XXmSqFh5WbFBtHCixm8Zmgg0b1g/sub_game_divided_example_diagonal.png\" style=\"max-width:700px;\" alt=\"A demonstration about how to represent the divided sub-games.\">\n</p>\n\n<ul>\n  <li>\n    when an attraction is put on a spot <code>[row_idx, col_idx]</code>,\n    the current sub-game\n    <code>[row_idx_plus_col_idx_begin, row_idx_plus_col_idx_end, row_idx_minus_col_idx_begin, row_idx_minus_col_idx_end]</code>\n    is divided into four new sub-games\n    <ul>\n      <li><code>[row_idx_plus_col_idx_begin, row_idx + col_idx - 2&nbsp;&nbsp;&nbsp;, row_idx_minus_col_idx_begin, row_idx - col_idx - 2&nbsp;&nbsp;&nbsp;&nbsp;]</code>,</li>\n      <li><code>[row_idx_plus_col_idx_begin, row_idx + col_idx - 2&nbsp;&nbsp;&nbsp;, row_idx - col_idx + 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, row_idx_minus_col_idx_end]</code>,</li>\n      <li><code>[row_idx + col_idx + 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, row_idx_plus_col_idx_end, row_idx_minus_col_idx_begin, row_idx - col_idx - 2&nbsp;&nbsp;&nbsp;&nbsp;]</code>,</li>\n      <li><code>[row_idx + col_idx + 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, row_idx_plus_col_idx_end, row_idx - col_idx + 2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;, row_idx_minus_col_idx_end]</code>,</li>\n    </ul>\n    as the example above, and the $$$SG$$$-value of the original sub-game with the new attraction on\n    it is calculated as XOR of the $$$SG$$$-values of those four new sub-games\n  </li>\n</ul>\n\n<p>\n  Now we know how to use the Sprague-Grundy theorem. Take Sample Case #1 as an example, what will happen\n  if Izabella puts her attraction at third row and sixth column?\n</p>\n\n<p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0HV06WUOJbabgpvIHE2c6avdK2bpoKuRSUQPqLbdXahZ0LoEGrnA4F_h_SypaXallY-MJCiMy8ltCGgeHFkwyMiQtoWtba3DlD20NSZbSVZ_jx94ewnNKMkQ/search_tree_example_diagonal_simplified.png\" style=\"max-width:800px;\" alt=\"A search that lists all possible next states after building an attraction on 3, 6.\">\n</p>\n\n<p>\n  We can see that putting the first attraction on this cell will give an\n  $$$SG$$$-value of 3. This means that Olga will having a winning move from this position, which is\n  not good for Izabella!\n</p>\n\n<p>\n  Note that we can use\n  <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\" target=\"_blank\">dynamic programming</a>\n  to store the $$$SG$$$-value of each seen sub-game.\n  In this way, the state-space complexity of this search is $$$O(\\mathbf{R}^2 \\times \\mathbf{C}^2)$$$.\n  And when calculating the $$$SG$$$-value of each sub-game,\n  we need to visit all $$$O(S)$$$ available spots in it to enumerate the next states. When adding an\n  attraction, we don't need to actually mark those $$$O(\\min(\\mathbf{R},\\mathbf{C}))$$$ advertisement signs, we only need to use\n  constant time to split the sub-games and calculate XOR from their results. Therefore, the total\n  time complexity of this solution is $$$O(S \\times \\mathbf{R}^2 \\times \\mathbf{C}^2)$$$.\n  And since $$$S$$$ is $$$O(\\mathbf{R}\\times\\mathbf{C})$$$, the time complexity can also be written as $$$O(\\mathbf{R}^3\\times \\mathbf{C}^3)$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Vtl6mjeui7CZtqD8WFUOTjkfZf8xR39-fXAHOpWwzX8rE20fY5FF0S93ZbaB8gIVPtsGsGJJN/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000a33fb0","statement":"<h3>Problem</h3>\n<p>\nIzabella and Olga are playing a new game alternating turns. In this game, they personify\nattraction inventors working for a theme park. The board is a matrix of square cells\nthat illustrates the map of the theme park. Some cells were deemed apt to host a new attraction.\n</p><p>\nWhen an attraction is built, signs to advertise it are added automatically. $$$4$$$ sign\nbuilders are sent in each diagonal direction. The one moving towards the north-east direction\nproceeds as follows: starting at the cell where the location is built, check the cell\nnorth-east from its current cell. If there is no cell there, or the cell is occupied, they stop.\nOtherwise, they move to that cell, build a sign there, and repeat.\nSign builders that move in the north-western, south-eastern and south-western directions proceed\nthe same, except for the direction of the movements. A cell is considered occupied if it contains\neither an attraction or a sign.\n</p><p>\nFor example, suppose the left picture below represents a map, with yellow cells representing the\nspots where attractions can be built. After an attraction is built on $$$3,4$$$ of the map\n(now marked with a blue square), signs are also built on cells marked in gray.\nSome spots that were previously available for attractions are no longer available because they\ncontain a sign now. Notice after a second attraction is built on $$$3,6$$$, the new sign builders\nonly move as far as a previous sign, leading to the situation illustrated in the right picture.<br/>\n</p><p align=\"center\">\n  <img\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3fCw7t7nmi4mOQFhe0WQyu1pwxEJsTgomJmc6MgalNnFNn1ciH_wEeXXW3OTkRGmvKn0pcerajMtH_BuAM-JIEEnuW3CmmLM76ADw7XsTohQ8/road_extending_example_diagonal.png\"\n    style=\"max-width: 700px\"\n    alt=\"Three boards representing the original state and the states after bulding 1 and 2 attractions.\"\n  />\n</p><p>\nIn a turn, a player can choose to build an attraction in any available spot, and then the sign\nbuilders proceed automatically, possibly invalidating other spots as in the example. The goal of the\ngame is to outlast the opponent: the player that, in her turn, does not have any available spot\nto build an attraction loses the game.\n</p><p>\nIzabella plays first. Assuming both players play optimally to win the game,\ncan you count how many different plays on Izabella's first turn would result in her winning?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case starts with a line containing two integers $$$\\mathbf{R}$$$ and $$$\\mathbf{C}$$$ representing the number\nof rows and columns of the board, respectively. Then, $$$\\mathbf{R}$$$ lines follow. The $$$i$$$-th of these\nlines contains a string of $$$\\mathbf{C}$$$ characters $$$\\mathbf{L_{i,1}}\\mathbf{L_{i,2}}\\cdots\\mathbf{L_{i,C}}$$$. $$$\\mathbf{L_{i,j}}$$$\nis an uppercase <code>X</code> if the cell in the $$$i$$$-th row and $$$j$$$-th column is\na spot available for a new attraction, and a period (<code>.</code>) if it is not.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is an integer\nrepresenting the number of possible first turn plays that result in Izabella winning the game.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 40 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$\\mathbf{L_{i,j}}$$$ is either an uppercase <code>X</code> or an period (<code>.</code>),\n  for all $$$i, j$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{R} \\le 10$$$.<br/>\n$$$1 \\le \\mathbf{C} \\le 10$$$.<br/>\n$$$\\mathbf{L_{i,j}} =$$$ <code>X</code> for at most $$$10$$$ combinations of $$$i, j$$$.\n  (There are at most 10 <code>X</code>s in the input matrix.)<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{R} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{C} \\le 100$$$.<br/>\n$$$\\mathbf{R} \\times \\mathbf{C} \\le 200$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U33WIGEh3jkeG6Rnlm8S-94GFS9slq0i6JcXm3lZf-R-cR-0z7RhT9s0FIbHJtSnoGzHB_3TN1L21qkSKAb2Bxru9MfKDH0GrCZI6NG_Z14uFzm/inventor_outlasting_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n5 7\n.......\n...X.X.\n...X.X.\n..XX...\n..X....\n1 5\nX.X.X\n2 5\nX.X.X\n.X.X.\n2 2\nX.\n.X\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1DkGHA7gPMRby6PJbADISFO2-tMAFVci6ajjt-Gy1qKMlk1dkRdM1l1aNGhB6T8AjL3Z6IADR4U2l-ngtHs81CEOawP11yGF0i6TZrLxfTkpmn4Q/inventor_outlasting_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 3\nCase #3: 1\nCase #4: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the only winning move for Izabella is to put her invented\n  attraction at $$$(2,4)$$$. The other $$$6$$$ moves lead to a game Olga can win\n  if they both play optimally.<br/>\n</p><p align=\"center\">\n<img\n     src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1VLqecg-rvhi_S6fOCeLsRGXJFEuuoOLbaS-g0ANrj_MJ4t7h75qCQ6Bd8ovrMWaj_lJGwfPGGwuZDogL4xpfO1-kRj05i6qcE8vU/win_lose_example_diagonal.png\"\n     style=\"max-width:800px;\"\n     alt=\"Seven boards representing all next states after building one attraction.\"\n/>\n</p><p>\n  In Sample Case #2, either of the valid first plays for Izabella leads to a board with $$$2$$$ remaining\n  spots, and either of the $$$2$$$ remaining spot for Olga leads to a board with $$$1$$$ remaining\n  spot which is Izabella's winning game. So any of the $$$3$$$ valid plays is winning.\n</p><p>\n  In Sample Case #3, only playing in the middle one among $$$5$$$ spots is a winning\n  move for Izabella. The other $$$4$$$ moves lead to a game Olga can win\n  if they both play optimally.\n</p><p>\n  In Sample Case #4, either of the valid first plays for Izabella leaves no valid play for Olga,\n  so Izabella wins immediately with any of them.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":12},{"type":2,"type__str":"HIDDEN","value":25}],"title":"Inventor Outlasting","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  The problem is talking about two types of events:\n  <ul>\n  <li>Delivery: when an amount of leaves is added to the stock with a specific expiry time.</li>\n  <li>Order: when an amount $$$\\mathbf{U}$$$ of leaves is removed from the stock if we have enough.</li>\n  </ul>\n</p>\n\n<p>\nIn order to keep track of the amount of stock we have at some point of time, we can loop through the events in a sorted order by delivery/order time.\nThis approach helps us avoid using invalid delivery for a certain order (For example: a delivery at time 3 is not valid to be used in an order at time 2).\n  <p>\n    For example:\n    If we have a delivery at time 1, 3, 5 and order at time 2, 3, 6, we will process them in the following order:\n    <ul>[Delivery1, Order2, Delivery3, Order3, Delivery5, Order6]</ul>\n  </p>\n  <p>\n  Note that if an order and delivery have the same time stamp, we need to process the delivery first.\n  </p>\n  <p>\n  This can be done by using two pointers (one for the deliveries and one for the orders) and pick the smaller delivery/order time first. Another alternative is adding all of them into one array and sort it.\n  </p>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n  For Test Set 1, no Thai basil leaf spoils before an order comes. So, we don't really care about the expiry time.\n  In this case, we can represent the stock by a single number and loop through the delivery/order events. Whenever we have a:\n  <ul>\n    <li>Delivery: the stock is increased by the delivered amount.</li>\n    <li>Order: the stock is decreased by $$$\\mathbf{U}$$$ amount only if we can fulfill the order.</li>\n  </ul>\n\n  <pre>\n    <code>\n      if currentEvent is Delivery:\n          stockAmount += currentEvent.deliveredAmount\n      else if currentEvent is Order:\n          if stockAmount >= U:\n              stockAmount -= U\n              fulfilledOrders += 1\n    </code>\n  </pre>\n\n  <h5>Time Complexity</h5>\n  <p>\n    Since the deliveries and orders are given in ascending order, we only need to go through each event. Therefore the time complexity equals $$$O(\\mathbf{N} + \\mathbf{D})$$$.\n  </p>\n\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n  <p>\n    For Test Set 2, we need to take the expiry time for each delivery into consideration.\n    The key observation is when we have multiple leaves to choose from, we must always choose the $$$\\mathbf{U}$$$ leaves that spoil first. This way we increase the chances to fulfill more future orders.\n   Therefore, having a sorted list of deliveries by expiry time will help optimize using the leaves.\n  </p>\n\n  <p>\n    We need to store a sorted list which contains detailed information about deliveries.\n   For each delivery, we need to store the delivery time, expiry time, and amount of Thai leaves. Whenever we have a:\n    <ul>\n      <li>Delivery: the delivery information is added to the deliveries list in the correct position so that all the deliveries that spoil before it are placed before it on the list. Also, the amount of the stock is increased by the deliveried amount.</li>\n      <li>Order: we check our stock amount. If it's greater than $$$\\mathbf{U}$$$, then we can fulfil this order.\n         In this case, we must use the $$$\\mathbf{U}$$$ non-spoiled leaves that will spoil first in the future and remove all the used leaves from the list of deliveries.</li>\n    </ul>\n  </p>\n\n  <p>\n    Note that we continuously need to remove the spoiled leaves before processing the delivery/order event.\n  </p>\n\n  <p>\n    The approach explained above is using the insertion sorting algorithm to add the delivery in the correct order which gives a time complexity $$$O(\\mathbf{D}^2)$$$.\n    A better approach is to use a Min-Heap, such that the earliest leaves to spoil are always found on the top of the heap.\n    In this case, adding a delivery to it's right place in the heap will be $$$O(\\log \\mathbf{D})$$$. While, removing the used leaves from the heap should be $$$O(\\log \\mathbf{D})$$$ as well.\n  </p>\n</p>\n\n<h5>Time Complexity</h5>\n<p>\n  In case of using insertion sort, the total complexity of inserting the deliveries in their right\n  place will be the complexity of insertion sort, $$$O(\\mathbf{D}^2)$$$. And for fulfilling the orders,\n  we iterate through $$$O(\\mathbf{N})$$$ orders and visit and remove at most $$$O(\\mathbf{D})$$$ deliveries from the\n  list. So the total complexity is $$$O(\\mathbf{D}^2+\\mathbf{N})$$$.\n</p>\n<p>\n  In case of using a Min-Heap, we insert to the heap for each delivery, and remove a delivery from\n  the top of the heap when it is used up or spoiled, so there are totally $$$O(\\mathbf{D})$$$ insertions\n  and removals on the heap. The top of the heap is checked for each order and whenever a previous\n  top is removed, so there are totally $$$O(\\mathbf{D}+\\mathbf{N})$$$ checks. Since the operation on a heap is\n  $$$O(\\log \\mathbf{D})$$$, the total complexity $$$O((\\mathbf{D} + \\mathbf{N}) \\log \\mathbf{D})$$$.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0yuW_QNOkEYRalHBBFjJYRcVPGsZwWMEEemipe5EpMD6YJdfVSPP_PaK0c2e5pFJ8_D-VDse6-/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000a341ec","statement":"<h3>Problem</h3>\n<p>\nHathai is proud that her catering service provides the freshest food in town. To accomplish\nthat, she gets fresh ingredients with no preservatives delivered constantly.\nThis brings about the challenge of preventing the ingredients from spoiling. Her current\nspecial uses exactly $$$\\mathbf{U}$$$ leaves of Thai basil, that need special care.\n</p><p>\nHathai has the schedule of the deliveries of Thai basil. The $$$i$$$-th delivery\ncomes at the beginning of time $$$\\mathbf{M_i}$$$ (in minutes since opening time), and brings exactly $$$\\mathbf{L_i}$$$\nleaves of Thai basil that can be stored for at most $$$\\mathbf{E_i}$$$ minutes since arriving.\nHathai has orders to prepare her specialty dish at times $$$\\mathbf{O_1}, \\mathbf{O_2}, \\dots, \\mathbf{O_N}$$$.\nOrder $$$i$$$ can only be fulfilled if she has $$$\\mathbf{U}$$$ unspoiled leaves of Thai basil at\ntime $$$\\mathbf{O_i}$$$. Note that if leaves would spoil at the same time an order comes in, those leaves cannot\nbe used to fulfill that order. If an order is fulfilled, $$$\\mathbf{U}$$$ of the leaves available have to be used and cannot\nbe used for future orders. Once Hathai gets an order that she cannot fulfill, all of the remaining\norders will also be canceled because she needs to close her kitchen and think about how to improve\nthe fulfillment schedule.\n</p><p>\nFor example, suppose Hathai's schedule has the following $$$4$$$ deliveries:\n<ul>\n<li>Delivery time: $$$1$$$. Amount: $$$10$$$. Time remaining until spoiled: $$$2$$$.</li>\n<li>Delivery time: $$$3$$$. Amount: $$$4$$$. Time remaining until spoiled: $$$2$$$.</li>\n<li>Delivery time: $$$5$$$. Amount: $$$1$$$. Time remaining until spoiled: $$$4$$$.</li>\n<li>Delivery time: $$$10$$$. Amount: $$$6$$$. Time remaining until spoiled: $$$3$$$.</li>\n</ul>\nAnd also suppose she has $$$4$$$ orders placed at times $$$3$$$, $$$4$$$, $$$6$$$ and $$$10$$$.\nEach order requires using $$$\\mathbf{U}=2$$$ leaves in this example.\n</p><p>\nThe first delivery become spoiled at time $$$3$$$, so it cannot be used on any order. Then the first\norder and the second order at time $$$3$$$ and time $$$4$$$ can be fulfilled and use up\nthe $$$4$$$ leaves from the second delivery. For the third order at time $$$6$$$, there is only\n$$$1$$$ leaf in the storage, so Hathai cannot fulfill this order. Note that although there is a\ndelivery at time $$$10$$$, she still cannot fulfill the fourth order at time $$$10$$$ because she\nhas already closed her kitchen. In this example, Hathai managed to fulfill $$$2$$$ orders\nin total.\n</p><p>\nGiven the delivery and order schedules, find out the maximum number of orders Hathai can fulfill\nif she optimizes the use of the Thai basil leaves.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case starts with a line containing three integers $$$\\mathbf{D}$$$, $$$\\mathbf{N}$$$, and $$$\\mathbf{U}$$$: the number of\ndeliveries, the number of orders and the amount of leaves needed for each order, respectively.\nThen, $$$\\mathbf{D}$$$ lines follow. The $$$i$$$-th of these lines contains three integers\n$$$\\mathbf{M_i}$$$, $$$\\mathbf{L_i}$$$, and $$$\\mathbf{E_i}$$$: the\ntime of the delivery in minutes since opening time, the amount of Thai basil leaves delivered,\nand the number of minutes those leaves can be stored and remain fresh, respectively,\nof the $$$i$$$-th delivery. Then, the last line contains $$$\\mathbf{N}$$$ integers\n$$$\\mathbf{O_1}, \\mathbf{O_2}, \\dots, \\mathbf{O_N}$$$, where $$$\\mathbf{O_j}$$$ is the time, in minutes since opening time,\nat which the $$$j$$$-th order must be prepared.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is an integer\nrepresenting the maximum number of orders Hathai can fulfill.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 5 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{D} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{N} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{U} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{M_i} \\le 10^9$$$, for all $$$i$$$.<br/>\n$$$\\mathbf{M_i} \\lt \\mathbf{M_{i+1}}$$$, for all $$$i$$$. (Deliveries are given in increasing order of time.)<br/>\n$$$1 \\le \\mathbf{L_i} \\le 100$$$, for all $$$i$$$.<br/>\n$$$1 \\le \\mathbf{O_j} \\le 10^9$$$, for all $$$j$$$.<br/>\n$$$\\mathbf{O_j} \\lt \\mathbf{O_{j+1}}$$$, for all $$$j$$$. (Orders are given in increasing order of time.)<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$\\mathbf{E_i} = 10^9$$$, for all $$$i$$$. (No Thai basil leaf expires before an order comes.)<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{E_i} \\le 10^9$$$, for all $$$i$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1oWHknzLsRFhFDy2Lh1r8KZQorBFMAYAXnwb3-wITNMg4_C7GPiNwBe4SoqZmJY33v_1arfQAJHsRzun8-ZK1KALe0Wv3pj8hhupr1YwQv7dEsIOD_zQ/ingredient_optimization_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2 4 5\n20 8 1000000000\n60 4 1000000000\n10 30 50 70\n3 5 5\n20 8 1000000000\n50 3 1000000000\n60 100 1000000000\n30 50 59 70 90\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0_C6bLqUODSvlrHTU_dvRuS6mbL_1wkjX_KHYQd6-_k8sfVgh3I5LTSjlySfLAv2j1RIyAnLPRwaltJGiUGh-BymAT_H8s2dCuLJpyi55WCTQLaDxR7mc/ingredient_optimization_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0\nCase #2: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, Hathai cannot fulfill the first order, because it came too early,\n  before any deliveries brought in Thai leaves. So she has to close her kitchen immediately without\n  fulfilling any order.\n</p><p>\n  In Sample Case #2, Hathai can fulfill the first order, and her second delivery arrives just in\n  time to help her fulfill the second order. However, the huge third delivery does not get\n  to her in time to help her with the third order, so that one goes unfulfilled and so do the\n  remaining ones.\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3fTl2PUAMimZE4lwDINrxpnVFwLfPbcb8Yttexs2aPJKKs83YeGo_B5rb3id2cRRx5BCFO9R2a33GIlFSUiEpaG-ZKRnxOQ8CGiEYLIHGWtHtZMfstCA/ingredient_optimization_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">1\n4 4 2\n1 10 2\n3 4 2\n5 1 4\n10 6 3\n3 4 6 10\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0D6R1ebhD_oqZNmZswXu-EVdhqnaTl7GMHrn0dp3pqkmzCDGsbw9SGw8JZ7NhQzeFLe5jUq6i79xxRTjes4h56Sk_wXbWgR8LQ18nQ5bzHmpakm7UQj0o/ingredient_optimization_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 2</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  This additional sample is the one explained in the problem statement.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":8},{"type":2,"type__str":"HIDDEN","value":14}],"title":"Ingredient Optimization","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000009d9870","type":1,"type__str":"SPECTATOR"},"title":"Code Jam to I/O for Women 2022","ui_appearance":0,"ui_appearance__str":"APPEARANCE_TYPE_DEFAULT"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
