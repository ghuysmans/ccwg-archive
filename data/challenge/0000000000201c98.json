{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1498428000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000201c98","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  This Kickstart round began with <i>Ambiguous Cipher</i>, which required an\n  insight about how to decode a message. Then came <i>X Squared</i>, which\n  seemed to involve a search with an intractably large space, but could be\n  solved by thinking carefully about the starting state. Next was\n  <i>Magical Thinking</i>, which presented too many possibilities for brute\n  force to handle, but allowed various solution approaches. Finally, we had\n  <i>The 4M Corporation</i>, which involved building lists of numbers to meet\n  certain requirements, and could even be solved in constant time with enough\n  thought!\n</p><p>\n  Thanks to everyone who participated! Kickstart Round D will take place soon;\n  check the Kickstart\n  schedule\n  for more details.\n</p>\n<hr>\n<p>\n  <b>Cast</b>\n</p><p>\n  Problem A (Ambiguous Cipher): Written and prepared by Chao Ching (Diana)\n  Chang.\n</p><p>\n  Problem B (X Squared): Written by Ian Tullis. Prepared by Juwuan\n  Turner-Howard.\n</p><p>\n  Problem C (Magical Thinking): Written by Ian Tullis. Prepared by Pablo Heiber\n  and Josef Ziegler.\n</p><p>\n  Problem D (The 4M Corporation): Written and prepared by Ian Tullis.\n</p><p>\n  Solutions and other problem preparation and review by Chao Ching (Diana)\n  Chang, Md Mahbubul Hasan, Lalit Kundu, Igor Naverniouk, Trung Thanh Nguyen,\n  Nipuna Samarasekara, Juwuan Turner-Howard, Ray Robinson Valiente, Erick Wong,\n  and Josef Ziegler.\n</p>\n</p><p>\nAnalysis authors:\n</p>\n<ul>\n  <li>Ambiguous Cipher: Chao Ching (Diana) Chang and Ian Tullis</li>\n  <li>X Squared: Ian Tullis</li>\n  <li>Magical Thinking: Ian Tullis</li>\n  <li>The 4M Corporation: Ian Tullis</li>\n</ul>\n","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1498417200000,"tasks":[{"analysis":"<h2>X Squared: Analysis</h2>\n\n<h3>Small dataset</h3>\n<p>\n  One straightforward brute-force approach to this problem is to perform a\n  <a href=\"https://en.wikipedia.org/wiki/Breadth-first_search\">breadth-first search</a>\n  of all grids that can be reached using the allowed swap operations, and see\n  whether the target grid is reachable. However, this can take a while to code.\n  Moreover, depending on the language used and the implementation details\n  &mdash; e.g., how we choose to store previously seen states and avoid\n  revisiting them &mdash; the search may run too slowly on the <b>N</b> = 5\n  cases. Perhaps a breadth-first search is overkill here; can we identify all\n  of the reachable states in advance, without exploring?\n</p><p>\n  Let's think about what swap operations <i>cannot</i> change. The set of tiles\n  in a particular row in the initial grid will always remain together, in some\n  order, in some row (not necessarily the row they started in). This is because\n  a column swap only changes the relative order of those tiles, and a row swap\n  only moves that whole set of tiles around together. So, our operations on the\n  board cannot exchange individual tiles among different rows; they can only\n  change the internal and relative orders of existing rows.\n</p><p>\n  Because column swaps are the only way to change the internal order within a\n  row, changing one row to have a certain order will give all of the rows that\n  same internal order. However, we can choose whichever internal order we want:\n  we pick the column with the tile we want to be first, and swap that column\n  into the first column position, and so on.\n</p><p>\n  All of the above logic holds for columns as well, and we can operate on the\n  columns independently enough for our purposes: if we reorder the rows, and\n  then reorder the columns, the latter operations do not change the chosen\n  order of the rows. So, we can choose any of the <b>N</b>! possible orders for\n  our <b>N</b> rows, and any of the <b>N</b>! possible orders for our <b>N</b>\n  columns, for a total of (<b>N</b>!)<sup>2</sup> different states that we can\n  reach. (Some of these states might have the same pattern of <code>X</code>es\n  and blank tiles, even if they represent different rearrangements of the\n  original tiles.) Unlike in our breadth-first search method, we don't need to\n  worry about exactly how to reach each of these states, even though the end of\n  the previous paragraph explains how to do so. We know that it is possible to\n  reach all of them, so if one of them matches the target, the answer is\n  <code>POSSIBLE</code>. Moreover, we know that these are all of the states\n  that we can reach, so if none of them matches the target, the answer must be\n  <code>IMPOSSIBLE</code>.\n</p><p>\n  Now, all we have to do is write some code to permute the rows and columns of\n  a grid into whatever orders we want. To avoid doing too much duplicate work,\n  we can pick one row permutation, then apply all possible column permutations\n  to copies of that, then pick another row permutation, and so on. This method\n  is essentially a well-targeted\n  <a href=\"https://en.wikipedia.org/wiki/Depth-first_search\">depth-first search</a>,\n  and its running time is O((<b>N</b>!)<sup>2</sup>). This is easily fast\n  enough for the Small dataset, in which <b>N</b> maxes out at 5. But a\n  squared-factorial order of growth won't work for the Large dataset! Let's\n  look for a better method.\n</p>\n<h3>Large dataset</h3>\n<p>\n  Let's think about the target grid state. We can observe that it has one\n  <code>X</code> tile that is the only <code>X</code> in its row and in its\n  column; let's call this collection of <code>X</code>, row, and column the\n  <i>singleton cross</i>. The rest of the grid contains a nested set of\n  <b>N</b>/2 of what we will call <i>rectangles</i>. Each rectangle is defined\n  by two rows and two columns, and has an <code>X</code> tile at each of the\n  four intersections of those rows/columns, and no other <code>X</code> tiles\n  anywhere else.\n</p><p>\n  Suppose that we start at the target and perform some swap operations. What\n  happens to our singleton cross and our rectangles? Per our earlier\n  observation while solving the Small dataset, if two of the corners of a\n  rectangle are together in the same row, or in the same column, they always\n  will be; no row or column swaps can possibly split them apart. So swap\n  operations cannot create or destroy rectangles, although they can change the\n  relative positions of the four corners. Similarly, no operation can move\n  additional <code>X</code> tiles into the singleton cross, or take away its\n  one <code>X</code> tile.\n</p><p>\n  These observations simplify the problem dramatically. We only need to ask:\n  does the starting grid have exactly <b>N</b>/2 rectangles and exactly one\n  singleton cross? If not, there is no series of swaps that can turn it into\n  the target, which does have those properties, so the case is\n  <code>IMPOSSIBLE</code> and we are done. Otherwise, we can transform the\n  starting grid into the target grid as follows. Choose a rectangle, and\n  perform row and column swaps such that its corners end up as the outermost\n  corners of the larger X shape. Then recursively solve the rest of the grid as\n  a subproblem, and so on. At the end of all this, the singleton cross will\n  necessarily be in the correct place, since every other place will have been\n  taken.\n</p><p>\n  With this reframing of the problem in mind, we no longer need to actually\n  perform or even think about any swaps! We only need to check the starting\n  grid for rectangles and a singleton row/column. It is possible to do this\n  with a single pass through the grid, looking at each row in turn. If a row\n  has zero or more than two <code>X</code> tiles, it cannot be part of a\n  rectangle or a singleton cross, and so the case is <code>IMPOSSIBLE</code>.\n  If a row has one <code>X</code> tile, we need it to be part of the singleton\n  cross; we store the column location of that <code>X</code>, and if we see\n  another would-be singleton cross row later, the case must be\n  <code>IMPOSSIBLE</code>. If a row has two <code>X</code> tiles, we note the\n  columns of those two tiles. Once we have checked all rows, we check to see\n  that every two-<code>X</code> row's set of <code>X</code> columns pairs up\n  with exactly one other two-<code>X</code> row's set of <code>X</code>\n  columns, and that no such pair shares any position with any other pair.\n  Moreover, the position of the <code>X</code> in the singleton cross must be\n  the sole column unused by any other pair. If all of these things are true,\n  then the case is <code>POSSIBLE</code>.\n</p><p>\n  This strategy is linear in the size of the input, and it runs fast\n  enough to easily handle the Large dataset, as well as grids much larger than\n  we provide in that dataset! It is also possible to run across greedy methods\n  that carry out the swapping method we described earlier, or something that\n  essentially boils down to it.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3HbQvqdhjvjlh_kQptPsftneaSFR0LruKOSMtTTscTFQhtdOwDcPJ71iH_a6dMUmPNYaUWGXf4/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201b7a","statement":"<h3>Problem</h3>\n<p>\n  The hot new toy for this year is called \"X Squared\". It consists of a square\n  <b>N</b> by <b>N</b> grid of tiles, where <b>N</b> is odd. Exactly 2 &times;\n  <b>N</b> - 1 of the tiles are labeled with an <code>X</code>, and the rest\n  are blank (which we will represent with the <code>.</code> character). In\n  each move of the game, the player can either choose and exchange two rows of\n  tiles, or choose and exchange two columns of tiles. The goal of the game is\n  to get all of the <code>X</code> tiles to be on the two main diagonals of the\n  grid, forming a larger X shape, as in the following example for <b>N</b> = 5:\n</p>\n<code>\n  X...X<br>\n  .X.X.<br>\n  ..X..<br>\n  .X.X.<br>\n  X...X<br>\n</code>\n<p>\n  You are about to play with your X Squared toy, which is not yet in the goal\n  state. You suspect that your devious younger sibling might have moved some of\n  the tiles around in a way that has broken the game. Given the current\n  configuration of the grid, can you determine whether it is possible to win or not?\n</p>\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow. Each one begins with one line with an integer\n  <b>N</b>, the size of the grid. <b>N</b> more lines with <b>N</b> characters\n  each follow; the j-th character on the i-th of these lines is <code>X</code>\n  if the tile in the i-th row and j-th column of the grid has an X, or\n  <code>.</code> if that tile is blank.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>y</code>\n  is <code>POSSIBLE</code> if it is possible to win, and <code>IMPOSSIBLE</code>\n  otherwise.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  <b>N</b> mod 2 = 1. (<b>N</b> is odd.)<br/>\n  The grid has exactly 2 &times; <b>N</b> - 1 <code>X</code> tiles and\n    exactly <b>N</b><sup>2</sup> - 2 &times; <b>N</b> + 1 <code>.</code>\n    tiles.<br/>\n  The grid is not already in the goal state, as described in the problem\n    statement.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  3 &le; <b>N</b> &le; 5.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  3 &le; <b>N</b> &le; 55.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U39n3ZqdmvdynE-dQ-IDBTcD35u4F_XmzbSnH9jPhDzstxM13IQZv4eauyEzZO_-ZbanyyUd1BEXUmEfjvS-y6iz03bFuDvjLM/x_squared_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3\n..X\nXX.\nXX.\n3\n...\nXXX\nXX.\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U34WRLXaRCgUdYLiaZYx00yo6OQ9i7Y9C5r6DB81owes00t-SwBYcs0ZiFYqeGwI6ptPOfZ0SWA1bSa-mAdk49dz5jNc1N7Aw64/x_squared_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: POSSIBLE\nCase #2: IMPOSSIBLE\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, one winning strategy is:\n</p>\n<ol>\n  <li>Swap the top row with the middle row.</li>\n  <li>Swap the rightmost column with the middle column.</li>\n</ol>\n<pre>\n ..X    XX.    X.X\n XX. -> ..X -> .X.\n XX.    XX.    X.X\n</pre>\n<p>\n  In Sample Case #2, no sequence of moves can turn the grid into the desired\n  final configuration.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":9},{"type":2,"type__str":"HIDDEN","value":14}],"title":"X Squared","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Magical Thinking: Analysis</h2>\n\n<h3>Small dataset</h3>\n<p>\n  In the Small dataset, there is only one other friend to consider, and we\n  know how many questions <b>S<sub>0</sub></b> they got right. We need to\n  choose exactly <b>S<sub>0</sub></b> of the questions to be the ones they got\n  right (call this set R); that means they got the other <b>Q</b> -\n  <b>S<sub>0</sub></b> questions wrong (call this set W). Moreover, we need to\n  do this in the way that maximizes our own score.\n</p><p>\n  Let's divide the questions into two types: type A when we gave the same\n  answer as our friend, or type D when we gave different answers. Suppose\n  that we assign the questions to sets R and W in some way, and suppose that\n  there is a type D question in set R, and a type A question in set W. Then we\n  got both of those questions wrong! But if we swap the two, then we instead\n  got both questions right. So it is always advantageous to make such swaps,\n  and we should always load up set R with as many type A questions as we\n  possibly can. If there are not enough type A questions to do this, then we\n  must fill up the rest of set R with type D questions.\n</p><p>\n  We can either implement this greedy strategy, or generalize it into a\n  formula: if X is the number of questions on which we agree with our friend,\n  then the answer turns out to be <b>Q</b> - |<b>S<sub>0</sub></b> - X|.\n</p><p>\n  Another possible approach for the Small dataset is to use brute force. Even\n  in the worst case of <b>Q</b> = 10, there are only 2<sup>10</sup> = 1024\n  different possible sets of answers. We can check all of them and see\n  which ones are consistent with our friend's score, and which of those gives\n  us the highest score.\n</p>\n<h3>Large dataset</h3>\n<p>\n  The Large dataset introduces two additional complications. For one thing,\n  there can now be up to 50 questions, so the brute force approach mentioned\n  above won't work; 2<sup>50</sup> is over 10<sup>15</sup>, and there are far\n  too many possible sets of answers to check.\n</p><p>\n  Our greedy method above will work for <b>N</b> = 1, <b>Q</b> = 50, but adding\n  a second friend introduces some complications. For example, trying to make\n  greedy decisions about one friend in the same way we did for Small\n  dataset 1 might cause the other friend to end up with the wrong score.\n  However, we don't need a greedy approach, because we can take advantage of\n  the small number of types of questions. When <b>N</b> = 2, there are only\n  four types:\n</p>\n<ol>\n  <li>Both friends agree with us.</li>\n  <li>Only friend 1 agrees with us.</li>\n  <li>Only friend 2 agrees with us.</li>\n  <li>Neither friend agrees with us.</li>\n</ol>\n<p>\n  We can try every possible tuple (a, b, c, d) of the numbers of Type 1, 2, 3,\n  and 4 questions that we got right, with 0 &le; a &le; the number of Type 1\n  questions, 0 &le; b &le; the number of Type 2 questions, and so on. Any\n  tuples that do not cause both friends to have the correct scores should be\n  discarded. We can then choose the remaining tuple for which a + b + c + d is\n  maximized. This method is O(<b>Q</b><sup>4</sup>), but the greatest possible\n  number of such tuples to check occurs when <b>Q</b> = 50 and there are 12 or\n  13 of each of the four types, and even then, there only about 25000\n  possibilities to check.\n</p><p>\n  Another option for this dataset is to use\n  <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\">dynamic programming</a>.\n  For example, we can start with a set containing only the list [0, 0, 0],\n  which represents that at the start of the test, before any questions are\n  answered, we have 0 points, friend 1 has 0 points, and friend 2 has 0 points.\n  Then, suppose that our answer to the first question is F, our first friend\n  answered T, and our second friend answered F. There are two options: either\n  the real answer to the first question is F (for which case we create the list\n  [1, 0, 1], since we and the second friend have earned a point, but the first\n  friend has not), or the real answer is T (for which case we create the list\n  [0, 1, 0]). Then we replace our old set with the new set ([1, 0, 1],\n  [0, 1, 0]), and for each list in that set, we in turn consider what happens\n  when we answer F or T for the second question, and so on. Once we have\n  finished, we check for the list in which our friends' scores are both correct\n  and we have the highest possible score.\n</p><p>\n  Why is this method any better than brute force? The key difference is that if\n  we create a list that is already in our set, we do not add another copy of\n  it, so we do not waste time individually considering many nearly equivalent\n  (for our purposes) answer sets. Because our scores and our friends' scores\n  can range from 0 to <b>Q</b>, inclusive, there are\n  (<b>Q</b> + 1)<sup>N + 1</sup> possible lists; since (as an upper bound) we\n  have to check all of them once for each question, the method is\n  O(<b>Q</b><sup>N + 2</sup>). This is O(<b>Q</b><sup>4</sup>) when\n  <b>N</b> = 2. In practice, this is a \"slower O(<b>Q</b><sup>4</sup>)\" than\n  the method above, since we may need to check 51<sup>3</sup> &times; 50 =\n  over 6 &times; 10<sup>6</sup> possibilities, but it is still easily fast\n  enough to solve the Large dataset. The approach also works just fine with a\n  three-dimensional array instead of a set, but the set lets us avoid checking\n  for the existence of all possible lists at each step of the process.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U14sDQqWHoGP3j1U85Pnaeu8m2PXnzLBjM5L9WZk1TO6GBdaPZwvjeUEq_6-jbn5YJcaPdByRi5/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201c00","statement":"<h3>Problem</h3>\n<p>\n  You and <b>N</b> of your friends just took the B.A.T. (Binary Answer Test) to\n  try to get into wizard school. The B.A.T. has <b>Q</b> true-false questions,\n  and each one is worth 1 point. You have no wizard powers, so you just picked\n  arbitrary answers and hoped for the best.\n</p><p>\n  The results of the test have already been sent out by quail mail, but the\n  quail with your results has not arrived yet. However, each of your friends\n  has told you their list of answers and their total score. You also remember\n  your own list of answers. You are an optimist and you think that you probably\n  did well!\n</p><p>\n  Given that there is one correct list of answers (but you do not know what\n  those answers are), and given your friends' answers and scores, what is the\n  highest score that you possibly could have achieved?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow. Each begins with one line with two integers\n  <b>N</b> and <b>Q</b>. Then, <b>N</b>+1 lines follow; the i-th of these lines\n  represents the i-th examinee's list of answers <b>A<sub>i</sub></b>, and has\n  <b>Q</b> characters, each of which is either <code>T</code> or <code>F</code>\n  (representing True or False). <b>A</b><sub><b>N</b>+1</sub> is your own list\n  of answers. Finally, one line with <b>N</b> integers follows; the i-th of\n  these integers, <b>S<sub>i</sub></b>, represents the i-th examinee's score.\n  (Note that your own score is not in this list, because it is unknown.)\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>y</code>\n  is the highest score that you possibly could have achieved that is consistent\n  with the given information.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  The length of <b>A<sub>i</sub></b> is <b>Q</b>, for all i.<br/>\n  Each character of <b>A<sub>i</sub></b> is either <code>T</code> or\n    <code>F</code>, for all i.<br/>\n  0 &le; <b>S<sub>i</sub></b> &le; <b>Q</b>.<br/>\n  It is guaranteed that there is at least one possible list of correct answers\n    that is consistent with all of the friends' answers and scores.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  <b>N</b> = 1.<br/>\n  1 &le; <b>Q</b> &le; 10.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  1 &le; <b>N</b> &le; 2.<br/>\n  1 &le; <b>Q</b> &le; 50.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0Yuxi9vN8PJ9FZ4zTyTvjP3BkpTU25nj79JM9eUKg7TBahifoaBECZGoMazgf6c14xrMXrqsMyltS8Tl74knyim9VH7kpnvoX1YFaeGOnuRqhY/magical_thinking_v2_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n1 2\nTF\nFF\n1\n1 3\nTTT\nTTF\n0\n2 3\nTTF\nFTF\nTTT\n1 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1wjQ18_LPkC0eUCCGoWzO9wEfPK6MYyavxk_p1joCl74Toz-Fw6jI1EHMT980jLbdKZwOaG6RZxkWhF5KqCleSCy-O8EtY5A__uWsBdlKBbjXFyA/magical_thinking_v2_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 1\nCase #3: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  Note that the last sample case would not appear in the Small dataset.\n</p><p>\n  In sample case #1, your friend answered <code>TF</code> and you answered\n  <code>FF</code>, and exactly one of your friend's answers was right. If your\n  friend was wrong on question 1 and right on question 2, then the real set of\n  answers is <code>FF</code> and you got both questions right. It is impossible\n  to do better than this!\n</p><p>\n  In sample case #2, your friend answered all <code>T</code>s and got all of\n  the questions wrong, so the real set of answers must be all <code>F</code>s,\n  which means that you got only question 3 right.\n</p><p>\n  In sample case #3, the only possible real lists of answers that are\n  consistent with the given information are <code>FTT</code> and\n  <code>FFF</code>. (For example, the real answer list cannot be\n  <code>TFT</code>; the first friend's answers and score would be consistent\n  with that, but the second friend would have scored 0 instead of 2.) Of these\n  two possibilities, <code>FTT</code> is more favorable to you and would give\n  you a score of 2.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":6},{"type":2,"type__str":"HIDDEN","value":19}],"title":"Magical Thinking v2","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>The 4M Corporation: Analysis</h2>\n<h3>Small dataset</h3>\n<p>\n  The Limits section of the problem statement tells us that the answer to\n  every Small test case that is not <code>IMPOSSIBLE</code> is less than 14.\n  This suggests that brute force is a viable option for the Small dataset. The\n  tight bounds imposed by <b>MINIMUM</b> and <b>MAXIMUM</b> help us out as\n  well. But let's think about the worst case: what if those two values are 1\n  and 8, respectively, and what if the answer ends up being 13? In that case,\n  we know that two of the values in the list must be 1 and 8, but if any of the\n  others can be any integer in [1, 8], then we can have 8<sup>11</sup> &mdash;\n  over 8 billion &mdash; possibilities for the remaining numbers. That's too\n  much to handle in our limited time!\n</p><p>\n  Fortunately, we can cut this daunting space of possibilities down to size by\n  avoiding redundant lists. In this problem, we don't care about the difference\n  between [1, 1, 2, 3] and [2, 1, 3, 1], for instance. One way to avoid\n  worrying about such differences is to only consider lists that are sorted in\n  nondecreasing order. Even in the worst case mentioned above, there are only\n  about 75,000 different nondecreasing lists that accord with the Small limits.\n  (You can use a\n  <a href=\"https://en.wikipedia.org/wiki/Stars_and_bars_(combinatorics)\">combinatorial trick</a>\n  to find this value, or you can just experiment and see.)\n</p><p>\n  One simple way to actually generate those lists is to start with a list\n  consisting of only <b>MINIMUM</b>, then generate all new legal lists that\n  append one more value to the end of that, then generate all new legal lists\n  that append one value to the ends of <i>those</i> lists, and so on. Since the\n  number of such lists is small, an approach like this is tractable. Once you\n  have all the lists, you can check each of them to see if it has the desired\n  properties, and return the length of the shortest such list, or\n  <code>IMPOSSIBLE</code> if none of the lists works.\n</p>\n\n<h3>Large dataset</h3>\n\n<p>\n  With values in the [1, 10000] range, and no upper bound on the answer,\n  we will never be able to generate all possible lists in time. We need a\n  general, non-brute-force solution.\n</p><p>\n  Let's start with some special cases that might be easy to overlook:\n</p>\n<ul>\n  <li>There are five sets of demands that make the task clearly\n    <code>IMPOSSIBLE</code>, because they contradict the mathematical\n    definitions of minimum, maximum, mean, and median:\n    <ul>\n      <li><b>MAXIMUM</b> &lt; <b>MINIMUM</b></li>\n      <li><b>MAXIMUM</b> &lt; <b>MEDIAN</b></li>\n      <li><b>MAXIMUM</b> &lt; <b>MEAN</b></li>\n      <li><b>MEDIAN</b> &lt; <b>MINIMUM</b></li>\n      <li><b>MEAN</b> &lt; <b>MINIMUM</b></li>\n    </ul>\n  </li>\n  <li>The problem might be solvable with one department. This is possible if\n    and only if <b>MINIMUM</b>, <b>MAXIMUM</b>, <b>MEAN</b>, and <b>MEDIAN</b>\n    are all the same, so we can easily confirm or rule out this case.</li>\n  <li>The problem might be solvable with two departments. This requires that\n    <b>MEAN</b> and <b>MEDIAN</b> are both exactly (<b>MINIMUM</b> +\n    <b>MAXIMUM</b>) / 2). If this is true, we have no reason to consider using\n    more departments, so we are done.</li>\n</ul>\n<p>\n  Otherwise, suppose that the problem is solvable with three departments. Then\n  those three values must be <b>MINIMUM</b>, <b>MEDIAN</b>, and <b>MAXIMUM</b>.\n  Assuming that these values do not already have the correct <b>MEAN</b>,\n  perhaps we can insert more values until they do. We can repeatedly insert one\n  value to the left of the median and one value to the right. First, we figure\n  out how much the mean of the existing three values deviates from the desired\n  mean. (To avoid errors associated with floating-point computation, it is\n  better to compare the values' sum with <b>MEAN</b> times the number of\n  values.) Suppose (without loss of generality) that the existing sum of values\n  is too large. Then we can figure out which two values to insert to bring down\n  this surplus as much as possible; usually, they will be another copy of\n  <b>MINIMUM</b> (on the left) and another copy of <b>MEDIAN</b> (on the\n  right). If inserting even one such pair won't reduce the surplus &mdash; that\n  is, if <b>MEDIAN</b> + <b>MINIMUM</b> is no smaller than 2 &times;\n  <b>MEAN</b> &mdash; then this method will never work. Otherwise, we can keep\n  doing this until the surplus is gone. If inserting that last pair of\n  <b>MINIMUM</b> and <b>MEDIAN</b> would overshoot the surplus by an amount K,\n  we can just insert <b>MINIMUM</b> + K instead of the usual <b>MINIMUM</b>;\n  this value will never exceed <b>MEDIAN</b>.) We don't even need to carry out\n  each such step individually; we can figure out exactly how many will be\n  needed.\n</p><p>\n  Note that since we always insert one value to the left of our original\n  <b>MEDIAN</b> and one to the right, the list always has a copy of\n  <b>MEDIAN</b> in the right place. Also, given any other valid list of odd\n  length, we can sort that list's values in nondecreasing order and pair them\n  off (ignoring the first, last and middle elements, which are fixed): the\n  second value with the second-to-last value, etc. Each of the pairs produced by\n  our method contributes maximally towards reducing the surplus (except possibly\n  the last one of value <b>MINIMUM</b> + K).  So no valid list of odd length can\n  be strictly shorter, as the total contribution would be strictly smaller.\n</p><p>\n  We aren't done yet, though, because the above method only produces lists with\n  an odd number of elements. So, regardless of what that method determined, we\n  need to try something similar starting with four departments: <b>MINIMUM</b>,\n  <b>MEDIAN</b>, <b>MEDIAN</b>, and <b>MAXIMUM</b>. (You may notice that we\n  could also consider <b>MEDIAN</b> - 1 and <b>MEDIAN</b> + 1, among other\n  possible pairs, in place of <b>MEDIAN</b> and <b>MEDIAN</b>. But there is no\n  reason to consider this, because it would only restrict the range of new\n  values we can insert, and thus require more values to adjust the mean.) Once\n  we get our answer from this four-department method, we can take the smaller\n  of its answer and the three-department method's answer, or\n  <code>IMPOSSIBLE</code> if neither method worked.\n</p><p>\n  This solution runs in constant time. Our efficiency-loving bosses at the 4M\n  Corporation will certainly be happy with that!\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2LYLW6e9_p8Wd6FyyUrLLl0f0kFG-T_BU_wmqz1DXT9Z0o5Ns3R4S2d4hukSRJLmiE-E0r0nWI/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201c99","statement":"<h3>Problem</h3>\n<p>\n  The 4M Corporation has hired you to organize their departments and allocate\n  headcount. You will create at least one department, and each department will\n  receive some positive integer number of employees. It will not be easy,\n  though &mdash; you have four different bosses, and each has given you a\n  different instruction:\n</p>\n<ol>\n  <li>The department with the fewest employees must have exactly <b>MINIMUM</b>\n    employees.</li>\n  <li>The department with the most employees must have exactly <b>MAXIMUM</b>\n    employees.</li>\n  <li>The average number of employees across all departments must be exactly\n    <b>MEAN</b>.</li>\n  <li>The median of the number of employees across all departments must be\n    exactly <b>MEDIAN</b>. As a reminder, the median of a list is the value\n    that, when the list is sorted in nondecreasing order, is in the center (for\n    a list of odd length) or is the average of the two values in the center\n    (for a list of even length).</li>\n</ol>\n<p>\n  Moreover, for the sake of efficiency, it is best to avoid creating too many\n  departments. What is the smallest number of departments that you can create,\n  if it is possible to satisfy your bosses' requests?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow. Each consists of four integers: <b>MINIMUM</b>,\n  <b>MAXIMUM</b>, <b>MEAN</b>, and <b>MEDIAN</b>, in that order.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1), and <code>y</code>\n  is either the minimum possible number of departments, or\n  <code>IMPOSSIBLE</code> if it is impossible to satisfy all four bosses'\n  requests.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  1 &le; <b>MINIMUM</b> &le; 8.<br/>\n  1 &le; <b>MAXIMUM</b> &le; 8.<br/>\n  1 &le; <b>MEAN</b> &le; 8.<br/>\n  1 &le; <b>MEDIAN</b> &le; 8.<br/>\n  The constraints for the Small dataset guarantee that the answer is either\n  <code>IMPOSSIBLE</code> or is less than 14.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  1 &le; <b>MINIMUM</b> &le; 10000.<br/>\n  1 &le; <b>MAXIMUM</b> &le; 10000.<br/>\n  1 &le; <b>MEAN</b> &le; 10000.<br/>\n  1 &le; <b>MEDIAN</b> &le; 10000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3OhoyAp2hoWRa9vXIDrE81gDas6bg3WPBKLGixXW24O-j2VQmK1OT9lNDefGyLdXqj6NfRGWNPAIZez1D9UJvdis1cD0VRTZDhyvRUfM9bSv4/the_4m_corporation_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">5\n6 4 5 1\n7 7 8 8\n2 2 2 2\n3 7 5 5\n1 4 3 4\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1lu575-bdhgo9cQ0E7nzSe-BiGTYuY_T-YUi5SE_8EJcW0eCIwRU8vaX7xG0gMz9vZyr1x-YqVwW9g17Oc9WEW7MWqgcjHZfhKcF5s4jkK1okY/the_4m_corporation_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: IMPOSSIBLE\nCase #2: IMPOSSIBLE\nCase #3: 1\nCase #4: 2\nCase #5: 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  Sample Case #1 is <code>IMPOSSIBLE</code> because the maximum value cannot be\n  smaller than the minimum value.\n</p><p>\n  Sample Case #2 is <code>IMPOSSIBLE</code> because the mean and median cannot\n  be larger than the maximum value.\n</p><p>\n  In Sample Case #3, you can create a single department with 2 employees. This\n  satisfies all four bosses: the department with the fewest employees has\n  exactly 2, the department with the most employees has exactly 2, and the\n  mean and median are both 2.\n</p><p>\n  In Sample Case #4, you can create one department with 3 employees and another\n  department with 7 employees. Note that it would <b>not</b> suffice to create\n  only one department with 5 employees, because then the department with the\n  fewest employees would not have exactly 3 and the department with the most\n  employees would not have exactly 7.<br>\n</p><p>\n  For Sample Case #5, you can create one department with 1 employee and two\n  more departments with 4 employees each.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":11},{"type":2,"type__str":"HIDDEN","value":22}],"title":"The 4M Corporation","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Ambiguous Cipher: Analysis</h2>\n<h3>Small dataset</h3>\n<p>\n  There are only 26<sup>2</sup> + 26<sup>3</sup> + 26<sup>4</sup> = 475228\n  words with lengths in the [2, 4] range. The statement tells us exactly how to\n  encrypt a word, so we can encrypt all possible words and then create a\n  reverse dictionary. For example, when we find that <code>SOUP</code>\n  encrypts to <code>OMDU</code>, we can create an entry in our reverse\n  dictionary with key <code>OMDU</code> and value <code>SOUP</code>. If we\n  ever find that a word has encrypted to a key we already have in the\n  dictionary (for example, <code>ABC</code> and <code>CBA</code> both encrypt\n  to <code>BCB</code>), then that key's decryption is ambiguous, and we can\n  replace the value with <code>AMBIGUOUS</code>.\n</p><p>\n  Once we have done this, solving the problem is easy; we just look up each\n  word in our dictionary and output the value as our answer. We do not need to\n  worry about words with no valid decryption (and thus no dictionary key),\n  because the problem statement guarantees that these will not appear in the\n  datasets.\n</p><p>\n  This method will not work for the Large dataset, though; in that case, there\n  are just too many possible words to stuff into a dictionary in memory! We\n  need another approach.\n</p>\n<h3>Large dataset: words with even lengths</h3>\n<p>\n  For now, let's assume our encrypted word has an even length. We will consider\n  words of odd length in the next section.\n</p><p>\n  When a word is being encrypted, every letter in the word (except for the\n  first and last) is encrypted by summing the two letters adjacent to that\n  letter. For the first and last letters, the encrypted value is just the\n  unencrypted value of the one letter adjacent to it. This means that we can\n  easily find the the second and second-to-last letters of the unencrypted\n  word: they are just the first and last letters of the encrypted word,\n  respectively.\n</p><p>\n  Moreover, once we have these \"footholds\" into the decrypted word, we can use\n  them to decrypt the rest of the encrypted word! For example, we can decrypt\n  the encrypted word <code>ADMZZO</code> as follows. In this explanation, we\n  will denote a letter with E or D (referring to the encrypted or decrypted\n  words) followed by a number (giving the letter's position in the word,\n  counting starting from 1.)\n</p>\n<ul>\n  <li>The letter values of the encrypted word are: 0 3 12 25 25 14.</li>\n  <li>We know that D2 and D5 equal E1 and E6, as explained above, so we know\n    that our decrypted word has letter values _ 0 _ _ 14 _.\n  <li>We will now determine the letters in the even-numbered positions of the\n    decrypted word, going from left to right. We will start by determining D4.\n    We already know that D2 has value 0. Since we know that\n    (D2 + D4) % 26 = E3, then D4 = (E3 - D2) % 26. E3 has value 12, so\n    D4 = (12 - 0) % 26 = 12. So now our decrypted letter values are:\n    _ 0 _ 12 14 _.</li>\n  <li>Now that we know D4, we can find D6 in the same way: D6 = (E5 - D4) % 26\n    = (25 - 12) % 26 = 13. So we have _ 0 _ 12 14 13.</li>\n  <li>Then, we do the same thing from right to left, starting with D5. We have\n    D3 = (E4 - D5) % 26 = (25 - 14) = 11, and D1 = (E2 - D3) % 26 =\n    (3 - 11) % 26 = 18. (It is OK to take the modulus of a negative number,\n    but we can also always safely add 26 if we want to only handle positive\n    values, e.g., (3 - 11 + 26) % 26.) So we know all the letter values in the\n    decrypted word: 18 0 11 12 14 13.</li>\n  <li>Now we just need to convert this list of decrypted letter values back to\n    uppercase letters, which results in the decrypted word <code>SALMON</code>.\n  </li>\n</ul>\n<p>\n  This method will allow us to decrypt any word with an even length. Because\n  the method was deterministic and we had no choices about how to decrypt, we\n  can also see that any encrypted word with an even length has exactly one\n  possible decryption; that is, in mathematical terms, decryption is both\n  one-to-one and onto. But what about words with odd lengths?\n</p>\n<h3>Large dataset: words with odd lengths</h3>\n<p>\n  Let's look back at the example <code>BCB</code> from the problem statement.\n  We know that D2 = E1 and D2 = E3, so D2 is <code>B</code>. But what about D1\n  and D3? All we know is that (D1 + D3) % 26 = E2. There are 26 different pairs\n  for which this is valid! So the decryption is ambiguous.\n</p><p>\n  In fact, this is the case for <i>any</i> word of odd length that could appear\n  in our datasets. Our method above does not apply! Knowing the second and\n  second-to-last letters of the decrypted word does not help us get the entire\n  word, since now both of those letters are in even-numbered positions of the\n  decrypted word; they can only get us letters in the even-numbered positions\n  of the decrypted word. We have no foothold that we can use to get any of the\n  letters in the odd-numbered positions. The first letter of the decrypted word\n  could be any letter, and any choice determines all the others. We have no way\n  of knowing which of the 26 possibilities Calvin originally encrypted.\n</p><p>\n  The statement tells us that the datasets do not include words like\n  <code>APE</code> which have no valid decryption, so any word of odd length\n  in our dataset must have multiple decryptions. With this knowledge, we can\n  finish our solution: for words of even length, we use the method above, and\n  for words of odd length, we can just report <code>AMBIGUOUS</code>. Calvin\n  and Susie should come up with a method that can handle all words, not just\n  words of even length!\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3sqTE4QtZCW502JZRLSqM5iobrAviPOxX5xG42no5jpwWLm0Z71zgvf6ULhBoekieCWMMwHQsm/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201d26","statement":"<h3>Problem</h3>\n<p>\n  Susie and Calvin are classmates. Calvin would like to be able to pass notes\n  to Susie in class without their teacher or other classmates knowing what they\n  are talking about, just in case the notes fall into the wrong hands. Calvin\n  has devised the a system to encrypt his messages.\n</p>\n<p>\n  Calvin only passes one word to Susie each time, and that word consists of\n  only uppercase letters, because Calvin is so excited to talk to Susie. Each\n  word is encrypted as follows:\n</p>\n<ul>\n    <li>Calvin assigns a number to each letter based on the letter's position\n      in the alphabet, where <code>A</code> = 0, <code>B</code> = 1, ...,\n      <code>Z</code> = 25.</li>\n    <li>For every letter in the word, Calvin determines the encrypted value\n      of the letter by summing the values of the 1 or 2 letter(s) that are\n      adjacent to that letter in the word. He takes that sum modulo 26, and this\n      is the new value of the letter. Calvin then converts the value back to an\n      uppercase letter based on positions in the alphabet, as before.</li>\n    <li>The encrypted word is determined by encrypting every letter in the word\n      using this method. Each letter's encryption is based only on the letters\n      from the original unencrypted message, and not on any letters that have\n      already been encrypted</li>\n</ul>\n<p>\n  Let's take a look at one of the notes Calvin is writing for Susie. Since\n  Calvin is always hungry, he wants to let Susie know that he wants to eat\n  again. Calvin encrypts the word <code>SOUP</code> as follows:\n</p>\n<ul>\n  <li><code>S</code> = 18, <code>O</code> = 14, <code>U</code> = 20, and\n    <code>P</code> = 15.</li>\n  <li>Calvin encrypts each letter based on the values of its neighbor(s):\n    <ul>\n      <li>First letter: 14 mod 26 = 14.</li>\n      <li>Second letter: (18 + 20) mod 26 = 12.</li>\n      <li>Third letter: (14 + 15) mod 26 = 3.</li>\n      <li>Fourth letter: 20 mod 26 = 20.</li>\n    </ul>\n  </li>\n  <li>The values 14 12 3 20 correspond to the letters <code>OMDU</code>, and\n    this is the encrypted word that Calvin will write on the note for Susie.\n  </li>\n</ul>\n<p>\n  It is guaranteed that Calvin will not send Susie any words that cannot be\n  decrypted at all. For example, Calvin would not send Susie the word\n  <code>APE</code>, since it does not have any valid decryptions. (That is,\n  there is no word that Calvin could have encrypted to <code>APE</code>.)\n</p><p>\n  However, Calvin's system is not perfect, and some of the words he sends Susie\n  can actually be decrypted to multiple words, creating ambiguity! For example,\n  <code>BCB</code> can be decrypted to <code>ABC</code> or <code>CBA</code>,\n  among other possibilities.\n</p><p>\n  Susie pulled another all-nighter yesterday to finish school projects, and she\n  is too tired to decrypt Calvin's messages. She needs your help!\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow. Each case is a single line that contains a string\n  <b>W</b> of uppercase letters: an encrypted word that Calvin has sent.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>y</code>\n  is the decrypted word, or <code>AMBIGUOUS</code> if it is impossible to\n  uniquely determine the decrypted word.\n</p>\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  <b>W</b> consists of only of uppercase English letters.<br/>\n  <b>W</b> is decryptable to one or more words. (That is, <b>W</b> is the\n    result of an encryption of some word.)<br/>\n  <b>W</b> does not decrypt to the word <code>AMBIGUOUS</code>. (You will only\n    output that when the decryption is ambiguous.)<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  2 &le; the length of <b>W</b> &le; 4.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  2 &le; the length of <b>W</b> &le; 50.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U132PUg1aJv1ijiKaNfTpoCB-InJINqwLeFQbcfMYeubyvblwUK5NSMwVDFV6CKf0oI0XU_cIiUlVcByPLWQW1uPmnt9RN0Tw7xJtZshmRg/ambiguous_cipher_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\nOMDU\nBCB\nAOAAAN\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1P9ywNB7mWviewTjF9qmsPjFYl26RuXelRFBvUCT97OcX21jUZg1zxLFqkKhRcHrdUUwdjobmEfRczF7Us0_Ja-TBugYPb7pHTv9mH9syGYA/ambiguous_cipher_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: SOUP\nCase #2: AMBIGUOUS\nCase #3: BANANA</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>Note that the last sample case would not appear in the Small dataset.</p>\n\n<p>\n  Sample Cases #1 &amp; #2 were explained in the problem statement.\n</p><p>\n  In Sample Case #3, <code>BANANA</code> is the only word that encrypts to\n  <code>AOAAAN</code>.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":7},{"type":2,"type__str":"HIDDEN","value":12}],"title":"Ambiguous Cipher","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000201c98","type":1,"type__str":"SPECTATOR"},"title":"Round C 2017"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
