{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1621778400000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000435c44","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Thank you for participating in Kick Start 2021 Round C!</p>\r\n<hr>\r\n<p><b>Cast</b></p>\r\n<p>Smaller Strings: Written by Vipin Singh and prepared by Eric Dong.</p>\r\n<p>Alien Generator: Written by Gregory Yap and prepared by Vijay Krishan Pandey.</p>\r\n<p>Rock Paper Scissors: Written by Ian Tullis and prepared by Eric Dong.</p>\r\n<p>Binary Operator: Written by Pablo Heiber and prepared by Anson Ho.</p>\r\n<p>Solutions, other problem preparation, reviews and contest monitoring by\r\nAbhishek Saini, Akshay Mohan, Akul Siddalingaswamy, Amr Aboelkher, Aneesh D H, Ankit Goyal, Anoopam Mishra, Anson Ho, Anurag Singh, Ashveen Bansal, Bao Nguyen, Bartosz Kostka, Bohdan Pryshchenko, Chong Guo, Cristhian Bonilha, Deeksha Kaurav, Diksha Saxena, Eric Dong, Gagan Madan, Gregory Yap, Himanshi Jain, Hsin-cheng Hou, Ian Tullis, Jaaz Meribole, Janice Chui, Jared Gillespie, Jie Zhou, Joe Simons, Kashish Bansal, Khaled Ali, Lizzie Sapiro Santor, Maneeshita Sharma, Michał Łowicki, Mohamed Yosri Ahmed, Ossama Mahmoud, Pablo Heiber, Phil Sun, Priya Gupta, Samiksha Gupta, Sanyam Garg, Sarah Young, Shweta Karwa, Swapnil Gupta, Swapnil Mahajan, Szymon Rzeźnik, Teja Vardhan Reddy Dasannagari, Umang Goel, Vijay Krishan Pandey, Vipin Singh, Viplav Kadam, Wajeb Saab.</p>\r\n<p>Analysis authors:</p><ul>\r\n<li>Smaller Strings: Cristhian Bonilha</li>\r\n<li>Alien Generator: Akul Siddalingaswamy</li>\r\n<li>Rock Paper Scissors: Hsin-cheng Hou</li>\r\n<li>Binary Operator: Hsin-cheng Hou</li>\r\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1621767600000,"tasks":[{"analysis":"<h3>\n  Test Set 1\n</h3>\n<p>\n  Let us calculate the upper bound of a brute-force solution in the worst case scenario.\n</p>\n<p>\n  Given the limits of Test Set 1,\n  $$$1 \\le \\mathbf{K} \\le 5$$$ and $$$1 \\le \\mathbf{N} \\le 8$$$,\n  we can compute the total number of strings,\n  in the worst case scenario,\n  to be $$$\\mathbf{K} ^ \\mathbf{N} = 5 ^ 8 = 390625$$$.\n  This number is low enough to generate all of them, keeping track of the ones\n  that are palindromes and lexicographically smaller than the input string $$$\\mathbf{S}$$$.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n<p>\n  For Test Set 2, the limits are much higher, so the strategy mentioned above is too slow.\n</p>\n<p>\n  Let us start by making an observation about the definition of lexicographically smaller strings.\n  Say we have two strings $$$A$$$ and $$$B$$$ of the same length,\n  and $$$i$$$ is the first position at which $$$A_i$$$ and $$$B_i$$$ differ.\n  By definition, if $$$A_i \\lt B_i$$$, then $$$A$$$ is lexicographically smaller than $$$B$$$.\n  Now notice\n  no matter what characters we append to the end of the strings $$$A$$$ and $$$B$$$,\n  we still have that $$$A$$$ is lexicographically smaller than $$$B$$$.\n</p>\n<p>\n  Let us define $$$H = \\lceil \\frac{\\mathbf{N}}{2} \\rceil$$$,\n  which is the size of the first half of the input string $$$\\mathbf{S}$$$, rounded up.\n  Also, let us define $$$S'$$$ to be the prefix of length $$$H$$$ from the input string $$$\\mathbf{S}$$$.\n</p>\n<p>\n  To come up with an efficient solution,\n  we only need to count the number of strings $$$T'$$$ of size $$$H$$$ (not necessarily palindromes)\n  are lexicographically smaller than $$$S'$$$ (with the caveat below).\n  The reason is based on the above observation.\n</p>\n<p>\n  Insight 1: <i> If $$$T'$$$ is lexicographically smaller than $$$S'$$$, then appending appropriate\n  $$$\\mathbf{N} - H$$$ characters to make it a palindrome of size $$$\\mathbf{N}$$$, will keep it lexicographically\n  smaller than $$$\\mathbf{S}$$$. </i>\n</p>\n<p>\n  We can construct a palindrome string $$$T$$$ of size $$$\\mathbf{N}$$$ as follows.\n  Let $$$R'$$$ be the reverse of $$$T'$$$.\n  If $$$\\mathbf{N}$$$ is even, then combine $$$T'$$$ and $$$R'$$$.\n  For example, if $$$\\mathbf{N} = 6$$$ and $$$T' =$$$ \"$$$abc$$$\", then $$$T =$$$ \"$$$abccba$$$\".\n  If $$$\\mathbf{N}$$$ is odd, then combine $$$T'$$$ (without the last character) and $$$R'$$$.\n  And for example, if $$$\\mathbf{N} = 7$$$ and $$$T' =$$$ \"$$$abcd$$$\", then $$$T =$$$ \"$$$abcdcba$$$\".\n</p>\n<p>\n  Let us see how these ideas fit together with an example:\n  Let us say that $$$\\mathbf{S} =$$$ \"$$$tomato$$$\" and $$$\\mathbf{N} = 6$$$.\n  Then, we have that $$$H = \\lceil \\frac{6}{2} \\rceil = 3$$$ and $$$S' =$$$ \"$$$tom$$$\".\n  If we choose an arbitrary string $$$T' =$$$ \"$$$pea$$$\",\n  we can observe that \"$$$pea$$$\" is lexicographically smaller than \"$$$tom$$$\".\n  Therefore, we can build a palindrome string $$$T =$$$ \"$$$peaaep$$$\",\n  which is guaranteed to be lexicographically smaller than \"$$$tomato$$$\".\n</p>\n<p>\n  Hence, the problem can now be simplified to finding how many strings of size $$$H$$$\n  (not necessarily palindromes) are lexicographically smaller than $$$S'$$$.\n</p>\n<p>\n  The only <b> caveat </b> is for the string $$$T' = S'$$$. By just analysing $$$T'$$$, we can not\n  say whether $$$T$$$ is going to be lexicographically smaller than $$$\\mathbf{S}$$$ or not.\n  Therefore, for this particular $$$T'$$$ we should generate $$$T$$$ manually and\n  check if it is lexicographically smaller than $$$\\mathbf{S}$$$, and if so, add that to our answer.\n</p>\n<p>\n  Also notice we do not have to generate all of the possible lexicographically smaller\n  strings and count them.\n  Notice, if we assume first $$$\\mathbf{K}$$$ letters of the alphabet as digits in $$$\\mathbf{K}$$$-based numeric system,\n  i.e. $$$a=0, b=1, \\cdots, z=25$$$, then every string $$$T'$$$ lexicographically smaller than $$$S'$$$ can\n  be mapped to a number that is smaller than the number corresponding to $$$S'$$$(and vice versa).\n</p>\n<p>\n  Insight 2: <i> In order to calculate the number of strings lexicographically smaller than $$$S'$$$, we\n  just need to convert the $$$\\mathbf{K}$$$-based number corresponding $$$S'$$$ to base 10. </i>\n</p>\n<p>\n  For example, if $$$\\mathbf{K} = 4$$$ and we want to find the number of strings lexicographically\n  smaller than $$$S' = $$$\"$$$da$$$\". Converting $$$S'$$$ from base-4 to base-10 will give\n  $$$3 \\times 4^1 + 0 \\times 4^0 = 12$$$ which is the number of strings smaller than \"$$$da$$$\"\n  which are <code>[\"aa\", \"ab\", \"ac\", \"ad\", \"ba\", \"bb\", \"bc\", \"bd\", \"ca\", \"cb\", \"cc\", \"cd\"]</code>.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2qZZrX7Obt7EUK4JNDti3ikXXnf4y15EJR5n4eSy1XOXbOE_I2ttuDnSivDRLw_ugPzDdHdZn5/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000007ebe5e","statement":"<h3>Problem</h3>\n<p>\nYou are given an integer $$$\\mathbf{K}$$$ and a string $$$\\mathbf{S}$$$ of length $$$\\mathbf{N}$$$, consisting of lowercase letters from\n the first $$$\\mathbf{K}$$$ letters of the English alphabet. Find the number of palindrome strings of length $$$\\mathbf{N}$$$\n which are lexicographically smaller than $$$\\mathbf{S}$$$ and consist of lowercase letters from the first $$$\\mathbf{K}$$$ letters of the English alphabet.\n</p>\n<p>\n  A string composed of ordered\n  letters $$$a_1, a_2, \\dots, a_n$$$\n  is lexicographically smaller than another string of the same length $$$b_1, b_2, \\dots, b_n$$$\n  if $$$a_i &lt; b_i$$$, where $$$i$$$ is the first index where\n  characters differ in the two strings. For example, the following strings are arranged in lexicographically\n  increasing order: <code>aaa</code>, <code>aab</code>, <code>aba</code>, <code>cab</code>.\n</p>\n<p>\n  A palindrome is a string that is the same written forwards and backwards.\n  For example, <code>anna</code>, <code>racecar</code>, <code>aaa</code> and <code>x</code> are all palindromes, while\n  <code>ab</code>, <code>frog</code> and <code>yoyo</code> are not.\n</p>\n<p>\n  As the number of such strings can be very large, print the answer modulo $$$10^9 + 7$$$.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n</p>\n<p>\nEach test case consists of two lines. The first line contains two integers $$$\\mathbf{N}$$$ and $$$\\mathbf{K}$$$.\n The second line contains a string $$$\\mathbf{S}$$$ of length $$$\\mathbf{N}$$$, consisting of lowercase letters.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the number of\n  lexicographically smaller palindrome strings modulo $$$10^9 + 7$$$.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\nThe string $$$\\mathbf{S}$$$ consists of lowercase letters from the first $$$\\mathbf{K}$$$ letters of the English alphabet.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 8$$$.<br/>\n$$$1 \\le \\mathbf{K} \\le 5$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 10 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n$$$1 \\le \\mathbf{K} \\le 26$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1kpQsUGhEpcWHroPBKjKgKwSDpi87s33ecjtVCl3jMtC2hoheMypBCm4daKP4nu_5aXlnmp7pKDexuZocFktCWIqtbBqpOdhQNq8sP-zc/smaller_strings_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n2 3\nbc\n5 5\nabcdd\n1 5\nd\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3bmQJYHU5UDU66AtsW0uuFSfxoWJZdM5oVUGfmfblASlAbwGfi7vSEt_H_LEz3CJVCG7EZZXqJvOeGDjkZuCkX9ENNB_aiei79h1ZGx-Ik/smaller_strings_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 8\nCase #3: 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the palindromes are <code>[\"aa\", \"bb\"]</code>.\n</p>\n<p>\nIn Sample Case #2, the palindromes are\n <code>[\"aaaaa\", \"aabaa\", \"aacaa\", \"aadaa\", \"aaeaa\", \"ababa\", \"abbba\", \"abcba\"]</code>.\n</p>\n<p>\nIn Sample Case #3, the palindromes are <code>[\"a\", \"b\", \"c\"]</code>.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":6},{"type":1,"type__str":"VISIBLE","value":9}],"title":"Smaller Strings","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\nTest Set 1\n</h3>\n<p>\n  We can check for every $$$i, (1 \\le i \\le \\mathbf{G})$$$ whether\n  there exists a $$$k$$$ such that $$$$\\sum_{j=0}^{k}(i+ j) = \\sum_{j=0}^{k}i + \\sum_{j=0}^{k}j = ((k+1) \\times i) + \\frac{k\\times(k+1)}{2} = \\mathbf{G}$$$$\n  Finding such a $$$k$$$ (if one exists) can be done by <a href=\"https://en.wikipedia.org/wiki/Binary_search_algorithm\">binary searching</a> the\n  range $$$[0, \\mathbf{G}]$$$, and hence takes $$$O(\\log \\mathbf{G})$$$ time. For a candidate $$$k$$$ in that\n  range, we check if $$$((k+1) \\times i) + \\frac{k \\times (k+1)}{2} = \\mathbf{G}$$$ and alter the range based on the\n  equality. Time complexity here is $$$O(\\mathbf{G} \\log \\mathbf{G})$$$.\n<h4>\nAlternative solution\n</h4>\n<p>\n  For this Test Set, we can implement a brute force solution. We iterate over every\n  $$$i, (1 \\le i \\le \\mathbf{G})$$$ and try to sum up numbers $$$[i, i+1, i+2, \\dots]$$$ until the sum exceeds\n  or equals $$$\\mathbf{G}$$$. If the sum equals $$$\\mathbf{G}$$$, then we increment our result by one. Here, each\n  iteration takes $$$O(\\mathbf{G}/i)$$$ time.\n  $$$$\\sum_{i=1}^{\\mathbf{G}}(1/i) = O(log(\\mathbf{G}))$$$$\n  Therefore, the overall time complexity of this solution is $$$O(\\mathbf{G} \\log \\mathbf{G})$$$.\n</p>\n</p>\n\n<h3>\nTest Set 2\n</h3>\n<p>\n  Since the upper bound on $$$\\mathbf{G}$$$ is $$$10^{12}$$$, $$$O(\\mathbf{G} \\log \\mathbf{G})$$$ solution\n  times out. Let us define $$$H = \\lceil \\sqrt{2 \\times \\mathbf{G}} \\rceil$$$. An observation can be made that $$$k \\le H$$$.\n  Therefore, for each $$$k$$$ in the range $$$[0, H]$$$, we can binary search for $$$i$$$ in the range\n  $$$[1, \\mathbf{G}]$$$ thereby making the total runtime $$$O(\\sqrt{\\mathbf{G}} \\times \\log(\\mathbf{G}))$$$.</br>\n  This solution might not pass within the time limit for slow languages. Therefore, we will look at a better solution next.</br></br>\n  We can rewrite the equation we saw in Test Set 1 as $$$i = \\frac{2 \\times \\mathbf{G} - k^{2} - k}{2 \\times (k+1)}$$$.\n  Next, for each $$$k$$$ in the range $$$[0, H]$$$, we can check in $$$O(1)$$$ whether we\n  can obtain a positive integer value for $$$i$$$ that satisfies the above equation. The runtime here is\n  $$$O(\\sqrt{\\mathbf{G}})$$$.\n</p>\n<h4>\nAlternative solution\n</h4>\n<p>\n  We can dig deeper into the relationship between $$$\\mathbf{G}$$$, $$$K$$$, and\n  $$$d$$$, the number of days it takes for the machine to produce exactly\n  $$$\\mathbf{G}$$$ gold starting at $$$K$$$ on day one. They form the equation\n  $$$$\\frac{d(K + (K + d - 1))}{2} = \\mathbf{G}$$$$\n  which is equivalent to $$$d(d + (2K - 1)) = 2\\mathbf{G}$$$. Since one of\n  $$$d$$$ and $$$(d + (2K - 1))$$$ is even and the other is odd, any pair of\n  positive integers $$$x$$$ and $$$y$$$ such that exactly one of them is even\n  and $$$x \\times y = 2\\mathbf{G}$$$ can be mapped to them with the smaller of the two\n  being $$$d$$$ and the larger one $$$(d + (2K - 1))$$$, which is always greater\n  than $$$d$$$. Since each mapping produces a different $$$d$$$, each pair\n  corresponds to a unique solution for $$$d$$$ and $$$K$$$. Conversely, every\n  pair of $$$d$$$ and $$$K$$$ that satisfies the equation corresponds to a\n  different $$$x, y$$$ pair.\n</p>\n<p>\n  To count the number of such pairs, let $$$g$$$ be the largest odd factor of\n  $$$2\\mathbf{G}$$$. Note that any (ordered) pair $$$x', y'$$$ such that $$$x' \\times y' = g$$$\n  corresponds to a pair $$$x = \\frac{2\\mathbf{G}}{g}x'$$$ and $$$y = y'$$$. Finally,\n  assume the prime factorization of $$$g$$$ is $$$$g = p_1^{\\alpha_1}p_2^{\\alpha_2} \\cdots p_n^{\\alpha_n}$$$$\n  the number of such ordered pairs is $$$(\\alpha_1 + 1)(\\alpha_2 + 1) \\cdots (\\alpha_n + 1)$$$.\n  We can thus prime factorize $$$\\mathbf{G}$$$, ignore the 2, and multiply all other prime\n  powers accordingly. <a href=\"https://en.wikipedia.org/wiki/Integer_factorization#Factoring_algorithms\">\n  Prime factorization</a> can be trivially implemented in $$$O(\\sqrt{\\mathbf{G}})$$$\n  complexity and there are $$$o(\\log(\\mathbf{G}))$$$ <a\n  href=\"https://en.wikipedia.org/wiki/Prime_omega_function\">prime factors</a>.\n  Therefore the total time complexity is $$$O(\\sqrt{\\mathbf{G}})$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1q3VaN6JCZnW19a3aiuwkpdqyg3Ffh42S3is2Q2Z7ZokEkbk5NDmRN77iBQYujWK4QeKBG4cJs/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000007ec1cb","statement":"<h3>Problem</h3>\n\n<p>\n  Astronauts have landed on a new planet, Kickstartos. They have discovered a machine on\n  the planet: a generator that creates gold bars.\n\n  The generator works as follows. On the first day, an astronaut inputs a positive integer $$$K$$$ into the generator.\n  The generator will produce $$$K$$$ gold bars that day. The next day, it will produce $$$K+1$$$,\n  the following day, $$$K+2$$$, and so on. Formally, on day $$$i$$$, the generator will\n  produce $$$K+i-1$$$ gold bars.\n</p>\n\n<p>\n  However, the astronauts also know that there is a limitation to the generator: <br/>\n  if on any day, the generator would end up producing more than $$$\\mathbf{G}$$$ gold bars in total across all the days, then it will\n  break down on that day and will produce $$$0$$$ gold bars on that day and thereafter.\n  The astronauts would like to avoid this, so they want to produce exactly $$$\\mathbf{G}$$$ gold bars.\n</p>\n\n<p>\n  Consider $$$K=2$$$ and $$$\\mathbf{G}=8$$$. On day $$$1$$$, the generator would produce $$$2$$$ gold bars.\n  On day $$$2$$$, the generator would produce $$$3$$$ more gold bars making the total gold bars is equal to $$$5$$$.\n  On day $$$3$$$, the generator would produce $$$4$$$ more gold bars which would lead to a total of\n  $$$9$$$ gold bars. Thus, the generator would break on day $$$3$$$ before producing $$$4$$$ gold bars.\n  Hence, the total number of gold bars generated is $$$5$$$ in this case.\n</p>\n\n<p>\n  Formally, for a given $$$\\mathbf{G}$$$, astronauts would like to know how many possible values of $$$K$$$ on day\n  $$$1$$$ would eventually produce exactly $$$\\mathbf{G}$$$ gold bars.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ lines follow.<br/>\n  Each line contains a single integer $$$\\mathbf{G}$$$, representing the maximum number of gold bars the generator\n  can generate.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\n  where $$$x$$$ is the test case number (starting from $$$1$$$) and $$$y$$$ is the number of\n  possible values of $$$K$$$\n  on day $$$1$$$ that would eventually produce exactly $$$\\mathbf{G}$$$ gold bars.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$ <br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n$$$1 \\le \\mathbf{G} \\le 10^4$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$1 \\le \\mathbf{G} \\le 10^{12}$$$ for at most $$$20$$$ test cases.<br/>\n  For the remaining cases, $$$1 \\le \\mathbf{G} \\le 10^4$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0IOuZIyRO6xpTX_JkqU0kOQEztrlaOTq4qUswe5-wzjHx7KzneDWDAYAeJuD2zusnGctRaPmBMhHYW0x6k82dbTP_jOsQ-xCt_IPeYhGI/alien_generator_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n10\n125\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1geSRbzy3pOQOwnvJPV9Gpma6ukrclO3-ekf7ik-4MJQIJsJyjk-uBXc29V1m3r1T67fy1dJOatK56xBaC9Q51MqMUSJhrHJatPFoFmiRn/alien_generator_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 4\n\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  For Sample Case #1, there are $$$2$$$ possible values of $$$K$$$ $$$(1,10)$$$ that would\n  eventually produce exactly $$$10$$$ gold bars. For $$$K=1$$$, we will have $$$1+2+3+4=10$$$ gold\n  bars after $$$4$$$ days, and for $$$K=10$$$, we will have $$$10$$$ gold bars after just $$$1$$$ day.\n</p>\n<p>\n  For Sample Case #2, there are $$$4$$$ possible values of $$$K$$$ $$$(8,23,62,125)$$$ that would\n  eventually produce exactly $$$125$$$ gold bars.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":1,"type__str":"VISIBLE","value":12}],"title":"Alien Generator","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\n  Test Set 1\n</h3>\n<p>\n  We could observe that it is easy to calculate the expected value of a certain strategy by iterating\n  through all the choices you make every day and adjust your friend's probabilities of picking different\n  choices accordingly. Therefore, we could start from some naive strategy to maximize our chance of\n  winning, one strategy would be something like <code>RSPRSPRSP$$$\\dots$$$</code>, and calculate its\n  expected value. If such\n  strategies cannot reach our expected bonus value, we could try to create a random strategy instead,\n  calculate its expected value of bonus, and do so repeatedly until we find a strategy of which the\n  expected bonus is at least $$$\\mathbf{X}$$$. This approach is enough to solve the first test set.\n</p>\n<h3>\n  Test Set 2\n</h3>\n<p>\n  For the second test set, since the maximum value of $$$\\mathbf{X}$$$ is raised, the method for Test Set 1 will\n  exceed the time limit. Therefore we should find a more efficient way to look for a better strategy\n  other than randomly generating them. We could first utilize what we have tried in the first test set,\n  generating some random strategies, and pick the one with the best expected bonus as our base strategy $$$S$$$.\n  We then randomly pick a day in $$$S$$$, and try to change the decision of that day and get a new strategy $$$S'$$$.\n  If the expected bonus of the new strategy $$$E($$$S'$$$)$$$ is higher than that of the original $$$E($$$S$$$)$$$,\n  we could substitute $$$S$$$ with $$$S'$$$ as our best strategy. By keep performing this substitution process,\n  it is obvious the expected value of our strategy will be either increasing or reach a local maximum.\n  Thus we could utilize this method, also known as\n  <a href=\"https://en.wikipedia.org/wiki/Hill_climbing\" target-\"_blank\"> hill climbing</a>,\n  to find a strategy which has an expected value larger than $$$\\mathbf{X}$$$.\n  Note that since what we find here is a local maximum, it is possible that we would eventually find\n  out that the best stratgy derived from $$$S$$$ cannot reach the value of $$$\\mathbf{X}$$$. In that case we have to\n  reselect the initial $$$S$$$ and perform another substitutiton process.\n</p>\n<h3>\n  Test Set 3\n</h3>\n<p>\n  For the last test set, the methods we applied in the previous test sets could not find us a\n  strategy in the given time limit. However we could try to solve the problem in a different angle.\n  In this problem, we are targeting an expected bonus of $$$\\mathbf{X}$$$. To simplify the problem, instead of\n  finding a strategy to reach the targeted bonus, we can try to maximize the expected value we could\n  get by using the best possible strategy we could have. This value will always be at least as large\n  as $$$\\mathbf{X}$$$ because the solution is guaranteed to exist in the problem statement.\n  We could then use dynamic programming to solve this problem.\n</p>\n<p>\n  Let $$$v[r][p][s]$$$ denote the maximum expected value you could get if you made exactly\n  $$$r$$$ rocks, $$$p$$$ papers, and $$$s$$$ scissors in you strategy on the $$$N$$$-th day. We could\n  first observe $$$r + p + s = N$$$, and that this value will be affected by the last decision\n  you made in your strategy. For example, if you decide to choose rock on the last day, the expected\n  value will be\n<p>\n  $$$v[r - 1][p][s] + \\frac{p}{n - 1} \\times \\mathbf{W} + \\frac{s}{n - 1} \\times \\mathbf{E}$$$.\n</p>\n<p>\n  Similarly, this can be applied to choosing paper or scissors as the last decision. Thus we could\n  conclude that\n  <div style=\"text-align: center\">\n    $$$\\begin{split}\n      v[r][p][s] & = & \\max & (v[r - 1][p][s] + \\frac{p}{n - 1} \\times \\mathbf{W} + \\frac{s}{n - 1} \\times \\mathbf{E}, \\\\\n                 & & &         v[r][p - 1][s] + \\frac{s}{n - 1} \\times \\mathbf{W} + \\frac{r}{n - 1} \\times \\mathbf{E}, \\\\\n                 & & &         v[r][p][s - 1] + \\frac{r}{n - 1} \\times \\mathbf{W} + \\frac{p}{n - 1} \\times \\mathbf{E}) \\\\\n    \\end{split}$$$\n  </div>\n    We then get the function for state transfomation. As for the starting condition, since on the first\n  day our friend's decision is totally random, we could easily have\n  <div style=\"text-align: center\">\n    $$$v[1][0][0] = v[0][1][0] = v[0][0][1] = \\frac{1}{3}\\mathbf{W} + \\frac{1}{3}\\mathbf{E} $$$\n  </div>\n  Finally, to get the whole strategy to achieve the maximum bonus, we could record the last decision\n  we made with another array $$$step[i][j][k]$$$, and backtrace it when we found the final value at\n  $$$\\max(v[i][j][k])$$$ where $$$i + j + k = 60$$$.\n</p>\n<p>\n  We could do some brief analysis on the time and space complexity here. Notice that since in our\n  dynamic programming process, if we want to find the optimal strategy for the $$$N$$$-th day,\n  we will need to calculate all the states where $$$i + j + k \\leq N$$$, which means\n  that the space we are using will be $$$O(\\binom{N}{3}) = O(N^3)$$$. As for the time complexity, since our\n  transformation is constant, the dynamic programming process will be $$$O(\\binom{N}{3}) = O(N^3)$$$.\n  In our problem, where $$$N = 60$$$, such complexity is sufficient for our solution to find out the\n  strategy in the given time limit.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1cKtcWFcWUmYFKe3bRZTYFg7yJIdmJjZbQRyNK8RK8R0LDxd6PqiqrCKYgaU_-owk4pKs9bpuD/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000007ec28e","statement":"<h3>Problem</h3>\n<p>\n  You and your friend like to play\n  <a href=\"https://en.wikipedia.org/wiki/Rock_paper_scissors\">Rock Paper Scissors</a>.\n  Each day you play exactly $$$60$$$ rounds and at the end of each day, you\n  tally up the score from these $$$60$$$ rounds.\n</p>\n<p>\n  During each round, without any knowledge of the other person's choice, you each make your choice.\n  Then, you both reveal the choice you made and determine your score. Rock wins over Scissors,\n  Scissors wins over Paper, and Paper wins over Rock.\n\n  Let <code>R</code> represent Rock, <code>P</code> represent Paper, and <code>S</code> represent\n  Scissors. Every day you both agree on values $$$\\mathbf{W}$$$ and $$$\\mathbf{E}$$$. If your choice wins, you get $$$\\mathbf{W}$$$ points. If you and your friend both pick the same\n  choice, you get $$$\\mathbf{E}$$$ points. If your choice loses, you get nothing.\n</p>\n<p>\n  By accident, you see your friend's strategy written in an open notebook on a desk one day. Your\n  friend keeps track of how many times you have chosen <code>R</code>, <code>P</code>, and\n  <code>S</code> so far during one day.\n  Let $$$A_i$$$ be your choice of <code>R</code>, <code>P</code>, or <code>S</code> on round $$$i$$$,\n  while $$$B_i$$$ is your friend's choice on the same round.\n  Let $$$r_i$$$ be the number of times $$$A_j =$$$ <code>R</code> for $$$1 \\le j \\le (i-1)$$$.\n  Similarly, let $$$p_i$$$ and $$$s_i$$$ be the total number of times you have chosen\n  <code>P</code> and <code>S</code>, respectively, prior to round $$$i$$$.\n</p>\n\n<p>\n  On round $$$1$$$ of each day, $$$i=1$$$ and $$$r_1=s_1=p_1=0$$$, and your friend plays randomly due to\n  the lack of information (i.e. your friend chooses each option with probability $$$1/3$$$).\n  On every subsequent round, your friend decides $$$B_i$$$ by choosing\n  <code>R</code> with probability $$$\\Pr[$$$<code>R</code>$$$]=s_i/(i-1)$$$, <code>P</code> with\n  probability $$$\\Pr[$$$<code>P</code>$$$]=r_i/(i-1)$$$, and <code>S</code> with probability\n  $$$\\Pr[$$$<code>S</code>$$$]=p_i/(i-1)$$$. This strategy is adaptive and tough to beat!\n</p>\n\n<p>\n  You are going on vacation for the next $$$\\mathbf{T}$$$ days.\n  You must leave your assistant with instructions on what choice to pick each round each day.\n\n  Let integer $$$\\mathbf{X}$$$ be the average reward you are aiming for in this game after $$$\\mathbf{T}$$$ days.\n\n  Given $$$\\mathbf{W}$$$ and $$$\\mathbf{E}$$$ (different values for different days), provide your instructions as a string of $$$60$$$ characters, ordered\n  from round $$$1$$$ to round $$$60$$$. Each character represents your choice for the corresponding round.\n\n  Your goal is to choose your set of instructions so that the average\n  <a href=\"https://en.wikipedia.org/wiki/Expected_value\">expected value</a> of the reward across all the days of your gameplay is at\n  least $$$\\mathbf{X}$$$. Note that you can choose different instructions for different values of $$$\\mathbf{W}$$$ and $$$\\mathbf{E}$$$.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of days, $$$\\mathbf{T}$$$.\n  The second line contains an integer $$$\\mathbf{X}$$$, your targeted average reward after these $$$\\mathbf{T}$$$ days.\n  Then the description of $$$\\mathbf{T}$$$ days follows.\n  Each day is described as two integers $$$\\mathbf{W}$$$ and $$$\\mathbf{E}$$$. $$$\\mathbf{W}$$$ is how much you\n  get if your choice wins for each round that day. $$$\\mathbf{E}$$$ is how much you get for each round when\n  your choice is the same as your friend's choice.\n</p>\n<p>\n  All the tests (except the sample test below) are generated as follows. We choose $$$50$$$ different values $$$G$$$ between $$$5$$$ and $$$95$$$ (with uniform distribution).\n  Then for each of these values, there will be $$$4$$$ days, with $$$\\mathbf{W}$$$ equal to $$$10 \\times G$$$ and $$$\\mathbf{E}$$$ equal to $$$\\mathbf{W}, \\frac{\\mathbf{W}}{2}, \\frac{\\mathbf{W}}{10}$$$, and $$$0$$$.\n  Do not assume anything about the order of these days.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each day, output one line containing <code>Case #$$$x$$$: $$$A_1 A_2 \\dots A_{60}$$$</code>,\n  where $$$x$$$ is the day number (starting from 1) and $$$A_i$$$ is your choice of\n  <code>R</code>, <code>P</code>, or <code>S</code> on the $$$i$$$-th round of the game.\n  There should be no spaces between the choices.\n</p>\n<p>\n  The list of choices should result in an expected value that is greater than or equal to $$$\\mathbf{X}$$$ on average after $$$\\mathbf{T}$$$ days.\n  There may be multiple solutions for a test case. If so, you may output any one of them.\n  It is guaranteed that for given $$$\\mathbf{X}$$$ a solution exists.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 40 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$\\mathbf{T} = 200$$$ (for all tests except the sample where $$$\\mathbf{T} = 2$$$).<br/>\n  $$$50 \\le \\mathbf{W} \\le 950$$$.<br/>\n  $$$0 \\le \\mathbf{E} \\le \\mathbf{W}$$$ and $$$\\mathbf{E}$$$ is one of $$$\\mathbf{W}, \\frac{\\mathbf{W}}{2}, \\frac{\\mathbf{W}}{10}$$$, or $$$0$$$.<br/>\n  Each day you play exactly 60 rounds.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n$$$\\mathbf{X} = 14600$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n$$$\\mathbf{X} = 15500$$$.<br/>\n</p>\n\n<h4>Test Set 3</h4>\n<p>\n\n$$$\\mathbf{X} = 16400$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3hVYz9HgmD32pThWEuzK9H9Dos-7HcJRv3Tb41pEQNA9jwZMK9xafU80j8SIc8sqvAFsz9M429iqmU2sQtN3iGN5ULIqrx2RnZsktXpImPP7Eo/rock_paper_scissors_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n30\n60 0\n60 60\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0MSlC-3rxCImAcZ7DDFkmC3rXkhl7-C83haVNiLAVU13TXhnXh3LCvbAHc8DDYYo1JjIvIDcTGECZVm_s4BA1LzQbJ3H1f9OWGrIAINA5OBUbUNA/rock_paper_scissors_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: RSRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\nCase #2: PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In this sample test our targeted (average) reward across all $$$\\mathbf{T}=2$$$ days is $$$30$$$.\n</p>\n<p>\n For the first day, since $$$\\mathbf{W}=60$$$, you can reach the total target\n  by winning at least once.\n  One possible strategy is to just get to that single win.\n</p>\n<ul>\n  <li>On round $$$1$$$, you choose $$$A_1 =$$$ <code>R</code>.  You have an equal chance of a win,\n    a tie, or a loss, giving you an expected value of $$$20$$$.</li>\n  <li>On round $$$2$$$, $$$r_2=1$$$ and $$$p_2=s_2=0$$$. Your friend's probability of choosing\n    <code>P</code> is $$$\\Pr[$$$<code>P</code>$$$]=r_2/1=1$$$, which guarantees your friend's\n    choice $$$B_2= $$$ <code>P</code>.</li>\n  <li>If you choose $$$A_2=$$$ <code>S</code>, you are guaranteed a win, giving you a score of\n    $$$60$$$ for round $$$2$$$.</li>\n  <li>Regardless of what you choose for all following rounds in the game, your expected value after just two rounds is $$$20 + 60 = 80$$$, which is enough\n    to reach our target.</li>\n</ul>\n<p>\n  Moreover, as we already will have the average across all 2 days at least $$$\\frac{80}{2} = 40 \\ge \\mathbf{X} = 30$$$,\n  for the second day we can use any strategy.\n</p>\n<p>\n  Note that this is not a unique solution.  As long as the average expected score is $$$\\ge 30$$$,\n  other outputs would also be accepted.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":8},{"type":1,"type__str":"VISIBLE","value":8},{"type":1,"type__str":"VISIBLE","value":13}],"title":"Rock Paper Scissors","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  For each expression, we could\n  <a href=\"https://en.wikipedia.org/wiki/Binary_expression_tree#Construction_of_an_expression_tree\" target-\"_blank\">\n  construct an expression tree</a> for it and consider it as an\n  <a href=\"https://en.wikipedia.org/wiki/Binary_expression_tree\" target-\"_blank\">arthimetric tree</a>,\n  with, <code>+, *, #</code> as its operators.\n  We can then start trying to reduce the whole tree so that we could compare different expressions\n  more easily.\n</p>\n<h3>\n  Test Set 1\n</h3>\n<p>\n  In the first test set, for each expression we could first examine if there is a <code>#</code> in it. If not,\n  a simple traversal through the arthimetric tree would give us the value represented by the equation.\n  Otherwise, we could start from the node where the operator is <code>#</code>. We can reduce this\n  node's left and right subtrees into a single node each by traversing each subtree and calculating\n  its value accordingly. This will result in a subtree with leaf values $$$L$$$ and $$$R$$$,\n  and root <code>#</code> (i.e. <code>$$$L$$$#$$$R$$$</code> in expression form). Now we have a\n  tree where there are only leaf nodes under the single <code>#</code>,\n  the next step will be trying to process node <code>#</code>'s ancestors, and ultimately we want to\nreduce the whole expression into a general form of <code>($$$A$$$#$$$B$$$)*$$$C$$$+$$$D$$$</code> in order to do further\n  categorization. For simplicity we would denote <code>$$$L$$$#$$$R$$$</code> as $$$X$$$ from now on.\n</p>\n<p>\n\n  We would start try to transform the expression into our desired form from the subtree where $$$X$$$\n  is the left leaf. Specifically we want to\n  Consider $$$X$$$'s sibling tree, since there is no <code>#</code> in that tree, we could use the\n  same traversal method to get its value $$$S$$$. Now consider the parent node of $$$X$$$:\n  <ol>\n    <li>$$$X$$$'s parent is a <code>+</code>, or $$$X$$$ is the root node: we would reconstruct\n      $$$X$$$ into a subtree, where its root node is a $$$*$$$, and its left node being $$$X$$$,\n      and right node being $$$1$$$.</li>\n    <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1olC9rsr6cPtizGEjqE7r974k8NqjGYhb7V7BX2kVqbbsXYRyJOfUScJVxEbuUmhXL6h5EuzqlVHFKQNTl7RU/reduction1.png\" style=\"height: 300px;\" alt=\"Reduction example when the parent node is +\">\n\n    <li>$$$X$$$'s parent is a <code>*</code>: in this case, we added a $$$+$$$ node as a new parent, and\n    the value $$$0$$$ as the new right-sibling $$$S_p$$$.</li>\n    <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0_-bKQyh0QZnZK779M8P86hcCsSNl-IGeR67M1ufX6HPC_nidpHo1y9wKWWeNsML4JcGExrRlzFyEuNbxzJQU/reduction2.png\" style=\"height: 300px;\" alt=\"Reduction example when the parent node is *\">\n\n  </ol>\n  We then consider $$$X$$$'s great-grandparent, and the corresponded reduced sibling $$$S_p'$$$:\n  <ol>\n    <li>the node is a <code>+</code>, or there is no such node: we could reduce the height of the tree by\n    replacing the tree with its left subtree, and substitute the value of its right subtree from $$$S_p$$$\n    to $$$S_p + S_p'$$$</li>\n    <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1A9R8v2-0t_UgMOPn9swS-9L8tl8ycE7FFGAFbEa6k7aOHXGA03cLP4GNsGnRL2PtqQ-_t6Z-Bsx0bB1RNriU/reduction3.png\" style=\"height: 300px;\" alt=\"Reduction example when the grandparent node is +\">\n\n    <li>the node is a <code>*</code>: samely, we would reduce the subtree with its left subtree, but this time\n    we substitute the value of its right subtree with $$$S_p * S_p'$$$, and also replace $$$X$$$'s sibling\n    with $$$S * S_p'$$$</li>\n    <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1CabJoWlsjjO7E6kjmUe8UZe6HbBRWwBGWiDcWKpwl7wevSdLVB8aWwnbawpYPAJF-KgSP8BScuPpu0vG7Uyg/reduction4.png\" style=\"height: 300px;\" alt=\"Reduction example when the grandparent node is +\">\n\n  </ol>\n  Notice that, with this process, we could reduce the height of the tree by $$$1$$$ each time, we could then\n  perform this reduction process recursively until the expression is irreducible.\n\n</p>\n  After the reduction process, the expression would be simplfied into the form of <code>($$$A$$$#$$$B$$$)*$$$C$$$+$$$D$$$</code>,\n  where $$$A, B, C, D$$$ are all integers. Therefore the expression can\n  be represented by a 4-tuple $$$(A, B, C, D)$$$. We can then use a hashtable or any similar data structure\n  to categorize them into different equilavence classes. Note that when $$$C = 0$$$, the only comparator matters\n  here will be $$$D$$$ only, since any value of <code>$$$A$$$#$$$B$$$</code> does not affect the value at all.\n</p>\n<h3>\n  Test Set 2\n</h3>\n<p>\n  For the second test set, we could follow the similar solution as mentioned above: reduce the\n  expressions, then categorized into different classes. However, this method would become much more\n  complicated since there might be more than one <code>#</code> in each expression. As a result, we\n  cannot represent each expression as a 4-tuple, and the reduction rules are much more complicated.\n  In fact, consider the following expression (not fully parenthesized for the sake of simplicity):\n  <div style=\"text-align:center;\">\n    <code>((0#1)+1)*((0#2)+1)*((0#3)+1)*$$$\\dots$$$ </code>\n  </div>\n  If we utilize the same denotation in test set 1, naming each expression as $$$x_1, x_2, \\dots, x_n$$$,\n  this will result in a polynomial with $$$n$$$ variables, and therefore $$$2^n$$$ coeffcients to consider\n  in terms of categorization. Luckily, since <code>((0#1)+1)</code> already takes $$$9$$$ characters per block,\n  and there is also need to spend additional characters on enclosing brackets and operators, the total number\n  of coefficients for any given input string will be small enough to allow such deterministic solution to pass.\n</p>\n<h4>\nAlternative solution\n</h4>\n<p>\n  There is also a simpler nondeterministic approach to this problem. Since the operator <code>#</code>\n  represents a total function, for each calculation of some <code>$$$X$$$#$$$Y$$$</code>, we could randomly assign a\n  value as the result, and memorize it for further calculation of the same <code>$$$X$$$#$$$Y$$$</code>.\n  We could utilize it to calculate the exact value of an expression, then state that two expressions\n  belong to the same equivalence class if their corresponding values are the same. This process will never put two\n  expressions from the same class into different classes, but may result in a collision that mistakenly puts two\n  expressions from different classes into the same class. Unfortunately, we do not have a simple proof that such solution has\n  sufficiently small probability of failure. To further decrease the probability of false matches, the\n  process can be repeated several times, putting two expressions into the same class only if their evaluations matched every time.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1U0X8lSeAWgIFLJKcdYGrcj44veCFl8Dz4PWcfhnkU-a99KWrxG73VaeE7AnDAsjH4wh1wZVHa/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000007ec290","statement":"<h3>Problem</h3>\n<p>\n  You are given a list of valid arithmetic expressions using non-negative integers, parentheses <code>()</code>,\n  plus <code>+</code>, multiply <code>*</code>, and an extra operator <code>#</code>.\n  The expressions are fully parenthesized and in <a href=\"https://en.wikipedia.org/wiki/Infix_notation\" target=\"_blank\">infix</a> notation.\n</p>\n<p>\n  A fully parenthesized expression is an expression where every operator and its operands are wrapped in a single parenthesis.<br/>\n  For example, the expression $$$x+y$$$ becomes $$$(x+y)$$$ when fully parenthesized, and $$$x+y+z$$$ becomes $$$((x+y)+z)$$$.\n  However, $$$0$$$ is still $$$0$$$ when fully parenthesized, because it consists of a single number and no operators. $$$((x+y))$$$ is not\n  considered fully parenthesized because it has redundant parentheses.\n</p>\n<p>\n  The operators <code>+</code> and <code>*</code> denote addition and multiplication, and <code>#</code> can be any\n  <a href=\"https://mathworld.wolfram.com/TotalFunction.html\" target=\"_blank\">total function</a>.\n</p>\n<p>\n  You want to group the expressions into <a href=\"https://en.wikipedia.org/wiki/Equivalence_class\" target=\"_blank\">equivalence classes</a>,\n  where expressions are in the same equivalence class if and only if they are guaranteed to result in the same numeric value,\n  regardless of which function <code>#</code> represents.\n</p>\n<p>\n  You can assume that <code>#</code> represents the same function across all expressions in a given test case.\n  That might mean that <code>#</code> represents some known function like addition <em>or</em> subtraction,\n  but not both in different parts of the same test case.\n</p>\n<p>\n  For example, consider the following expressions:<br/>\n  <div style=\"text-align: center\">\n    <code>$$$F_1$$$=((1#(1+1))+((2#3)*2))</code><br/>\n    <code>$$$F_2$$$=(((2#3)+(1#2))+(2#3))</code><br/>\n    <code>$$$F_3$$$=((2*(2#3))+(1#2))</code>.<br/>\n  </div>\n</p>\n<p>\n  Let <code>A = 1#2</code>, and let <code>B = 2#3</code>. Then we can say <code>$$$F_1$$$=$$$F_2$$$=$$$F_3$$$</code>,\n  regardless of the function <code>#</code> represents because the expressions can be rewritten as:<br/>\n  <div style=\"text-align: center\">\n    <code>$$$F_1$$$=((1#2)+((2#3)*2))=(A+(B*2))=(A+2B)</code><br/>\n    <code>$$$F_2$$$=(((2#3)+(2#3))+(1#2))=((B+B)+A)=(A+2B)</code><br/>\n    <code>$$$F_3$$$=((2*(2#3))+(1#2))=((2*B)+A)=(A+2B)</code>.\n  </div>\n\n</p>\n\n<p>\n  However, consider the expressions <code>$$$F_4$$$=((0#0)+(0#0))</code> and <code>$$$F_5$$$=(0#0)</code>.\n  If <code>#</code> represents addition, then <code>$$$F_4=F_5$$$</code>.\n  However, if <code>#</code> is <code>$$$f(x,y)=C$$$</code>, such that $$$C$$$ is a non-zero integer, then\n  <code>$$$F_4 \\neq F_5$$$</code> since <code>$$$2C \\neq C$$$</code>.\n  Therefore <code>$$$F_4$$$</code> and <code>$$$F_5$$$</code> are not in the same equivalence class.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n  Each test case begins with a line containing the integer $$$\\mathbf{N}$$$. $$$\\mathbf{N}$$$ lines follow.\n  $$$i$$$-th line contains one expression, <code>$$$\\mathbf{E_i}$$$</code>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$Y_1, Y_2, \\dots, Y_\\mathbf{N}$$$</code>,\n  where $$$x$$$ is the test case number (starting from 1) and $$$Y_i$$$ is the\n  <a href=\"https://en.wikipedia.org/wiki/Lexicographic_order\" target=\"_blank\">lexicographically smallest</a>\n  sequence satisfying the conditions below:\n  <ol>\n  <li>$$$1 \\le Y_i \\le Z$$$, where $$$Z$$$ denotes the total number of equivalence classes in a given test case.</li>\n  <li>$$$Y_i = Y_j$$$ if and only if $$$\\mathbf{E_i}$$$ and $$$\\mathbf{E_j}$$$ are in the same equivalence class.</li>\n  </ol>\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$ <br/>\n  $$$1 \\le \\mathbf{N} \\le 100$$$ <br/>\n  The length of $$$\\mathbf{E_i}$$$ is at most $$$100$$$, for all $$$i$$$.<br/>\n  $$$\\mathbf{E_i}$$$ will be valid, for all $$$i$$$.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  No more than one <code>#</code> in each expression.\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  No additional constraints.\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3H1JAw9yPkOV25tG8m9rbMtZsN5o3hMRCYbYJlCqgYIUlJfRIVlPe7wU0o-v53zI3HGbtxAZ97HGvGcef5hCbaoPvpPj-FwdhGFCp7Vig/binary_operator_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n7\n(1*(1#2))\n(0*(1#2))\n(1#2)\n0\n(3*0)\n((1#2)*1)\n(((1+(1#2))+3)*0)\n5\n(1*((1+(2#2))+3))\n((0+(2#2))+4)\n(100#2)\n(((1+(2#2))+3)*1)\n((50*2)#2)\n2\n(9999999999999999999999999999999999999999+1)\n(100000000000000000000*100000000000000000000)\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0Np7kUjFZ20qQc_fhslnnhM4s3ZbLGALKOLXp57aLJdiwd7biFCdHnHh9El4XH-cgoftZgwNcENkJ4hIO6hwTvVs8lTaMGQctI3POQDbRz/binary_operator_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1 2 1 2 2 1 2\nCase #2: 1 1 2 1 2\nCase #3: 1 1\n\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  This sample test set contains $$$3$$$ test cases.\n</p>\n<p>\n  Test case 1 has $$$7$$$ expressions and a total of $$$2$$$ equivalence classes, denoted $$$G_1$$$ and $$$G_2$$$.<br/>\n  <div style=\"text-align: center\">\n    <code>$$$\\mathbf{E_1}$$$=(1*(1#2)), $$$\\mathbf{E_2}$$$=(0*(1#2)), $$$\\dots$$$, $$$\\mathbf{E_7}$$$=(((1+(1#2))+3)*0)</code>.\n  </div>\n  $$$\\mathbf{E_1}$$$, $$$\\mathbf{E_3}$$$, and $$$\\mathbf{E_6}$$$ belong to $$$G_1$$$, and $$$\\mathbf{E_2}$$$, $$$\\mathbf{E_4}$$$, $$$\\mathbf{E_5}$$$, and $$$\\mathbf{E_7}$$$ belong to $$$G_2$$$.<br/>\n  There are $$$2$$$ sequences of $$$Y_i$$$ that satisfy the requirement about equivalence classes in test case 1:\n  <code>2 1 2 1 1 2 1</code> and <code>1 2 1 2 2 1 2</code>.<br/>\n  Since <code>1 2 1 2 2 1 2</code> is the lexicographically smaller one, the output for test case 1 is:\n  <code>Case #1: 1 2 1 2 2 1 2</code>.\n</p>\n<p>\n  Test case 2 has $$$5$$$ expressions and a total of $$$2$$$ equivalence classes, denoted $$$G_1$$$ and $$$G_2$$$.<br/>\n  $$$\\mathbf{E_1}$$$, $$$\\mathbf{E_2}$$$, and $$$\\mathbf{E_4}$$$ belong to $$$G_1$$$, and $$$\\mathbf{E_3}$$$ and $$$\\mathbf{E_5}$$$ belong to $$$G_2$$$.<br/>\n  Therefore, the output for test case 2 is: <code>Case #2: 1 1 2 1 2</code>.<br/>\n</p>\n<p>\n  Test case 3 has $$$2$$$ expressions that do not contain any <code>#</code>.<br/>\n  These two expressions evaluate to the same value, and therefore belong to the same equivalence class.<br/>\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U35as9ACaetynwkGJo2-AeGfnqBBktWO0V1ydUVcpTbd36gpKfk51UQpqLG1_TPTv1XQG8tb5E6YGeA5zPmmMu2mV4USiXV2jOg1KT3UVI/binary_operator_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">1\n9\n((2*(2#3))+(1#2))\n(0*(1#2))\n0\n((1#(1+1))+((2#3)*2))\n(3*0)\n(1#(2#3))\n(((2#3)+(1#2))+(2#3))\n(4#7)\n(7#4)\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0LPiKlX3PgSZn24K_fHEfXZ8YBe__jybX6SnQkFa5cekYAIPtb5Q4vHHcqKhLAnn7r2sXqm2_ique9dHe119m5ceaF0hFN4upqIuzZla1i/binary_operator_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 1 2 2 1 2 3 1 4 5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n\n<p>\n  In the provided sample, there are a total of $$$5$$$ equivalence classes. The first expression in the input is\n  <code>((2*(2#3))+(1#2))</code>. All expressions from its equivalence class are denoted with <code>1</code> in the output.\n  The equivalence class denoted with <code>2</code> consists of <code>(0*(1#2))</code>, <code>0</code>, and <code>(3*0)</code>.\n  The equivalence class denoted with <code>3</code> consists of <code>(1#(2#3))</code>.\n  Finally, the last two expressions, <code>(4#7)</code> and <code>(7#4)</code>, are not equivalent to any of the prior\n  expressions or to one another.\n  Note that <code>2 1 1 2 1 3 2 5 4</code> is one of many other sequences that satisfy the requirement about\n  equivalence classes the given input, but it is not a correct answer because this sequence is not\n  the lexicographically smallest one.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":14},{"type":1,"type__str":"VISIBLE","value":23}],"title":"Binary Operator","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000435c44","type":1,"type__str":"SPECTATOR"},"title":"Round C 2021"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
