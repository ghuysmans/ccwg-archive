{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1551024000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000051060","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  Thank you for participating in Kick Start 2019 practice round. This was the first round using a\n  redesigned UI &mdash; we hope you enjoyed solving the problems and had\n  a smooth experience. Please don't hesitate to let us\n  know if you encountered any issues by emailing kickstart@google.com.\n</p>\n<p>\n  Looking forward to having your participation in upcoming rounds.\n</p>\n","registration_gives_participant":true,"result_status":20,"result_status__str":"FULLY_VISIBLE","start_ms":1550937600000,"tasks":[{"analysis":"<h3>Test set 1</h3>\n<p>\n  Since <b>A</b> = 0 and <b>B</b> = 30 in this test set, and since we get <b>N</b> = 30 tries per\n  test case, we can simply guess every number from 1 to 30 until the judge sends back\n  <code>CORRECT</code>.\n</p>\n<h3>Test set 2</h3>\n<p>\n  In test set 2, since the answer could be anywhere in the range (0, 10<sup>9</sup>] and we still\n  have only 30 guesses, we will use binary search.\n</p>\n<p>\n  Initially, we know the answer P is in [1, 10<sup>9</sup>], which is a big range! To cut that range\n  by half, our first guess will be (1 + 10<sup>9</sup>) / 2 = 5&times;10<sup>8</sup>. If the judge\n  sends back <code>TOO_SMALL</code>, we will know that P is in [1, 5&times;10<sup>8</sup>).\n  Similarly, if the judge sends back <code>TOO_BIG</code>, P is in\n  (5&times;10<sup>8</sup>, 10<sup>9</sup>]. Otherwise, P is 5&times;10<sup>8</sup> and we are done.\n</p>\n<p>\n  We will cut that range further by making our next guess the middle number in that range.\n  Again, based on the judge response that we get, we will know that either we have guessed P\n  correctly, or P is in the upper or lower half of the range. We will do this repeatedly, until\n  <code>CORRECT</code> is received.\n</p>\n<p>\n  Each time we make a wrong guess, the range that we must examine next will always be at most half\n  the size of our previous range. So, it will take at most log<sub>2</sub>10<sup>9</sup> = 29.897353\n  &lt; 30 tries to guess P correctly.\n</p>\n\n<h3>Sample Solutions</h3>\n<p>\n  This problem was intended as an opportunity to get used to our interactive judges. Here are\n  some example solutions in all languages that we support so far:\n</p>\n<h4><b>Bash:</b></h4>\n<pre><code>read t\nfor p in $(seq 1 $t); do\n  read -a line\n  a=${line[0]}\n  b=${line[1]}\n  read n\n  head=$(( a+1 ))\n  tail=$b\n  while true; do\n    mid=$(( (head+tail)/2 ))\n    echo $mid\n    read s\n    if [[ \"$s\" == \"CORRECT\" ]]; then\n      break\n    elif [[ \"$s\" == \"TOO_BIG\" ]]; then\n      tail=$(( mid - 1 ))\n    elif [[ \"$s\" == \"TOO_SMALL\" ]]; then\n      head=$(( mid + 1 ))\n    else\n      # Wrong answer; exit to receive Wrong Answer judgment\n      exit 0\n    fi\n  done\ndone\n\n</code></pre>\n<h4><b>C:</b></h4>\n<pre><code>#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n\nint main() {\n  int T; scanf(\"%d\", &T);\n\n  for (int id = 1; id <= T; ++id) {\n    int A, B, N, done = 0;\n    scanf(\"%d %d %d\", &A, &B, &N);\n    for (++A; !done;) {\n      int mid = A + B >> 1;\n      char result[32];\n      printf(\"%d\\n\", mid);\n      fflush(stdout);\n      scanf(\"%s\", result);\n      if (!strcmp(result, \"CORRECT\")) done = 1;\n      else if (!strcmp(result, \"TOO_SMALL\")) A = mid + 1;\n      else B = mid - 1;\n    }\n  }\n  return 0;\n}\n\n</code></pre>\n<h4><b>C#:</b></h4>\n<pre><code>using System;\n\npublic class Solution\n{\n  static public void Main ()\n  {\n    int num_test_cases = Convert.ToInt32(Console.ReadLine());\n    for (int i = 0; i < num_test_cases; ++i) {\n      string[] lo_hi_s = Console.ReadLine().Split(' ');\n      int[] lo_hi = Array.ConvertAll(lo_hi_s, int.Parse);\n      int num_tries = Convert.ToInt32(Console.ReadLine());\n      int head = lo_hi[0] + 1, tail = lo_hi[1];\n      while (true) {\n        int m = (head + tail) / 2;\n        Console.WriteLine (m);\n        string s = Console.ReadLine();\n        if (s == \"CORRECT\") break;\n        if (s == \"TOO_SMALL\")\n        {\n          head = m + 1;\n        }\n        else\n        {\n          tail = m - 1;\n        }\n      }\n    }\n  }\n}\n\n</code></pre>\n<h4><b>C++:</b></h4>\n<pre><code>#include &lt;iostream&gt;\n#include &lt;string&gt;\n\nint main() {\n  int num_test_cases;\n  std::cin >> num_test_cases;\n  for (int i = 0; i < num_test_cases; ++i) {\n    int lo, hi;\n    std::cin >> lo >> hi;\n    int num_tries;\n    std::cin >> num_tries;\n    int head = lo + 1, tail = hi;\n    while (true) {\n      int m = (head + tail) / 2;\n      std::cout << m << std::endl;\n      std::string s;\n      std::cin >> s;\n      if (s == \"CORRECT\") break;\n      if (s == \"TOO_SMALL\")\n        head = m + 1;\n      else\n        tail = m - 1;\n    }\n  }\n  return 0;\n}\n\n</code></pre>\n<h4><b>Go:</b></h4>\n<pre><code>package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n)\n\nfunc main() {\n  var t int\n  fmt.Scanf(\"%d\", &t)\n  for i := 1; i <= t; i++ {\n    var a, b, n int\n    fmt.Scanf(\"%d %d\", &a, &b)\n    a = a + 1\n    fmt.Scanf(\"%d\", &n)\n    for {\n      m := (a + b) / 2\n      fmt.Println(m)\n      var str string\n      fmt.Scanf(\"%s\", &str)\n      if strings.EqualFold(str, \"CORRECT\") {\n        break\n      } else if strings.EqualFold(str, \"TOO_SMALL\") {\n        a = m + 1\n      } else if strings.EqualFold(str, \"TOO_BIG\") {\n        b = m - 1\n      }\n    }\n  }\n}\n\n</code></pre>\n<h4><b>Haskell:</b></h4>\n<pre><code>import System.IO\n\ngetNum :: IO Int\ngetNum = do\n    x <- getLine\n    let n = read x :: Int\n    return n\n\nbisect :: Int -> Int -> Int -> String -> IO ()\nbisect a b m \"CORRECT\" = return ()\nbisect a b m \"TOO_SMALL\" = singleCase (m+1) b\nbisect a b m \"TOO_BIG\" = singleCase a (m-1)\n\nquery :: Int -> IO String\nquery m = do\n    putStrLn ( show m )\n    hFlush stdout\n    x <- getLine\n    return x\n\nsingleCase :: Int -> Int -> IO ()\nsingleCase a b = do\n    let m = (a+b) `div` 2\n    response <- query m\n    bisect a b m response\n    return ()\n\nsolve :: Int -> IO ()\nsolve 0 = return ()\nsolve n = do\n    [a, b] <- fmap(map read.words)getLine\n    _ <- getNum\n    singleCase (a+1) b\n    solve (n-1)\n\nmain = do\n    hSetBuffering stdout NoBuffering\n    t <- getNum\n    solve t\n\n</code></pre>\n<h4><b>Java:</b></h4>\n<pre><code>import java.util.Scanner;\n\npublic class Solution {\n  public static void solve(Scanner input, int a, int b) {\n    int m = (a + b) / 2;\n    System.out.println(m);\n    String s = input.next();\n    if (s.equals(\"CORRECT\")) {\n      return;\n    } else if (s.equals(\"TOO_SMALL\")) {\n      solve(input, m + 1, b);\n    } else {\n      solve(input, a, m - 1);\n    }\n  }\n\n  public static void main(String args[]) {\n    Scanner input = new Scanner(System.in);\n    int T = input.nextInt();\n    for (int ks = 1; ks <= T; ks++) {\n      int a = input.nextInt();\n      int b = input.nextInt();\n      int n = input.nextInt();\n      solve(input, a + 1, b);\n    }\n  }\n}\n\n</code></pre>\n<h4><b>JavaScript:</b></h4>\n<pre><code>var readline = require('readline');\nvar rl = readline.createInterface(process.stdin, process.stdout);\n\nexpect = 'begin';\nrl.on('line', function(line) {\n  if (expect === 'begin') {\n    num_test_cases = parseInt(line);\n    expect = 'lo_hi';\n    case_counter = 0;\n  } else if (expect === 'lo_hi') {\n    lo_hi = line.split(' ');\n    head = parseInt(lo_hi[0]) + 1;\n    tail = parseInt(lo_hi[1]);\n    expect = 'num_tries';\n  } else if (expect === 'num_tries') {\n    num_tries = line; // not used.\n    expect = 'solve';\n    mid = parseInt((head + tail) / 2);\n    console.log(mid);\n  } else if (expect === 'solve') {\n    if (line === 'CORRECT') {\n      ++case_counter === num_test_cases ? rl.close() : 0;\n      expect = 'lo_hi';\n    } else {\n      line === 'TOO_SMALL' ? head = mid + 1 : tail = mid - 1;\n      mid = parseInt((head + tail) / 2);\n      console.log(mid);\n    }\n  }\n}).on('close',function(){\n    process.exit(0);\n});\n\n</code></pre>\n<h4><b>PHP:</b></h4>\n<pre><code>&lt;?php\n\nfunction solve($a, $b) {\n  $m = ($a + $b) / 2;\n  printf(\"%d\\n\", $m);\n  fscanf(STDIN, \"%s\", $s);\n  if (strcmp($s, \"CORRECT\") == 0) {\n    return;\n  } else if (strcmp($s, \"TOO_SMALL\") == 0) {\n    $a = $m + 1;\n  } else {\n    $b = $m - 1;\n  }\n  solve($a, $b);\n}\n\nfscanf(STDIN, \"%d\", $t);\nfor ($ks = 0; $ks < $t; $ks++) {\n  fscanf(STDIN, \"%d %d\", $a, $b);\n  fscanf(STDIN, \"%d\", $n);\n  solve($a + 1, $b);\n}\n?>\n\n</code></pre>\n<h4><b>Python2:</b></h4>\n<pre><code>import sys\n\ndef solve(a, b):\n  m = (a + b) / 2\n  print m\n  sys.stdout.flush()\n  s = raw_input()\n  if s == \"CORRECT\":\n    return\n  elif s == \"TOO_SMALL\":\n    a = m + 1\n  else:\n    b = m - 1\n  solve(a, b)\n\nT = input()\nfor _ in xrange(T):\n  a, b = map(int, raw_input().split())\n  _ = input()\n  solve(a + 1, b)\n\n</code></pre>\n<h4><b>Python3:</b></h4>\n<pre><code>import sys\n\ndef solve(a, b):\n  m = (a + b) // 2\n  print(m)\n  sys.stdout.flush()\n  s = input()\n  if s == \"CORRECT\":\n    return\n  elif s == \"TOO_SMALL\":\n    a = m + 1\n  else:\n    b = m - 1\n  solve(a, b)\n\nT = int(input())\nfor _ in range(T):\n  a, b = map(int, input().split())\n  _ = int(input())\n  solve(a + 1, b)\n\n</code></pre>\n<h4><b>Ruby:</b></h4>\n<pre><code>$stdout.sync = true\n\ndef solve(a, b)\n  m = (a + b) / 2\n  puts m\n  $stdout.flush\n  s = STDIN.gets.chomp\n  if s.eql? \"CORRECT\"\n    return\n  elsif s.eql? \"TOO_SMALL\"\n    solve(m + 1, b)\n  else\n    solve(a, m - 1)\n  end\nend\n\nt = STDIN.gets.chomp.to_i\nks = 1\nwhile ks <= t\n  a, b = STDIN.gets.split.map &:to_i;\n  n = STDIN.gets.chomp.to_i\n  solve(a + 1, b)\n  ks = ks + 1\nend\n</code></pre>\n","id":"00000000000588f4","statement":"<h3>Welcome to the Practice Session!</h3>\n<p>\n  If you experience any technical issues interfering with your ability to\n  participate in the Practice Session, please email us immediately at\n  <a href=\"mailto:codejam@google.com\">codejam@google.com</a>. We will have limited support\n  during the session, but will get back to you as soon as possible. For all\n  other feedback, we invite you to submit your thoughts and suggestions via this\n  <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSfE09X8Zdotkf8FYe-YczYs2eUBZtOC1yoxObpJrQiMAo0Qqg/viewform\">feedback form</a>\n  after the Practice Session.\n\n<h3>Problem</h3>\n<p>\n  This problem is a well-known classic; we present it primarily as an opportunity\n  for you to try out the interactive judging system.\n</p><p>\n  We are thinking of an integer P within the range (<b>A</b>,<b>B</b>] &mdash;\n  that is, <b>A</b> &lt; P &le; <b>B</b>. You have <b>N</b> tries to guess our\n  number. After each guess that is not correct, we will tell you whether P is\n  higher or lower than your guess.\n</p>\n\n<h3>Input and output</h3>\n<p>\n  This problem is\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq#interactive-problems\">\n  interactive</a>, which means that the concepts of input and output are different\n  than in standard Code Jam problems. You will interact with a separate process\n  that both provides you with information and evaluates your responses.\n  All information comes into your program via standard input; anything that you\n  need to communicate should be sent via standard output.\n  Remember that many programming languages buffer the output by default, so\n  make sure your output actually goes out (for instance, by flushing the\n  buffer) before blocking to wait for a response. See the\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq\" target=\"_blank\">FAQ</a>\n  for an explanation of what it means to flush the buffer.\n  Anything your program sends through standard error is ignored, but it might\n  consume some memory and be counted against your memory limit, so do not\n  overflow it. To help you debug, a local testing tool script (in Python) is\n  provided at the very end of the problem statement.\n</p><p>\n  Initially, your program should read a single line containing a single integer\n  <b>T</b> indicating the number of test cases. Then, you need to process\n  <b>T</b> test cases.\n</p><p>\n  For each test case, your program will read a single line with two integers\n  <b>A</b> and <b>B</b>, representing the exclusive lower bound and inclusive\n  upper bound, as described above. In the next line, you will read a single\n  integer <b>N</b>, representing the maximum number of guesses you can make.\n  Your program will process up to <b>N</b> exchanges with our judge.\n</p><p>\n  For each exchange, your program needs to use standard output to send a single\n  line with one integer Q: your guess. In response to your guess, the judge\n  will print a single line with one word to your input stream, which your\n  program must read through standard input. The word will be\n  <code>CORRECT</code> if your guess is correct, <code>TOO_SMALL</code> if your\n  guess is less than the correct answer, and <code>TOO_BIG</code> if your guess\n  is greater than the correct answer. Then, you can start another exchange.\n</p><p>\n  If your program gets something wrong (e.g., wrong output format, or\n  out-of-bounds values), the judge will send <code>WRONG_ANSWER</code> to your input\n  stream and it will not send any other output after that. If your program\n  continues to wait for the judge after receiving <code>WRONG_ANSWER</code>,\n  your program will time out, resulting in a Time Limit Exceeded error. Notice\n  that it is your responsibility to have your program exit in time to receive\n  the appropriate verdict (Wrong Answer, Runtime Error, etc.) instead of a Time\n  Limit Exceeded error. As usual, if the total time or memory is exceeded, or\n  your program gets a runtime error, you will receive the appropriate verdict.\n</p><p>\n  If your test case is solved within <b>N</b> tries, you will receive the\n  <code>CORRECT</code> message from the judge, as mentioned above, and then\n  continue to get input (a new line with two integers <b>A</b> and <b>B</b>,\n  etc.) for the next test case. After <b>N</b> tries, if the test case is not\n  solved, the judge will print <code>WRONG_ANSWER</code> and then stop sending output\n  to your input stream.\n</p><p>\n  You should not send additional information to the judge after solving all test\n  cases. In other words, if your program keeps printing to standard output after\n  receiving <code>CORRECT</code> for the last test case, you will get a Wrong Answer judgment.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 20.<br/>\n  <b>A</b> = 0.\n  <b>N</b> = 30.<br/>\n  Time limit: 10 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  <b>B</b> = 30.\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  <b>B</b> = 10<sup>9</sup>.\n</p>\n\n<h3>Sample interaction</h3>\n<p>\n  Here is a piece of pseudocode that demonstrates an interaction for one test set.\n  Suppose there are three test cases in this test set. The pseudocode first reads an\n  integer t, representing the number of test cases. Then the first test case begins.\n  Suppose the correct answer P is 9 for the first test case. The pseudocode first\n  reads three integers a, b, and n, representing the guessing range and maximum\n  number of tries, respectively, and then outputs a guess 30. Since 30 is greater\n  than 9, the string <code>TOO_BIG</code> is received through stdin from the judge.\n  Then the pseudocode guesses 5 and receives <code>TOO_SMALL</code> in response.\n  The guess 10 is subsequently printed to stdout which is again too big. Finally\n  the pseudocode guesses 9, and receives <code>CORRECT</code> because 9 is the\n  correct answer.\n</p>\n<pre>\n  t = readline_int()         // reads 3 into t\n  a, b = readline_two_int()  // reads 0 into a and 30 into b; note that 0 30 is one line\n  n = readline_int()         // reads 30 into n\n  printline 30 to stdout     // guesses 30\n  flush stdout\n  string s = readline()      // because 30 &gt; 9, reads TOO_BIG into s\n  printline 5 to stdout      // guesses 5\n  flush stdout\n  s = readline()             // reads TOO_SMALL into s since 5 &lt; 9\n  printline 10 to stdout     // guesses 10\n  flush stdout\n  s = readline()             // reads TOO_BIG into s since 10 &gt; 9\n  printline 9 to stdout      // guesses 9\n  flush stdout\n  s = readline()             // reads CORRECT into s\n</pre>\n<p>\n  The second test case shows what happens if the code continues to read from stdin\n  after the judge stops sending info. In this example, the contestant guesses 31,\n  which is outside the range (0, 30]. As a result, the judging system sends <code>WRONG_ANSWER</code>\n  to the input stream of the pseudocode and stops sending anything after that.\n  However, after reading <code>WRONG_ANSWER</code> into string s, the code continues to read for\n  the next test case. Since there is nothing in the input stream (judge has stopped\n  sending info), the code hangs and will eventually receive a Time Limit Exceeded Error.\n</p>\n<pre>\n  a, b = readline_two_int()  // reads 0 into a and 30 into b; note that 0 30 is one line\n  n = readline_int()         // reads 30 into n\n  printline 31 to stdout     // guesses 31\n  flush stdout\n  string s = readline()      // reads WRONG_ANSWER\n  a, b = readline_two_int()  // tries to read for the third test case but hangs since\n                             // judge has stopped sending info to stdin\n</pre>\n<p>\n  If the code in the example above exits immediately after reading <code>WRONG_ANSWER</code>,\n  it will receive a Wrong Answer judgment instead.\n</p>\n<pre>\n  a, b = readline_two_int()  // reads 0 into a and 30 into b; note that 0 30 is one line\n  n = readline_int()         // reads 30 into n\n  printline 31 to stdout     // guesses 31\n  flush stdout\n  string s = readline()      // reads WRONG_ANSWER\n  exit                       // receives a Wrong Answer judgment\n</pre>\n\n\n<h3>Testing Tool</h3>\n<p>\n  You can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use our <a href=\"https://storage.googleapis.com/coding-competitions.appspot.com/interactive_runner.py\">interactive runner</a>\n  for that. For more information, read the instructions in comments in that\n  file, and also check out the\n  <a href=\"/codejam/faq#interactive-problems\" target=\"_blank\">Interactive Problems section</a>\n  of the FAQ.\n</p><p>\n  Instructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it is <b>NOT</b>\n  the real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check the\n  <a href=\"/codejam/faq#coding\" target=\"_blank\">Coding section</a>\n  of the FAQ to make sure that you are using the same compiler as us.\n</p><p>\n<a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2EL6nl8POf9b9AGT3k9wibR33bjqPfBZ7a73WsMOHa2lejhdh_36ros0QVTZciuXhI0-XBAGvT04E0UdDv/local_testing_tool.py?dl=1\" download=\"testing_tool.py\">Download testing tool</a>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":6},{"type":2,"type__str":"HIDDEN","value":12}],"title":"Number Guessing","trial_input_type":2,"trial_input_type__str":"JUDGE_CODE"},{"analysis":"<h2>Kickstart Alarm: Analysis</h2>\n<p>\n  The problem asks us to calculate the summation of power of each wakeup call: $$$POWER_1 + POWER_2 + \\ldots + POWER_K $$$, where $$$POWER_i$$$ is just the summation of the $$$i$$$-th exponential-power of all the contiguous subarrays of the Parameter Array.\n</p>\n<h3>Small dataset</h3>\n<p>\n  For Small dataset, we can iterate over every subarray of the given array and calculate the summation of $$$POWER_i$$$ for all $$$i \\le K$$$. Thus, the simplest brute solution will work for Small dataset.\n</p>\n<p>\n  Pseudocode for Small dataset:\n</p>\n<pre>\n  result = 0\n  for(k in 1 to K) {\n    for(L in 1 to N) {\n      for(R in L to N) {\n        for(j in L to R) {\n          result = result + A[j] * pow(j-L+1,k)\n          result %= 1000000007\n        }\n      }\n    }\n  }\n</pre>\n<p>\n  In the above pseudcode, we can precompute all the $$$pow(a,b)$$$ values for $$$1 \\le a \\le n$$$ and $$$1\\le b \\le k$$$.\n  <br/>\n  The overall time complexity is $$$O(N^3 \\times K)$$$.\n</p>\n<h3>Large dataset</h3>\n<p>\n  The above solution will not work for Large dataset.\n  To solve for Large dataset, let's iterate over every position $$$x$$$ and calculate the contribution by $$$A_x$$$ to the result\n  for all subarrays where this element is $$$y$$$-th element in the subarray.\n  <ul>\n  <li> If $$$y>x$$$, there is no subarray such that $$$A_x$$$ can be $$$y$$$-th element.</li>\n  <li> For $$$y \\le x$$$, there is exactly one index where the subarray must start (i.e $$$y-1$$$ places before $$$x$$$).\n    Hence, all the subarrays\n  starting at $$$(n-(y-1))$$$ and ending on or after index $$$x$$$ will have $$$A_x$$$ at position $$$y$$$ in the subarray. Therefore, the number of\n  subarrays with element $$$A_x$$$ at $$$y$$$-th position in the subarray will be $$$(n-x+1)$$$.<br/>\n    Contribution from this element as $$$y$$$-th element in one subarray =\n    $$$A_x \\times y^1 + A_x \\times y^2 + \\ldots + A_x \\times y^K$$$.\n  <br/>\n    Let us denote with $$$S(x,y)$$$ as the contribution from this element as $$$y$$$-th element in all subarrays.\n    Combining above observations, we can show that\n    $$$S(x,y) = (n-x+1) \\times A_x \\times  (y^1 + y^2  + \\ldots  +y^K) $$$. </li>\n  <li>$$$ S(x,y) = 0 $$$ for $$$ y > x $$$. </li>\n  <li>$$$S(x,y) = A_x \\times K\\times (n-x+1)$$$ for $$$y=1$$$.</li>\n  <li>$$$S(x,y) = \\frac{(n-x+1) \\times  A_x \\times  y\\times (y^K-1)}{(y-1)}$$$ for $$$y \\le x$$$ and $$$y>1$$$. </li>\n  </ul>\n</p>\n<p>\nContribution by element at position $$$x$$$ to the result (let us say $$$C(x)$$$ ) = $$$\\sum S(x,y)$$$ for $$$1 \\le y \\le n$$$ <br/>\n  $$$= (n-x+1)\\times  A_x \\times (K + \\frac{2\\times (2^K-1)}{(2-1)} + \\frac{3\\times (3^K - 1)}{(3-1)} + \\ldots \\frac{x\\times (x^K-1)}{(x-1)})$$$.\n</p>\n\n<p>\nSo we can find the contribution by element at position $$$x$$$ in $$$O(N\\times \\log(K))$$$. This gives us a $$$O(N^2 \\times  \\log(K))$$$ solution to compute contribution of all\nthe elements.\n</p>\n<p>\n\n  Let us define $$$G(x) = \\frac{C(x)}{(A_x\\times (n-x+1))} = K + \\frac{2\\times (2^K-1)}{(2-1)} + \\frac{3\\times (3^K - 1)}{(3-1)} + \\ldots \\frac{x\\times (x^K-1)}{(x-1)}$$$.<br/>\n  Now if we look closely at $$$G(x)$$$ and $$$G(x+1)$$$, we can observe that\n  <br/>\n  $$$G(x+1) = G(x) + \\frac{(x+1)\\times ((x+1)^K -1)}{x}$$$.<br/>\nHence we can compute $$$G(x+1)$$$ from $$$G(x)$$$ in $$$O(\\log(K))$$$ time. And subsequently $$$C(x+1)$$$.\n</p>\n<p>\nTherefore the total time complexity  = $$$O(N\\times \\log(K))$$$.\n</p>\n<p>\n  Pseudocode for Large dataset:\n</p>\n<pre>\n  G[1] = K\n  C[1] = A[1] * K * n\n  result = C[1]\n  for(i in 2 to n){\n    // Using the formula derived above to get G[i] from C[i-1]\n    G[i+1] = G[i] + i * (i^K - 1) / (i - 1)\n    C[i] = G[i] * A[i] * (n - i + 1) <br/>\n    result = result + C[i]\n    result %= 1000000007\n  }\n</pre>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2nVJSS_ARV-4tkaCGQ2n1Al0X-Fazwlk0clD3el0u7EP4DgqHfyVhyAzO0UBRp7ikDmuemrw/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000058a56","statement":"<h3>Problem</h3>\n<p>\n  Shil has a very hard time waking up in the morning each day, so he decides to buy a powerful alarm\n  clock to Kickstart his day. This Alarm is called a Kickstart Alarm. It comes pre-configured with\n  <b>K</b> powerful wakeup calls. Before going to bed, the user programs the clock with a Parameter\n  Array consisting of the values <b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>, ..., <b>A<sub>N</sub></b>.\n  In the morning, the clock will ring <b>K</b> times, with the i-th wakeup call having power POWER<sub>i</sub>.\n</p>\n<p>\n  To calculate POWER<sub>i</sub>, the alarm generates all the contiguous subarrays of the Parameter\n  Array and calculates the summation of the i-th exponential-power of all contiguous subarrays.\n  The i-th exponential-power of subarray <b>A<sub>j</sub></b>, <b>A<sub>j+1</sub></b>, ..., <b>A<sub>k</sub></b>\n  is defined as <b>A<sub>j</sub></b>  &times; 1<sup>i</sup> + <b>A<sub>j+1</sub></b> &times;\n  2<sup>i</sup> + <b>A<sub>j+2</sub></b> &times; 3<sup>i</sup> + ... + <b>A<sub>k</sub></b> &times; (k-j+1)<sup>i</sup>.\n  So POWER<sub>i</sub> is just the summation of the i-th exponential-power of all the contiguous subarrays of the Parameter Array.\n</p>\n<p>\n  For example, if i = 2, and <b>A</b> = [1, 4, 2], then the i-th exponential-power of <b>A</b> would be calculated as follows:<br/>\n  <ul>\n  <li>2-nd exponential-power of [1] = 1 &times; 1<sup>2</sup> = 1</li>\n  <li>2-nd exponential-power of [4] = 4 &times; 1<sup>2</sup> = 4</li>\n  <li>2-nd exponential-power of [2] = 2 &times; 1<sup>2</sup> = 2</li>\n  <li>2-nd exponential-power of [1, 4] = 1 &times; 1<sup>2</sup> + 4 &times; 2<sup>2</sup> = 17</li>\n  <li>2-nd exponential-power of [4, 2] = 4 &times; 1<sup>2</sup> + 2 &times; 2<sup>2</sup> = 12</li>\n  <li>2-nd exponential-power of [1, 4, 2] = 1 &times; 1<sup>2</sup> + 4 &times; 2<sup>2</sup> + 2 &times; 3<sup>2</sup> = 35</li>\n  </ul>\n  so the total is 71.\n</p>\n\n<p>\n  Tonight, Shil is using his Kickstart Alarm for the first time. Therefore, he is quite worried about\n  the sound the alarm might make in the morning. It may wake up the neighbors, or, worse yet, it may wake up the whole planet!\n  However, calculating the power of each wakeup call is quite difficult for him.\n  Given <b>K</b> and the Parameter Array <b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>, ..., <b>A<sub><b>N</b></sub></b>,\n  can you help him by calculating the summation of power of each wakeup call:\n  POWER<sub>1</sub> + POWER<sub>2</sub> + ... + POWER<sub>K</sub>?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b>\n  test cases follow. Each test case consists of one line with nine integers\n  <b>N, K, x<sub>1</sub>, y<sub>1</sub>, C, D, E<sub>1</sub>, E<sub>2</sub></b> and <b>F</b>.\n  <b>N</b> is the length of array <b>A</b>, <b>K</b> is the number of wakeup calls.\n  Rest of the values are parameters that you should use to generate the elements of the array <b>A</b>, as follows.\n</p>\n<p>\n   Use the recurrences below to generate x<sub>i</sub> and y<sub>i</sub> for i = 2 to <b>N</b>:\n   <ul>\n     <li>x<sub>i</sub> = ( <b>C</b> &times; x<sub>i-1</sub> + <b>D</b> &times; y<sub>i-1</sub> + <b>E<sub>1</sub></b> ) modulo <b>F</b>.</li>\n   <li>y<sub>i</sub> = ( <b>D</b> &times; x<sub>i-1</sub> + <b>C</b> &times; y<sub>i-1</sub> + <b>E<sub>2</sub></b> ) modulo <b>F</b>.</li>\n   </ul>\nWe define <b>A<sub>i</sub></b> = ( x<sub>i</sub> + y<sub>i</sub> ) modulo <b>F</b>, for all i = 1 to <b>N</b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: POWER</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>POWER</code> is the summation of POWER<sub>i</sub>, for i = 1 to <b>K</b>.\n  Since <code>POWER</code> could be huge, print it modulo 1000000007 (10<sup>9</sup> + 7).\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 90 seconds per test set.<br/>\n  Memory limit: 1 GB.<br/>\n  1 &le; <b>x<sub>1</sub></b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>y<sub>1</sub></b> &le; 10<sup>5</sup><br/>\n  1 &le; <b>C</b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>D</b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>E<sub>1</sub></b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>E<sub>2</sub></b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>F</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  1 &le; <b>N</b> &le; 100.<br/>\n  1 &le; <b>K</b> &le; 20.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  1 &le; <b>N</b> &le; 10<sup>6</sup>.<br/>\n  1 &le; <b>K</b> &le; 10<sup>4</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0SJXgVA9jphhZhBJBbvOU0A9GZw--QA8RSj2YUz30B5Q9gRd0BO3MhyVi3sOBt8XGGs8txR0crqXqE4dLmJ93UuoZJD-t3zv075w04/kickstart_alarm_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2 3 1 2 1 2 1 1 9\n10 10 10001 10002 10003 10004 10005 10006 89273\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1zYJNcmtbFKonjp2Wj0_3fEvLzTfM4sQCVJgp_PxQI5GPMzn-N2Rrq3uxVLkYRN5BGhML4WOryIv4kGN_gQUGoNXeQMgQpyU1O5e-A-w/kickstart_alarm_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 52\nCase #2: 739786670\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, the Parameter Array is [3, 2].\n  All the contiguous subarrays are [3], [2], [3, 2].\n</p>\n<p>\n  For i = 1:\n  <ul>\n  <li>1-st Exponential-power of [3] = 3 &times; 1<sup>1</sup> = 3</li>\n  <li>1-st Exponential-power of [2] = 2 &times; 1<sup>1</sup> = 2</li>\n  <li>1-st Exponential-power of [3, 2] = 3 + 2 &times; 2<sup>1</sup> = 7</li>\n  </ul>\n  So POWER<sub>1</sub> is 12.<br/>\n</p>\n\n<p>\n  For i = 2:\n  <ul>\n  <li>2-nd Exponential-power of [3] = 3 &times; 1<sup>2</sup> = 3</li>\n  <li>2-nd Exponential-power of [2] = 2 &times; 1<sup>2</sup> = 2</li>\n  <li>2-nd Exponential-power of [3, 2] = 3 + 2 &times; 2<sup>2</sup> = 11</li>\n  </ul>\n  So POWER<sub>2</sub> is 16.<br/>\n</p>\n\n<p>\n  For i = 3:\n  <ul>\n  <li>3-rd Exponential-power of [3] = 3 &times; 1<sup>3</sup> = 3</li>\n  <li>3-rd Exponential-power of [2] = 2 &times; 1<sup>3</sup> = 2</li>\n  <li>3-rd Exponential-power of [3, 2] = 3 + 2 &times; 2<sup>3</sup> = 19</li>\n  </ul>\n  So POWER<sub>3</sub> is 24.<br/>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":13},{"type":2,"type__str":"HIDDEN","value":31}],"title":"Kickstart Alarm","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Mural: Analysis</h2>\n\n<p>\n  We can observe that we will have painted ceil(<b>N</b>/2) sections in the end, and all these\n  sections would form a contiguous subarray of the input array. Since painting and destroying is done\n  alternatively, it might not be possible to paint any subarray of our choice. Our objective is to\n  find the maximum subarray sum among the set of \"paintable\" subarrays.\n</p>\n\n<h3>Small dataset</h3>\n<p>\n  An intuitive approach would rely on <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\">\n  Dynamic Programming</a> and try to define a DP state that could\n  encapsulate the state of the painted and the destroyed sections at any point in time.\n  Note that painted section is contiguous, and the destroyed sections are prefixes and suffixes of\n  the input array.\n  <br/>\n  Hence, we can define <i>f(i, j, l, r)</i> as the maximum possible achievable score if <i>i</i> and\n  <i>j</i> are the lengths of the destroyed prefix and suffix, respectively; whereas <i>l</i> and\n  <i>r</i> denote the left and the right boundaries of the painted subarray. A recurrence can easily\n  be derived by considering at most four further possibilities: we have two\n  ways to extend the mural (by painting the section either to the left or to the right of the already\n  painted boundary), and two ways to extend the destroyed part (either the prefix or the suffix).\n  <br/>\n  Note that it would seem that there are O(<b>N</b><sup>4</sup>) different valid states in the above\n  approach, but that is not the case since the sum of lengths of painted and destroyed parts is always\n  the same. We can get rid of the index of the right boundary of the painted subarray (i.e. variable <i>r</i>),\n  as it can be implicitly derived from the variables <i>i</i> and <i>j</i>.\n <br/>\n  The overall complexity of this approach is O(<b>N</b><sup>3</sup>) and that will suffice for the\n  Small dataset.\n</p>\n\n<h3>Large dataset</h3>\n<p>\n  The solution to the Large dataset relies on an interesting observation that all possible contiguous\n  subarrays of length ceil(<b>N</b>/2) are \"paintable\". If we can prove this fact, we can simply\n  do an O(<b>N</b>) rolling window approach over all such subarrays and output the maximum\n  possible sum.\n</p>\n<p>\n  Let's think of an intuitive way to prove this. Say, if we paint the <i>i</i>-th section on the first\n  day, what could be the smallest possible index of the left boundary of the mural in the worst case?\n  To achieve the smallest possible index, we will always extend the boundary on the left side; and\n  in the worst case the flood can always extend the prefix, allowing us to paint only the\n  indices after index <i>ceil(i/2)</i>(inclusive). And similarly, there would be an upper limit on\n  the maximum possible index of the right boundary.\n  <br/>\n  This means that given the desirable left boundary of the mural, we can figure out the \"central point\"\n  from which we would begin painting. Now, irrespective of the sequence of destructions, we can always\n  meet the desirable left boundary by always extending our subarray to the left whenever a section on the\n  left is destroyed. Similar arguments can be applied to the right boundary.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2o6yNZo4W_j_489O9S-_A1Qxdp0ZZne9FK2a_M8KhOENqBTkutG-VwCv63KpxhYZOM8AYdvg/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000058b89","statement":"<h3>Problem</h3>\n<p>\n  Thanh wants to paint a wonderful mural on a wall that is <b>N</b> sections long. Each section of the\n  wall has a <i>beauty score</i>, which indicates how beautiful it will look if it is\n  painted. Unfortunately, the wall is starting to crumble due to a recent flood, so he will need to work fast!\n</p><p>\n  At the beginning of each day, Thanh will paint one of the sections of the wall. On the first day,\n  he is free to paint any section he likes. On each subsequent day, he must paint a new section\n  that is next to a section he has already painted, since he does not want to split up the mural.\n</p><p>\n  At the end of each day, one section of the wall will be destroyed.\n  It is always a section of wall that is adjacent to only one other section and is unpainted\n  (Thanh is using a waterproof paint, so painted sections can't be destroyed).\n</p><p>\n  The <i>total beauty</i> of Thanh's mural will be equal to the sum of\n  the beauty scores of the sections he has painted.\n  Thanh would like to guarantee that, no matter how the wall is destroyed, he can still achieve a total beauty of at least B.\n  What's the maximum value of B for which he can make this guarantee?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case starts with a line containing an integer <b>N</b>. Then, another line follows containing\n  a string of <b>N</b> digits from 0 to 9. The i-th digit represents the beauty score of the i-th section of the wall.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the\n  test case number (starting from 1) and <code>y</code> is the maximum beauty score that Thanh can\n  guarantee that he can achieve, as described above.\n</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 100.<br/>\nTime limit: 20 seconds per test set.<br/>\nMemory limit: 1 GB.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n2 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\nFor exactly 1 case, <b>N</b> = 5 &times; 10<sup>6</sup>; for the other <b>T</b> - 1 cases,\n2 &le; <b>N</b> &le; 100.</br>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3CS1si7E3QapaK6X-AK9-n1Ino7c3wU3Rc6fgThcPJiP_OWiRMZkOALCLrNa6glVmyucANdm2z5ZOwO7pBjrenZ-w/mural_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n4\n1332\n4\n9583\n3\n616\n10\n1029384756\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1kGh4Dqqezm6N6MhVbfNjCvB3QT3Ji8-28qnYS6V_bhkfSDbJf5_xxrcBf8a5igqGyEiVOh8OPfz_C-4nriHodtkte/mural_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 6\nCase #2: 14\nCase #3: 7\nCase #4: 31\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In the first sample case, Thanh can get a total beauty of 6, no matter how the wall is destroyed.\n  On the first day, he can paint either section of wall with beauty score 3.\n  At the end of the day, either the 1st section or the 4th section will be destroyed, but it does\n  not matter which one. On the second day, he can paint the other section with beauty score 3.\n</p><p>\n  In the second sample case, Thanh can get a total beauty of 14, by painting the leftmost section of\n  wall (with beauty score 9). The only section of wall that can be destroyed is the\n  rightmost one, since the leftmost one is painted.\n  On the second day, he can paint the second leftmost section with beauty score 5.\n  Then the last unpainted section of wall on the right is destroyed. Note that on the second\n  day, Thanh cannot choose to paint the third section of wall (with beauty score 8), since it is\n  not adjacent to any other painted sections.\n</p><p>\n  In the third sample case, Thanh can get a total beauty of 7. He begins by painting the section\n  in the middle (with beauty score 1). Whichever section is destroyed at the\n  end of the day, he can paint the remaining wall at the start of the second day.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":15},{"type":2,"type__str":"HIDDEN","value":23}],"title":"Mural","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000051060","type":1,"type__str":"SPECTATOR"},"title":"Practice Round 2019"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
