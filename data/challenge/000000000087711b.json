{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1650825000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"000000000087711b","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Round 1B kicked off with a favorite Code Jam theme in <i>Pancake Deque</i> which had contestants’ mouths watering as they worked to serve pancakes from a deque in the optimal order. Next, <i>Controlled Inflation</i> required some optimizations then dynamic programming as contestants helped quickly inflate everyone’s sports balls and giant parade balloon animals. Finally, <i>Asedatab</i> truly put contestants to the test as they fought against an adversarial judge while trying to reset a database’s record value to 0.</p>\n\n<p><b>andrewgu</b> was the first one with a perfect score, and that gave them the top position in the final standings. <b>georgerapeanu</b> and <b>Iftekhar_Hakim_K</b> rounded out the top 3 with only a few more minutes of penalty. Just over 100 people managed a perfect score. Over 9000 people scored some points out of the more than 11000 that submitted a solution.</p>\n\n<p>When the hidden results were revealed, the contestant in 1500th place had 85 points, which is the unofficial cutoff for advancing. The Code Jam team will spend a few days finalizing the results. You can have fun reading the analyses in the problem pages while you wait. </p>\n\n<p>Congratulations to all advancers, and for everyone else, there is one more chance to advance to Round 2 in less than a week. Be sure to <a href=\"https://codingcompetitions.withgoogle.com/codejam/schedule\">check the schedule</a> to find out when Round 1C is happening in your timezone. See you there!\n</p>\n<hr>\n<p>\n  <b>Cast</b>\n</p>\n<p>\n  Pancake Deque: Written by Pablo Heiber. Prepared by Priyam Khandelwal.\n</p><p>\n  Controlled Inflation: Written by Mohit Jain. Prepared by Ulises Mendez Martinez.\n</p><p>\n  ASeDatAb: Written and prepared by Xiongqi (Parker) Zhang.\n</p><p>\nSolutions and other problem preparation and review by Aditya Mishra, Andy Zakharov, Antonio Mendez, Chill Chiu, Chun-nien Chan, Darcy Best, Hsin-cheng Hou, Ian Tullis, Liang Bai, Md Mahbubul Hasan, Mohamed Yosri Ahmed, Nafis Sadique, Nikita Rungta, Nour Yosri, Pablo Heiber, Ritesh Kumar, Sanyam Garg, Sudarsan Srinivasan, Swapnil Gupta, Swapnil Mahajan, Timothy Buzzelli, Ulises Mendez Martinez, Xiang Yao, and Xiongqi (Parker) Zhang.\n</p><p>\nAnalysis authors:\n</p><ul>\n  <li>Pancake Deque: Hsin-cheng Hou.</li>\n  <li>Controlled Inflation: Andy Zakharov.</li>\n  <li>ASeDatAb: Ian Tullis, Timothy Buzzelli, and Xiongqi (Parker) Zhang.</li>\n</ul>\n  ","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1650816000000,"tasks":[{"analysis":"<p>\n  The key observation is that for each customer, either the increasing or decreasing order of target pressures will produce an optimal solution.\n  That is, no other permutation of products will result in a strictly lower number of button presses. Let's prove this.\n</p><p>\n  First, note that this is true for each individual customer $$$i$$$.\n  At one point in the process, the pump will be at the minimal pressure $$$\\text{Min}_i = \\min_{j=1..\\mathbf{P}} \\mathbf{X_{i,j}}$$$.\n  At another point, the pump will be at the maximal pressure $$$\\text{Max}_i = \\max_{j=1..\\mathbf{P}} \\mathbf{X_{i,j}}$$$.\n  This means that we have to reach both of them, so we will always have to press the buttons at least $$$\\text{Max}_i - \\text{Min}_i$$$ times, no matter the order.\n  This can be achieved by arranging the products in either increasing or decreasing order of their target pressures.\n</p><p>\n  Now, the pressure also has to be adjusted between customers, which requires pressing the buttons.\n  Let's see why all other product orders do not improve the answer by consindering how many button presses between customers we can save.\n  While processing the $$$i$$$-th customer, the pump will be at $$$\\text{Min}_i$$$ at one point, at $$$\\text{Max}_i$$$ at another point, and finally we will leave it at the pressure of the last product, $$$\\mathbf{X_{i,last}}$$$.\n  This requires at least $$$(\\text{Max}_i - \\text{Min}_i) + (\\text{Max}_i - \\mathbf{X_{i,last}})$$$ button presses, but the potential saving is at most $$$(\\text{Max}_i - \\mathbf{X_{i,last}})$$$, which is the least amount of additional button presses we needed to do.\n  If the pump reaches the maximum pressure before reaching the minimum pressure, a similar relationship holds, meaning this different order does not improve the answer.\n</p><p>\n  Now that we know that it is enough to consider only the increasing and decreasing orders, we will only keep track of $$$\\text{Min}_i$$$ and $$$\\text{Max}_i$$$ for each customer.\n  For the test set with the visible verdict, it is enough to check all $$$2^\\mathbf{N} \\le 1024$$$ possibilities of choosing the increasing or decreasing order for each customer and simulate the process.\n</p><p>\n  To do this more efficiently, we can use dynamic programming.\n  Let $$$dp_{i,0}$$$ be the answer after processing $$$i$$$ customers where the products for the last customers are arranged in increasing order.\n  Similarly, let $$$dp_{i,1}$$$ be the answer after the first $$$i$$$ customers with the products for the last one arranged in decreasing order.\n  We will also keep track of the pressure we left the pump at, $$$l_0$$$ and $$$l_1$$$ for the increasing and decreasing orders corresponsindly.\n  Clearly, $$$dp_{0,0} = dp_{0,1} = 0$$$ and $$$l_0 = l_1 = 0$$$ (the starting pressure).\n  Now, assume $$$dp$$$ is calculated up to $$$i$$$.\n  The following equations give the values for the next customer:\n</p><p>\n  $$$dp_{i+1,0} = \\min \\begin{pmatrix} dp_{i,0} + |l_0 - \\text{Min}_{i+1}| + (\\text{Max}_{i+1} - \\text{Min}_{i+1}), \\\\ dp_{i,1} + |l_1 - \\text{Min}_{i+1}| + (\\text{Max}_{i+1} - \\text{Min}_{i+1}) \\end{pmatrix}$$$\n</p><p>\n  $$$dp_{i+1,1} = \\min \\begin{pmatrix} dp_{i,0} + |l_0 - \\text{Max}_{i+1}| + (\\text{Max}_{i+1} - \\text{Min}_{i+1}), \\\\ dp_{i,1} + |l_1 - \\text{Max}_{i+1}| + (\\text{Max}_{i+1} - \\text{Min}_{i+1}) \\end{pmatrix}$$$\n</p><p>\n  And update the last pressures: $$$l_0 = \\text{Max}_{i+1}$$$, $$$l_1 = \\text{Min}_{i+1}$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U34ZsWi3B2WL2zRwy1Jwk-CiXdJu_9LDo6YyIAmdWeBtnidov1bA_JNYXJdUkEdWg94L0FRNlI9/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000accfdb","statement":"<h3>Problem</h3>\n<p>\nThe lines at the air pump at your gas station are getting too long! You want to optimize\nthe process to help customers more quickly inflate their tires, sports balls, giant parade\nballoon animals, and other products.\n</p><p>\nThe pump is automatic: you set the pressure to a specific number of pascals and plug the pump into\nthe inflatable product, and it will inflate as needed to that exact pressure. There are only two\nbuttons on the pump: up and down. They increase and decrease the target pressure, respectively,\nby exactly $$$1$$$ pascal.\n</p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2nFW7xvGyAXYtYO8EuTl3nM2zlbRZLF91fB1RmA82sf3vse-uTg4p2zPIn2LhpivzDw_GwEsVsbAYYtREX3ei9Z-qGI4mO/controlled_inflation.png\" alt=\"Image of air pump and soccer ball.\"/></p>\n<p>\nThere is a line of $$$\\mathbf{N}$$$ customers, each of whom brings exactly $$$\\mathbf{P}$$$ products that they need to get\ninflated by the pump. You know the target pressure of each product. You can inflate the products from\na customer in any order you want, but you cannot change the order of the customers. Specifically,\nyou must inflate all products from the $$$i$$$&NoBreak;-th customer before inflating any from the\n$$$(i + 1)$$$&NoBreak;-th customer.\nIn between handling two products, if those two products have different target pressures, you need\nto use the buttons on the pump.\n</p><p>\nThe pump is initially set to $$$0$$$ pascals, and it can be left at any number after all products\nof all customers have been inflated. If you order the products of each customer optimally,\nwhat is the minimum number of button presses you need?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case starts with a line containing two integers, $$$\\mathbf{N}$$$ and $$$\\mathbf{P}$$$: the number of customers\nand the number of products each customer brings, respectively. Then, $$$\\mathbf{N}$$$ lines follow. The $$$i$$$-th of these\nlines contains $$$\\mathbf{P}$$$ integers $$$\\mathbf{X_{i,1}}, \\mathbf{X_{i,2}}, \\dots, \\mathbf{X_{i,P}}$$$, representing that\nthe $$$j$$$-th product that the $$$i$$$-th customer brings has a target pressure of $$$\\mathbf{X_{i,j}}$$$ pascals.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the minimum number of\nbutton presses needed to inflate all products according to their specified pressures.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 5 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{X_{i,j}} \\le 10^9$$$, for all $$$i, j$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N} \\le 10$$$.<br/>\n$$$2 \\le \\mathbf{P} \\le 3$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N} \\le 1000$$$.<br/>\n$$$2 \\le \\mathbf{P} \\le 100$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3h5Jl0LU0KnbNGdwSe9xU5xnmgXEFdvVeZJ9AK0ZiGATECV7J7hZS1XeFA5BiBQ5NcfOGUhs8cc90a-GAdB6CaZiJEPBPXoq_W66RL_6mEgBdxDQ/controlled_inflation_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3 3\n30 10 40\n20 50 60\n60 60 50\n5 2\n1 1000000000\n500000000 1000000000\n1 1000000000\n500000000 1\n1 1000000000\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U092jZS5e6JhhH1WFbN0mgKztDa0DnsI-LmrRK6wS5kYAZpNnPBaJe9ANlhLGxiilAkTcKXCyu6yhk4zLVxvH75hJstVQCdhyY9j8p90ZLhEslo9K4/controlled_inflation_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 110\nCase #2: 4999999996\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, an optimal way to use the pump is:\n<ol>\n<li>press up $$$10$$$ times, setting the pump to $$$10$$$; pump the product (from customer 1) that needs $$$10$$$ pascals,</li>\n<li>press up $$$30$$$ times, setting the pump to $$$40$$$; pump the product (from customer 1) that needs $$$40$$$ pascals,</li>\n<li>press down $$$10$$$ times, setting the pump to $$$30$$$; pump the product (from customer 1) that needs $$$30$$$ pascals,</li>\n<li>press down $$$10$$$ times, setting the pump to $$$20$$$; pump the product (from customer 2) that needs $$$20$$$ pascals,</li>\n<li>press up $$$30$$$ times, setting the pump to $$$50$$$; pump the product (from customer 2) that needs $$$50$$$ pascals,</li>\n<li>press up $$$10$$$ times, setting the pump to $$$60$$$; pump the product (from customer 2) and the two products (from customer 3) that need $$$60$$$ pascals, and finally</li>\n<li>press down $$$10$$$ times, setting the pump to $$$50$$$; pump the product (from customer 3) that needs $$$50$$$ pascals.</li>\n</ol>\n<p>\n  This is a total of $$$110$$$ button presses.\n</p><p>\n  In Sample Case #2, notice that the answer can be larger than $$$2^{32}$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":14},{"type":2,"type__str":"HIDDEN","value":21}],"title":"Controlled Inflation","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n<p>\n  Whatever we try to do, the randomly-rotating judge in this test set might scuttle our plans. But\n  we can fight randomness with randomness!\n</p><p>\n  First, we can observe that if the judge ever tells us that the record has eight $$$1$$$ bits, we\n  have all but won (as long as we have at least one interaction left). This is because we can then\n  submit $$$11111111$$$, and no matter how the judge rotates it, the final result of XORing will be\n  $$$00000000$$$. Because of this, if we are ever told that the record has more than four $$$1$$$s,\n  it should be to our advantage to aim for eight 1s rather than zero 1s!\n</p><p>\n  For now let's suppose the judge tells us there are $$$b$$$ bits in the record, for some $$$b$$$\n  between $$$1$$$ and $$$4$$$. (We will handle the other cases by symmetry, as explained above.)\n  Let's do the following: choose a string with $$$b$$$ bits uniformly at random, then send that.\n  Now it doesn't really matter how the judge rotates our string -- whatever the resulting rotated\n  string is, we were just as likely to pick that in the first place.\n</p><p>\n  What are the possible outcomes? Suppose that $$$b=2$$$. Then we have a\n  $$$\\frac{1}{{8 \\choose 2}} = \\frac{1}{28}$$$ chance of flipping both of the two $$$1$$$s (and\n  therefore winning!), a $$$\\frac{{2 \\choose 1}{6 \\choose 1}}{{8 \\choose 2}} = \\frac{12}{28}$$$\n  chance of flipping one of the two $$$1$$$s and some innocent $$$0$$$ (and thus being back in the\n  same $$$b=2$$$ boat), and a $$$\\frac{{2 \\choose 0}{6 \\choose 2}}{{8 \\choose 2}} = \\frac{15}{28}$$$\n  chance of missing both $$$1$$$s and creating two new $$$1$$$s (taking us to $$$b = 4$$$). This\n  may not seem too promising so far, but hang on...\n</p><p>\n  Doing the same sort of analysis for the state $$$b=4$$$, we find that we end up at one of\n  $$$b = 0, 2, 4, 6, 8$$$, with probabilities $$$\\frac{1}{70}, \\frac{16}{70}, \\frac{36}{70},\n  \\frac{16}{70}, \\frac{1}{70}$$$, respectively. But, as we mentioned, being at $$$b=6$$$ is just the\n  same as being at $$$b=2$$$. If we are at $$$b=6$$$, we can try to use two $$$1$$$s to flip the two\n  0s, in the hopes of reaching $$$11111111$$$. Similarly, being at $$$b=8$$$ is (essentially) as\n  good as being at $$$b=0$$$. So we will lump those two probabilities into $$$b=2$$$ and $$$b=0$$$,\n  respectively, getting transition probabilities to $$$b=0, 2, 4$$$ of $$$\\frac{1}{35}, \\frac{16}{35},$$$\n  and $$$\\frac{18}{35}$$$, respectively.\n</p><p>\n  Notice that if $$$b$$$ is even, we are trapped in the even-$$$b$$$-verse, randomly walking\n  (according to those transition probabilities) until we either reach $$$b=0$$$ or reach $$$b=8$$$\n  or we run out of guesses. And if we are not in the even-$$$b$$$-verse, one round of sending\n  exactly $$$min(b, 8-b)$$$ randomly placed $$$1$$$s will get us there; we leave this as an exercise.\n  So our strategy can be to spend up to two rounds getting into the even-$$$b$$$-verse, up to 297\n  rounds wandering, and up to one round possibly turning a $$$11111111$$$ into a $$$00000000$$$.\n</p><p>\n  What are the chances that we will succeed in those 297 rounds? Observe that until we reach a\n  winning state ($$$00000000$$$ or $$$11111111$$$), we are always in one of two other states:\n  $$$b=2$$$ (lumped in with $$$b=6$$$), or $$$b=4$$$. In the former case, we have a $$$\\frac{1}{28}$$$\n  chance of transitioning to a winning state, and in the latter case, that chance is $$$\\frac{1}{35}$$$.\n  Just for ease of argument, let's pessimistically guess that we get stuck hanging around in\n  the less advantageous $$$b=4$$$ state. But then to not win, we would still have to fail our\n  $$$\\frac{1}{35}$$$ lottery 297 times. The probability of that is\n  $$$(1 - \\frac{1}{35})^{297} \\approx 0.0002$$$. So we have at least a $$$99.98\\%$$$ chance of succeeding with\n  this strategy, and that is an overly conservative lower bound!\n</p><p>\n  (If you're curious about the actual success probability, we can conservatively assume that we\n  always start our journey at $$$b=4$$$, and then find the upper left cell of $$$\\begin{pmatrix}\n  1 & \\frac{1}{28} & \\frac{1}{35}\\\\\n  0 & \\frac{12}{28} & \\frac{16}{35}\\\\\n  0 & \\frac{15}{28} & \\frac{18}{35}\\end{pmatrix}^{297}\\begin{pmatrix}0\\\\ 0\\\\ 1\\end{pmatrix}$$$, which turns\n  out to be about $$$0.99993 \\approx 99.993\\%$$$).\n</p><p>\n  Of course, we still have to pass <i>all 100</i> test cases in Test Set 1, and the probability of\n  this is a bit smaller: $$$\\approx 0.99993^{100} \\approx 0.993$$$. But $$$99.3\\%$$$ isn't so bad,\n  and if we see an unlucky failure with this method, we can easily get another independent try by\n  changing our code's random seed, since we have control over that source of randomness.\n</p>\n<h3>Test Set 2</h3>\n<p>\n  In Test Set 2, the judge does not behave randomly and can and will choose rotation values that keep\n  us away from reaching our goal. So, we need a strategy that is guaranteed to reset the record to\n  all zeroes.\n</p><p>\n  One way to do this is to consider the current <i>state</i>. Let's define a state as the set of all\n  possible values the record could currently be set to. A key observation here is that two values\n  that are cyclic rotations of each other are equivalent. Therefore, we can eliminate these duplicates\n  from our sets. After the first exchange, we know how many bits are set to $$$1$$$ in the record.\n  Thus, all potential states only have values that have the same bit count.\n</p><p>\n  We can enumerate all possible values for each bit count (while removing duplicates that are cyclic\n  rotations of another value). If we do this, we find the following sets of potential values:\n</p>\n<ul>\n  <li>0 bits: $$$\\{00000000\\}$$$</li>\n  <li>1 bit: $$$\\{00000001\\}$$$</li>\n  <li>2 bits: $$$\\{00000011, 00000101, 00001001, 00010001\\}$$$</li>\n  <li>3 bits: $$$\\{00000111, 00001011, 00001101, 00010011, 00010101, 00011001, 00100101\\}$$$</li>\n  <li>4 bits: $$$\\{00001111, 00010111, 00011011, 00011101, 00100111, 00101011, 00101101, 00110011, 00110101, 01010101\\}$$$</li>\n  <li>5 bits: $$$\\{00011111, 00101111, 00110111, 00111011, 00111101, 01010111, 01011011\\}$$$</li>\n  <li>6 bits: $$$\\{00111111, 01011111, 01101111, 01110111\\}$$$</li>\n  <li>7 bits: $$$\\{01111111\\}$$$</li>\n  <li>8 bits: $$$\\{11111111\\}$$$</li>\n</ul>\n<p>\n  Notice that the largest of these sets (4 bits) has only 10 elements. Thus, there are at most\n  $$$2^{10} = 1024$$$ unique states for when we have 4 bits on. This is small enough to consider all\n  possible states and so something similar to a BFS (breadth-first search) from the state with all zeroes.\n</p><p>\n  Specifically, we can consider the set of all states that we know can be forced to reach all zeroes\n  (initially just the solved state where the record is <code>00000000</code>). Then, for a given\n  state, $$$A$$$, we can consider trying all possible values for $$$V$$$ and\n  simulate the results of the $$$8$$$ different rotation values the judge could choose. Grouping\n  those by their bitcounts gives us the possible states that $$$A$$$ could transition to for a specific\n  value of $$$V$$$. If all of those states are ones we have processed, then we know that when state\n  $$$A$$$, we can use this value of $$$V$$$ to get us closer to setting the record to all zeroes.\n</p><p>\n  It turns out that if we keep repeating the above process, we will eventually process all possible\n  states. This gives us instructions on which numbers to provide for $$$V$$$ given the current state.\n  The alternative solution is proof provided below works to prove that this is always possible for\n  $$$8$$$&NoBreak;-bit records.\n</p>\n<h3>Alternative Solution</h3>\n<p>\n  It turns out that we can solve this problem without ever knowing the bit count after interactions\n  (other than being told when we eventually reach <code>00000000</code>).\n</p><p>\n  Let's consider how we would solve this problem for a record that has only 1 bit. Since we know the\n  value starts as not $$$0$$$, we can force the state to reach $$$0$$$ by sending $$$1$$$ to the\n  judge. Let's call this sequence $$$P[0]$$$:\n</p>\n<pre align=\"center\">1</pre>\n<p>\n  Now, let's consider a record that is $$$2$$$ bits (and is not all zeroes). Let's start by assuming\n  that the two bits are the same. If that's the case, we can force the record to be all zeroes by\n  sending $$$11$$$. If We haven't reached all zeroes after that, that means our initial assumption\n  that the left and right bit were the same was incorrect. So, if we send $$$10$$$, we can make the\n  two bits the same. Then, if we are still not all zeroes, we can send another $$$11$$$. Let's call\n  this sequence $$$P[1]$$$:\n</p>\n<pre align=\"center\">11    // P[0] + P[0]\n10    // P[0] + 0   \n11    // P[0] + P[0]</pre>\n<p>\n  Now, let's generalize this and assume that the record has $$$2^k$$$ bits and is not all zeroes.\n  Let's assume that the left $$$2^{k-1}$$$ bits and the right $$$2^{k-1}$$$ bits are the same. If\n  that's the case, we can use $$$P[k - 1]$$$ (but each step is appended to itself) to force the\n  record to reach all zeroes. If we did not reach all zeroes then our assumption that the left half\n  and right were the same was not correct.\n</p><p>\n  So, we can use the first instruction in $$$P[k - 1]$$$ and append $$$2^{k-1}$$$ <code>0</code>'s to\n  it. Then we can repeat all of $$$P[k - 1]$$$ (each step doubled like before) again. As long as we\n  keep not reaching all zeroes, we repeat this process with the next instruction in $$$P[k - 1]$$$.\n</p><p>\n  The following Python code shows this process for how we can generate $$$P[3]$$$ for $$$8$$$&NoBreak;-bit records:\n</p><p>\n<pre>\ndef appendzero(s):\n  return s + '0' * len(s)\n\ndef expand(s):\n  return s + s\n\ndef P(k):\n  if k == 0:\n      return ['1']\n  seq = P(k - 1)\n  seq_with_zero = [appendzero(s) for s in seq]\n  seq_with_copy = [expand(s) for s in seq]\n  res = seq_with_copy[:]\n  for ins in seq_with_zero:\n      res += [ins]\n      res += seq_with_copy\n  return res\n\nprint(P(3))\n</pre>\n</p>\n","id":"0000000000acd29b","statement":"<h3>Problem</h3>\n<p>\n  A research consortium has been looking for the best possible database for three years, but\n  they are still having problems. The database stores values as records that hold $$$8$$$-bit\n  binary strings. Unfortunately, their implementation of the function to set\n  the value of a record is flawed.\n</p><p>\n  Each record of the database is an $$$8$$$&NoBreak;-bit binary string. The bits of the binary string\n  are indexed from $$$0$$$ to $$$7$$$ from left to right. When an instruction to set a specific\n  record to a new value $$$V$$$ is received, instead of setting the value to $$$V$$$ the database\n  does the following:\n</p>\n<ol>\n  <li>Choose an integer $$$r$$$ between $$$0$$$ and $$$7$$$, inclusive, and let $$$W$$$\n  be like $$$V$$$ but rotated by $$$r$$$ to the right. That is, the $$$((i + r) \\bmod 8)$$$&NoBreak;-th bit of $$$W$$$\n  is the $$$i$$$&NoBreak;-th bit of $$$V$$$.</li>\n  <li>Replace the current value $$$X$$$ of the record with $$$X$$$ XOR $$$W$$$. That is,\n  the new value of the record has a $$$1$$$ as its $$$i$$$&NoBreak;-th bit if and only if\n  the $$$i$$$&NoBreak;-th bits of $$$X$$$ and $$$W$$$ are different.</li>\n  <li>Finally, return the number of bits that are $$$1$$$ in the new value to the user.</li>\n</ol>\n<p>\n  Luckily, it turns out that no matter what the initial value is or what rotation values the database\n  chooses, it is always possible to reset the value of a record to have all bits be $$$0$$$\n  with no more than $$$300$$$ uses of this operation. Implement a program to interact\n  with the database that does this.\n</p>\n\n<h3>Input and output</h3>\n<p>\n  This is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of our\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq\" target=\"_blank\">FAQ</a>.\n</p>\n<p>\n  Initially, your program should read a single line containing an integer\n  $$$\\mathbf{T}$$$, the number of test cases. Then, $$$\\mathbf{T}$$$ test cases must be processed.\n</p>\n<p>\n  At the beginning\n  of each test case, the record in the database is set to a value that is not\n  <code>00000000</code>. In each test case, your program must process up to $$$300$$$ exchanges.\n</p>\n<p>\n  The $$$i$$$&NoBreak;-th exchange starts with you outputting a single line containing a single\n  $$$8$$$&NoBreak;-bit binary string to be used as the value $$$V$$$ for the operation above.\n  Then, the judge program performs the operation as described and sends you a single\n  line containing a single integer $$$\\mathbf{N_i}$$$ representing the number of bits that are\n  equal to $$$1$$$ in the updated value of the record.\n</p>\n<ul>\n  <li>If $$$\\mathbf{N_i} = 0$$$, it means that\n  you have succeeded and you must start the next test case, or finish the\n  program if it was the last one.</li>\n  <li>If $$$\\mathbf{N_i} = -1$$$ it means that this was the $$$300$$$-th\n  exchange of the test case but the record never got to a value of all zeroes, so the test is\n  failed. No further test cases will be processed.</li>\n  <li>If $$$1 \\le \\mathbf{N_i} \\le 8$$$, it means that the updated value of the record has $$$\\mathbf{N_i}$$$ ones\n    and you may proceed to the next exchange to keep trying to make it contain only zeroes.</li>\n</ul>\n<p>\n  Your solution is considered correct if and only if you succeed in setting the value of the record\n  to <code>00000000</code> for all test cases.\n<p>\n  If the judge receives an invalidly formatted or invalid line from your program at any moment,\n  the judge will print a single number $$$-1$$$ and will not print any further output.\n  If you receive a $$$-1$$$, you must finish correctly and without exceeding the time\n  or memory limits to receive a Wrong Answer judgement. Otherwise, you will receive a judgement\n  informing the exceeded resource or the incorrect termination condition.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 10 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$-1 \\le \\mathbf{N_i} \\le 8$$$ for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n<p>\n  The initial value of the record is chosen uniformly at random from all $$$8$$$-bit binary strings\n  that are not <code>00000000</code>.\n</p>\n<p>\n  Each rotation value is chosen uniformly at random, and independently of all previous choices and\n  interactions.\n</p>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\n\n<p>\n  The judge is <i>adversarial</i>. This means, among other things, that the judge can change the\n  initial value or rotation values as long as it is consistent with all interactions. The initial\n  value is guaranteed to never be <code>00000000</code>.\n</p>\n</p>\n\n\n<h3>Testing Tool</h3>\n<p>\n  You can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use our <a href=\"https://storage.googleapis.com/coding-competitions.appspot.com/interactive_runner.py\">interactive runner</a>\n  for that. For more information, read the instructions in comments in that\n  file, and also check out the\n  <a href=\"/codejam/faq#interactive-problems\" target=\"_blank\">Interactive Problems section</a>\n  of the FAQ.\n</p><p>\n  Instructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it is <b>NOT</b>\n  the real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check the\n  <a href=\"/codejam/faq#coding\" target=\"_blank\">Coding section</a>\n  of the FAQ to make sure that you are using the same compiler as us.\n</p><p>\n<a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1YQedagGJy1VBftmKIrZv_mP1h390vG4wefta0tP6htyhbE3VG7knROGOhDoZb1v6CUtSxaLM8-8pAe3GRMPLz/local_testing_tool.py3?dl=1\" download=\"testing_tool.py\">Download testing tool</a>\n</p>\n\n\n  <div class=\"sample-interaction-wrapper\">\n    <div class=\"sample-interaction-header\">\n      <div class=\"sample-interaction-header-text\">Sample Interaction</div>\n    </div>\n    <div class=\"sample-interaction-content\">\n      <div class=\"sample-interaction-judge-solution-labels\">\n        <div class=\"sample-interaction-judge-label\">Judge</div>\n        <div class=\"sample-interaction-solution-label\">Solution</div>\n      </div>\n      \n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Number of cases<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 1. Record starts at the hidden value <code>10000000</code>.<br>\n</div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">00110011\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Judge picks $$$r = 5$$$ and rotates your given value to get <code>10011001</code> then does <code>10011001</code> XOR <code>10000000</code> obtaining <code>00011001</code>, which is the new value of the record.<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\"><code>00011001</code> has $$$3$$$ ones.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">00011001\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Judge picks $$$r = 0$$$ which leaves your input unrotated. Since it coincides with the current value of the record, this results in the record being <code>00000000</code>.<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">0\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge informs you that there are no ones in the record, so this case is complete.<br>\n</div>\n\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":25},{"type":1,"type__str":"VISIBLE","value":15}],"title":"ASeDatAb","trial_input_type":2,"trial_input_type__str":"JUDGE_CODE"},{"analysis":"<h3>Test Set 1</h3>\n<p>\nFor the first test set, we could try a brute force solution for this problem. Given a remaining deque of\npancakes $$$\\mathbf{D}$$$, we could choose to serve the next customer from either the front or back of the deque.\nMeanwhile, we could update the maximum deliciousness of the pancakes served\nevery time we decided to serve a pancake out. We could use a recursive brute force method to simulate the process.\n</p>\n<p>\nGiven that every time we have two choices for serving the pancake (either the first or the last one)\n, the overall time complexity of the approach will be $$$O(2^\\mathbf{N})$$$, which is sufficient to solve\nthe first test set.\n</p>\n<p>\nNotice that the brute force method can be improved by using\nmemoization to record the current optimal solution for a partial deque. There are $$$\\binom{\\mathbf{N}}{2} + \\mathbf{N} = \\frac{\\mathbf{N}\\cdot(\\mathbf{N} + 1)}{2}$$$\npartial deques in total to take into consideration. Therefore, this will reduce the time complexity down to $$$O(\\mathbf{N}^2)$$$.\n</p>\n\n<h3>Test Set 2</h3>\n<p>\nThe same approach cannot be applied to the second test set, since it will result in a time limit exceed.\nTherefore we need a more clever way other than trying to serve the pancakes brute-force. We could quickly\nmake an observation that, if the deliciousness of the pancakes we could serve at some point are\n$$$\\mathbf{D}_\\text{left}$$$ and $$$\\mathbf{D}_\\text{right}$$$, it will always be better to serve the one with less deliciousness.\nTo prove this, we could do a quick analysis. For simplicity, let us assume that $$$\\mathbf{D}_\\text{left} \\le \\mathbf{D}_\\text{right}$$$\n, and denote $$$\\mathbf{D}_\\text{max}$$$ as the greatest deliciousness of the pancakes served out so far.\nIf $$$\\mathbf{D}_\\text{left} \\lt \\mathbf{D}_\\text{max}$$$, this means that the pancake will be served out free no matter when\nwe serve it, so we could easily serve it out now and will not affect our final answer. Otherwise,\nsince $$$\\mathbf{D}_\\text{left} \\le \\mathbf{D}_\\text{right}$$$ it will always be better to serve $$$\\mathbf{D}_\\text{left}$$$ first, or\nelse $$$\\mathbf{D}_\\text{max}$$$ will be updated to at least $$$\\mathbf{D}_\\text{right}$$$. In that case $$$\\mathbf{D}_\\text{left}$$$\nwill be served out free. Therefore we could summarize into a criteria for serving pancakes: serve out\n$$$\\min(\\mathbf{D}_\\text{left}, \\mathbf{D}_\\text{right})$$$, and update $$$\\mathbf{D}_\\text{max}$$$ if needed.\nFor each customer, this criteria takes $$$O(1)$$$ time to perform, therefore the total time complexity\nof this approach is $$$O(\\mathbf{N})$$$.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U07GgE8yAxY7MmAIvVy7aIGs7ZRbt6xY1McJgt5G47aOyhWpRi43l5vF-TOz8SFUKkIFBPWeNRO/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000acd59d","statement":"<h3>Problem</h3>\n<p>\nPancakes are normally served in stacks, but the Infinite House of Pancakes embraces change!\nThe restaurant's new advertising hook is to serve the pancakes from a deque, or double-ended queue.\n</p><p>\nYou are a server at the restaurant, and your job is to serve every pancake in the deque. Customers\nwill arrive one at a time, and each one gets a single pancake. You must serve each customer either\nthe leftmost or rightmost pancake in the deque; the choice is yours. When a pancake is served, it\ndisappears from the deque, exposing the pancake that was next to it. Or, once there is only one\npancake left, your only choice is to serve that one, and then your job is complete!\n</p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0eKpONaYLjoXCVvwAWc6VGBUKvYS132jFvllEnNt2c_81ga_CKNraJpFjwExju6T-I1hqr9c1xcYPCK-o6HSo/pancake_deque.png\" style=\"max-height:12rem;\" alt=\"Illustration of Sample #2.\"/></p>\n<p>\nEach pancake has a deliciousness level. Because customers do not get to choose which pancakes they\nget, each customer only has to pay for their pancake if it is at least as delicious as <i>each</i> of\nthe pancakes that <i>all</i> of the previous customers got. (The first customer always pays for\ntheir pancake, since in that case there are no previous customers.)\n</p><p>\nHow many customers will pay for their pancake, if you serve the pancakes in an order that maximizes\nthat number?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case is described with two lines.\nThe first line of a test case contains a single integer $$$\\mathbf{N}$$$, the number of pancakes\nin the pancake deque. The second line of a test case contains\n$$$\\mathbf{N}$$$ integers $$$\\mathbf{D_1}, \\mathbf{D_2}, \\dots, \\mathbf{D_N}$$$, where $$$\\mathbf{D_i}$$$ is the deliciousness level\nof the $$$i$$$-th pancake from the left in the deque.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the number of\ncustomers who pay for their pancakes, if you serve the pancakes in an order that maximizes that\nnumber.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{D_i} \\le 10^6$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N} \\le 20$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 3 (Hidden Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2p_GsVxfKfBd7_V8Zv1Qn7D2WwzVV0gjbPmkGpSisvrOoj2FWTMSkgbxazhePGwW3mJXoA4PZCeMlGs6hTOWhQBXeCVapxfg6wBQL2/pancake_deque_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n2\n1 5\n4\n1 4 2 3\n5\n10 10 10 10 10\n4\n7 1 3 1000000\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U08cVH4L4gijI-YEveWYWFJMiPc04B9Q3-1fCmFy6omISn9aERgMe2AYse9Jp8_kyEUW30vmcSaum4QuvyY8iUEU0KkTD8jHwAvNdCHgQ/pancake_deque_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 3\nCase #3: 5\nCase #4: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, there are two possible orders in which you can serve the pancakes. If you serve\n  the pancake with deliciousness level $$$5$$$ first, only that one is paid for. If you serve\n  the pancake with deliciousness level $$$1$$$ first, both are paid for.\n</p><p>\n  Sample Case #2 is the image shown in the problem statement. The following are the possible orders\n  (by deliciousness level) in which the pancakes can be served. The underlined pancakes are the ones that customers pay for.\n<ul>\n<li>$$$\\underline{1}, \\underline{4}, 2, 3$$$</li>\n<li>$$$\\underline{1}, \\underline{4}, 3, 2$$$</li>\n<li>$$$\\underline{1}, \\underline{3}, \\underline{4}, 2$$$</li>\n<li>$$$\\underline{1}, \\underline{3}, 2, \\underline{4}$$$</li>\n<li>$$$\\underline{3}, 1, \\underline{4}, 2$$$</li>\n<li>$$$\\underline{3}, 1, 2, \\underline{4}$$$</li>\n<li>$$$\\underline{3}, 2, 1, \\underline{4}$$$</li>\n<li>$$$\\underline{3}, 2, \\underline{4}, 1$$$</li>\n</ul><p>\n  As you can see, there are some orders in which $$$3$$$ pancakes are paid for, and none in which\n  all $$$4$$$ are.\n</p><p>\n  In Sample Case #3, all pancakes are paid for regardless of the serving order.\n</p><p>\n  In Sample Case #4, regardless of which pancake you serve first, the two in the middle will\n  never be paid for. The best you can do is serve the pancake with deliciousness 7 before the\n  pancake with deliciousness 1000000.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":1,"type__str":"VISIBLE","value":8},{"type":2,"type__str":"HIDDEN","value":10}],"title":"Pancake Deque","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"000000000087711b","type":1,"type__str":"SPECTATOR"},"title":"Round 1B 2022","ui_appearance":0,"ui_appearance__str":"APPEARANCE_TYPE_DEFAULT"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
