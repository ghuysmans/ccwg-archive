{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1598164200000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"000000000019ff47","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"Thank you for participating in Kick Start 2020 Round E.\n</p>\n<p>\n</p>\n<hr>\n<p>\n<b>Cast</b>\n</p><p>\n  Longest Arithmetic: Written by Jonathan Irvin Gunawan and prepared by Jonathan Irvin Gunawan.\n</p><p>\n  High Buildings: Written by Jonathan Irvin Gunawan and prepared by Jonathan Irvin Gunawan.\n</p><p>\n  Toys: Written by Artem Iglikov and prepared by Anson Ho.\n</p><p>\n  Golden Stone: Written by Krists Boitmanis and prepared by Frederick Chyan.\n</p><p>\n  Solutions, other problem preparation, reviews and contest monitoring by\n  Anushi Maheshwari,\n  Artem Iglikov,\n  Bohdan Pryshchenko,\n  Changyu Zhu,\n  Devanshu Agarwal,\n  Diksha Saxena,\n  Frederick Chyan,\n  Gregory Yap,\n  Jared Gillespie,\n  Jonathan Irvin Gunawan,\n  Kashish Bansal,\n  Kevin Tran,\n  Lalit Kundu,\n  Lizzie Sapiro,\n  Mengru Huang,\n  Nikhil Hassija,\n  Preet Shah,\n  Sanyam Garg,\n  Sergio Vieri,\n  Swapnil Gupta,\n  Ruoyu Zhang, and\n  Vipin Singh\n</p>\n<p>\nAnalysis authors:\n</p>\n<ul>\n  <li>Longest Arithmetic: Swapnil Gupta</li>\n  <li>High Buildings: Swapnil Gupta</li>\n  <li>Toys: Vikash Dubey</li>\n  <li>Golden Stone: Sadia Atique</li>\n</ul>\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1598153400000,"tasks":[{"analysis":"<p>\n  Let us say Axel can play with the toys in multiple rounds (starting from 1), where each round starts\n  with the toy that has the smallest number and finishes with the toy that has the largest number.\n  There are a few observations:\n</p>\n<ol>\n  <li>Axel can play with each toy at least once, in round 1.</li>\n  <li>If Axel cannot play indefinitely, in round 2 he will get stuck at some toy and start crying.</li>\n  <li>If Axel can play with a toy more than twice (i.e. reaches round 3), he can keep playing indefinitely.</li>\n</ol>\n\n<h3>Test Set 1</h3>\n<p>\n  For this test set, we can generate all subsets of the toys in order. For each subset, we can loop\n  over the toys in the subset and calculate the maximum time Axel can play. This maximum time will\n  be either INDEFINITELY (if Axel can play more than twice as in Observation 3), or sum of the\n  enjoyments of the toys played until Axel gets stuck as in Observation 2. We can keep track of the\n  maximum time for each subset and if two subsets have the same maximum time, we will consider the one\n  with minimum toys removed (maximum subset size). As number of subsets will be 2<sup><b>N</b></sup> and for\n  each subset, time spent by Axel is calculated in linear time, total complexity of the solution will be\n  O(<b>N</b> &times; 2<sup><b>N</b></sup>).\n</p>\n\n<h3>Test Set 2</h3>\n<p>\n  Let us say we have <i>K</i> toys. If Axel can play indefinitely with these toys, for each toy, its\n  remembrance should be less than or equal to the sum of enjoyment of all other toys except this\n  one. If <i>SUM</i> is total sum of enjoyments of all the toys that Axel can play with, we can say, for each <i>i</i> = 1 to <i>K</i>,\n  <b>R<sub>i</sub></b> &le; <i>SUM</i> - <b>E<sub>i</sub></b> Or <b>R<sub>i</sub></b> + <b>E<sub>i</sub></b> &le; <i>SUM</i>.\n</p>\n<p>\n  If Axel cannot play with these <i>K</i> toys indefinitely, we can try removing all the toys violating the\n  condition <b>R<sub>i</sub></b> + <b>E<sub>i</sub></b> &le; <i>SUM</i>, so that we can get\n  a list of toys with no violation and Axel can play indefinitely. Here, we can remove the toys\n  violating the condition in any order. But for simplicity, we will first remove a toy\n  for which <b>R<sub>i</sub></b> + <b>E<sub>i</sub></b> is the largest. The reason being, if we remove some other\n  toy, it will only decrease the <i>SUM</i> by enjoyment of the other toy and this toy would still be violating\n  the condition <b>R<sub>i</sub></b> + <b>E<sub>i</sub></b> &le; <i>SUM</i>.\n</p>\n<p>\n  In this test set, we can keep a list of the toys such that Axel can play with them indefinitely.\n  Also, we will have a track of total time played till now (let us say <i>cur_time</i>), maximum\n  possible time that Axel can spend playing (let us say <i>max_time</i>) and count of toys\n  removed. Initially, <i>cur_time</i> will be total time taken in round 1 i.e. <i>SUM</i> as per Observation 1.\n  Now, we will simulate the round 2 and have an empty list initially. We will keep adding toys 1 to\n  <b>N</b> one by one to this list.\n  After adding a toy to the list, we will check if we have some toy in the list violating the condition\n  <b>R<sub>i</sub></b> + <b>E<sub>i</sub></b> &le; <i>SUM</i>. If so, we will remove the toy violating\n  the condition that has the largest <b>R<sub>i</sub></b> + <b>E<sub>i</sub></b>.\n  Once we add a toy to the list, we will add its enjoyment to <i>cur_time</i> and while removing a toy from the list,\n  we will remove its corresponding time (i.e. twice the enjoyment time for this toy) from <i>cur_time</i>,\n  and remove it's enjoyment time from the <i>SUM</i>. After each\n  toy is added and toys violating the condition are removed, we will update <i>max_time</i> if <i>cur_time</i> is optimal. Also,\n  we will keep track of total toys removed from the list and update that as well while updating <i>max_time</i>.\n  Finally, when all the toys have been added to the list and processed, if the list is not empty, Axel\n  can play with the toys indefinitely. Else, we have <i>max_time</i> and corresponding toys removed as our\n  answer.\n</p>\n<p>\n  To maintain the list of toys and remove a toy with the largest <b>R<sub>i</sub></b> + <b>E<sub>i</sub></b> efficiently,\n  we can use <a href=\"https://en.wikipedia.org/wiki/Priority_queue\">Priority Queue</a> to store toys in decreasing order of their <b>R<sub>i</sub></b> + <b>E<sub>i</sub></b>.\n  As we are processing each toy twice, once for calculating initial <i>SUM</i>, and other for processing second\n  round where in priority queue each toy can be added/removed maximum one time, total complexity of\n  solution will be O(<b>N</b> log <b>N</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1BBiueZHQKiu7-X2k5JiI7Gf3-dSc498jqZ_UYk86h_eiNUuemw5V2GZX1k7Ly3Qq5E-xK80M/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000003bede9","statement":"<h3>Problem</h3>\n<p>\n  Little Axel has <b>N</b> toys numbered from 1 to <b>N</b>. Each toy has two properties:\n</p>\n<ul>\n  <li>\n    <b>E<sub>i</sub></b>&mdash;<i>enjoyment</i>, which is the number of minutes Axel can play with\n    toy number i without getting bored with it;\n  </li>\n  <li>\n    <b>R<sub>i</sub></b>&mdash;<i>remembrance</i>, which is the number of minutes it takes Axel to\n    forget toy number i after having played with it.\n  </li>\n</ul>\n<p>\n  The toys are arranged in a circle, from 1 to <b>N</b> clockwise. Axel plays with them one by one.\n</p>\n<p>\n  When Axel reaches toy i which he has not played with yet, or which he has already forgotten\n  about, he plays with it for <b>E<sub>i</sub></b> minutes and then immediately moves to the next\n  one (clockwise).\n</p>\n<p>\n  If he reaches a toy that he has not forgotten yet (if less than <b>R<sub>i</sub></b>\n  minutes have passed since the last time he finished playing with it), he will stop and cry.\n</p>\n<p>\n  We can define the time Axel spent playing as the sum of <b>E<sub>i</sub></b> of every toy Axel\n  played with before stopping. If Axel played with a toy several times, it should be counted that\n  many times.\n</p>\n<p>\n  Given the description of the toys, remove the smallest possible number of them in order to make\n  Axel play either an indefinitely long time, or (if that is not possible) as long as possible\n  before he stops.\n</p>\n<p>\n  Note:\n</p>\n<ul>\n  <li>\n    Axel has never played with these toys before;\n  </li>\n  <li>\n    he cannot be left without toys;\n  </li>\n  <li>\n    he always starts with the toy that has the smallest number;\n  </li>\n  <li>\n    after finishing playing with the toy that has the largest number, he will move to the toy that\n    has the smallest number.\n  </li>\n</ul>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the integer <b>N</b>. Next <b>N</b> lines contain\n  2 integers each: <b>E<sub>i</sub></b> and <b>R<sub>i</sub></b>. The i-th line is describing the\n  toy number i.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y z</code>, where:\n</p>\n<ul>\n  <li>\n    <code>x</code> is the test case number (starting from 1);\n  </li>\n  <li>\n    <code>y</code> is the longest time Axel will play in minutes or \"INDEFINITELY\" (without quotes)\n    if he will play indefinitely long time.\n  </li>\n  <li>\n    <code>z</code> is the minimal number of toys to remove so that Axel could play with the rest of\n    them either indefinitely or as long as possible;\n  </li>\n</ul>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>E<sub>i</sub></b> &le; 10<sup>9</sup>.<br/>\n  1 &le; <b>R<sub>i</sub></b> &le; 10<sup>9</sup>.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n1 &le; <b>N</b> &le; 12.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n1 &le; <b>N</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2pTITtti12sr5yvPtCUiOx1Sur-mzO1Dz5jlZRSpZK_FmAQiYwIsQSK82S882Dl_LrhxH1-zyU44nilmOpqedTAxw/toys_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n1\n5 1\n2\n5 10\n10 3\n3\n30 17\n5 10\n10 3\n3\n5 10\n5 10\n5 11\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U25ZBmceQf4kPn8mvjCGYINIPhtf1f2zKbpgQJXuUMPqB7xmK6Wne4wtb_rjc55qpTm7cMpeFdq7OhUP4e7oOxk7FTQ/toys_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 5 0\nCase #2: INDEFINITELY 0\nCase #3: INDEFINITELY 1\nCase #4: 25 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1 there is only one toy, so Axel will play with it and will get bored in 5\n  minutes.\n</p><p>\n  In Sample Case #2, after playing with the toy number 1 for 5 minutes, he will need to not play\n  with it for 10 minutes, which he will spend playing with the toy number 2. After that he will\n  return to the toy number 1 and play with it for 5 minutes, during which he will forget the toy\n  number 2, and so on. Thus he will play for an indefinitely long time.\n</p><p>\n  In Sample Case #3, although Axel can play with the toy number 1 for 30 minutes, if we remove it he\n  will be able to play with the others indefinitely. So we remove it, and keep the other two.\n</p><p>\n  In Sample Case #4, Axel will play with the toys in the following order: 1, 2, 3, 1, 2, and then\n  he will stop and cry as he still remembers the toy number 3. So, in total he will play for 25\n  minutes.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":13},{"type":1,"type__str":"VISIBLE","value":20}],"title":"Toys","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  The given set of junctions and streets can be considered as an undirected graph.\n  The problem statement guarantees that the graph is connected.\n</p>\n<p>\n  We can consider all possible combinations of junctions and stones, and try to figure out the optimal cost\n  of making that stone at that junction. Let's define the cost of gathering stone <i>c</i> at junction\n  <i>j</i> as Cost<sub>j,</sub> <sub>c</sub>.\n  Then the solution would be the minimum of Cost<sub>junction,</sub> <sub>golden</sub>\n  over all the junctions.\n</p>\n<h3>Test set 1</h3>\n<p>\n  We can consider a new graph, where each {junction, stone type} combination is a vertex,\n  and for each street {u,v} in the given input, there will be <b>S</b> new edges {(u,c), (v,c)},\n  one for each stone type c.\n  Then we can run a variation of <a href=\"https://en.wikipedia.org/wiki/Bellman%E2%80%93Ford_algorithm\">Bellman-Ford algorithm</a>\n  on this graph to fill the two dimensional cost table as mentioned above.\n</p>\n<p>\n  Firstly, for all the stone\n  types that are directly available at some junctions (as given in the input), the\n  Cost<sub>junction,</sub> <sub>stone_type</sub> would be 0. All other combinations of junction and stone type\n  will have initial cost set to infinity.\n</p>\n<p>\n  Then we can try to relax the cost as in the classic Bellman-Ford algorithm, with some modification, that, in addition\n  to relaxing edges, we also try to reduce cost by applying recipes on the stones that are available\n  at the same junction at some point.\n</p>\n<p>\n  For each junction <i>u</i>, we can relax the cost table as follows:\n</p>\n<ul>\n  <li>For each edge <i>{v, u}</i> in the input graph, and stone type <i>c</i>,\n    try to reduce the Cost<sub>u,</sub><sub>c</sub> by carrying one\n    type <i>c</i> stone from <i>v</i> to <i>u</i>. </li>\n  <li>Try to apply each recipe at the junction <i>u</i> to see if we can improve the\n    Cost<sub>u</sub>, <sub>c</sub> where <i>c</i> is the stone produced by the recipe.</li>\n</ul>\n<p>\n  We must repeat the relaxation steps mentioned above for each junction\n  as long as there are any improvements made to the cost values. It can be proved that no more than\n  <b>N</b> &times; <b>S</b> iterations are required.\n</p>\n<p>\n  For the first type of relaxation,\n  each {edge, stone type} combination is considered only once, and then the whole process is repeated\n  O(<b>N</b> &times; <b>S</b>). So, ther overall complexity is O(<b>N</b> &times; <b>M</b> &times; <b>S</b><sup>2</sup>).\n</p>\n<p>\n  For the second type of relaxation, the process takes O(<b>R</b>) time per junction, and the\n  whole relaxation process will repeat O(<b>N</b> &times; <b>S</b>) times per junction.\n  So the complexity is O(<b>N</b><sup>2</sup> &times; <b>S</b> &times; <b>R</b>).\n</p>\n<p>\n  So, the total complexity of this approach is\n  O(<b>N</b> &times; <b>S</b> &times; ((<b>M</b> &times; <b>S</b>) + (<b>N</b> &times; <b>R</b>))).\n</p>\n\n<h3>Test set 2</h3>\n<p>\n  Filling up the cost table can also be achieved with\n  <a href=\"https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm\">Dijkstra's algorithm</a>.\n  The cost table can be initialized in the same approach used in test set 1. Then\n  the vertices with cost 0 are put into a minimum priority queue with the calculated cost as the key.\n</p>\n<p>\n  At each step of trying to\n  reduce cost for a vertex {<i>u</i>, <i>c</i>} from the queue, we can do the following:\n</p>\n<ul>\n  <li>For each edge {<i>u</i>, <i>v</i>}, try to reduce the Cost<sub>v,</sub> <sub>c</sub> by carrying\n    one type <i>c</i> stone from <i>u</i> to <i>v</i>. </li>\n  <li>Try to reduce the Cost<sub>u,</sub> <sub>stone_type</sub> by applying recipes where <i>c</i>\n    is an ingredient. </li>\n</ul>\n<p>\n  In this approach, there are <b>N</b> &times; <b>S</b> vertices.\n  For each edge in the\n  input graph there will be corresponding <b>S</b> edges, so in total <b>M</b> &times; <b>S</b>\n  edges.\n</p>\n<p>\n  The relaxation of the first type follows classic Dijkstra's algorithm's style, so the complexity is\n  O((<b>N</b> &times; <b>S</b> + <b>M</b> &times; <b>S</b>) &times; log(<b>N</b> &times; <b>S</b>)).\n</p>\n<p>\n  For the relaxation of the second type for each vertex {<i>u</i>, <i>c</i>},\n  we need to try only the recipes where <i>c</i> is an ingredient.\n  So in total, for each junction, a recipe will be applied once for each of its ingredients.\n  Each recipe has at most 3 ingredients. Which gives us additional\n  O(<b>R</b> &times; <b>N</b> &times; log(<b>N</b> &times; <b>S</b>)) complexity. So the total time\n  complexity of this approach is\n  O((<b>N</b> &times; <b>S</b> + <b>M</b> &times; <b>S</b> + <b>R</b> &times; <b>N</b>) &times; log(<b>N</b> &times; <b>S</b>))\n  which is sufficient for test set 2.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2C8dRoXB2bb4ABja5GNx_IV28aIlV2-HSlwXqNQIGjfZKQ3Vlt3QqwWBff8SnYfm_dDag-jJ4/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000003bef29","statement":"<h3>Problem</h3>\n<p>\n  Leopold's friend Kate likes stones, so he decided to give her a golden stone as a gift. There are\n  <b>S</b> types of stones numbered from 1 to <b>S</b>, 1 being the golden stone. Some types of\n  stones are available free of charge in various parts of the city. The city consists of <b>N</b>\n  junctions numbered from 1 to <b>N</b> and <b>M</b> two-way streets between pairs of distinct\n  junctions. At each junction, zero or more types of stones are available in unlimited supply.\n</p>\n<p>\n  Unfortunately, the golden stone is not available anywhere. Luckily, Leopold is a bit of a magician\n  and knows how to combine a group of stones and turn them into another stone. For example, one of\n  his recipes could produce a golden stone out of one silver stone and two marble stones. He could\n  collect those stones in some of the junctions if they are available, or he could use some of\n  his many other recipes to produce any of those stones. Formally, Leopold has <b>R</b> recipes,\n  where a recipe is in the form (<i>a</i><sub>1</sub>, <i>a</i><sub>2</sub>, ...,\n  <i>a<sub>k</sub></i>) -> <i>b</i> for some <i>k</i> &ge; 1. If Leopold has gathered <i>k</i>\n  stones of types <i>a</i><sub>1</sub>, <i>a</i><sub>2</sub>, ..., and\n  <i>a<sub>k</sub></i> at a certain junction, he can choose to apply the recipe and turn these\n  stones into one stone of type <i>b</i>.\n</p>\n\n<p>\n  Leopold likes puzzles much more than physical activity, therefore, he does not want to carry\n  stones around the city unnecessarily. Carrying a stone along a street costs him one unit of\n  energy. Leopold can carry no more than one stone at a time, however, he can drop off a stone at\n  any junction and pick it up later at any time.\n</p>\n\n<p>\n  What is the minimum amount of energy Leopold must spend to produce one golden stone?\n  Leopold is very scared of large numbers. If the answer is greater than or equal to\n  10<sup>12</sup>, print <code>-1</code> instead.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases <b>T</b>. <b>T</b> test cases follow.\n  The first line of each test case consists of four integers <b>N</b>, <b>M</b>, <b>S</b>, and\n  <b>R</b> giving the number of junctions, streets, stone types, and recipes, respectively.\n  The following <b>M</b> lines describe the map of the city. The i-th of these lines contains two\n  distinct integers <b>U<sub>i</sub></b> and <b>V<sub>i</sub></b> denoting the pair of junctions\n  connected by the i-th street.\n</p>\n<p>\n  The subsequent <b>N</b> lines describe the types of stones available in each junction.\n  The i-th of these lines starts with the number of stone types <b>C<sub>i</sub></b> available in\n  i-th junction followed by <b>C<sub>i</sub></b> distinct integers in the range [2, <b>S</b>]\n  enumerating the stone types. The golden stone is always numbered 1 and is not available.\n</p>\n<p>\n  The last <b>R</b> lines of each test case describe Leopold's magic recipes. The i-th of these\n  lines starts with the number of ingredient stones <b>K<sub>i</sub></b> required for the i-th\n  recipe followed by <b>K<sub>i</sub></b> not necessarily distinct integers in the range\n  [2, <b>S</b>] enumerating the types of necessary ingredients. The i-th line ends with an integer\n  in the range [1, <b>S</b>], which is the type of the resulting stone after applying the i-th\n  recipe. For example <code>3 6 5 6 3</code> denotes a recipe that requires two stones of type 6,\n  one stone of type 5, and produces a stone of type 3.\n</p>\n<p>\n  It is guaranteed that it is possible to produce a golden stone in each of the test cases.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is the answer for the test case\n  <code>x</code>, namely, the minimum amount of energy Leopold must spend to produce one golden\n  stone.\n  If the answer is greater than or equal to 10<sup>12</sup>, print <code>-1</code> instead.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n1 &le; <b>T</b> &le; 100.<br/>\n1 &le; <b>U<sub>i</sub></b>, <b>V<sub>i</sub></b> &le; <b>N</b>, <b>U<sub>i</sub></b> &ne;\n  <b>V<sub>i</sub></b><br/>\n0 &le; <b>C<sub>i</sub></b> &lt; <b>S</b>.<br/>\n1 &le; <b>K<sub>i</sub></b> &le; 3.<br/>\nEach pair of junctions is connected by at most one street.<br/>\nIt is possible to get from any junction to any other junction by following a sequence of streets.\n<br/>\nIt is possible to create a golden stone.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n2 &le; <b>N</b> &le; 50.<br/>\n1 &le; <b>M</b> &le; 80.<br/>\n2 &le; <b>S</b> &le; 50.<br/>\n1 &le; <b>R</b> &le; 50.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n2 &le; <b>N</b> &le; 300.<br/>\n1 &le; <b>M</b> &le; 500.<br/>\n2 &le; <b>S</b> &le; 300.<br/>\n1 &le; <b>R</b> &le; 300.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1DdcK-zJUkDgExRn9VwLYKnln7ziGHWZIFL5r8MCOZOwJkQH3NpLyyzcASHEONWU-2but4z5lA1Zjf54YfglTYLt8QAevP81O7ow/golden_stone_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n4 3 4 1\n1 2\n1 3\n1 4\n0\n1 2\n1 3\n1 4\n3 2 3 4 1\n4 3 4 1\n1 2\n1 3\n1 4\n0\n2 2 3\n1 3\n1 4\n3 2 3 4 1\n2 1 4 2\n1 2\n2 2 3\n1 4\n3 2 3 4 1\n2 2 3 4\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U30EGnENPsxh4BK2R-myrJZDkg4Gl_iU9rJtETN8Ad8YhiMOAyCsy0OUGNHJAtO5aZ5zvV6VgStDTzBa_pLHKLJHXWC2w1ZmbGwMlc/golden_stone_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 2\nCase #3: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In the first test case, the minimum amount of energy is achieved if Leopold collects the stones 2,\n  3, and 4 at the junctions 2, 3, and 4, respectively, carries the stones to the junction 1,\n  and uses his only recipe to transform the three stones into a golden stone. This way, three stones\n  are carried along one street each, therefore, the total amount of energy spent is 3.\n</p>\n\n<p>\n  The only difference between the first two test cases is that the stone 3 is now available at the\n  junction 2 as well. This time it is optimal to carry one stone of type 4 from junction 4 to\n  junction 2 spending 2 units of energy, and then collect the missing stones of types 2 and 3 there\n  to produce a golden stone using the only recipe.\n</p>\n\n<p>\n  In the third test case, Leopold can produce a golden stone without ever leaving junction 1. First,\n  he should collect stones of types 2 and 3 to produce a stone of type 4 using the second recipe. In\n  a second step, he should collect the stones 2 and 3 again and combine them with the stone 4 to\n  produce a golden stone using the first recipe.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":16},{"type":1,"type__str":"VISIBLE","value":25}],"title":"Golden Stone","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Let the heights of buildings be H<sub>1</sub>, H<sub>2</sub>, H<sub>3</sub>, ... ,H<sub><b>N</b></sub>.\n  If we look from the left side, it is possible to view a building i, iff H<sub>i</sub> &ge; H<sub>j</sub> for all 1 &le; j &le; i.\n  Similarly, if we look from the right side, it is possible to view a building i, iff H<sub>i</sub> &ge; H<sub>j</sub> for all i &le; j &le; <b>N</b>.\n  It is possible to view a building i from both the sides if H<sub>i</sub> &ge; H<sub>j</sub> for all i &le; j &le; <b>N</b> and\n  H<sub>i</sub> &ge; H<sub>k</sub> for all 1 &le; k &le; i. This means that H<sub>i</sub> &ge; H<sub>j</sub> for all 1 &le; j &le; <b>N</b>.\n  Hence, only the buildings which have the maximum height would be visible from both sides.\n</p>\n\n<p>\n  The answer for <b>N</b> = 1 case is trivial. Consider the case where <b>A</b> + <b>B</b> - <b>C</b> &gt; <b>N</b>. <b>A</b> buildings are seen from the left side, <b>B</b> buildings\n  are visible from the right side and <b>C</b> buildings are visible from both sides. This means that <b>A</b> + <b>B</b> - <b>C</b> buildings will be\n  visible from at least one of the sides. Hence, there are more than <b>N</b> buildings which are visible from at least one side, which is not\n  possible. Thus, answer is <code>IMPOSSIBLE</code> in case <b>A</b> + <b>B</b> - <b>C</b> &gt; <b>N</b>. The rest of the analysis assumes <b>N</b> &gt; 1 and\n  <b>A</b> + <b>B</b> - <b>C</b> &le; <b>N</b>.\n</p>\n\n<h3>Test Set 1</h3>\n<p>\n  The height of each building is an integer between 1 to <b>N</b>, inclusive. Thus, each building can have\n  at most <b>N</b> distinct values. So, if we consider all possible heights of the given buildings,\n  we get <b>N</b><sup><b>N</b></sup> different combinations. Now, we need to check if a possible set of heights satisfy the given condition of <b>A</b>,\n  <b>B</b> and <b>C</b>.\n</p>\n\n<p>\n  To check how many buildings are visible from the left side, we start iterating from the left, and maintain a prefix_max variable that indicates what\n  is the maximum height of a building which are on the left side of the current building. Formally, for building i, prefix_max would indicate\n  maximum(H<sub>j</sub>) for 1 &le; j &lt; i. And then we update the prefix_max variable when we move onto the next index. This can be done in O(<b>N</b>).\n  Similarly, we can find how many buildings are visible from the right side by iterating from the right side, and maintaining a suffix maximum variable.\n  This can be done in O(<b>N</b>). To count the number of buildings, which are visible from both sides, we need to find the maximum height and\n  count the number of buildings with such maximum height. This can be done in O(<b>N</b>) too.\n  If for a given set of heights, we get buildings visible from left side equal to <b>A</b>, buildings visible from right side equal to <b>B</b> and\n  buildings visible from both the sides equal to <b>C</b>, we have found our answer. If there is no such set of heights that satisfy this condition,\n  then we say that it is not possible.\n</p>\n\n<p>\n  A given set of height can be checked in O(<b>N</b>) time. There are <b>N</b><sup><b>N</b></sup> different combinations. Thus the overall complexity\n  of the solution is O(<b>N</b><sup><b>N</b></sup> &times; <b>N</b>), which runs under the time limit for <b>N</b> &le; 5.\n</p>\n\n<h3>Test Set 2</h3>\n<p>\n  In this test set, we cannot generate all possible set of heights as we have <b>N</b> &le; 100. This can be solved by splitting into some cases:\n  <ul>\n    <li>\n      Case 1: Let us first assume that <b>C</b> &gt; 1.</br>\n        Consider any 2 values P and Q such that 1 &le; P &lt; Q &le; <b>N</b>. In this case, we can put <b>A</b> - <b>C</b> buildings with height P\non the left and <b>B</b> - <b>C</b> buildings with height P on the right and <b>C</b> buildings in the middle with height Q. Now, we have satisfied\nthe constraint of <b>A</b>, <b>B</b> and <b>C</b>. We have <b>N</b> - <b>A</b> - <b>B</b> + <b>C</b> buildings remaining which should not be visible from\neither side. This can be done by assigning them height P and hiding them between the buildings with height Q.\n    </li>\n    <li>\n      Case 2: <b>C</b> &equals; 1. In this case, we cannot hide buildings between buildings with the\n      maximum height since there is only one of them. We would have to look for some cases here:</br>\n      <ul>\n         <li>\n           <b>A</b> + <b>B</b> - <b>C</b> &equals; <b>N</b>,</br>\n           In this case, we have no buildings to hide, thus we can assign the buildings similar to Case 1 when <b>C</b> &gt; 1 with heights P and Q.\n        </li>\n         <li>\n          Either <b>A</b> &gt; 1 or <b>B</b> &gt; 1. In this case, <b>A</b> + <b>B</b> - <b>C</b> &lt; <b>N</b>. <b>A</b> + <b>B</b> is at least 3\n           and <b>C</b> &equals; 1. Thus, we can say that <b>N</b> &gt; 2 holds.\n          Consider any 3 values P, Q and R such that 1 &le; P &lt; Q &lt; R &le; <b>N</b>. In this case, we can put <b>A</b> - 1 buildings\n          with height Q on the left, <b>B</b> - 1 buildings with height Q on the right side and a\n          building with height R in the middle. Now, we have satisfied the constraint of <b>A</b>, <b>B</b> and <b>C</b>.\n           We have <b>N</b> - <b>A</b> - <b>B</b> + <b>C</b> buildings remaining which\n           should not be visible from either side. Let the height of remaining buildings be P. We have\n           already placed at least 2 buildings, and all the buildings that we placed so far are\n           higher than the buildings that we want to hide, so we\n           can hide remaining buildings anywhere in between the already placed buildings.\n         </li>\n        <li>\n            <b>A</b> &equals; 1 and <b>B</b> &equals; 1</br>\n            This means that the building with maximum height is both on the leftmost point and rightmost point and it is not possible for\n            <b>N</b> &gt; 1. So, the answer is <code>IMPOSSIBLE</code> in this case.\n         </li>\n      </ul>\n    </li>\n</ul>\n</p>\n\n<p>\n  Checking which case our solution falls under takes constant time. We can then just assign the heights to the buildings in linear time.\n  Hence, the complexity of the solution is O(<b>N</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2p2LiK5ZoqTWCPN8fV5WjDcpNgy1z_nhunVpajXTLLWmfFXRAnmDVPeoaTT1lw_m3Y354PelY/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000003bef73","statement":"<h3>Problem</h3>\n<p>\n  In an unspecified country, Google has an office campus consisting of <b>N</b> office buildings in\n  a line, numbered from 1 to <b>N</b> from left to right. When represented in meters, the height of\n  each building is an integer between 1 to <b>N</b>, inclusive.\n</p><p>\n  Andre and Sule are two Google employees working in this campus. On their lunch break, they wanted\n  to see the skyline of the campus they are working in. Therefore, Andre went to the leftmost point\n  of the campus (to the left of building 1), looking towards the rightmost point of the campus (to\n  the right of building <b>N</b>). Similarly, Sule went to the rightmost point of the campus,\n  looking towards the leftmost point of the campus.\n</p><p>\n  To Andre, a building x is visible if and only if there is no building to the left of building x\n  that is strictly higher than building x. Similarly, to Sule, a building x is visible if and only\n  if there is no building to the right of building x that is strictly higher than building x.\n</p><p>\n  Andre learned that there are <b>A</b> buildings that are visible to him, while Sule learned that\n  there are <b>B</b> buildings that are visible to him. After they regrouped and exchanged\n  information, they also learned that there are <b>C</b> buildings that are visible to both of them.\n</p><p>\n  They are wondering about the height of each building. They are giving you the value of <b>N</b>,\n  <b>A</b>, <b>B</b>, and <b>C</b> for your information. As their friend, you would like to\n  construct a possible height for each building such that the information learned on the previous\n  paragraph is correct, or indicate that there is no possible height construction that matches the\n  information learned (thus at least one of them must have been mistaken).\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each consists of a single line with four integers <b>N</b>, <b>A</b>, <b>B</b>, and <b>C</b>: the\n  information given by Andre and Sule.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is <code>IMPOSSIBLE</code> if there is\n  no possible height for each building according to the above information, or <b>N</b>\n  space-separated integers otherwise. The i-th integer in <code>y</code> must be the height of the\n  i-th building (in meters) between 1 to <b>N</b>.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>C</b> &le; <b>N</b>.<br/>\n  <b>C</b> &le; <b>A</b> &le; <b>N</b>.<br/>\n  <b>C</b> &le; <b>B</b> &le; <b>N</b>.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  1 &le; <b>N</b> &le; 5.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  1 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U25q6Fd-m4GF1yd6bHJ7IKdkY6zEscWuZMgTnqm93CAqJVxwOvZQph-kZ-ytdo6riTUrn2sDx4nKGNSiSODhbRkRWtExDoQ69nFPQVA/high_buildings_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n4 1 3 1\n4 4 4 3\n5 3 3 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1eIOOcoHAOZzyjRqqPyWjjP9ZHpFuyNrs2ev1Uo1GnFinuyLr44p0lQzx-grqjkEb-TOVg-SS29jOp6YrmplWCRB7GhoRtgFBMiY0xOw/high_buildings_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4 1 3 2\nCase #2: IMPOSSIBLE\nCase #3: 2 1 5 5 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the sample output sets the height of each building such that only the first\n  building is visible to Andre, while the first, third, and fourth buildings are visible to Sule.\n  Therefore, only the first building is visible to both Andre and Sule. Note that there exist other\n  correct solutions, such as <code>4 3 1 2</code>.\n</p><p>\n  In Sample Case #2, all <b>N</b> = 4 buildings are visible to Andre and Sule. Therefore, it is\n  impossible to have <b>C</b> &ne; <b>N</b> in this case.\n</p><p>\n  In Sample Case #3, the sample output sets the height of each building such that the first, third,\n  and fourth buildings are visible to Andre, while the third, fourth, and fifth buildings are\n  visible to Sule. Therefore, the third and fourth buildings are visible to both Andre and Sule.\n  Note that there exist other correct solutions.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":6},{"type":1,"type__str":"VISIBLE","value":9}],"title":"High Buildings","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Consider a subarray of length K which is an arithmetic subarray, and let the elements of arithmetic\n  subarray be B<sub>1</sub>, B<sub>2</sub>, B<sub>3</sub>, ....., B<sub>K</sub>. We can say that\n  B<sub>2</sub> - B<sub>1</sub> = B<sub>i+1</sub> - B<sub>i</sub> for 1 &le; i &lt; K, because\n  consecutive elements of arithmetic sequence should have a common difference.\n</p>\n<p>\n  <b>Claim 1:</b> In the given array,\n  consider a subarray starting at index i and ending at index j. Now if this subarray is not arithmetic,\n  there exists some index x such that i &le; x &lt; j and <b>A</b><sub>x+1</sub> -\n  <b>A</b><sub>x</sub> &ne; <b>A</b><sub>i+1</sub>-<b>A</b><sub>i</sub>. All subarrays starting at\n  index i and ending at index y such that x &lt; y &le; <b>N</b>,\n  are not arithmetic because all such subarrays would contain index x such that <b>A</b><sub>x+1</sub> -\n  <b>A</b><sub>x</sub> &ne; <b>A</b><sub>i+1</sub>-<b>A</b><sub>i</sub>.\n\n</p>\n<h3>Test Set 1</h3>\n<p>\n  For each element i such that (1 &le; i &lt; <b>N</b>), we consider each subarray starting at index i.\n  Consider subarray(i,j) and start with j = i.\n  Increment j while subarray(i,j) is an arithmetic subarray. For a fixed index i, we do not need to increment j\n  after we find the first index such that subarray(i,j) is not an arithmetic subarray. None of the subarrays with i as a starting point\n  and ending point after the index j will be arithmetic subarrays according to Claim 1. Let the maximum j for index i such that\n  subarray(i,j) is an arithmetic subarray be max_j.\n  We can conclude our approach as follows. Initialise the answer as 0. For each index i, find max_j. Update the answer if max_j - i + 1 is greater\n  than the answer.\n  For each index i, we would traverse O(<b>N</b>) elements. Hence, the overall complexity of the solution is O(<b>N</b><sup>2</sup>).\n</p>\n\n<h5>Sample Code (C++)</h5>\n<pre><code class=\"language-cpp\">\n<var>int</var> maxArithmeticSubarray(vector<<var>int</var>> array) {\n  <var>int</var> maxLen = 0;\n  for(<var>int</var> i = 0; i < array.size() - 1; i++) {\n     <var>int</var> j = i;\n     <var>int</var> common_difference = array[i+1] - array[i];\n     while(j < array.size() - 1 && (array[j + 1] - array[j] == common_difference))\n          j++;\n     <var>int</var> max_j = j;\n     maxLen = max(maxLen, max_j - i + 1);\n  }\n  return maxLen;\n}\n</code></pre>\n\n<h3>Test Set 2</h3>\n<p>\n   Consider an index i. Now consider all the subarrays (i,j) starting at index i and ending at index j. Start with j = i.\n  Let the maximum index j where the subarray(i,j) is an arithmetic subarray be j = x. Let <b>A</b><sub>i+1</sub> - <b>A</b><sub>i</sub> = D.\n  We can say that <b>A</b><sub>y+1</sub> - <b>A</b><sub>y</sub> = D for all i &le; y &lt; x. We have 2 cases now.\n<ul>\n  <li>\n    Case 1: x &equals; <b>N</b>,</br>\n  In this case, subarray(i, <b>N</b>) is an arithmetic subarray. All subarrays(p, <b>N</b>) such that i &lt; p &le; N, will have shorter length than\n  subarray(i, <b>N</b>). Hence, we can discard all subarrays starting with index p.\n    </li>\n  <li>\n    Case 2: x &ne; <b>N</b>,</br>\n  <b>A</b><sub>x+1</sub> - <b>A</b><sub>x</sub> &ne; D.\n  We have already proved that we need not consider j &gt; x for index i as those subarrays will not be arithmetic using Claim 1.\n  Now consider subarrays (k, x + 1) such that ( i+1 &le; k &lt; x). All these\n  subarrays are not arithmetic because <b>A</b><sub>x+1</sub> - <b>A</b><sub>x</sub> &ne; D whereas A<sub>k+1</sub> - A<sub>k</sub> &equals; D.\n  Hence, we can discard all the subarray starting with index k. So, we can now shift the starting index to x.\n  </li>\n</ul>\n</p>\n<p>\n  We can conclude our approach as follows. Initialise the answer as 0. We maintain two pointers, left pointer i and right pointer j. For an index i, we\n  try to find the longest arithmetic subarray starting at index i by incrementing j. Let the maximum j for index i such that\n  subarray(i,j) is an arithmetic subarray be max_j. Update answer if max_j - i + 1 is greater than current answer.\n  And then we shift our left pointer i to the current max_j. We can see that both the pointers visit each element at most once. Hence, the complexity\n  of the solution is O(<b>N</b>).\n</p>\n<h5>Sample Code (C++)</h5>\n<pre><code class=\"language-cpp\">\n<var>int</var> maxArithmeticSubarray(vector<<var>int</var>> array) {\n  <var>int</var> maxLen = 0;\n  for(<var>int</var> i = 0; i < array.size() - 1;) {\n     <var>int</var> j = i;\n     <var>int</var> common_difference = array[i+1] - array[i];\n     while(j < array.size() - 1 && (array[j + 1] - array[j] == common_difference))\n          j++;\n     <var>int</var> max_j = j;\n     maxLen = max(maxLen, max_j - i + 1);\n     i = max(i + 1, j);\n  }\n  return maxLen;\n}\n</code></pre>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U38-Wpmw-jxqNvSlNVfM6zia0-0u1pndBDBYMBJSjfNpFzbRPBfss2Zsvl2W8pD7D54oBIaYVA/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000003bf4ed","statement":"<h3>Problem</h3>\n<p>\n  An arithmetic array is an array that contains at least two integers and the differences between\n  consecutive integers are equal. For example, [9, 10], [3, 3, 3], and [9, 7, 5, 3] are arithmetic\n  arrays, while [1, 3, 3, 7], [2, 1, 2], and [1, 2, 4] are not arithmetic arrays.\n</p><p>\n  Sarasvati has an array of <b>N</b> non-negative integers. The i-th integer of the array is\n  <b>A<sub>i</sub></b>. She wants to choose a contiguous arithmetic subarray from her array that\n  has the maximum length. Please help her to determine the length of the longest contiguous\n  arithmetic subarray.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the integer <b>N</b>. The second line contains\n  <b>N</b> integers. The i-th integer is <b>A<sub>i</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is the length of the longest contiguous\n  arithmetic subarray.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  0 &le; <b>A<sub>i</sub></b> &le; 10<sup>9</sup>.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  2 &le; <b>N</b> &le; 2000.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  2 &le; <b>N</b> &le; 2 &times; 10<sup>5</sup> for at most 10 test cases.<br/>\n  For the remaining cases, 2 &le; <b>N</b> &le; 2000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0U72z9aVEBBeltODXpHHBiw1AkAxQjIus_yRDMn_T8guosdUtsV9b_JYumrVzlwQPPrKXcNHXeSC__go2UHfRhazVy76g5lLxQMfGBPLW5mw/longest_arithmetic_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n7\n10 7 4 6 8 10 11\n4\n9 7 5 3\n9\n5 5 4 5 5 5 4 5 6\n10\n5 4 3 2 1 2 3 4 5 6\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2aXDRA9cedz0IMzBhRX5X2_N1xyqgL0tMNLgE5nNRpoh9cEnOmuLHD5jN3-B4Hz2LBrUFsQVxQvdQgz3gymOmwWINLDe6LdEDp2SGaAPYFE7c/longest_arithmetic_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4\nCase #2: 4\nCase #3: 3\nCase #4: 6\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the integers inside the bracket in the following represent the longest\n  contiguous arithmetic subarray:\n  10 7 [4 6 8 10] 11\n</p><p>\n  In Sample Case #2, the whole array is an arithmetic array, thus the longest contiguous arithmetic\n  subarray is the whole array.\n</p><p>\n  In Sample Case #3, the longest contiguous arithmetic subarray is either [5, 5, 5] (a subarray from\n  the fourth integer to the sixth integer) or [4, 5, 6] (a subarray from the seventh integer to the\n  ninth integer).\n</p><p>\n  In Sample Case #4, the longest contiguous arithmetic subarray is the last six integers.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":4},{"type":1,"type__str":"VISIBLE","value":7}],"title":"Longest Arithmetic","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"000000000019ff47","type":1,"type__str":"SPECTATOR"},"title":"Round E 2020"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
