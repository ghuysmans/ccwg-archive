{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1618797600000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000435a5b","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Thank you for participating in Kick Start 2021 Round B!</p>\r\n<hr>\r\n<p><b>Cast</b></p>\r\n<p>Increasing Substring: Written by Himanshu Jaju and prepared by Eric Dong.</p>\r\n<p>Longest Progression: Written by Vipin Singh and prepared by Bryan (Seunghyun) Jo.</p>\r\n<p>Consecutive Primes: Written by Pablo Heiber and prepared by Nikhil Hassija.</p>\r\n<p>Truck Delivery: Written by Sudarsan Srinivasan and prepared by Bartosz Kostka.</p>\r\n<p>Solutions, other problem preparation, reviews and contest monitoring by\r\nAbhishek Saini, Akshay Mohan, Akul Siddalingaswamy, Amr Aboelkher, Aneesh D H, Ankit Goyal, Ankur Dua, Anson Ho, Anurag Singh, Anushi Maheshwari, Bao Nguyen, Bartosz Kostka, Bir Bahadur Khatri, Bohdan Pryshchenko, Bryan (Seunghyun) Jo, Cristhian Bonilha, Diksha Saxena, Dipjal Chhetri, Eric Dong, Gregory Yap, Himanshi Jain, Himanshu Jaju, Hsin-cheng Hou, Jakub Kuczkowiak, Janice Chui, Jared Gillespie, Kashish Bansal, Krists Boitmanis, Lizzie Sapiro Santor, Nikhil Hassija, Ossama Mahmoud, Pablo Heiber, Rahul Goswami, Ruoyu Zhang, Samiksha Gupta, Sarah Young, Sera Wang, Shweta Karwa, Subhasmita Sahoo, Sudarsan Srinivasan, Surya Upadrasta, Swapnil Gupta, Swapnil Mahajan, Teja Vardhan Reddy Dasannagari, Vaibhav Tulsyan, Vijay Krishan Pandey, Vikash Dubey, Vipin Singh, Viplav Kadam, Wajeb Saab.</p>\r\n<p>Analysis authors:</p><ul>\r\n<li>Increasing Substring: Swapnil Gupta</li>\r\n<li>Longest Progression: Gregory Yap</li>\r\n<li>Consecutive Primes: Ankit Goyal</li>\r\n<li>Truck Delivery: Krists Boitmanis</li>\r\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1618786800000,"tasks":[{"analysis":"<h3>\nTest Set 1\n</h3>\n\n<p>\n  For any test case, if $$$\\mathbf{N} = 2$$$, we can return $$$2$$$ as the answer immediately, as any two numbers are trivially an arithmetic progression by themselves.\n  For $$$\\mathbf{N} \\ge 3$$$, we can attempt a strategy that tries to improve it by considering every element of $$$\\mathbf{A}$$$ as a possible starting point.\n  For instance, let us try to start a longest progression beginning at $$$\\mathbf{A_0}$$$</b>. Let us call the first difference we encounter, $$$\\mathbf{A_1} - \\mathbf{A_0}$$$</b>, $$$d$$$. $$$d$$$ could be the common difference of a longest progression\n  that starts from $$$\\mathbf{A_0}$$$, or it could not be. We attempt both possibilities:<br>\n <ol>\n  <li>If it is, we just need to continue trying to extend our possible progression with $$$\\mathbf{A_2}$$$, $$$\\mathbf{A_3}$$$ and so on, checking that $$$\\mathbf{A_2} - \\mathbf{A_1} = d$$$, $$$\\mathbf{A_3} - \\mathbf{A_2} = d$$$, etc.\n Because we can change at most one number, the first time we find some $$$k$$$ for which $$$\\mathbf{A_k}- \\mathbf{A_{k-1}} \\ne d$$$, we fix $$$\\mathbf{A_k}$$$ so that this expression does equal to $$$d$$$. We continue along the array afterwards until we reach the end or we find a second instance of $$$k$$$ where $$$\\mathbf{A_k} - \\mathbf{A_{k-1}} \\ne d$$$; at that point, we cannot go any further. </li>\n  <li> If it is not, the only possibility for a progression with length $$$>= 3$$$ starting from $$$\\mathbf{A_0}$$$ is if the common difference is $$$(\\mathbf{A_2} - \\mathbf{A_0}) / 2$$$.\n  In this case, we must set $$$\\mathbf{A_1}$$$ such that $$$(\\mathbf{A_1} - \\mathbf{A_0}) = (\\mathbf{A_2} - \\mathbf{A_1})$$$. Hence, note that this is only possible if $$$\\mathbf{A_2} - \\mathbf{A_0}$$$ is an even number - if it is not, we can determine the longest progression starting at $$$\\mathbf{A_0}$$$ under this scenario to simply be $$$2$$$ (as we cannot extend it past the first two values of the array).\n  Once we have done so, our common difference is set, and we continue trying to extend our progression starting from $$$\\mathbf{A_3}$$$, $$$\\mathbf{A_4}$$$, and so on, stopping at the first $$$\\mathbf{A_k}$$$ where $$$(\\mathbf{A_1} - \\mathbf{A_0}) \\ne (\\mathbf{A_k} - \\mathbf{A_{k-1}})$$$. At that point, the length of the longest progression starting at $$$\\mathbf{A_0}$$$ under this scenario will be $$$k$$$.</li>\n</ol><br>\n   Both possibilities $$$1$$$ and $$$2$$$ take $$$O(\\mathbf{N})$$$ for a given starting point.\n  Because we will try sequentially all possible starting points from $$$\\mathbf{A_0}, \\mathbf{A_1}, \\dots, \\mathbf{A_{N-2}}$$$, finding the max value amongst all $$$\\mathbf{N}-1$$$ possible starting points with $$$2$$$ possible scenarios each, our overall time complexity with this strategy will be $$$O(\\mathbf{N}^{2})$$$.<br>\n</p>\n\n<h3>\nTest Set 2\n</h3>\n<p>\n  Let's simplify the problem a little. The only thing that really matters in this situation is the common difference between two adjacent numbers, not the numbers themselves.\n  That is, the length of the longest progression of $$$[a, b, c, d, e, f]$$$ is always going to be the same as that of\n  $$$[a+k, b+k, c+k, d+k, e+k, f+k]$$$.\n  So, we can create an array $$$D$$$ where $$$D_i = \\mathbf{A_{i+1}} - \\mathbf{A_i}$$$. $$$D_0$$$ is hence $$$\\mathbf{A_1} - \\mathbf{A_0}$$$, and so on, until $$$D_{\\mathbf{N}-2}$$$ which is $$$\\mathbf{A_{N-1}} - \\mathbf{A_{N-2}}$$$.\n  For instance, given $$$\\mathbf{A} = [1, 3, 4, 7, 9, 11]$$$, we find that $$$D = [2, 1, 3, 2, 2]$$$.<br><br>\n\n  Now, we can break $$$D$$$ into <i>chunks</i>. Each chunk is a contiguous portion of the array with identical values. For a given chunk, let us call this value its <i>common value</i>. For instance, for $$$D = [2, 1, 3, 2, 2]$$$, we can break this down as $$$[2], [1], [3], [2, 2]$$$, so $$$2$$$ is the common value of the first chunk, and so on.\n  Each chunk has a starting index within $$$D$$$. That index should be associated with the length and common value of that chunk, and this information stored for lookup.\n  Then, we iterate through the chunks in ascending starting index order. For each chunk beginning at index $$$i$$$, with length $$$k$$$, and having common value $$$d$$$, we greedily try to fix the element in $$$D$$$ right after the chunk, if it exists. Then, we also need a separate attempt to try fixing the element right before the chunk, if it exists. That means we will need to attempt merging for each chunk up to two times. The following analysis is for\n  what happens when we merge with the element <i>after</i> our current chunk, but the same applies for the corresponding situation when we merge backwards too. <br><br>\n\n  The last element in our current chunk has index $$$(i+k-1)$$$. If we greedily use our ability to change a number by <i>adding</i> some amount to $$$D_{i+k}$$$ so it is equal to $$$d$$$, we must also reduce $$$D_{i+k+1}$$$ by the same amount. The opposite case applies. At this point:\n  <ul>\n    <li>if $$$D_{i+k} + D_{i+k+1} \\ne 2 \\times d$$$, then we have only been able to merge our current chunk with the element right after. The length of our extended chunk is now $$$k + 1$$$.</li>\n    <li>if $$$D_{i+k} + D_{i+k+1} = 2 \\times d$$$, but $$$D_{i+k+2} \\ne d$$$, then changing $$$D_{i+k}$$$ has allowed us to also merge with $$$D_{i+k+1}$$$. The length of our extended chunk is now $$$k + 2$$$. </li>\n    <li>if $$$D_{i+k} + D_{i+k+1} = 2 \\times d$$$, and $$$D_{i+k+2} = d$$$, then we have been able to merge even further with a chunk that starts $$$3$$$ elements after our current one ends. The length of the whole merge becomes $$$k + 2 + $$$ the length of the next chunk with common value $$$d$$$. </li>\n  </ul>\n  For instance, with $$$D = [1, 1], [2], [0, 0]$$$, if we try to merge forward from the first chunk which begins at index $$$i = 0$$$, has length $$$k = 2$$$ and common value $$$d = 1, D_2 + D_3 = 2 + 0 = 2 \\times d$$$, but $$$D_4 \\ne d$$$. This is the second scenario above, and the length of our extended chunk is now $$$4$$$, so the overall progression length in $$$\\mathbf{A}$$$ is $$$5$$$.\n  Another example: with $$$D = [2], [1], [3], [2, 2]$$$, if we try to merge forward from the first chunk which begins at index $$$i = 0$$$, has length $$$k = 1$$$ and common value $$$d = 2, D_1 + D_2 = 1 + 3 = 4 = 2 \\times d$$$, and $$$D_3 = d$$$. This is the third scenario above, and the length of our extended chunk is now $$$1 + 2 + 2 = 5$$$, so the overall progression length in $$$\\mathbf{A}$$$ is $$$6$$$.\n<br><br>\nOur overall solution to the problem is then just the max of all the possible chunks made by considering each chunk in turn, and trying to merge it backwards and forwards. (As a result, if the test case in question falls into the third scenario listed above, the \"longest progression\" will actually be discovered twice, but this doesn't change its correctness.)<br><br>\n  In summary, we run through the initial array once to create $$$D$$$, and then run through $$$D$$$ to create map(s) of chunks tagged with the appropriate information, and then run through $$$D$$$ again with our map of chunks to finally get our result.\n  Assuming we have access to constant-time lookup for the lengths and common values of chunks, the overall time complexity is $$$O(\\mathbf{N})$$$.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1qvrSMtnh1X_3cQluitJhc6h_n_NR7YeXgA2yqiaFpoTxpJvp1R19eWZzkwK3-lNbBnqMnpOSN/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000077a3a5","statement":"<h3>Problem</h3>\n<p>\n  In <a href=\"https://codingcompetitions.withgoogle.com/kickstart/round/000000000019ff47/00000000003bf4ed\">Kick Start 2020 Round E</a>\n  (you do not need to know anything about the previous problem to solve this one) Sarasvati learned\n  about arithmetic arrays. An arithmetic array is an array that contains at least two integers and\n  the differences between consecutive integers\n  are equal. For example, $$$[9, 10]$$$, $$$[3, 3, 3]$$$, and $$$[9, 7, 5, 3]$$$ are arithmetic arrays,\n  while $$$[1, 3, 3, 7]$$$, $$$[2, 1, 2]$$$, and $$$[1, 2, 4]$$$ are not.\n</p><p>\n  Sarasvati again has an array of $$$\\mathbf{N}$$$ non-negative integers. The $$$i$$$-th integer of the array is\n  $$$\\mathbf{A_i}$$$</b>.\n  She can replace at most one element in the array with any (possibly negative) integer she wants.\n</p><p>\n  For an array $$$\\mathbf{A}$$$, Sarasvati defines a subarray as any contiguous part of $$$\\mathbf{A}$$$.\n  Please help Sarasvati determine the length of the longest possible arithmetic subarray she can\n  create by replacing at most one element in the original array.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n  Each test case begins with a line containing the integer $$$\\mathbf{N}$$$. The second line contains\n  $$$\\mathbf{N}$$$ integers. The $$$i$$$-th integer is $$$\\mathbf{A_i}$$$</b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is\n  the test case number (starting from 1) and $$$y$$$ is the length of the longest\n  arithmetic subarray.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$<br/>\n  $$$0 \\le \\mathbf{A_i} \\le 10^{9}$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$2 \\le \\mathbf{N} \\le 2000$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$2 \\le \\mathbf{N} \\le 3 \\times 10^{5}$$$ for at most $$$10$$$ test cases.<br/>\n  For the remaining cases, $$$2 \\le \\mathbf{N} \\le 2000$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2Nm9MKATqod2XXwuBqUTaG9RWR_Uizz-vk5rpDdTj6jiyntNLO69KMFwEy-lp0jb4fXU3WRmgzlDj1HuH7ejKjmzNwJ-yLv_IxRJB8T7FqtFwj/longest_progression_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n4\n9 7 5 3\n9\n5 5 4 5 5 5 4 5 6\n4\n8 5 2 0\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2NeXAcXEksMLBgiX8Gh-CGo_6WFDJLNKTIKRZ60npuR3o8B0u4S6KX2iAj6K6277TBbczZ3Q1LfIsAGrkt3M_a6Vh5q-5qOt8lWoDkgZspwLUzng/longest_progression_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4\nCase #2: 6\nCase #3: 4\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n  In Sample Case #1, the whole array is an arithmetic array, thus the longest arithmetic\n  subarray is the whole array.\n</p><p>\n  In Sample Case #2, if Sarasvati changes the number at third position to $$$5$$$, the\n  array will become $$$[5, 5, 5, 5, 5, 5, 4, 5, 6]$$$. The subarray from first position to sixth position is the\n  longest arithmetic subarray.\n</p><p>\n  In Sample Case #3, Sarasvati can change the number at the last position to $$$-1$$$, to get $$$[8, 5, 2, -1]$$$.\n  This resulting array is arithmetic.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":9},{"type":1,"type__str":"VISIBLE","value":12}],"title":"Longest Progression","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test set 1</h3>\n\n<p>\n  A string $$$X$$$ of length $$$L$$$ is strictly increasing, if for every pair of indices $$$i$$$ and $$$j$$$ such that\n  $$$1 \\le i \\lt j \\le L$$$ ($$$1$$$-based), the character at position $$$i$$$ is smaller than\n  the character at position $$$j$$$. Using this, we can say that $$$X_i \\lt X_{i+1}$$$ for $$$1 \\le i \\lt L$$$.\n  We can check this in $$$O(L)$$$ time complexity for string $$$X$$$.\n</p>\n\n<p>\n  There are\n  $$$O(\\mathbf{N}^{2})$$$ substrings of string $$$\\mathbf{S}$$$ each of which can have length at most $$$\\mathbf{N}$$$. We can iterate over each substring and check whether it is strictly increasing\n  in $$$O(\\mathbf{N})$$$ time.  If a substring from $$$i$$$ to $$$j$$$ is strictly increasing,\n  update the length of longest strictly increasing substring ending at index $$$j$$$ to $$$j-i+1$$$ if it is greater than\n  the previous found length. The overall time complexity of the solution is $$$O(\\mathbf{N}^3)$$$.\n</p>\n\n<p>\n  Consider the following example with string $$$bbcd$$$. There is only $$$1$$$ substring ($$$b$$$)\n  ending at index $$$1$$$. Hence, the answer for\n  index $$$1$$$ is $$$1$$$. There are $$$2$$$ substrings ($$$b$$$ and $$$\nbb$$$) which end\n  at index $$$2$$$. $$$bb$$$ is not strictly increasing string. Hence, the answer for index\n  $$$2$$$ is $$$1$$$.\n  There are $$$3$$$ substrings ($$$bbc$$$, $$$bc$$$, and $$$c$$$) ending at index $$$3$$$.\n  $$$bbc$$$ is not strictly increasing as $$$b$$$ is repeated twice. $$$bc$$$ is the longest strictly increasing\n  substring ending at index $$$3$$$. Hence, answer for index $$$3$$$ is $$$2$$$.\n  There are $$$4$$$ substrings ($$$bbcd$$$, $$$bcd$$$, $$$cd$$$, and $$$d$$$) ending at index $$$4$$$.\n  $$$bbcd$$$ is not strictly increasing as b is repeated twice. $$$bcd$$$ is the longest strictly increasing\n  substring ending at index $$$4$$$. Hence, answer for index $$$4$$$ is $$$3$$$.\n</p>\n\n<h5>Sample Code(C++)</h5>\n<pre><code class=\"language-cpp\">\nvector<<var>int</var>> longestStrictlyIncreasingSubstring(string S) {\n  vector<<var>int</var>> answer(S.size(), 0);\n  for(<var>int</var> i = 0; i < S.size(); i++) {\n    for(<var>int</var> j = i; j < S.size(); j++) {\n      <var>bool</var> is_strictly_increasing = true;\n      for(<var>int</var> k = i; k < j; k++) {\n        is_strictly_increasing &= (S[k] < S[k+1]);\n      }\n      if(is_strictly_increasing) {\n        answer[j] = max(answer[j], j - i + 1);\n      }\n    }\n  }\n  return answer;\n}\n</code></pre>\n\n<h3>Test set 2</h3>\n\n<p>\n  We cannot check each substring of string $$$\\mathbf{S}$$$ for this test set due\n  to the large constraints.\n  We already know that, for a string $$$\\mathbf{S}$$$ to be strictly increasing, $$$\\mathbf{S_i} \\lt \\mathbf{S_{i+1}}$$$ for\n  $$$1 \\le i \\lt \\mathbf{N}$$$. Consider that we have already calculated the length of the longest strictly\n  increasing substring that ends at position $$$i$$$. Let this length be $$$MaxLen(i)$$$.\n  Now we need to\n  compute the answer for position $$$i+1$$$. There is no need to consider all substrings\n  ending at position $$$i+1$$$. We can simply check if $$$\\mathbf{S_i} \\lt \\mathbf{S_{i+1}}$$$. If\n  this condition is satisfied, we can simply append S(i+1) to the longest increasing substring ending at i and it would still be increasing and\n  update $$$MaxLen(i+1) = MaxLen(i) + 1$$$. Otherwise, $$$MaxLen(i) = 1$$$.\n  This way, we can calculate the length of the longest strictly\n  increasing substring that ends at position $$$i$$$ in constant time. Hence, the overall time\n  complexity of the solution is $$$O(\\mathbf{N})$$$.\n</p>\n\n<p>\n  Consider the following example with string $$$bbcda$$$. For index $$$1$$$, $$$MaxLen(1) = 1$$$.\n  For index $$$2$$$, we can see that index $$$1$$$ and index $$$2$$$ have equal values and thus do not\n  satisfy the constraint $$$\\mathbf{S_i} \\lt \\mathbf{S_{i+1}}$$$. In this case, $$$MaxLen(2) = 1$$$.\n  For index $$$3$$$, $$$\\mathbf{S_2} \\lt \\mathbf{S_3}$$$, hence we can extend the longest strictly increasing substring ending at index $$$\\mathbf{2}$$$.\n  In this case, $$$MaxLen(3) = 2$$$.\n  For index $$$4$$$, $$$\\mathbf{S_3} \\lt \\mathbf{S_4}$$$, hence we can extend the longest strictly increasing substring ending at index $$$\\mathbf{3}$$$.\n  In this case, $$$MaxLen(4) = 3$$$.\n  For index $$$4$$$, $$$\\mathbf{S_4} \\gt \\mathbf{S_5}$$$ which violates the condition for strictly increasing substring.\n  In this case, $$$MaxLen(5) = 1$$$.\n</p>\n\n<h5>Sample Code(C++)</h5>\n<pre><code class=\"language-cpp\">\nvector<<var>int</var>> longestStrictlyIncreasingSubstring(string S) {\n  vector<<var>int</var>> answer(S.size(), 0);\n  answer[0] = 1;\n  for(<var>int</var> i = 1; i < S.size(); i++) {\n      if(S[i - 1] < S[i]) {\n        answer[i] = answer[i - 1] + 1;\n      }\n      else {\n        answer[i] = 1;\n      }\n  }\n  return answer;\n}\n</code></pre>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1gEuz-V4XHhvV4lEbMN08SuiGOjFe_9VJessSH5G_QtD_q3j-8npSLVq96sUUYUqaD5fOI73fr/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000077a882","statement":"<h3>Problem</h3>\n<p>\n  Your friend John just came back from vacation, and he would like to share with you\n  a new property that he learned about strings.\n</p>\n<p>\n  John learned that a string $$$C$$$ of length $$$L$$$ consisting of uppercase English\n  characters is strictly increasing if,\n  for every pair of indices $$$i$$$ and $$$j$$$ such that\n  $$$1 \\le i \\lt j \\le L$$$ ($$$1$$$-based),\n  the character at position $$$i$$$ is smaller than the character at position $$$j$$$.\n</p>\n<p>\n  For example, the strings <code>ABC</code> and <code>ADF</code> are strictly increasing,\n  however the strings <code>ACC</code> and <code>FDA</code> are not.\n</p>\n<p>\n  Now that he taught you this new exciting property, John decided to challenge you:\n  given a string $$$\\mathbf{S}$$$ of length $$$\\mathbf{N}$$$, you have to find out, for every position $$$1 \\le i \\le \\mathbf{N}$$$,\n  what is the length of the longest strictly increasing\n  <a href=\"https://en.wikipedia.org/wiki/Substring\">substring</a> that ends at position $$$i$$$.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n</p>\n<p>\n  Each test case consists of two lines.\n</p>\n<p>\n  The first line contains an integer $$$\\mathbf{N}$$$, representing the length of the string.\n</p>\n<p>\n  The second line contains a string $$$\\mathbf{S}$$$ of length $$$\\mathbf{N}$$$, consisting of uppercase English characters.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$y_1$$$ $$$y_2$$$ ... $$$y_n$$$</code>,\n  where $$$x$$$ is the test case number (starting from 1) and $$$y_i$$$ is the length of\n  the longest strictly increasing substring that ends at position $$$i$$$.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  $$$1 \\le \\mathbf{N} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n  $$$1 \\le \\mathbf{N} \\le 2 \\times 10^5$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3vkyTtXHZJPWusUL8lt9AeUYwIstchsEbY5mGnUI6fuNJUG4H2LrWWynDVM72uliFAPYY0Tybi1tf3H68smpblM-YFpo9k1VCS-CeXBPQU_BI6VA/increasing_substring_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n4\nABBC\n6\nABACDA\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U29A_B2J8xJSlioX7kPhqfQfGgfy9LyXEpnKvGDh641jEjGK3ROFDHA9nMj3AVrSnR3qcUSioimcHgRQMqhx2Tv6OqbYA-NphZCpDegCYLEniPiAhQ/increasing_substring_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1 2 1 2\nCase #2: 1 2 1 2 3 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, the longest strictly increasing substring ending at position $$$1$$$ is <code>A</code>.\n  The longest strictly increasing substrings ending at positions $$$2$$$, $$$3$$$ and $$$4$$$ are\n  <code>AB</code>, <code>B</code> and <code>BC</code>, respectively.\n</p>\n<p>\n  In Sample Case #2, the longest strictly increasing substrings for each position are\n  <code>A</code>, <code>AB</code>, <code>A</code>, <code>AC</code>, <code>ACD</code> and <code>A</code>.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":1,"type__str":"VISIBLE","value":7}],"title":"Increasing Substring","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\nTest Set 1\n</h3>\n\n<p>\n  Let us root the tree at the capital city $$$1$$$. For the small test set, we can answer each query by\n  simply iterating the path from the given city\n  $$$\\mathbf{C_j}$$$ up to the capital city. We start out with the answer $$$ans = 0$$$, and\n  whenever we\n  encounter a road on the path with $$$\\mathbf{L_i} \\leq \\mathbf{W_j}$$$, we update the\n  answer to\n  $$$ans = \\gcd(ans, \\mathbf{A_i}$$$).\n</p>\n<p>\n  The time complexity of the Greatest Common Divisor (GCD) operation $$$\\gcd(a, b)$$$ is $$$O(\\log(\\min(a, b)))$$$\n  or $$$O(\\log(MaxA))$$$ in our case, where $$$MaxA$$$ is the largest toll among all roads.\n  A short proof of GCD time complexity is provided\n  <a href=\"https://codeforces.com/blog/entry/63771\">here</a>, and it can be generalized to show\n  that the amortized time complexity of a sequence of $$$K$$$ GCD operations, where the result of a\n  previous operation is fed into the next one, is $$$O(K + \\log(MaxA))$$$ as opposed to\n  $$$O(K \\times \\log(MaxA))$$$. Since a path in the tree can have up to $$$\\mathbf{N}$$$ cities, the\n  overall time complexity of the algorithm for all $$$\\mathbf{Q}$$$ days is therefore\n  $$$O(\\mathbf{Q} \\times (\\mathbf{N} + \\log(MaxA)))$$$.\n</p>\n\n<h3>\nTest Set 2\n</h3>\n\n<p>\n  Since all queries are known in advance, we do not have to answer them in the given order, so let's group the queries by city\n  $$$\\mathbf{C_j}$$$.\n</p>\n\n<p>\n  Let's look at how we can answer all queries for a particular city $$$C$$$ efficiently. First,\n  we need to build a list of roads on the path from city $$$C$$$ to the capital city $$$1$$$ and sort them\n  by the load-limits $$$\\mathbf{L_i}$$$ in an increasing order. Let's also sort the queries\n  for city $$$C$$$ by weight $$$\\mathbf{W_j}$$$ in a non-decreasing order. Now we can answer the queries\n  by\n  iterating these two lists in parallel and calculating GCD of all roads with load-limit up to and\n  including the weight $$$\\mathbf{W_j}$$$ of the current query.\n</p>\n\n<p>\n  The time complexity of this approach is\n  $$$O(\\mathbf{N}^2 \\log(\\mathbf{N}) + \\mathbf{N} \\log(MaxA) + \\mathbf{Q} \\log(\\mathbf{Q}))$$$ as\n  we need to sort the list of roads from each city to the capital city $$$1$$$, perform a series of GCD\n  operations for each of these $$$\\mathbf{N}$$$ paths, and also have the queries sorted by loads.\n</p>\n\n\n<p>\n  Rather than building paths to the capital for each city independently,\n  we can perform a\n  <a href=\"https://en.wikipedia.org/wiki/Depth-first_search\">Depth-first search</a> (DFS) of the\n  tree\n  starting at the capital city $$$1$$$ and answer all queries of a city $$$C$$$ as we visit the city for\n  the first time. That way, the cities and roads on the path from $$$C$$$ to $$$1$$$ are conveniently\n  stored in the DFS stack. All we need is an efficient data structure that would store the\n  toll\n  $$$\\mathbf{A_i}$$$ of precisely these roads and support GCD queries of tolls in the load-limit\n  range $$$[1, \\mathbf{W_j}]$$$.\n</p>\n\n<p>\n  That data structure happens to be a segment tree $$$ST$$$ with load-limits\n  $$$\\mathbf{L_i}$$$ as keys (recall that all load-limits are unique), the\n  tolls $$$\\mathbf{A_i}$$$ as values, and GCD as the merge operation.\n  Initially, the segment tree $$$ST$$$ is empty, namely, the values of all its nodes are $$$0$$$.\n  Whenever we traverse the $$$i$$$-th road, we perform a point update operation\n  $$$ST.update(\\mathbf{L_i}, \\mathbf{A_i})$$$, and, when we backtrack along this\n  road in the DFS traveral,\n  we cancel the value $$$\\mathbf{A_i}$$$ by calling $$$ST.update(\\mathbf{L_i}, 0)$$$.\n  By doing so, we ensure that at the\n  time of answering queries for a particular city, the segment tree $$$ST$$$ contains the\n  tolls of precisely the roads on the path to the capital city $$$1$$$, and the answer to a\n  query is $$$ST.query(1, \\mathbf{W_j})$$$.\n</p>\n\n<p>\n  Let $$$MaxQ$$$ be the maximum load-limit among all roads. Each update or query\n  of the segment tree involves $$$O(\\log(MaxQ))$$$ GCD operations so the amortized time\n  complexity of a single update or query operation is $$$O(\\log(MaxA) + \\log(MaxQ))$$$.\n  Since we have two update operations per road and one query operation per each day, the overall\n  time complexity of the algorithm is\n  $$$O((\\mathbf{N} + \\mathbf{Q}) \\times (\\log(MaxA) + \\log(MaxQ)))$$$.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3fSb9UU9nMXGlp-2_i7fWaH7TrZZR-z-wqVnOybhIfw_NhdY6tTcGSmNWV5ZAof7uzX2lyQJtM/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000077a885","statement":"<h3>Problem</h3>\n<p>\n  Charles is a truck driver in the city of Googleland. Googleland is built in form of a tree with\n  $$$\\mathbf{N}$$$ nodes where each node represents a city and each edge represents a road between two cities. The cities are numbered $$$1$$$ to $$$\\mathbf{N}$$$.\n  The capital of Googleland is city $$$1$$$. Each day Charles picks up a load of weight $$$\\mathbf{W}$$$ in city $$$\\mathbf{C}$$$ and\n  wants to deliver it to city $$$1$$$ using the <a href=\"https://en.wikipedia.org/wiki/Simple_path\">\n  simple path</a> (which is unique) between the cities.\n  Each road $$$i$$$ has a toll which charges amount $$$\\mathbf{A_i}$$$ if the weight of the load is greater\n  than or equal to a load-limit $$$\\mathbf{L_i}$$$.\n</p>\n<p>\n  Charles works for $$$\\mathbf{Q}$$$ days, where for each day Charles will be given the starting city $$$\\mathbf{C}$$$ and weight of the load $$$\\mathbf{W}$$$.\n  For each day find the <a href=\"https://en.wikipedia.org/wiki/Greatest_common_divisor\" target=\"_blank\">greatest common divisor</a>\n  of all the toll charges that Charles pays for that day.\n  If Charles did not have to pay in any of the tolls the answer is $$$0$$$.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n  </p>\n<p>\n  The first line of each test case contains the two integers $$$\\mathbf{N}$$$ and $$$\\mathbf{Q}$$$.\n  </p>\n<p>\n  The next $$$\\mathbf{N}-1$$$ lines describe the roads. $$$i$$$-th of these lines contains the four space separated integers $$$\\mathbf{X}$$$, $$$\\mathbf{Y}$$$,\n  $$$\\mathbf{L_i}$$$ and $$$\\mathbf{A_i}$$$, indicating a road between cities $$$\\mathbf{X}$$$ and $$$\\mathbf{Y}$$$\n  with load-limit $$$\\mathbf{L_i}$$$ and toll charge $$$\\mathbf{A_i}$$$.\n</p>\n<p>\n  The next $$$\\mathbf{Q}$$$ lines describe the queries. $$$j$$$-th of these lines contains the two space separated integers $$$\\mathbf{C_j}$$$ and $$$\\mathbf{W_j}$$$ representing the\n  starting city and weight of the load on $$$j$$$-th day.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\n  where $$$x$$$ is the test case number (starting from 1) and $$$y$$$\n  is a list of the answers for $$$\\mathbf{Q}$$$ days in order, separated by spaces.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$1 \\le \\mathbf{L_i} \\le 2 \\times 10^5$$$, for all $$$i$$$.<br/>\n  $$$1 \\le \\mathbf{A_i} \\le 10^{18}$$$, for all $$$i$$$.<br/>\n  All $$$\\mathbf{L_i}$$$ are distinct.<br/>\n  $$$2 \\le \\mathbf{C_j} \\le \\mathbf{N}$$$, for all $$$j$$$.<br/>\n  $$$1 \\le \\mathbf{W_j} \\le 2 \\times 10^5$$$, for all $$$j$$$.<br/>\n  It is guaranteed that given roads form a tree.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  $$$2 \\le \\mathbf{N} \\le 1000$$$.<br/>\n  $$$1 \\le \\mathbf{Q} \\le 1000$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 80 seconds.<br/>\n\n$$$2 \\le \\mathbf{N} \\le 5 \\times 10^4$$$ and $$$1 \\le \\mathbf{Q} \\le 10^5$$$ for at most $$$20$$$ test cases.<br/>\n  For the remaining cases, $$$2 \\le \\mathbf{N} \\le 1000$$$ and $$$1 \\le \\mathbf{Q} \\le 1000$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2bBuQnjMSQEBR-1fJ_Xn_X2U5sp9ZoPbPwRdbb4FaPK3XrxwwfReswc4_pCDJq74JeP7PRIukrivktXGdgj_h879Ic1yE5saJ21s0LzA/truck_delivery_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n7 5\n2 1 2 4\n2 3 7 8\n3 4 6 2\n5 3 9 9\n2 6 1 5\n7 1 5 7\n5 10\n5 8\n4 1\n6 1\n7 6\n3 2\n1 2 2 10\n3 2 3 5\n3 2\n3 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0XUKgTev9VRS7gEgWfMcn6i3yrCuYYDayI2NX_yDoVyKynY3VagY9mRlsnXr6p1Qn2XI1pTbuq_Tv0089gLPtnLT7jQygOSm0JuskgZkg/truck_delivery_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1 4 0 5 7\nCase #2: 10 5</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>In Sample Case #1</p>\n<p>\n  On the first day, Charles should pay toll charges in the roads between cities $$$(5,3), (3,2)$$$ and $$$(2,1)$$$.\n  The answer will be $$$\\gcd(9,8,4) = 1$$$.\n</p>\n<p>\n  On the second day, Charles should pay toll charges in the roads between cities $$$(3,2)$$$ and $$$(2,1)$$$.\n  The answer will be $$$\\gcd(8,4) = 4$$$.\n</p>\n<p>\n  On the third day, Charles need not pay toll charges in any of the cities. Thus, the answer will be $$$0$$$.\n</p>\n\n<p>In Sample Case #2</p>\n<p>\n  On the first day, Charles should pay toll charges in the roads between cities $$$(2,1)$$$.\n  The answer will be $$$10$$$.\n</p>\n<p>\n  On the second day, Charles should pay toll charges in the roads between cities $$$(3,2)$$$ and $$$(2,1)$$$.\n  The answer will be $$$\\gcd(5,10) = 5$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":13},{"type":1,"type__str":"VISIBLE","value":24}],"title":"Truck Delivery","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\n    Test Set 1\n</h3>\n\n<p>\nSay $$$P(n)$$$ denotes the number of primes up to $$$n$$$, then the number of\npossible products of consecutive primes will be $$$P(n) - 1$$$. For this test\nset, we can find all the primes up to $$$n = 2021$$$ and generate the list of\nproducts of consecutive primes. Each query can then be answered by searching for\nthe largest product which is still smaller than or equal to the given query.\n</p>\n\n<p>\n<i>Complexity analysis:</i>\n</p>\n\n<ol>\n    <li>To generate primes, we can test all $$$i$$$ up to $$$n$$$ for primality\n        by checking if any integer from $$$2$$$ to $$$i - 1$$$ divides $$$i$$$.\n        This takes $$$\\sum_{i=0}^{n-2}i = O(n^2)$$$</li>\n    <li>Generating the list of products of consecutive primes from the prime\n        list takes $$$O(n)$$$ (a tighter bound will be $$$O(P(n))$$$ but we do\n        not require it for this case)</li>\n    <li>To answer all the queries, the complexity is $$$O(T \\times n)$$$</li>\n</ol>\n\n<p>\nSo, the total complexity is $$$O(n^2) + O(T \\times n)$$$ which is well under the\nrequired time limit for $$$n = 2021$$$.\n</p>\n\n<h3>\nTest Set 2\n</h3>\n\n<p>\nWe do not need to generate all the primes up to $$$n$$$, but only until we find\na prime which is greater than $$$\\sqrt{n}$$$. The product of consecutive primes\nlarger than $$$\\sqrt{n}$$$ will be greater than $$$n$$$. For this test set,\n$$$n$$$ can be up to $$$10^9$$$, so we can generate primes up to $$$10^5$$$\n(rounding off $$$10^{4.5}$$$ to cover the one up case as well) using\n<a href=\"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\">Sieve of Eratosthenes</a>.\n</p>\n\n<p>\n<i>Complexity analysis:</i> $$$O( \\sqrt{n} \\times \\log( \\log( \\sqrt{n} ) ) )$$$ (for\nsieve) + $$$O( T \\times P(\\sqrt{n}) )$$$ (for queries) which is well under the\nrequired time limit for $$$n = 10^9$$$.\n</p>\n\n<h3>\n    Test Set 3\n</h3>\n<p>\nOur previous strategy of generating primes up to $$$\\sqrt{n}$$$ will not work in\nthis case as $$$\\sqrt{n}$$$ can be as large as $$$10^{9}$$$.\n</p>\n\n<p>\nFor any input $$$n$$$, there can be only two scenarios:\n</p>\n\n<ul>\n    <li>The solution is the product of the largest prime smaller than or equal\n        to $$$\\sqrt{n}$$$ and the smallest prime greater than\n        $$$\\sqrt{n}$$$. Product of consecutive primes larger than that will be\n        larger than $$$n$$$.</li>\n    <li>The solution is the product of two largest primes smaller than or equal\n        to $$$\\sqrt{n}$$$. This will be less than $$$n$$$ and any product of\n        consecutive primes less than that will be even smaller.</li>\n</ul>\n\n<p>\nSo, we need primes only in the vicinity of $$$\\sqrt{n}$$$, specifically in the\nworst case, $$$2$$$ primes smaller than or equal to $$$\\sqrt{n}$$$ and one prime\nlarger than $$$\\sqrt{n}$$$.\n</p>\n\n<p>\nNow, how far out can the closest prime be from any given $$$\\sqrt{n}$$$? This\nseries of numbers is known as\n<a href=\"https://en.wikipedia.org/wiki/Prime_gap\">maximal prime gaps</a>\nand for $$$\\sqrt{n} = 10^{9}$$$ (for maximum possible $$$n = 10^{18}$$$), this\nnumber is $$$282$$$ (called $$$max\\_gap$$$ from now on). So, we can iterate\nbackwards from $$$\\sqrt{n}$$$ until we find $$$2$$$ primes and then iterate\nahead from $$$\\sqrt{n}$$$ for $$$1$$$ more prime. In the worst case we would\nneed to check integers in range $$$[\\sqrt{n} - max\\_gap \\times 2, \\sqrt{n} +\nmax\\_gap]$$$.\n</p>\n\n<p>\n<i>Complexity analysis:</i> $$$O( \\sqrt[4]{n} \\times 3 \\times max\\_gap \\times T\n)$$$ <br/> (primality check over $$$3 \\times max\\_gap$$$ possible integers for\n$$$T$$$ test cases)\n</p>\n\n<p>\n<i>Note:</i> The above complexity is not a tight bound. It's hard to hit the\nworst case scenario and even then most of the primality checks will terminate\nearlier (using just the first $$$7$$$ primes, we can rule out $$$662$$$ integers\nin any $$$3 \\times 282$$$ range). A better\n<a href=\"https://en.wikipedia.org/wiki/Primality_test\">primality test</a> can be\nused to further drive the complexity down.\n<a href=\"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes#Segmented_sieve\">\n    Segmented sieve</a> can also be used to have deterministic complexity -\n$$$O( ( \\sqrt[4]{n} + 3 \\times max\\_gap \\times T) \\times \\log( \\log( \\sqrt[4]{n}\n)))$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3x4GzxExajBGiWGpSTMn3Ogw7kgtpZh9q8aT-l5WJyDOIJZu4ApBFCLWcFhJeFr24TOiyX0sJM/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000077a8e6","statement":"<h3>Problem</h3>\n<p>\nAda has bought a secret present for her friend John. In order to open the present, Ada wants John\n  to crack a secret code. She decides to give him a hint to make things simple for him.\n  She tells him that the secret code is a number that can be formed by taking the product of two\n  consecutive <a href=\"https://en.wikipedia.org/wiki/Prime_number\">\n  prime numbers</a>, such that it is the largest number that is smaller than or equal to $$$\\mathbf{Z}$$$.\n\n  Given the value of $$$\\mathbf{Z}$$$, help John to determine the secret code.\n</p>\n<p>\n  Formally, let the order of prime numbers $$$2, 3, 5, 7, 11, $$$ ... be denoted by\n  $$$p_1, p_2, p_3, p_4, p_5, $$$ ... and so on. Consider $$$R_i$$$ to be the product of two\n  consecutive primes $$$p_i$$$ and $$$p_{i+1}$$$. The secret code is the largest $$$R_j$$$\n  such that $$$R_j \\le \\mathbf{Z}$$$.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ lines follow.<br/>\nEach line contains a single integer $$$\\mathbf{Z}$$$, representing the number provided by Ada as part of\nthe hint.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the secret code -\n  the largest number less than or equal to $$$\\mathbf{Z}$$$ that is the product of two\n  consecutive prime numbers.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 15 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n$$$6 \\le \\mathbf{Z} \\le 2021$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n$$$6 \\le \\mathbf{Z} \\le 10^9$$$.<br/>\n</p>\n\n<h4>Test Set 3</h4>\n<p>\n\n$$$6 \\le \\mathbf{Z} \\le 10^{18}$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2_4UBQk5ob-gtAWUxXE9T6dEjhJZM9ncIsry6W0x82inqQASd6usRNjkwYq3M2NND5FPg_JazqkVc5Iced1h3QJ1rrYxprEMndA0CFc5TskGs/consecutive_primes_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2021\n2020\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0necs8gYhwjFPCrxwpElPvO91uvTnPIDNAAzmwyw1U5dRuu323dOl2lBEX0AwAkedjWT_xTp-0u4yGYRat6VPU2wes1t83h2tkcu64Wf2IPUJs/consecutive_primes_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2021\nCase #2: 1763\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  For Sample Case #1, the secret code is $$$2021$$$ because it is exactly the product of consecutive\n  primes $$$43$$$ and $$$47$$$.\n</p>\n<p>\n  For Sample Case #2, the secret code is $$$1763$$$ because the product of $$$41$$$ and $$$43$$$ is\n  $$$1763$$$ which is smaller than $$$2020$$$, but the product of $$$43$$$ and $$$47$$$ exceeds the\n  given value of $$$2020$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":1,"type__str":"VISIBLE","value":9},{"type":1,"type__str":"VISIBLE","value":14}],"title":"Consecutive Primes","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000435a5b","type":1,"type__str":"SPECTATOR"},"title":"Round B 2021"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
