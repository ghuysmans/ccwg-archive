{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1379908800000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000434ba1","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1379898000000,"tasks":[{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1aewGf-xL0CnM6uaUNcBBJMxk2kvBZIBo8GjBMlfkdOdKkYJRawKYVLcrvnxMLNF37sugaPOGF/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000004347b2","statement":"<h3>Problem</h3>\n<p>\nEdison, a robot, does not have a right hand or eyes. As a brave robot, <b>he always puts his left hand on the wall no matter he walks or turns around</b>. Because he thinks it is too dangerous, Edison does not walk backward.\n</p>\n<p>\nAssume that Edison has found himself in a square-shaped maze of <b>N</b>x<b>N</b> square cells which is surrounded by walls from the outside. In the maze, some of the cells are also walls. Edison can only move between two empty cells in four directions, north, south, west and east. In order to get out of the maze, he drafts a plan. He uses his left hand to lean on the wall and goes by following the wall.\n</p>\n<p>\nHere is the question, is Edison able to get out of the maze in at most 10,000 steps? If he can make it, output the path. By getting out of the maze, he only needs to be in the exit cell. If the starting cell is the same as the exit, Edison won't need to move and can directly get out of the maze.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. \nEach test case starts with an integer <b>N</b>. <b>N</b> is the size of the maze.\nThe following <b>N</b> lines, each line contains <b>N</b> characters which may be '.' or '#'. '.' is an empty cell, '#' is a wall.\nFollowed by a line which contains four integers: <b>sx</b>, <b>sy</b>, <b>ex</b>, <b>ey</b>. (<b>sx</b>, <b>sy</b>) means that Edison is standing on row <b>sx</b> and column <b>sy</b> as his starting cell, (<b>ex</b>, <b>ey</b>) is the exit of the maze. (<b>sx</b>, <b>sy</b>) is guaranteed to be at one of the 4 corners of the maze, and Edison can only touch the wall on 4 adjacent cells(not 8) initially. (<b>ex</b>, <b>ey</b>) can be anywhere in the maze. Note that the top-left corner is at position (1,1).\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output a line containing \"Case #x: y\", where x is the case number (starting from 1) and y is \"Edison ran out of energy.\" (without the quotes) if Edison can't reach the exit of the maze in at most 10,000 steps, otherwise y should be the number of steps followed by another line which contains y characters to describe the path (each character should be E for east, S for south, W for west or N for north). There is no character to represent the turning around. We don't care about the turning around steps, please only output the path of how Edison will cross the maze.\n</p>\n\n<h3>Limits</h3>\nTime limit: 30 seconds per test set.<br>\nMemory limit: 1 GB.<br/>\n1 &le; <b>T</b> &le; 30.<br>\n1 &le; <b>sx</b>, <b>sy</b>, <b>ex</b>, <b>ey</b> &le; <b>N</b>.<br>\nThe starting cell and the exit of the maze will always be an empty cell. And the starting cell and the exit of the maze won't be the same.<br>\n<h4>Test set 1 - Visible</h4>\n<p>\n2 &le; <b>N</b> &le; 10.<br>\n</p>\n\n<h4>Test set 2 - Hidden</h4>\n<p>\n2 &le; <b>N</b> &le; 100.<br>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2uE-1DKca47iQ7cnBgmtYLVyRb76GZ6DnoQW6GTA6SszkerEoWzEVzDCR-z_Oaf-HZBiEBxyWYtcrELtsAcbRZYe7Pt5B_m5EjxIFrWg/cross_the_maze_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n2\n.#\n#.\n1 1 2 2\n5\n.##.#\n.....\n...#.\n.###.\n...#.\n1 1 5 3\n3\n...\n.#.\n...\n1 1 3 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0n5kTmkO7gAY5OleITms2J9VnIjbGgLZIsFCjLkozT4O4kqYZc1sRvDt4loyK2_CNZrHCic_qyZXvUnQQcqtAGR-AmIeiuBuTVA-nw1lk/cross_the_maze_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: Edison ran out of energy.\nCase #2: 22\nSEEENSESSSNNNWWSWWSSEE\nCase #3: 4\nEESS</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\nNote: <br>\nIn the 2nd test case after moving 1 cell down from his starting cell, Edison will still be able to lean on the wall at the cell (1,2) by his left hand. <br>\nIn the third test case, due to Edison can't touch the wall at cell (2,2) initially, so he has to go east in his first step.\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":13}],"title":"Cross the maze","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"This is a very easy problem, the main examination point is to test the students whether they know how to split string, convert string into number.\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0fTaV7EHN_aRfdK37Q3lR5-wIW_MbjzmVxaVJ-ajOQebbFuohxlcG2lX7JcEuT-h4qcQ78KBBi/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000434813","statement":"<h3>Problem</h3>\n<p>\nDo you know how to read the phone numbers in English? Now let me tell you.\n</p>\n<p>\nFor example, In China, the phone numbers are 11 digits, like: 15012233444. Someone divides the numbers into 3-4-4 format, i.e. 150 1223 3444. While someone divides the numbers into 3-3-5 format, i.e. 150 122 33444. Different formats lead to different ways to read these numbers:\n</p>\n<p>\n150 1223 3444 reads one five zero one double two three three triple four.\n</p>\n<p>\n150 122 33444 reads one five zero one double two double three triple four.\n</p>\n<p>\nHere comes the problem:\n</p>\n<p>\nGiven a list of phone numbers and the dividing formats, output the right ways to read these numbers.\n</p>\n<p>\nRules:\n</p>\n<p>\nSingle numbers just read them separately.\n</p>\n<p>\n2 successive numbers use double.\n</p>\n<p>\n3 successive numbers use triple.\n</p>\n<p>\n4 successive numbers use quadruple.\n</p>\n<p>\n5 successive numbers use quintuple.\n</p>\n<p>\n6 successive numbers use sextuple.\n</p>\n<p>\n7 successive numbers use septuple.\n</p>\n<p>\n8 successive numbers use octuple.\n</p>\n<p>\n9 successive numbers use nonuple.\n</p>\n<p>\n10 successive numbers use decuple.\n</p>\n<p>\nMore than 10 successive numbers read them all separately.\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>.  <b>T</b> lines|test cases follow.  Each line contains a phone number <b>N</b> and the dividing format <b>F</b>, one or more positive integers separated by dashes (-), without leading zeros and whose sum always equals the number of digits in the phone number.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the case number (starting from 1) and y is the reading sentence in English whose words are separated by a space.\n</p>\n\n<h3>Limits</h3>\nTime limit: 30 seconds per test set.<br>\nMemory limit: 1GB.<br>\n<p>\n1 &le; <b>T</b> &le; 100.\n</p>\n\n<h4>Test set 1 - Visible</h4>\n<p>\n1 &le; <b>length of N</b> &le; 10.\n</p>\n\n<h4>Test set 2 - Hidden</h4>\n<p>\n1 &le; <b>length of N</b> &le; 100.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1oBizmeTqfrqVaExFWPTzjsmMN7HsUJGjO45lwdFymz-E_9UT3yeihpnrvlpp7Ox7n7DVVHpx10y7JP47b-aokNeS-8A4Ky-6NZZpOw1RJuA/read_phone_number_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n15012233444 3-4-4\n15012233444 3-3-5\n12223 2-3</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U33MIxXuoVt6UPaEXt6pnKlptrMvhDtTbY0dKT1tmXsQYmiMgkMy3ePJkWEXWf8yS5bbfVurw6e5_iL39OGKbxcu993knjOWyM3O8dVkuv42FU/read_phone_number_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: one five zero one double two three three triple four\nCase #2: one five zero one double two double three triple four\nCase #3: one two double two three</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":6},{"type":2,"type__str":"HIDDEN","value":13}],"title":"Read Phone Number","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>For each query:</p>\n<p>\nWe can consider there are edges with weight 0 between every two nodes with same color.<br/>\nThen we can run a Dijkstra algorithm to get the distance of shortest path. In that case the time complexity would be O(Q * N * log N + M) and space complexity would be O(N + M). In which N is the number of vertexes, M is the number of edges and Q is the number of query.\n</p>\n<p>\nIf we make the vertexes with same color into one single vertex, we can reduce the graph and then reduce the problem. In that case, the time complexity would be O(Q * C * log C + N + M). In which C is the number of different color.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0L0ZKMSAirCJD4sIldJLDWIUNr2ua4ssuwlVOjH1Uu3EayEZhDqkKbyxTB9AqFNYOXVTDmTrXD/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000004348df","statement":"<h3>Problem</h3>\n\n<p>\nThe enemy has invaded your spaceship, and only superior tactics will allow you to defend it! To travel around your spaceship, your soldiers will use two devices: <i>teleporters</i> and <i>turbolifts</i>.\n</p>\n<p>\nTeleporters allow your soldiers to move instantly between rooms. Every room contains a teleporter, and rooms are color-coded: if a soldier is in a room with some color, she can use the teleporter in that room to immediately move to any other room with the same color.\n</p>\n<p>\nTurbolifts allow your soldiers to move between rooms more slowly. A turbolift is like an elevator that moves in many directions. Each turbolift moves from one room to one other room, and it takes a certain amount of time to travel. Notes about turbolifts:\n<ul>\n <li>Turbolifts are not two-way: if a turbolift moves soldiers from room <code>a</code> to room <code>b</code>, the same turbolift cannot move soldiers from room <code>b</code> to room <code>a</code>, although there might be another turbolift that does that.</li>\n <li>More than one soldier can use the same turbolift, and they do not interfere with each other in any way.</li>\n</ul>\n</p>\n<p>\nYou will be given the locations and destinations of several soldiers. For each soldier, output the minimum amount of time it could take that soldier to travel from his location to his destination.\n</p>\n\n<h3>Input</h3>\n<p>The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.</p>\n<p>\nFor every test case:\n</p>\n<p>\n\nThe first line of every test case contains an integer <b>N</b>, which is the number of rooms in your spaceship. The rooms are numbered from 1 to <b>N</b>. The following <b>N</b> lines each contain a string telling the color of the rooms, from room 1 to room <b>N</b>. The strings only contain characters <code>a-z</code> (the lower-case English letters) and <code>0-9</code> (the number 0 to 9), and the length of each string will be less than or equal to 2.\n</p><p>\nThe next line in the test case is an integer <b>M</b>, which indicates the number of turbolifts in your spaceship. The following <b>M</b> lines each contain 3 space-separated integers <b>a<sub>i</sub></b>, <b>b<sub>i</sub></b>, <b>t<sub>i</sub></b>, telling us that there is a turbolift that can transport soldiers from room <b>a<sub>i</sub></b> to room <b>b<sub>i</sub></b> in <b>t<sub>i</sub></b> seconds.\n</p><p>\nThe next line in the test case contains an integer <b>S</b>, which is the number of soldiers at your command. The following <b>S</b> lines each contain two integers: the location and destination of one soldier, <b>p<sub>j</sub></b> and <b>q<sub>j</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing only the string \"Case #x:\", where x is the number of the test case (starting from 1). On the next <b>S</b> lines, output a single integer: on line <b>j</b>, the smallest number of seconds it could take for a soldier to travel from <b>p<sub>j</sub></b> to <b>q<sub>j</sub></b>. If there is no path from <b>p<sub>j</sub></b> to <b>q<sub>j</sub></b>, the integer you output should be -1.\n</p>\n\n<h3>Limits</h3>\nTime limit: 30 seconds per test set.<br>\nMemory limit: 1GB.<br>\n<p>\n1 &le; <b>S</b> &le; 100.<br/>\n1 &le; <b>a<sub>i</sub>, b<sub>i</sub></b> &le; <b>N</b>.<br/>\n0 &le; <b>t<sub>i</sub></b> &le; 1000.<br/>\n1 &le; <b>p<sub>j</sub>, q<sub>j</sub></b> &le; <b>N</b>.<br/>\n\n</p>\n\n<h3>Test set 1 - Visible</h3>\n<p>\n1 &le; <b>T</b> &le; 10.<br/>\n1 &le; <b>N</b> &le; 1000.<br/>\n0 &le; <b>M</b> &le; 3000.<br/>\n</p>\n\n<h3>Test set 2 - Hidden</h3>\n<p>\n<b>T</b> = 1.<br/>\n1 &le; <b>N</b> &le; 80000.<br/>\n0 &le; <b>M</b> &le; 3000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3mJAdpsRxHCbXOagSTNEfcmMmxxsmP85p91E4ism1w3s1XEWxYSob0eBoydgvQgT1_lcLVYb3mGxRoJNrpTxaiTgLgPyamZ8OYXHLZ-kMBzg/spaceship_defence_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3\ngl\nt3\nt3\n3\n1 2 217\n3 2 567\n1 1 21\n2\n2 1\n2 3\n4\nca\nbl\nbl\n8z\n0\n3\n1 2\n2 3\n1 1\n8\nre\nb7\nye\ngr\n0l\n0l\nye\nb7\n7\n4 1 19\n2 4 21\n2 5 317\n4 5 34\n4 7 3\n4 8 265\n8 6 71\n3\n4 3\n2 6\n1 4</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3f4O8jRsrkuhlGzpbyl6E3erYGnlmtdYlWAXXxgYjRYwjX9IBkXZfN-s7p8F5Tynkn-CbYERpxesJeiuYTueYs9W3aLmleYSCTasCJInJ773A/spaceship_defence_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1:\n-1\n0\nCase #2:\n-1\n0\n0\nCase #3:\n3\n55\n-1</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":14}],"title":"Spaceship Defence","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"If you know sorting, you must know how to solve this problem :)\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1RvCSybAEHf5Ei4VLFl56hBpUD4MJ3e1M4fAfJ5vgSuDA78CtivtSfj6KbrHyKK7CeCWjn2pMP/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000434ad6","statement":"<h3>Problem</h3>\n<p>\nAlex and Bob are brothers and they both enjoy reading very much. They have widely different tastes on books so they keep their own books separately. However, their father thinks it is good to promote exchanges if they can put their books together. Thus he has bought an one-row bookshelf for them today and put all his sons' books on it in random order. He labeled each position of the bookshelf the owner of the corresponding book ('Alex' or 'Bob').\n\n<p>\nUnfortunately, Alex and Bob went outside and didn't know what their father did. When they were back, they came to realize the problem: they usually arranged their books in their own orders, but the books seem to be in a great mess on the bookshelf now. They have to sort them right now!!\n\n<p>\nEach book has its own <i>worth</i>, which is represented by an integer. Books with odd values of worth belong to Alex and the books with even values of worth belong to Bob.  Alex has a habit of sorting his books from the left to the right in an increasing order of worths, while Bob prefers to sort his books from the left to the right in a decreasing order of worths.\n\n<p>\nAt the same time, they do not want to change the positions of the labels, so that after they have finished sorting the books according their rules, each book's owner's name should match with the label in its position. \n\n<p>\nHere comes the problem. A sequence of <b>N</b> values <b>s<sub>0</sub></b>, <b>s<sub>1</sub></b>, ..., <b>s<sub>N-1</sub></b> is given, which indicates the worths of the books from the left to the right on the bookshelf currently. Please help the brothers to find out the sequence of worths after sorting such that it satisfies the above description.\n\n<h3>Input</h3>\n<p>\nThe first line of input contains a single integer <b>T</b>, the number of test cases. Each test case starts with a line containing an integer <b>N</b>, the number of books on the bookshelf. The next line contains <b>N</b> integers separated by spaces, representing <b>s<sub>0</sub></b>, <b>s<sub>1</sub></b>, ..., <b>s<sub>N-1</sub></b>, which are the worths of the books. \n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #<b>X</b>: \", followed by <b>t<sub>0</sub></b>, <b>t<sub>1</sub></b>, ..., <b>t<sub>N-1</sub></b> in order, and separated by spaces. <b>X</b> is the test case number (starting from 1) and <b>t<sub>0</sub></b>, <b>t<sub>1</sub></b>, ..., <b>t<sub>N-1</sub></b> forms the resulting sequence of worths of the books from the left to the right.\n</p>\n\n<h3>Limits</h3>\nTime limit: 30 seconds per test set.<br>\nMemory limit: 1GB.<br>\n<p>\n1 &le; <b>T</b> &le; 30.\n</p>\n\n<h4>Test set 1 - Visible</h4>\n<p>\n1 &le; <b>N</b> &le; 100<br>\n-100 &le; <b>s<sub>i</sub></b> &le; 100\n</p>\n\n<h4>Test set 2 - Hidden</h4>\n<p>\n1 &le; <b>N</b> &le; 1000<br>\n-1000</sup> &le; <b>s<sub>i</sub></b> &le; 1000\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0SSYCoYIhmyD61qtGrXy919_bdQXEWcpLOtPpD8qFccMPemJH08Re-pXxnaq7zpVVbcAjhOupPvZw-WyZEta-DBJuHbjJi/sorting_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5\n5 2 4 3 1\n7\n-5 -12 87 2 88 20 11\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3yYQcQOTlB9Fh8B74yqn-stBxBf0DAEaKH-Cm7yYFA4mwTbmp8Jk1EshYqrLwVDpQuuGb4Lw0MxHWWAnqr9QDqR8EwOkRRWw/sorting_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1 4 2 3 5\nCase #2: -5 88 11 20 2 -12 87</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":5},{"type":2,"type__str":"HIDDEN","value":8}],"title":"Sorting","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<pre>\n         1/1\n    ______|______\n    |           |\n   1/2         2/1\n ___|___     ___|___\n |     |     |     |\n1/3   3/2   2/3   3/1\n...\n</pre>\n\n<p>\nThe path to the n-th element in the tree can be presented by the binary representation of n. For example, if n = 6, then its path can be represented by 110, meaning \"1 (root, 1/1) =&gt; 1 (go right, 2/1) =&gt; 0 (go left, 2/3)\", and we get 2/3. So to solve Q1, we at first find the binary representation of n, then goes down the tree along the path.\n</p>\n\n<p>\nTo solve Q2, we need to find the path from p/q to 1/1. To achieve this we need to continuously subtract p from q (if q &gt; p) or subtract q from p (if p &gt; q). Hence, the path can be constructed by representing these two operations by 0 and 1 respectively.\n</p>\n\n<p>\nCode list:\n</p>\n\n<pre>\nimport fractions\n\n\ndef Normalize(p, q):\n  r = fractions.Fraction(p, q)\n  return r.numerator, r.denominator\n\n\ndef FindElement(n):\n  \"\"\"Solution for Q1.\"\"\"\n  assert n &gt; 0\n  path = bin(n)[3:]\n  p = q = 1\n  for x in path:\n    if x == '0':\n      q += p\n    else:\n      p += q\n  return p, q\n\n\ndef FindPosition(p, q):\n  \"\"\"Solution for Q2.\"\"\"\n  assert p &gt; 0 and q &gt; 0\n  p, q = Normalize(p, q)\n  b = ''\n  while p != q:\n    if p &gt; q:\n      p -= q\n      b = '1' + b\n    else:\n      q -= p\n      b = '0' + b\n  b = '1' + b\n  return int(b, 2)\n</pre>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3kamdlPtvSi3FiaydHgxDE6zzPNBrg1sir6E33JvADOXSyTLs_2cWIvqouje7zzlIaxFr68Z52/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000434b3c","statement":"<h3>Problem</h3>\n<p>\nConsider an infinite complete binary tree where the root node is 1/1 and left and right childs of node p/q are p/(p+q) and (p+q)/q, respectively. This tree looks like:\n<pre>\n         1/1\n    ______|______\n    |           |\n   1/2         2/1\n ___|___     ___|___\n |     |     |     |\n1/3   3/2   2/3   3/1\n...\n</pre>\nIt is known that every positive rational number appears exactly once in this tree. A level-order traversal of the tree results in the following array: \n<pre>\n1/1, 1/2, 2/1, 1/3, 3/2, 2/3, 3/1, ...\n</pre>\n</p>\n\n<p>\nPlease solve the following two questions:\n<ol>\n<li>Find the <b>n</b>-th element of the array, where <b>n</b> starts from 1. For example, for the input 2, the correct output is 1/2.</li>\n<li>Given <b>p/q</b>, find its position in the array. As an example, the input 1/2 results in the output 2.</li>\n</ol>\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each test case consists of one line. The line contains a problem id (1 or 2) and one or two additional integers: \n<ol>\n<li>If the problem id is 1, then only one integer <b>n</b> is given, and you are expected to find the <b>n</b>-th element of the array.</li>\n<li>If the problem id is 2, then two integers <b>p</b> and <b>q</b> are given, and you are expected to find the position of <b>p/q</b> in the array.</li>\n</ol>\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case:\n<ol>\n<li>If the problem id is 1, then output one line containing \"<code>Case #x: p q</code>\", where <code>x</code> is the case number (starting from 1), and <code>p</code>, <code>q</code> are numerator and denominator of the asked array element, respectively.</li>\n<li>If the problem id is 2, then output one line containing \"<code>Case #x: n</code>\", where <code>x</code> is the case number (starting from 1), and <code>n</code> is the position of the given number.</li>\n</ol>\n</p>\n\n<h3>Limits</h3>\nTime limit: 30 seconds per test set.<br>\nMemory limit: 1GB.<br>\n<p>\n1 &le; <b>T</b> &le; 100; <b>p</b> and <b>q</b> are relatively prime.\n</p>\n\n<h4>Test set 1 - Visible</h4>\n<p>\n1 &le; <b>n</b>, <b>p</b>, <b>q</b> &le; 2<sup>16</sup>-1; <b>p</b>/<b>q</b> is an element in a tree with level number &le; 16.\n</p>\n\n<h4>Test set 2 - Hidden</h4>\n<p>\n1 &le; <b>n</b>, <b>p</b>, <b>q</b> &le; 2<sup>64</sup>-1; <b>p</b>/<b>q</b> is an element in a tree with level number &le; 64.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3rL-Llfcfey3-kR_lnS-AzXcltfmW3KD-etrSX6GjNFam6OtdVWf5D3vpAVRu3x8ARwj6EzhxzF0_XM_oyChhX9rcV1P7agmpNmY24KfiAEB22_A/rational_number_tree_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n1 2\n2 1 2\n1 5\n2 3 2</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0aIT7FZQb7VlqY0p3gnGhchKgosl06WN7Db9r_xJ94yF8D7hoXmATgp-E4xlaKZqgHyOaAa6TarSrCCaXesoD0EfAw3IAJVDasI4b_ufta_0S68yk/rational_number_tree_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1 2\nCase #2: 2\nCase #3: 3 2\nCase #4: 5</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":9},{"type":2,"type__str":"HIDDEN","value":12}],"title":"Rational Number Tree","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000434ba1","type":1,"type__str":"SPECTATOR"},"title":"Round A 2013"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
