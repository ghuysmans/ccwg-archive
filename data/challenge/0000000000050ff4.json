{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1524362400000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000050ff4","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  This Kickstart round began with <i>No Nine</i>, which was a adhoc problem with an alternate dynamic programming solution.\n  Then came <i>Sherlock and the Bit Strings</i>,which could be solved with dynamic programming.\n  Finally, we had <i>King's Circle</i>, involving a nice observation augmented by the sweep line technique.\n</p><p>\n  Thanks to everyone who participated!\n</p>\n<hr>\n<p>\n  <b>Cast</b>\n</p><p>\n  Problem A (No Nine): Written and prepared by Lin Jin.\n</p><p>\n  Problem B (Sherlock and the Bit Strings): Written by Lalit Kundu. Prepared by Lalit Kundu and Akashdeep Nain.\n</p><p>\n  Problem C (King's Circle): Written by Kevin Tran. Prepared by Kevin Tran and Lalit Kundu.\n</p><p>\n  Solutions and other problem preparation and review by Ian Tullis, Lalit Kundu, Satyaki Upadhyay, Jonathan Irvin Gunawan, Akashdeep Nain, Pi-Hsun Shih and Md Imrul Hassan.\n</p>\n</p>\n<p>\nAnalysis authors:\n</p>\n<ul>\n  <li>No Nine: Lin Jin</li>\n  <li>Sherlock and the Bit Strings: Jonathan Irvin Gunawan</li>\n  <li>King's Circle: Kevin Tran</li>\n</ul>\n","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1524351600000,"tasks":[{"analysis":"<h2>Bit String: Analysis</h2>\n<p>\n  The main challenge of finding the <b>P</b>-th lexicographically smallest valid\n  string is to count the number of valid strings given a prefix requirement\n  (i.e. the string must begin with a given prefix) and the <b>K</b> constraints\n  given in the problem. The prefix requirement is necessary since we're going to\n  fill the characters of the string one by one from the first character. Once we\n  have solved the counting problem, the original problem becomes easier.\n</p>\n<p>\n  We can loop through each of the valid characters i in lexicographically\n  increasing order (i.e. 0 and 1 in this problem) for the first position. Then\n  we count the number of valid strings with prefix i. Let's say this\n  value is X. If X &geq; <b>P</b>, we know that i is the right character\n  for the first position. Otherwise, we continue the loop and subtract X from\n  <b>P</b> until we find the right character for the first position. We keep\n  doing this for each position until the last position.\n</p>\n<p>\n  To avoid an overflow when counting the number of valid strings, we can limit\n  our computation to maxP, where maxP is the maximum value of <b>P</b> (i.e.\n  10<sup>18</sup> in this problem). In other words, whenever we find that the\n  number of valid strings would be more than maxP, we can set it to maxP.\n</p>\n<h3>Small dataset</h3>\n<p>\n  Finding the number of valid strings in the Small dataset is easier since\n  <b>A<sub>i</sub></b> = <b>B<sub>i</sub></b> in each of the constraints. It is\n  the same as saying that the <b>A<sub>i</sub></b>-th character must be\n  <b>C<sub>i</sub></b>. Therefore, the set of possible characters for each\n  position is independent of what character we choose for any other position.\n  The number of valid strings is simply 2<sup>Y</sup>, where Y is the number of\n  positions without a constraint. For example, the number of valid strings\n  without a given prefix requirement is 2<sup><b>N</b> - <b>K</b></sup>.\n</p>\n<h3>Large dataset</h3>\n<p>\n  Finding the number of valid strings in the Large dataset is trickier since\n  the set of possible characters for each position is no longer independent of\n  what character we choose for any other position.\n</p>\n<p>\n  We can solve this dataset using a dynamic programming solution. Let us define\n  a function <code>f(x, last)</code>, where <code>x</code> is a [1, <b>N</b>]\n  integer and <code>last</code> is a 15-bit (15 is the maximum possible value of\n  <b>B<sub>j</sub></b> - <b>A<sub>j</sub></b>) integer, is the number of ways\n  of:\n<ul>\n  <li> assigning <code>0</code>s and <code>1</code>s to the bit string from the\n       <code>x</code>-th position to the <b>N</b>-th position (in other words,\n       assume that the bit string has been \"filled\" until the\n       (<code>x</code> - 1)-th position),\n  <li> the last 15 characters (i.e. from (<code>x</code> - 15)-th position to\n       the (<code>x</code> - 1)-th position) are represented in\n       <code>last</code>, and\n  <li> the assignment has to satisfy all the constraints i where\n       <b>B<sub>i</sub></b> &ge; x.\n</ul>\n</p>\n<p>\n  How do we calculate <code>f(x, last)</code>? We loop over i in the list\n  [0, 1], the character that we consider putting in the <code>x</code>-th\n  position. Together with <code>last</code>, we now know what the last 16\n  characters we have placed are. Since\n  <b>B<sub>j</sub></b> - <b>A<sub>j</sub></b> &leq; 15, and using the\n  information of last 16 characters that we have placed, we can check all the\n  constraints j where <b>B<sub>j</sub></b> = x.\n</p>\n<p>\n  If at least one of these constraints is violated, then i is not a valid\n  character to be placed in on the <code>x</code>-th position. Otherwise,\n  placing in i on the <code>x</code>-th position contributes\n  <code>f(x + 1, g(last, i))</code> to <code>f(x, last)</code>, where\n  <code>g(last ,i)</code> is updating the <code>last</code> mask by ignoring the\n  first bit of <code>last</code> (since we won't need the character from the\n  (<code>x</code> - 15)-th position anymore) and appending an i bit to\n  the end.\n</p>\n<p>\n  With the prefix requirement <code>s</code>, the number of valid strings is the\n  value of <code>f(length(s) + 1, the last 15 characters of s)</code>. Since\n  there are <b>N</b> possible values for <code>x</code>, 2<sup>15</sup> possible\n  values for <code>last</code>, and each computation of <code>f(x, y)</code>\n  requires a loop for checking the constraints, this solution runs in\n  2<sup>15</sup> &times; O(<b>N</b> + <b>K</b>) time. Even though 2<sup>15</sup>\n  is a constant multiplicative factor that does not affect the big-O time of the\n  solution, it is relevant to the running time, particularly because\n  2<sup>15</sup> is much greater than the largest possible value of\n  <b>N</b> + <b>K</b>, so we include it here for clarity.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2F_2rh2IWJG06lpwIFr6-0DoLa1jcdt8YaI5kKOIq77xOrnT070Y8r3CV6wbgFlSnRvklH_A/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000005107b","statement":"<h3>Problem</h3>\n<p>\n  Sherlock and Watson are playing a game involving bit strings, i.e., strings\n  consisting only of the digits <code>0</code> and <code>1</code>.\n  Watson has challenged Sherlock to generate a bit string S of <b>N</b>\n  characters S<sub>1</sub>, S<sub>2</sub>, ..., S<sub><b>N</b></sub>. The string\n  must obey each of <b>K</b> different constraints; each of these constraints is\n  specified via three integers <b>A<sub>i</sub></b>, <b>B<sub>i</sub></b>, and\n  <b>C<sub>i</sub></b>. The number of <code>1</code>s in the substring\n  S<sub><b>A<sub>i</sub></b></sub>, S<sub><b>A<sub>i</sub></b> + 1</sub>, ...,\n  S<sub><b>B<sub>i</sub></b></sub> must be equal to <b>C<sub>i</sub></b>.\n</p><p>\n  Watson chooses the constraints in a way that guarantees that there is at least\n  one string of the right length that obeys all of the constraints. However,\n  since there could be multiple such strings, Watson wants Sherlock to choose\n  the string from this set that is <b>P</b><sup>th</sup> in lexicographic order,\n  with <b>P</b> counted starting from 1.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b>\n  test cases follow. Each test case begins with one line containing three\n  integers <b>N</b>, <b>K</b>, and <b>P</b>, as described above. Then, there are\n  <b>K</b> more lines; the i-th of these contains three integers\n  <b>A<sub>i</sub></b>, <b>B<sub>i</sub></b> and <b>C<sub>i</sub></b>,\n  representing the parameters of the i-th constraint, as described above.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the <b>P</b><sup>th</sup> lexicographically smallest bit string among all\n  possible strings following the <b>K</b> specified constraints.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1 GB.<br/>\n  1 &le; <b>N</b> &le; 100.<br/>\n  1 &le; <b>K</b> &le; 100.<br/>\n  1 &le; <b>P</b> &le; min(10<sup>18</sup>, the number of bit strings that obey\n  all of the constraints).<br/>\n  1 &le; <b>A<sub>i</sub></b> &le; <b>B<sub>i</sub></b> &le; <b>N</b> for all 1\n  &le; i &le; <b>K</b>.<br/>\n  0 &le; <b>C<sub>i</sub></b> &le; <b>N</b>,\n  for all 1 &le; i &le; <b>K</b>.<br/>\n  (<b>A<sub>i</sub></b>, <b>B<sub>i</sub></b>) &ne;\n  (<b>A<sub>j</sub></b>, <b>B<sub>j</sub></b>),\n  for all 1 &le; i &lt; j &le; <b>K</b>.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  <b>A<sub>i</sub></b> = <b>B<sub>i</sub></b>\n  for all 1 &le; i &le; <b>K</b>.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - hidden)</h4>\n<p>\n  <b>B<sub>i</sub></b> - <b>A<sub>i</sub></b> &le; 15\n  for all 1 &le; i &le; <b>K</b>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1xOkVEEw6VZ85kHgC0lHh-h_DlzXH6qNp8OMtXBykS9qB5eJtc_mnQWSjnxwnCnBn1nt17unF9BEoTogovI95tS-cRQUVnAgqTg6mL_S-CFdlbzUcfavSEAA/sherlock_and_the_bit_strings_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3 1 2\n2 2 1\n3 1 1\n2 2 0\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2BqgbaibJHPRlNzk10Jj0pBkLW0Qcv13EQwXo8OMk6TWYDawFXPrdDc7HDEUJ1vSnIIMYruJAciRYEVfl8THL9RjlbOmm3fvaJv_HSq9k1joKG0gbPX6FarAo/sherlock_and_the_bit_strings_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 011\nCase #2: 000\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, the bit strings that obey the only constraint in\n  lexicographically increasing order are [010, 011, 110, 111].\n</p><p>\n  In Sample Case #2, the bit strings that obey the only constraint in\n  lexicographically increasing order are [000, 001, 100, 101].\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U04gJiz0aaT2zxe5DEYzh8NhM5WvGEQhTxOehb-XwDUa6pObr6sDpOcgsqHOXtGVHpY-kYSMzxTAI6aFfVAVnpeOFk-SO7RgID-SxoK90Mo5tN-tM1UKQ2BGw/sherlock_and_the_bit_strings_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">1\n4 3 1\n1 2 1\n2 3 1\n3 4 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1JM2Uug550VfuHtj3J9nU3A6c8iLamA9Hkf09rAC2P1s2WREu4J0YujDEibD9c-AQwl6m63NpElNR0ny_G2wbZWQyf6zH21tYgO0QyvT8ylyzC_zuLFOcfN-M/sherlock_and_the_bit_strings_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 0101\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n  In Sample Case #1, the bit strings that obey the given constraints in\n  lexicographically increasing order are [0101, 1010].\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":11},{"type":2,"type__str":"HIDDEN","value":26}],"title":"Sherlock and the Bit Strings","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Let's set the story aside and consider the underlying geometry problem: given\n  <b>N</b> points in the 2D plane, how many triplets of points have an\n  axis-aligned square that goes through them?\n</p><p>\n  It is natural to first tackle this subproblem: given three points in the 2D\n  plane, is there an axis-aligned square that goes through those three points?\n</p><p>\n  After trying different sets of points, it is not too difficult to come up\n  with the key restriction. Consider the axis-aligned bounding box (that is, the\n  rectangle which contains all the points which is as small as possible) for the\n  three points. An axis-aligned square that goes through the three points exists\n  if and only if all three points lie somewhere on the edges of the bounding box\n  (see below).\n\n  <div style=\"width: 600px;height: 600px\">\n    <svg version=\"1.1\" viewBox=\"0.0 0.0 960.0 720.0\" fill=\"none\" stroke=\"none\" stroke-linecap=\"square\" stroke-miterlimit=\"10\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\"><clipPath id=\"p.0\"><path d=\"m0 0l960.0 0l0 720.0l-960.0 0l0 -720.0z\" clip-rule=\"nonzero\"/></clipPath><g clip-path=\"url(#p.0)\"><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m0 0l960.0 0l0 720.0l-960.0 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m133.20604 419.43307l225.13387 0l0 161.6063l-225.13387 0z\" fill-rule=\"evenodd\"/><path stroke=\"#ff0000\" stroke-width=\"8.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m133.20604 419.43307l225.13387 0l0 161.6063l-225.13387 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m116.47113 418.87402l0 0c0 -8.923523 7.2339478 -16.157501 16.157486 -16.157501l0 0c4.2852173 0 8.394943 1.702301 11.425064 4.732422c3.0301056 3.0301208 4.7324066 7.1398315 4.7324066 11.425079l0 0c0 8.923523 -7.2339478 16.15747 -16.15747 16.15747l0 0c-8.923538 0 -16.157486 -7.2339478 -16.157486 -16.15747z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m116.47113 418.87402l0 0c0 -8.923523 7.2339478 -16.157501 16.157486 -16.157501l0 0c4.2852173 0 8.394943 1.702301 11.425064 4.732422c3.0301056 3.0301208 4.7324066 7.1398315 4.7324066 11.425079l0 0c0 8.923523 -7.2339478 16.15747 -16.15747 16.15747l0 0c-8.923538 0 -16.157486 -7.2339478 -16.157486 -16.15747z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m342.00656 500.2362l0 0c0 -8.923523 7.2339478 -16.15747 16.15747 -16.15747l0 0c4.285248 0 8.3949585 1.702301 11.425079 4.732422c3.0301208 3.0301208 4.732422 7.1398315 4.732422 11.425049l0 0c0 8.923553 -7.2339478 16.15747 -16.157501 16.15747l0 0c-8.923523 0 -16.15747 -7.233917 -16.15747 -16.15747z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m342.00656 500.2362l0 0c0 -8.923523 7.2339478 -16.15747 16.15747 -16.15747l0 0c4.285248 0 8.3949585 1.702301 11.425079 4.732422c3.0301208 3.0301208 4.732422 7.1398315 4.732422 11.425049l0 0c0 8.923553 -7.2339478 16.15747 -16.157501 16.15747l0 0c-8.923523 0 -16.15747 -7.233917 -16.15747 -16.15747z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m240.98032 579.7664l0 0c0 -8.923523 7.2339478 -16.15747 16.15747 -16.15747l0 0c4.285248 0 8.3949585 1.7022705 11.425079 4.732422c3.0301208 3.0300903 4.732422 7.1398315 4.732422 11.425049l0 0c0 8.923523 -7.2339478 16.15747 -16.157501 16.15747l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.15747z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m240.98032 579.7664l0 0c0 -8.923523 7.2339478 -16.15747 16.15747 -16.15747l0 0c4.285248 0 8.3949585 1.7022705 11.425079 4.732422c3.0301208 3.0300903 4.732422 7.1398315 4.732422 11.425049l0 0c0 8.923523 -7.2339478 16.15747 -16.157501 16.15747l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.15747z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m546.52625 420.3491l338.83466 0l0 161.6063l-338.83466 0z\" fill-rule=\"evenodd\"/><path stroke=\"#ff0000\" stroke-width=\"8.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m546.52625 420.3491l338.83466 0l0 161.6063l-338.83466 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m529.80707 580.68243l0 0c0 -8.923523 7.2339478 -16.15747 16.15747 -16.15747l0 0c4.2852783 0 8.3949585 1.7022705 11.42511 4.732361c3.0300903 3.0301514 4.732422 7.1398315 4.732422 11.42511l0 0c0 8.923523 -7.2339478 16.15747 -16.157532 16.15747l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.15747z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m529.80707 580.68243l0 0c0 -8.923523 7.2339478 -16.15747 16.15747 -16.15747l0 0c4.2852783 0 8.3949585 1.7022705 11.42511 4.732361c3.0300903 3.0301514 4.732422 7.1398315 4.732422 11.42511l0 0c0 8.923523 -7.2339478 16.15747 -16.157532 16.15747l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.15747z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m783.2087 524.55646l0 0c0 -8.923584 7.2339478 -16.157501 16.15747 -16.157501l0 0c4.2852173 0 8.3949585 1.702301 11.425049 4.7323914c3.0301514 3.0301514 4.732422 7.1398315 4.732422 11.42511l0 0c0 8.923523 -7.2339478 16.15747 -16.15747 16.15747l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.15747z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m783.2087 524.55646l0 0c0 -8.923584 7.2339478 -16.157501 16.15747 -16.157501l0 0c4.2852173 0 8.3949585 1.702301 11.425049 4.7323914c3.0301514 3.0301514 4.732422 7.1398315 4.732422 11.42511l0 0c0 8.923523 -7.2339478 16.15747 -16.15747 16.15747l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.15747z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m869.0276 419.79004l0 0c0 -8.923553 7.2339478 -16.157501 16.15747 -16.157501l0 0c4.2852173 0 8.3949585 1.702301 11.425049 4.732422c3.0300903 3.0301208 4.732422 7.1398315 4.732422 11.425079l0 0c0 8.923523 -7.2339478 16.15747 -16.15747 16.15747l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.15747z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m869.0276 419.79004l0 0c0 -8.923553 7.2339478 -16.157501 16.15747 -16.157501l0 0c4.2852173 0 8.3949585 1.702301 11.425049 4.732422c3.0300903 3.0301208 4.732422 7.1398315 4.732422 11.425079l0 0c0 8.923523 -7.2339478 16.15747 -16.15747 16.15747l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.15747z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m155.22209 627.2677l180.34645 0l0 47.93701l-180.34645 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m189.72375 649.89087l1.65625 -0.140625q0.125 1.0 0.546875 1.640625q0.4375 0.640625 1.34375 1.046875q0.921875 0.390625 2.0625 0.390625q1.0 0 1.78125 -0.296875q0.78125 -0.296875 1.15625 -0.8125q0.375 -0.53125 0.375 -1.15625q0 -0.625 -0.375 -1.09375q-0.359375 -0.46875 -1.1875 -0.796875q-0.546875 -0.203125 -2.390625 -0.640625q-1.828125 -0.453125 -2.5625 -0.84375q-0.96875 -0.5 -1.4375 -1.234375q-0.46875 -0.75 -0.46875 -1.671875q0 -1.0 0.578125 -1.875q0.578125 -0.890625 1.671875 -1.34375q1.109375 -0.453125 2.453125 -0.453125q1.484375 0 2.609375 0.484375q1.140625 0.46875 1.75 1.40625q0.609375 0.921875 0.65625 2.09375l-1.6875 0.125q-0.140625 -1.265625 -0.9375 -1.90625q-0.78125 -0.65625 -2.3125 -0.65625q-1.609375 0 -2.34375 0.59375q-0.734375 0.59375 -0.734375 1.421875q0 0.71875 0.53125 1.171875q0.5 0.46875 2.65625 0.96875q2.15625 0.484375 2.953125 0.84375q1.171875 0.53125 1.71875 1.359375q0.5625 0.828125 0.5625 1.90625q0 1.0625 -0.609375 2.015625q-0.609375 0.9375 -1.75 1.46875q-1.140625 0.515625 -2.578125 0.515625q-1.8125 0 -3.046875 -0.53125q-1.21875 -0.53125 -1.921875 -1.59375q-0.6875 -1.0625 -0.71875 -2.40625zm18.990448 8.0l0 -4.734375q-0.375 0.546875 -1.0625 0.90625q-0.6875 0.34375 -1.46875 0.34375q-1.71875 0 -2.96875 -1.375q-1.234375 -1.375 -1.234375 -3.765625q0 -1.46875 0.5 -2.625q0.515625 -1.15625 1.46875 -1.75q0.96875 -0.59375 2.109375 -0.59375q1.796875 0 2.828125 1.515625l0 -1.296875l1.46875 0l0 13.375l-1.640625 0zm-5.046875 -8.5625q0 1.859375 0.78125 2.796875q0.78125 0.9375 1.875 0.9375q1.046875 0 1.796875 -0.890625q0.765625 -0.890625 0.765625 -2.703125q0 -1.9375 -0.796875 -2.90625q-0.796875 -0.96875 -1.875 -0.96875q-1.0625 0 -1.8125 0.90625q-0.734375 0.90625 -0.734375 2.828125zm15.594467 4.859375l0 -1.421875q-1.125 1.640625 -3.0625 1.640625q-0.859375 0 -1.609375 -0.328125q-0.734375 -0.328125 -1.09375 -0.828125q-0.359375 -0.5 -0.5 -1.21875q-0.109375 -0.46875 -0.109375 -1.53125l0 -5.984375l1.640625 0l0 5.359375q0 1.28125 0.109375 1.734375q0.15625 0.640625 0.65625 1.015625q0.5 0.375 1.234375 0.375q0.734375 0 1.375 -0.375q0.65625 -0.390625 0.921875 -1.03125q0.265625 -0.65625 0.265625 -1.890625l0 -5.1875l1.640625 0l0 9.671875l-1.46875 0zm10.360092 -1.1875q-0.921875 0.765625 -1.765625 1.09375q-0.828125 0.3125 -1.796875 0.3125q-1.59375 0 -2.453125 -0.78125q-0.859375 -0.78125 -0.859375 -1.984375q0 -0.71875 0.328125 -1.296875q0.328125 -0.59375 0.84375 -0.9375q0.53125 -0.359375 1.1875 -0.546875q0.46875 -0.125 1.453125 -0.25q1.984375 -0.234375 2.921875 -0.5625q0.015625 -0.34375 0.015625 -0.421875q0 -1.0 -0.46875 -1.421875q-0.625 -0.546875 -1.875 -0.546875q-1.15625 0 -1.703125 0.40625q-0.546875 0.40625 -0.8125 1.421875l-1.609375 -0.21875q0.21875 -1.015625 0.71875 -1.640625q0.5 -0.640625 1.453125 -0.984375q0.953125 -0.34375 2.1875 -0.34375q1.25 0 2.015625 0.296875q0.78125 0.28125 1.140625 0.734375q0.375 0.4375 0.515625 1.109375q0.078125 0.421875 0.078125 1.515625l0 2.1875q0 2.28125 0.109375 2.890625q0.109375 0.59375 0.40625 1.15625l-1.703125 0q-0.265625 -0.515625 -0.328125 -1.1875zm-0.140625 -3.671875q-0.890625 0.375 -2.671875 0.625q-1.015625 0.140625 -1.4375 0.328125q-0.421875 0.1875 -0.65625 0.53125q-0.21875 0.34375 -0.21875 0.78125q0 0.65625 0.5 1.09375q0.5 0.4375 1.453125 0.4375q0.9375 0 1.671875 -0.40625q0.75 -0.421875 1.09375 -1.140625q0.265625 -0.5625 0.265625 -1.640625l0 -0.609375zm4.188217 4.859375l0 -9.671875l1.46875 0l0 1.46875q0.5625 -1.03125 1.03125 -1.359375q0.484375 -0.328125 1.0625 -0.328125q0.828125 0 1.6875 0.53125l-0.5625 1.515625q-0.609375 -0.359375 -1.203125 -0.359375q-0.546875 0 -0.96875 0.328125q-0.421875 0.328125 -0.609375 0.890625q-0.28125 0.875 -0.28125 1.921875l0 5.0625l-1.625 0zm12.853302 -3.109375l1.6875 0.203125q-0.40625 1.484375 -1.484375 2.3125q-1.078125 0.8125 -2.765625 0.8125q-2.125 0 -3.375 -1.296875q-1.234375 -1.3125 -1.234375 -3.671875q0 -2.453125 1.25 -3.796875q1.265625 -1.34375 3.265625 -1.34375q1.9375 0 3.15625 1.328125q1.234375 1.3125 1.234375 3.703125q0 0.15625 0 0.4375l-7.21875 0q0.09375 1.59375 0.90625 2.453125q0.8125 0.84375 2.015625 0.84375q0.90625 0 1.546875 -0.46875q0.640625 -0.484375 1.015625 -1.515625zm-5.390625 -2.65625l5.40625 0q-0.109375 -1.21875 -0.625 -1.828125q-0.78125 -0.953125 -2.03125 -0.953125q-1.125 0 -1.90625 0.765625q-0.765625 0.75 -0.84375 2.015625zm20.94963 2.65625l1.6875 0.203125q-0.40625 1.484375 -1.484375 2.3125q-1.078125 0.8125 -2.765625 0.8125q-2.125 0 -3.375 -1.296875q-1.2343597 -1.3125 -1.2343597 -3.671875q0 -2.453125 1.2499847 -3.796875q1.265625 -1.34375 3.265625 -1.34375q1.9375 0 3.15625 1.328125q1.234375 1.3125 1.234375 3.703125q0 0.15625 0 0.4375l-7.21875 0q0.09375 1.59375 0.90625 2.453125q0.8125 0.84375 2.015625 0.84375q0.90625 0 1.546875 -0.46875q0.640625 -0.484375 1.015625 -1.515625zm-5.390625 -2.65625l5.40625 0q-0.109375 -1.21875 -0.625 -1.828125q-0.78125 -0.953125 -2.03125 -0.953125q-1.125 0 -1.90625 0.765625q-0.765625 0.75 -0.84375 2.015625zm8.047607 5.765625l3.53125 -5.03125l-3.265625 -4.640625l2.046875 0l1.484375 2.265625q0.421875 0.640625 0.671875 1.078125q0.40625 -0.59375 0.734375 -1.0625l1.640625 -2.28125l1.953125 0l-3.34375 4.546875l3.59375 5.125l-2.015625 0l-1.984375 -3.0l-0.515625 -0.8125l-2.546875 3.8125l-1.984375 0zm10.421875 -11.46875l0 -1.890625l1.640625 0l0 1.890625l-1.640625 0zm0 11.46875l0 -9.671875l1.640625 0l0 9.671875l-1.640625 0zm3.488556 -2.890625l1.625 -0.25q0.125 0.96875 0.75 1.5q0.625 0.515625 1.75 0.515625q1.1250305 0 1.6719055 -0.453125q0.546875 -0.46875 0.546875 -1.09375q0 -0.546875 -0.484375 -0.875q-0.328125 -0.21875 -1.6719055 -0.546875q-1.8125 -0.46875 -2.515625 -0.796875q-0.6875 -0.328125 -1.046875 -0.90625q-0.359375 -0.59375 -0.359375 -1.3125q0 -0.640625 0.296875 -1.1875q0.296875 -0.5625 0.8125 -0.921875q0.375 -0.28125 1.03125 -0.46875q0.671875 -0.203125 1.421875 -0.203125q1.1406555 0 2.0000305 0.328125q0.859375 0.328125 1.265625 0.890625q0.421875 0.5625 0.578125 1.5l-1.609375 0.21875q-0.109375 -0.75 -0.640625 -1.171875q-0.515625 -0.421875 -1.4687805 -0.421875q-1.140625 0 -1.625 0.375q-0.46875 0.375 -0.46875 0.875q0 0.3125 0.1875 0.578125q0.203125 0.265625 0.640625 0.4375q0.234375 0.09375 1.4375 0.421875q1.7500305 0.453125 2.4375305 0.75q0.6875 0.296875 1.078125 0.859375q0.390625 0.5625 0.390625 1.40625q0 0.828125 -0.484375 1.546875q-0.46875 0.71875 -1.375 1.125q-0.90625 0.390625 -2.0469055 0.390625q-1.875 0 -2.875 -0.78125q-0.984375 -0.78125 -1.25 -2.328125zm13.5625305 1.421875l0.234375 1.453125q-0.6875 0.140625 -1.234375 0.140625q-0.890625 0 -1.390625 -0.28125q-0.484375 -0.28125 -0.6875 -0.734375q-0.203125 -0.46875 -0.203125 -1.9375l0 -5.578125l-1.203125 0l0 -1.265625l1.203125 0l0 -2.390625l1.625 -0.984375l0 3.375l1.65625 0l0 1.265625l-1.65625 0l0 5.671875q0 0.6875 0.078125 0.890625q0.09375 0.203125 0.28125 0.328125q0.203125 0.109375 0.578125 0.109375q0.265625 0 0.71875 -0.0625zm0.9489136 -1.421875l1.625 -0.25q0.125 0.96875 0.75 1.5q0.625 0.515625 1.75 0.515625q1.125 0 1.671875 -0.453125q0.546875 -0.46875 0.546875 -1.09375q0 -0.546875 -0.484375 -0.875q-0.328125 -0.21875 -1.671875 -0.546875q-1.8125 -0.46875 -2.515625 -0.796875q-0.6875 -0.328125 -1.046875 -0.90625q-0.359375 -0.59375 -0.359375 -1.3125q0 -0.640625 0.296875 -1.1875q0.296875 -0.5625 0.8125 -0.921875q0.375 -0.28125 1.03125 -0.46875q0.671875 -0.203125 1.421875 -0.203125q1.140625 0 2.0 0.328125q0.859375 0.328125 1.265625 0.890625q0.421875 0.5625 0.578125 1.5l-1.609375 0.21875q-0.109375 -0.75 -0.640625 -1.171875q-0.515625 -0.421875 -1.46875 -0.421875q-1.140625 0 -1.625 0.375q-0.46875 0.375 -0.46875 0.875q0 0.3125 0.1875 0.578125q0.203125 0.265625 0.640625 0.4375q0.234375 0.09375 1.4375 0.421875q1.75 0.453125 2.4375 0.75q0.6875 0.296875 1.078125 0.859375q0.390625 0.5625 0.390625 1.40625q0 0.828125 -0.484375 1.546875q-0.46875 0.71875 -1.375 1.125q-0.90625 0.390625 -2.046875 0.390625q-1.875 0 -2.875 -0.78125q-0.984375 -0.78125 -1.25 -2.328125z\" fill-rule=\"nonzero\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m583.54315 627.2677l264.063 0l0 47.93701l-264.063 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m626.18884 649.89087l1.65625 -0.140625q0.125 1.0 0.546875 1.640625q0.4375 0.640625 1.34375 1.046875q0.921875 0.390625 2.0625 0.390625q1.0 0 1.78125 -0.296875q0.78125 -0.296875 1.15625 -0.8125q0.375 -0.53125 0.375 -1.15625q0 -0.625 -0.375 -1.09375q-0.359375 -0.46875 -1.1875 -0.796875q-0.546875 -0.203125 -2.390625 -0.640625q-1.828125 -0.453125 -2.5625 -0.84375q-0.96875 -0.5 -1.4375 -1.234375q-0.46875 -0.75 -0.46875 -1.671875q0 -1.0 0.578125 -1.875q0.578125 -0.890625 1.671875 -1.34375q1.109375 -0.453125 2.453125 -0.453125q1.484375 0 2.609375 0.484375q1.140625 0.46875 1.75 1.40625q0.609375 0.921875 0.65625 2.09375l-1.6875 0.125q-0.140625 -1.265625 -0.9375 -1.90625q-0.78125 -0.65625 -2.3125 -0.65625q-1.609375 0 -2.34375 0.59375q-0.734375 0.59375 -0.734375 1.421875q0 0.71875 0.53125 1.171875q0.5 0.46875 2.65625 0.96875q2.15625 0.484375 2.953125 0.84375q1.171875 0.53125 1.71875 1.359375q0.5625 0.828125 0.5625 1.90625q0 1.0625 -0.609375 2.015625q-0.609375 0.9375 -1.75 1.46875q-1.140625 0.515625 -2.578125 0.515625q-1.8125 0 -3.046875 -0.53125q-1.21875 -0.53125 -1.921875 -1.59375q-0.6875 -1.0625 -0.71875 -2.40625zm18.990417 8.0l0 -4.734375q-0.375 0.546875 -1.0625 0.90625q-0.6875 0.34375 -1.46875 0.34375q-1.71875 0 -2.96875 -1.375q-1.234375 -1.375 -1.234375 -3.765625q0 -1.46875 0.5 -2.625q0.515625 -1.15625 1.46875 -1.75q0.96875 -0.59375 2.109375 -0.59375q1.796875 0 2.828125 1.515625l0 -1.296875l1.46875 0l0 13.375l-1.640625 0zm-5.046875 -8.5625q0 1.859375 0.78125 2.796875q0.78125 0.9375 1.875 0.9375q1.046875 0 1.796875 -0.890625q0.765625 -0.890625 0.765625 -2.703125q0 -1.9375 -0.796875 -2.90625q-0.796875 -0.96875 -1.875 -0.96875q-1.0625 0 -1.8125 0.90625q-0.734375 0.90625 -0.734375 2.828125zm15.594482 4.859375l0 -1.421875q-1.125 1.640625 -3.0625 1.640625q-0.859375 0 -1.609375 -0.328125q-0.734375 -0.328125 -1.09375 -0.828125q-0.359375 -0.5 -0.5 -1.21875q-0.109375 -0.46875 -0.109375 -1.53125l0 -5.984375l1.640625 0l0 5.359375q0 1.28125 0.109375 1.734375q0.15625 0.640625 0.65625 1.015625q0.5 0.375 1.234375 0.375q0.734375 0 1.375 -0.375q0.65625 -0.390625 0.921875 -1.03125q0.265625 -0.65625 0.265625 -1.890625l0 -5.1875l1.640625 0l0 9.671875l-1.46875 0zm10.360107 -1.1875q-0.921875 0.765625 -1.765625 1.09375q-0.828125 0.3125 -1.796875 0.3125q-1.59375 0 -2.453125 -0.78125q-0.859375 -0.78125 -0.859375 -1.984375q0 -0.71875 0.328125 -1.296875q0.328125 -0.59375 0.84375 -0.9375q0.53125 -0.359375 1.1875 -0.546875q0.46875 -0.125 1.453125 -0.25q1.984375 -0.234375 2.921875 -0.5625q0.015625 -0.34375 0.015625 -0.421875q0 -1.0 -0.46875 -1.421875q-0.625 -0.546875 -1.875 -0.546875q-1.15625 0 -1.703125 0.40625q-0.546875 0.40625 -0.8125 1.421875l-1.609375 -0.21875q0.21875 -1.015625 0.71875 -1.640625q0.5 -0.640625 1.453125 -0.984375q0.953125 -0.34375 2.1875 -0.34375q1.25 0 2.015625 0.296875q0.78125 0.28125 1.140625 0.734375q0.375 0.4375 0.515625 1.109375q0.078125 0.421875 0.078125 1.515625l0 2.1875q0 2.28125 0.109375 2.890625q0.109375 0.59375 0.40625 1.15625l-1.703125 0q-0.265625 -0.515625 -0.328125 -1.1875zm-0.140625 -3.671875q-0.890625 0.375 -2.671875 0.625q-1.015625 0.140625 -1.4375 0.328125q-0.421875 0.1875 -0.65625 0.53125q-0.21875 0.34375 -0.21875 0.78125q0 0.65625 0.5 1.09375q0.5 0.4375 1.453125 0.4375q0.9375 0 1.671875 -0.40625q0.75 -0.421875 1.09375 -1.140625q0.265625 -0.5625 0.265625 -1.640625l0 -0.609375zm4.1882324 4.859375l0 -9.671875l1.46875 0l0 1.46875q0.5625 -1.03125 1.03125 -1.359375q0.484375 -0.328125 1.0625 -0.328125q0.828125 0 1.6875 0.53125l-0.5625 1.515625q-0.609375 -0.359375 -1.203125 -0.359375q-0.546875 0 -0.96875 0.328125q-0.421875 0.328125 -0.609375 0.890625q-0.28125 0.875 -0.28125 1.921875l0 5.0625l-1.625 0zm12.8532715 -3.109375l1.6875 0.203125q-0.40625 1.484375 -1.484375 2.3125q-1.078125 0.8125 -2.765625 0.8125q-2.125 0 -3.375 -1.296875q-1.234375 -1.3125 -1.234375 -3.671875q0 -2.453125 1.25 -3.796875q1.265625 -1.34375 3.265625 -1.34375q1.9375 0 3.15625 1.328125q1.234375 1.3125 1.234375 3.703125q0 0.15625 0 0.4375l-7.21875 0q0.09375 1.59375 0.90625 2.453125q0.8125 0.84375 2.015625 0.84375q0.90625 0 1.546875 -0.46875q0.640625 -0.484375 1.015625 -1.515625zm-5.390625 -2.65625l5.40625 0q-0.109375 -1.21875 -0.625 -1.828125q-0.78125 -0.953125 -2.03125 -0.953125q-1.125 0 -1.90625 0.765625q-0.765625 0.75 -0.84375 2.015625zm20.590271 5.765625l0 -1.21875q-0.90625 1.4375 -2.703125 1.4375q-1.15625 0 -2.125 -0.640625q-0.96875 -0.640625 -1.5 -1.78125q-0.53125 -1.140625 -0.53125 -2.625q0 -1.453125 0.484375 -2.625q0.484375 -1.1875 1.4375 -1.8125q0.96875 -0.625 2.171875 -0.625q0.875 0 1.546875 0.375q0.6875 0.359375 1.109375 0.953125l0 -4.796875l1.640625 0l0 13.359375l-1.53125 0zm-5.171875 -4.828125q0 1.859375 0.78125 2.78125q0.78125 0.921875 1.84375 0.921875q1.078125 0 1.828125 -0.875q0.75 -0.890625 0.75 -2.6875q0 -1.984375 -0.765625 -2.90625q-0.765625 -0.9375 -1.890625 -0.9375q-1.078125 0 -1.8125 0.890625q-0.734375 0.890625 -0.734375 2.8125zm8.672607 -0.015625q0 -2.6875 1.484375 -3.96875q1.25 -1.078125 3.046875 -1.078125q2.0 0 3.265625 1.3125q1.265625 1.296875 1.265625 3.609375q0 1.859375 -0.5625 2.9375q-0.5625 1.0625 -1.640625 1.65625q-1.0625 0.59375 -2.328125 0.59375q-2.03125 0 -3.28125 -1.296875q-1.25 -1.3125 -1.25 -3.765625zm1.6875 0q0 1.859375 0.796875 2.796875q0.8125 0.921875 2.046875 0.921875q1.21875 0 2.03125 -0.921875q0.8125 -0.9375 0.8125 -2.84375q0 -1.796875 -0.8125 -2.71875q-0.8125 -0.921875 -2.03125 -0.921875q-1.234375 0 -2.046875 0.921875q-0.796875 0.90625 -0.796875 2.765625zm15.922607 1.734375l1.6875 0.203125q-0.40625 1.484375 -1.484375 2.3125q-1.078125 0.8125 -2.765625 0.8125q-2.125 0 -3.375 -1.296875q-1.234375 -1.3125 -1.234375 -3.671875q0 -2.453125 1.25 -3.796875q1.265625 -1.34375 3.265625 -1.34375q1.9375 0 3.15625 1.328125q1.234375 1.3125 1.234375 3.703125q0 0.15625 0 0.4375l-7.21875 0q0.09375 1.59375 0.90625 2.453125q0.8125 0.84375 2.015625 0.84375q0.90625 0 1.546875 -0.46875q0.640625 -0.484375 1.015625 -1.515625zm-5.390625 -2.65625l5.40625 0q-0.109375 -1.21875 -0.625 -1.828125q-0.78125 -0.953125 -2.03125 -0.953125q-1.125 0 -1.90625 0.765625q-0.765625 0.75 -0.84375 2.015625zm8.485046 2.875l1.625 -0.25q0.125 0.96875 0.75 1.5q0.625 0.515625 1.75 0.515625q1.125 0 1.671875 -0.453125q0.546875 -0.46875 0.546875 -1.09375q0 -0.546875 -0.484375 -0.875q-0.328125 -0.21875 -1.671875 -0.546875q-1.8125 -0.46875 -2.515625 -0.796875q-0.6875 -0.328125 -1.046875 -0.90625q-0.359375 -0.59375 -0.359375 -1.3125q0 -0.640625 0.296875 -1.1875q0.296875 -0.5625 0.8125 -0.921875q0.375 -0.28125 1.03125 -0.46875q0.671875 -0.203125 1.421875 -0.203125q1.140625 0 2.0 0.328125q0.859375 0.328125 1.265625 0.890625q0.421875 0.5625 0.578125 1.5l-1.609375 0.21875q-0.109375 -0.75 -0.640625 -1.171875q-0.515625 -0.421875 -1.46875 -0.421875q-1.140625 0 -1.625 0.375q-0.46875 0.375 -0.46875 0.875q0 0.3125 0.1875 0.578125q0.203125 0.265625 0.640625 0.4375q0.234375 0.09375 1.4375 0.421875q1.75 0.453125 2.4375 0.75q0.6875 0.296875 1.078125 0.859375q0.390625 0.5625 0.390625 1.40625q0 0.828125 -0.484375 1.546875q-0.46875 0.71875 -1.375 1.125q-0.90625 0.390625 -2.046875 0.390625q-1.875 0 -2.875 -0.78125q-0.984375 -0.78125 -1.25 -2.328125zm15.167725 2.890625l0 -9.671875l1.46875 0l0 1.375q1.0625 -1.59375 3.078125 -1.59375q0.875 0 1.609375 0.3125q0.734375 0.3125 1.09375 0.828125q0.375 0.5 0.515625 1.203125q0.09375 0.453125 0.09375 1.59375l0 5.953125l-1.640625 0l0 -5.890625q0 -1.0 -0.203125 -1.484375q-0.1875 -0.5 -0.671875 -0.796875q-0.484375 -0.296875 -1.140625 -0.296875q-1.046875 0 -1.8125 0.671875q-0.75 0.65625 -0.75 2.515625l0 5.28125l-1.640625 0zm9.766296 -4.84375q0 -2.6875 1.484375 -3.96875q1.25 -1.078125 3.046875 -1.078125q2.0 0 3.265625 1.3125q1.265625 1.296875 1.265625 3.609375q0 1.859375 -0.5625 2.9375q-0.5625 1.0625 -1.640625 1.65625q-1.0625 0.59375 -2.328125 0.59375q-2.03125 0 -3.28125 -1.296875q-1.25 -1.3125 -1.25 -3.765625zm1.6875 0q0 1.859375 0.796875 2.796875q0.8125 0.921875 2.046875 0.921875q1.21875 0 2.03125 -0.921875q0.8125 -0.9375 0.8125 -2.84375q0 -1.796875 -0.8125 -2.71875q-0.8125 -0.921875 -2.03125 -0.921875q-1.234375 0 -2.046875 0.921875q-0.796875 0.90625 -0.796875 2.765625zm12.875732 3.375l0.234375 1.453125q-0.6875 0.140625 -1.234375 0.140625q-0.890625 0 -1.390625 -0.28125q-0.484375 -0.28125 -0.6875 -0.734375q-0.203125 -0.46875 -0.203125 -1.9375l0 -5.578125l-1.203125 0l0 -1.265625l1.203125 0l0 -2.390625l1.625 -0.984375l0 3.375l1.65625 0l0 1.265625l-1.65625 0l0 5.671875q0 0.6875 0.078125 0.890625q0.09375 0.203125 0.28125 0.328125q0.203125 0.109375 0.578125 0.109375q0.265625 0 0.71875 -0.0625zm13.413513 -1.640625l1.6875 0.203125q-0.40625 1.484375 -1.484375 2.3125q-1.078125 0.8125 -2.765625 0.8125q-2.125 0 -3.375 -1.296875q-1.234375 -1.3125 -1.234375 -3.671875q0 -2.453125 1.25 -3.796875q1.265625 -1.34375 3.265625 -1.34375q1.9375 0 3.15625 1.328125q1.234375 1.3125 1.234375 3.703125q0 0.15625 0 0.4375l-7.21875 0q0.09375 1.59375 0.90625 2.453125q0.8125 0.84375 2.015625 0.84375q0.90625 0 1.546875 -0.46875q0.640625 -0.484375 1.015625 -1.515625zm-5.390625 -2.65625l5.40625 0q-0.109375 -1.21875 -0.625 -1.828125q-0.78125 -0.953125 -2.03125 -0.953125q-1.125 0 -1.90625 0.765625q-0.765625 0.75 -0.84375 2.015625zm8.047546 5.765625l3.53125 -5.03125l-3.265625 -4.640625l2.046875 0l1.484375 2.265625q0.421875 0.640625 0.671875 1.078125q0.40625 -0.59375 0.734375 -1.0625l1.640625 -2.28125l1.953125 0l-3.34375 4.546875l3.59375 5.125l-2.015625 0l-1.984375 -3.0l-0.515625 -0.8125l-2.546875 3.8125l-1.984375 0zm10.421875 -11.46875l0 -1.890625l1.640625 0l0 1.890625l-1.640625 0zm0 11.46875l0 -9.671875l1.640625 0l0 9.671875l-1.640625 0zm3.4885864 -2.890625l1.625 -0.25q0.125 0.96875 0.75 1.5q0.625 0.515625 1.75 0.515625q1.125 0 1.671875 -0.453125q0.546875 -0.46875 0.546875 -1.09375q0 -0.546875 -0.484375 -0.875q-0.328125 -0.21875 -1.671875 -0.546875q-1.8125 -0.46875 -2.515625 -0.796875q-0.6875 -0.328125 -1.046875 -0.90625q-0.359375 -0.59375 -0.359375 -1.3125q0 -0.640625 0.296875 -1.1875q0.296875 -0.5625 0.8125 -0.921875q0.375 -0.28125 1.03125 -0.46875q0.671875 -0.203125 1.421875 -0.203125q1.140625 0 2.0 0.328125q0.859375 0.328125 1.265625 0.890625q0.421875 0.5625 0.578125 1.5l-1.609375 0.21875q-0.109375 -0.75 -0.640625 -1.171875q-0.515625 -0.421875 -1.46875 -0.421875q-1.140625 0 -1.625 0.375q-0.46875 0.375 -0.46875 0.875q0 0.3125 0.1875 0.578125q0.203125 0.265625 0.640625 0.4375q0.234375 0.09375 1.4375 0.421875q1.75 0.453125 2.4375 0.75q0.6875 0.296875 1.078125 0.859375q0.390625 0.5625 0.390625 1.40625q0 0.828125 -0.484375 1.546875q-0.46875 0.71875 -1.375 1.125q-0.90625 0.390625 -2.046875 0.390625q-1.875 0 -2.875 -0.78125q-0.984375 -0.78125 -1.25 -2.328125zm13.5625 1.421875l0.234375 1.453125q-0.6875 0.140625 -1.234375 0.140625q-0.890625 0 -1.390625 -0.28125q-0.484375 -0.28125 -0.6875 -0.734375q-0.203125 -0.46875 -0.203125 -1.9375l0 -5.578125l-1.203125 0l0 -1.265625l1.203125 0l0 -2.390625l1.625 -0.984375l0 3.375l1.65625 0l0 1.265625l-1.65625 0l0 5.671875q0 0.6875 0.078125 0.890625q0.09375 0.203125 0.28125 0.328125q0.203125 0.109375 0.578125 0.109375q0.265625 0 0.71875 -0.0625z\" fill-rule=\"nonzero\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m134.30318 355.32022l225.13387 0l0 225.13388l-225.13387 0z\" fill-rule=\"evenodd\"/><path stroke=\"#00ff00\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m134.30318 355.32022l225.13387 0l0 225.13388l-225.13387 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m103.632545 95.6273l283.49606 0l0 80.09449l-283.49606 0z\" fill-rule=\"evenodd\"/><path stroke=\"#ff0000\" stroke-width=\"8.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m103.632545 95.6273l283.49606 0l0 80.09449l-283.49606 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m87.29265 94.931755l0 0c0 -8.923523 7.2339554 -16.157478 16.157486 -16.157478l0 0c4.285225 0 8.394943 1.702301 11.425064 4.7324142c3.0301132 3.0301208 4.7324142 7.139839 4.7324142 11.425064l0 0c0 8.923531 -7.2339478 16.157486 -16.157478 16.157486l0 0c-8.923531 0 -16.157486 -7.2339554 -16.157486 -16.157486z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m87.29265 94.931755l0 0c0 -8.923523 7.2339554 -16.157478 16.157486 -16.157478l0 0c4.285225 0 8.394943 1.702301 11.425064 4.7324142c3.0301132 3.0301208 4.7324142 7.139839 4.7324142 11.425064l0 0c0 8.923531 -7.2339478 16.157486 -16.157478 16.157486l0 0c-8.923531 0 -16.157486 -7.2339554 -16.157486 -16.157486z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m87.29265 142.14699l0 0c0 -8.923538 7.2339554 -16.157486 16.157486 -16.157486l0 0c4.285225 0 8.394943 1.702301 11.425064 4.732422c3.0301132 3.0301056 4.7324142 7.1398315 4.7324142 11.425064l0 0c0 8.923523 -7.2339478 16.15747 -16.157478 16.15747l0 0c-8.923531 0 -16.157486 -7.2339478 -16.157486 -16.15747z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m87.29265 142.14699l0 0c0 -8.923538 7.2339554 -16.157486 16.157486 -16.157486l0 0c4.285225 0 8.394943 1.702301 11.425064 4.732422c3.0301132 3.0301056 4.7324142 7.1398315 4.7324142 11.425064l0 0c0 8.923523 -7.2339478 16.15747 -16.157478 16.15747l0 0c-8.923531 0 -16.157486 -7.2339478 -16.157486 -16.15747z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m371.1824 174.46194l0 0c0 -8.923538 7.2339478 -16.157486 16.157501 -16.157486l0 0c4.2852173 0 8.394928 1.702301 11.425049 4.732422c3.0301208 3.0301056 4.732422 7.1398315 4.732422 11.425064l0 0c0 8.923523 -7.2339478 16.15747 -16.15747 16.15747l0 0c-8.923553 0 -16.157501 -7.2339478 -16.157501 -16.15747z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m371.1824 174.46194l0 0c0 -8.923538 7.2339478 -16.157486 16.157501 -16.157486l0 0c4.2852173 0 8.394928 1.702301 11.425049 4.732422c3.0301208 3.0301056 4.732422 7.1398315 4.732422 11.425064l0 0c0 8.923523 -7.2339478 16.15747 -16.15747 16.15747l0 0c-8.923553 0 -16.157501 -7.2339478 -16.157501 -16.15747z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m103.63288 29.580048l283.49606 0l0 283.49606l-283.49606 0z\" fill-rule=\"evenodd\"/><path stroke=\"#00ff00\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m103.63288 29.580048l283.49606 0l0 283.49606l-283.49606 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m603.647 58.127296l225.13385 0l0 225.13388l-225.13385 0z\" fill-rule=\"evenodd\"/><path stroke=\"#ff0000\" stroke-width=\"8.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m603.647 58.127296l225.13385 0l0 225.13388l-225.13385 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m700.0551 111.15092l0 0c0 -8.923531 7.2339478 -16.157478 16.15747 -16.157478l0 0c4.2852173 0 8.3949585 1.702301 11.425049 4.7324142c3.0301514 3.0301208 4.732422 7.139839 4.732422 11.425064l0 0c0 8.923531 -7.2339478 16.157478 -16.15747 16.157478l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.157478z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m700.0551 111.15092l0 0c0 -8.923531 7.2339478 -16.157478 16.15747 -16.157478l0 0c4.2852173 0 8.3949585 1.702301 11.425049 4.7324142c3.0301514 3.0301208 4.732422 7.139839 4.732422 11.425064l0 0c0 8.923531 -7.2339478 16.157478 -16.15747 16.157478l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.157478z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m812.0684 281.9496l0 0c0 -8.923553 7.2339478 -16.157501 16.15747 -16.157501l0 0c4.2852173 0 8.3949585 1.702301 11.425049 4.732422c3.0301514 3.0301208 4.732422 7.1398315 4.732422 11.425079l0 0c0 8.923523 -7.2339478 16.15747 -16.15747 16.15747l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.15747z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m812.0684 281.9496l0 0c0 -8.923553 7.2339478 -16.157501 16.15747 -16.157501l0 0c4.2852173 0 8.3949585 1.702301 11.425049 4.732422c3.0301514 3.0301208 4.732422 7.1398315 4.732422 11.425079l0 0c0 8.923523 -7.2339478 16.15747 -16.15747 16.15747l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.15747z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m586.76733 60.707348l0 0c0 -8.923531 7.2339478 -16.157478 16.15747 -16.157478l0 0c4.2852173 0 8.3949585 1.702301 11.425049 4.7324142c3.0301514 3.030117 4.732422 7.1398354 4.732422 11.425064l0 0c0 8.923534 -7.2339478 16.157482 -16.15747 16.157482l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.157482z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m586.76733 60.707348l0 0c0 -8.923531 7.2339478 -16.157478 16.15747 -16.157478l0 0c4.2852173 0 8.3949585 1.702301 11.425049 4.7324142c3.0301514 3.030117 4.732422 7.1398354 4.732422 11.425064l0 0c0 8.923534 -7.2339478 16.157482 -16.15747 16.157482l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.157482z\" fill-rule=\"evenodd\"/></g></svg>\n  </div>\n\n\n  This idea is simple enough to start working with even without a thorough proof\n  (which we will get back to later).\n</p><p>\n  A bounding box around two points will always have those points at opposite\n  corners. The bounding box might have zero area (if both points are horizontally\n  or vertically aligned), but that's fine.\n\n  This gives us enough information to solve the Small dataset: If two points\n  are chosen as the corners of a bounding box, then these two points will form\n  a valid triplet with any point that is <b>not</b> strictly inside the bounding\n  box. That is, any point outside the bounding box or along its edges will form\n  a valid triplet with these two points.\n\n  This gives us an O(<b>N<sup>2</sup></b>) solution: For every pair of points,\n  count the number of points that are strictly inside their bounding box, which\n  can be done in O(1) using a 2D cumulative sum array, taking advantage of the\n  small bounds on the coordinates in the small test set. Since every invalid\n  triplet is counted exactly once (for any invalid triplet, exactly one of\n  the points will be inside the bounding box defined by the other two points).\n</p><p>\n  For the Large dataset, we need to turn around our thinking. Instead of fixing the\n  bounding box and counting the number of points inside it, we will fix a point\n  as the \"inside\" point, and count how many different bounding boxes contain it.\n  Let's say we fix an inside point. Let <b>A</b> be the set of points above and\n  to the right of our fixed point, and <b>B</b> be points below and to the left.\n  Then there are <b>A</b> &times; <b>B</b> bounding boxes that\n  contain our fixed inside point: every point in <b>A</b> forms a bounding box\n  containing our fixed inside point with any of the points in <b>B</b>. The same\n  can be said for the points above and to the right combined with those below and\n  to the left.\n</p><p>\n  This gives us an O(<b>N</b> log <b>N</b>) solution: for each point, count the\n  number of bounding boxes that would contain it by finding the number of points\n  above and to the left, above and to the right, below and to the left and below\n  and to the right, and multiplying accordingly. Counting these points can be done\n  ine O(log <b>N</b>) using a linear sweep with a\n  <a href=\"https://en.wikipedia.org/wiki/Range_tree\">range tree</a> or with a self\n  balancing binary search tree (among other ways).\n</p><p>\n  To wrap things up, we need to prove our original assertion: An axis-aligned\n  square that goes through the three points exists if and only if all three\n  points lie somewhere on the edges of the bounding box.\n\n  The negative case is easy. If there is a point not on the edges of the bounding\n  box, then there is no axis-aligned <i>rectangle</i> that goes through the three\n  points, let alone a square.\n\n  The affirmative case is more difficult. We will start with the bounding box and\n  morph it into a square. If the bounding box is already a square, then we are\n  done. Otherwise, one pair of parallel sides is longer. If either of these sides\n  does not have a point on it <i>excluding the corners</i>, then that side can be\n  extended until the shape is a square (see below).\n\n  <div style=\"width: 250px;height: 250px\">\n    <svg version=\"1.1\" viewBox=\"0.0 0.0 399.4698162729659 383.98687664041995\" fill=\"none\" stroke=\"none\" stroke-linecap=\"square\" stroke-miterlimit=\"10\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\"><clipPath id=\"p.0\"><path d=\"m0 0l399.46982 0l0 383.98688l-399.46982 0l0 -383.98688z\" clip-rule=\"nonzero\"/></clipPath><g clip-path=\"url(#p.0)\"><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m0 0l399.46982 0l0 383.98688l-399.46982 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m44.21522 40.742916l292.44095 0l0 292.44095l-292.44095 0z\" fill-rule=\"evenodd\"/><path stroke=\"#ff0000\" stroke-width=\"4.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" stroke-dasharray=\"4.0,12.0\" d=\"m44.21522 40.742916l292.44095 0l0 292.44095l-292.44095 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m44.569935 41.05512l292.063 0l0 225.13385l-292.063 0z\" fill-rule=\"evenodd\"/><path stroke=\"#ff0000\" stroke-width=\"8.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m44.569935 41.05512l292.063 0l0 225.13385l-292.063 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m194.47507 39.463253l0 0c0 -8.923529 7.2339478 -16.157478 16.157486 -16.157478l0 0c4.2852173 0 8.394943 1.702301 11.425064 4.732416c3.0301056 3.0301151 4.7324066 7.1398335 4.7324066 11.425062l0 0c0 8.923531 -7.2339478 16.157482 -16.15747 16.157482l0 0c-8.923538 0 -16.157486 -7.2339516 -16.157486 -16.157482z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m194.47507 39.463253l0 0c0 -8.923529 7.2339478 -16.157478 16.157486 -16.157478l0 0c4.2852173 0 8.394943 1.702301 11.425064 4.732416c3.0301056 3.0301151 4.7324066 7.1398335 4.7324066 11.425062l0 0c0 8.923531 -7.2339478 16.157482 -16.15747 16.157482l0 0c-8.923538 0 -16.157486 -7.2339516 -16.157486 -16.157482z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m320.491 264.8761l0 0c0 -8.923538 7.2339478 -16.157501 16.15747 -16.157501l0 0c4.285248 0 8.3949585 1.702301 11.425079 4.732422c3.0300903 3.0301208 4.7323914 7.1398315 4.7323914 11.425079l0 0c0 8.923523 -7.2339478 16.15747 -16.15747 16.15747l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.15747z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m320.491 264.8761l0 0c0 -8.923538 7.2339478 -16.157501 16.15747 -16.157501l0 0c4.285248 0 8.3949585 1.702301 11.425079 4.732422c3.0300903 3.0301208 4.7323914 7.1398315 4.7323914 11.425079l0 0c0 8.923523 -7.2339478 16.15747 -16.15747 16.15747l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.15747z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m27.688599 153.62073l0 0c0 -8.923523 7.2339516 -16.15747 16.157478 -16.15747l0 0c4.2852325 0 8.394951 1.702301 11.425064 4.7324066c3.030117 3.0301208 4.732418 7.139847 4.732418 11.425064l0 0c0 8.923538 -7.2339516 16.157486 -16.157482 16.157486l0 0c-8.923527 0 -16.157478 -7.2339478 -16.157478 -16.157486z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m27.688599 153.62073l0 0c0 -8.923523 7.2339516 -16.15747 16.157478 -16.15747l0 0c4.2852325 0 8.394951 1.702301 11.425064 4.7324066c3.030117 3.0301208 4.732418 7.139847 4.732418 11.425064l0 0c0 8.923538 -7.2339516 16.157486 -16.157482 16.157486l0 0c-8.923527 0 -16.157478 -7.2339478 -16.157478 -16.157486z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m190.60143 278.7206l-0.12597656 42.015747\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m190.60144 278.7206l-0.08999634 30.015808\" fill-rule=\"evenodd\"/><path fill=\"#000000\" stroke=\"#000000\" stroke-width=\"2.0\" stroke-linecap=\"butt\" d=\"m187.208 308.7265l3.2762299 9.08606l3.330658 -9.066223z\" fill-rule=\"evenodd\"/></g></svg>\n  </div>\n\n  So what do we do if both long sides have a point on them (not at a corner)?\n  This is actually impossible. For a contradiction, suppose that both long\n  sides do have a point on them, not at a corner. It doesn't matter where the\n  third point is, there is one side with no points on it at all (not even at the\n  corners)! This means the bounding box can be shrunk, which contradicts our\n  definition of the bounding box being as small as possible.\n\n  <div style=\"width: 500px;height: 1000px\">\n    <svg version=\"1.1\" viewBox=\"0.0 0.0 958.1023622047244 384.8346456692913\" fill=\"none\" stroke=\"none\" stroke-linecap=\"square\" stroke-miterlimit=\"10\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\"><clipPath id=\"p.0\"><path d=\"m0 0l958.10236 0l0 384.83466l-958.10236 0l0 -384.83466z\" clip-rule=\"nonzero\"/></clipPath><g clip-path=\"url(#p.0)\"><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m0 0l958.10236 0l0 384.83466l-958.10236 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m603.38324 86.926506l243.27563 0l0 225.13385l-243.27563 0z\" fill-rule=\"evenodd\"/><path stroke=\"#ff0000\" stroke-width=\"4.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" stroke-dasharray=\"4.0,12.0\" d=\"m603.38324 86.926506l243.27563 0l0 225.13385l-243.27563 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m555.3836 88.379265l292.063 0l0 225.13385l-292.063 0z\" fill-rule=\"evenodd\"/><path stroke=\"#ff0000\" stroke-width=\"8.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m555.3836 88.379265l292.063 0l0 225.13385l-292.063 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m638.0735 86.7874l0 0c0 -8.923531 7.2339478 -16.157478 16.15747 -16.157478l0 0c4.2852173 0 8.3949585 1.702301 11.425049 4.7324142c3.0301514 3.0301208 4.732422 7.139839 4.732422 11.425064l0 0c0 8.923531 -7.2339478 16.157486 -16.15747 16.157486l0 0c-8.923523 0 -16.15747 -7.2339554 -16.15747 -16.157486z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m638.0735 86.7874l0 0c0 -8.923531 7.2339478 -16.157478 16.15747 -16.157478l0 0c4.2852173 0 8.3949585 1.702301 11.425049 4.7324142c3.0301514 3.0301208 4.732422 7.139839 4.732422 11.425064l0 0c0 8.923531 -7.2339478 16.157486 -16.15747 16.157486l0 0c-8.923523 0 -16.15747 -7.2339554 -16.15747 -16.157486z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m781.17865 312.20023l0 0c0 -8.923523 7.2339478 -16.15747 16.15747 -16.15747l0 0c4.2852173 0 8.3949585 1.702301 11.42511 4.732422c3.0300903 3.0300903 4.732361 7.1398315 4.732361 11.425049l0 0c0 8.923523 -7.2339478 16.15747 -16.15747 16.15747l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.15747z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m781.17865 312.20023l0 0c0 -8.923523 7.2339478 -16.15747 16.15747 -16.15747l0 0c4.2852173 0 8.3949585 1.702301 11.42511 4.732422c3.0300903 3.0300903 4.732361 7.1398315 4.732361 11.425049l0 0c0 8.923523 -7.2339478 16.15747 -16.15747 16.15747l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.15747z\" fill-rule=\"evenodd\"/><path fill=\"#00ff00\" d=\"m832.4288 156.28084l0 0c0 -8.923523 7.2339478 -16.157486 16.15747 -16.157486l0 0c4.2852173 0 8.3949585 1.702301 11.425049 4.732422c3.0301514 3.0301208 4.732422 7.1398315 4.732422 11.425064l0 0c0 8.923538 -7.2339478 16.157486 -16.15747 16.157486l0 0c-8.923523 0 -16.15747 -7.2339478 -16.15747 -16.157486z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m119.00531 86.926506l243.2756 0l0 225.13385l-243.2756 0z\" fill-rule=\"evenodd\"/><path stroke=\"#ff0000\" stroke-width=\"4.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" stroke-dasharray=\"4.0,12.0\" d=\"m119.00531 86.926506l243.2756 0l0 225.13385l-243.2756 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m119.00563 88.379265l292.063 0l0 225.13385l-292.063 0z\" fill-rule=\"evenodd\"/><path stroke=\"#ff0000\" stroke-width=\"8.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m119.00563 88.379265l292.063 0l0 225.13385l-292.063 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m201.69554 86.7874l0 0c0 -8.923531 7.2339478 -16.157478 16.15747 -16.157478l0 0c4.2852325 0 8.3949585 1.702301 11.425064 4.7324142c3.0301208 3.0301208 4.732422 7.139839 4.732422 11.425064l0 0c0 8.923531 -7.2339478 16.157486 -16.157486 16.157486l0 0c-8.923523 0 -16.15747 -7.2339554 -16.15747 -16.157486z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m201.69554 86.7874l0 0c0 -8.923531 7.2339478 -16.157478 16.15747 -16.157478l0 0c4.2852325 0 8.3949585 1.702301 11.425064 4.7324142c3.0301208 3.0301208 4.732422 7.139839 4.732422 11.425064l0 0c0 8.923531 -7.2339478 16.157486 -16.157486 16.157486l0 0c-8.923523 0 -16.15747 -7.2339554 -16.15747 -16.157486z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m344.8007 312.20023l0 0c0 -8.923523 7.2339783 -16.15747 16.157501 -16.15747l0 0c4.2852173 0 8.394928 1.702301 11.425049 4.732422c3.0301208 3.0300903 4.732422 7.1398315 4.732422 11.425049l0 0c0 8.923523 -7.2339478 16.15747 -16.15747 16.15747l0 0c-8.923523 0 -16.157501 -7.2339478 -16.157501 -16.15747z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"1.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m344.8007 312.20023l0 0c0 -8.923523 7.2339783 -16.15747 16.157501 -16.15747l0 0c4.2852173 0 8.394928 1.702301 11.425049 4.732422c3.0301208 3.0300903 4.732422 7.1398315 4.732422 11.425049l0 0c0 8.923523 -7.2339478 16.15747 -16.15747 16.15747l0 0c-8.923523 0 -16.157501 -7.2339478 -16.157501 -16.15747z\" fill-rule=\"evenodd\"/><path fill=\"#00ff00\" d=\"m102.12429 86.7874l0 0c0 -8.923531 7.2339554 -16.157478 16.157486 -16.157478l0 0c4.285225 0 8.394943 1.702301 11.425056 4.7324142c3.0301208 3.0301208 4.732422 7.139839 4.732422 11.425064l0 0c0 8.923531 -7.2339478 16.157486 -16.157478 16.157486l0 0c-8.923531 0 -16.157486 -7.2339554 -16.157486 -16.157486z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m401.01312 199.49344l-30.740143 0\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m401.01312 199.49344l-18.740143 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" stroke=\"#000000\" stroke-width=\"2.0\" stroke-linecap=\"butt\" d=\"m382.27298 196.18997l-9.076202 3.3034668l9.076202 3.3034668z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m564.64307 199.49344l30.740112 0\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m564.64307 199.49344l18.740112 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" stroke=\"#000000\" stroke-width=\"2.0\" stroke-linecap=\"butt\" d=\"m583.3832 202.7969l9.076233 -3.3034668l-9.076233 -3.3034668z\" fill-rule=\"evenodd\"/></g></svg>\n  </div>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2OxcE3NtiM07Q6iBQYpV6iVEd0FxPmqPMF9vwjqpwyiz_d7Xq2wAH-Do85hhTGA49N4PqFvA/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000000510ee","statement":"<h3>Problem</h3>\n\n<p>\n  For the first time in as long as anyone can remember, the kingdom of\n  Kickstartia is alive with celebration: it is the coronation day for the new\n  King.\n  As is customary for the coronation, a Royal Parade will march its way\n  through the streets of the capital.\n</p><p>\n  The capital can be thought of as an infinite 2D plane, with infinitely many,\n  infinitely long, streets spaced one meter apart, running horizontally and\n  vertically throughout. The horizontal streets are labelled from negative\n  infinity to infinity from top to bottom, while the vertical streets are\n  labelled from negative infinity to infinity from left to right.\n</p><p>\n  There are <b>N</b> cafes in the capital, and the <b>i</b>-th one is located\n  at the intersection of vertical street <b>V<sub>i</sub></b> and horizontal\n  street <b>H<sub>i</sub></b>. No two cafes lie on the same intersection.\n  In order to keep the parade technicians happy and well-fed, you will pick\n  exactly three of these cafes for them to stop at along the way.\n</p><p>\n  To introduce some order to the chaos, you have additionally decided that a\n  parade should end where it starts, and that its path through the streets\n  must make the shape of a square (with straight sides, all of equal length).\n  Each cafe can be anywhere along the square (on the sides or at a corner).\n</p><p>\n  This immediately presents a problem: depending on which three cafes you\n  pick, it may not be possible to make a square parade that goes through those\n  three cafes.\n  So, your task is to find out: how many different sets of three cafes are there\n  such that there exists at least one square parade that includes all three\n  cafes in the set? (Two sets are different if and only if there is a cafe in\n  one that is not present in the other.)\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b>\n  test cases follow. Each test case consists of one line containing ten integers\n  <b>N</b>,\n  <b>V<sub>1</sub></b>, <b>H<sub>1</sub></b>,\n  <b>A</b>, <b>B</b>, <b>C</b>,\n  <b>D</b>, <b>E</b>, <b>F</b>\n  and <b>M</b>.\n</p><p>\n  <b>N</b> is the number of cafes. The first cafe lies at the intersection of\n  vertical street <b>V<sub>1</sub></b> and horizontal street\n  <b>H<sub>1</sub></b>.\n</p><p>\n  The locations of the remaining cafes <b>V<sub>i</sub></b>,\n  <b>H<sub>i</sub></b>, can be generated for i = 2 to <b>N</b> as follows:\n</p>\n<ul>\n  <li> <b>V<sub>i</sub></b> = (<b>A</b> &times; <b>V<sub>i-1</sub></b> +\n    <b>B</b> &times; <b>H<sub>i-1</sub></b> + <b>C</b>) modulo <b>M</b>\n  <li> <b>H<sub>i</sub></b> = (<b>D</b> &times; <b>V<sub>i-1</sub></b> +\n    <b>E</b> &times; <b>H<sub>i-1</sub></b> + <b>F</b>) modulo <b>M</b>\n</ul>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the number of sets of cafes satisfying the conditions explained above.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 100 seconds per test set.<br/>\n  Memory limit: 1 GB.<br/>\n  0 &le; <b>A</b> &lt; <b>M</b>.<br/>\n  0 &le; <b>B</b> &lt; <b>M</b>.<br/>\n  0 &le; <b>C</b> &lt; <b>M</b>.<br/>\n  0 &le; <b>D</b> &lt; <b>M</b>.<br/>\n  0 &le; <b>E</b> &lt; <b>M</b>.<br/>\n  0 &le; <b>F</b> &lt; <b>M</b>.<br/>\n  0 &le; <b>V<sub>1</sub></b> &lt; <b>M</b>.<br/>\n  0 &le; <b>H<sub>1</sub></b> &lt; <b>M</b>.<br/>\n  For all i &ne; j, (<b>V<sub>i</sub></b>, <b>H<sub>i</sub></b>) &ne;\n  (<b>V<sub>j</sub></b>, <b>H<sub>j</sub></b>).<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  3 &le; <b>N</b> &le; 1000.<br/>\n  2 &le; <b>M</b> &le; 1000.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  3 &le; <b>N</b> &le; 5 &times; 10<sup>5</sup>.<br/>\n  2 &le; <b>M</b> &le; 10<sup>6</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3TdbYBGy0Pfecwowy51tXuPWrfSFSUOCebnq1gx8gGXlE4fwTz28FifR2eP-CQ4F2QvgVaWYhuI8OsBZ1UdDFMqjILMgiMGwDy/kings_circle_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n4 1 1 4 1 1 4 2 4 5\n6 3 1 1 0 1 0 1 0 9\n3 7 24 34 11 17 31 15 40 50\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3TplJgGicLqt9syJPMVdaYSxGg-DOzy6iODAQVgS3unChk1Ua64g8ON6fYWoVGb3ZX9F5e9fPE8C1fCmo9-hIvMR9rSbi_iqR8TA/kings_circle_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 20\nCase #3: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, there are four cafes and they are at (1, 1), (1, 0), (0, 3)\n  and (4, 0).\n\n  It would be possible for a square parade to go through the\n  set of cafes (1, 1), (1, 0), (0, 3), or the set (1, 1), (1, 0), (4, 0) or\n  the set (1, 0), (0, 3) (4, 0) as shown in the diagram below.\n  There is no possible square parade that goes through the set of cafes (1, 1),\n  (0, 3), (4, 0).\n</p>\n\n<div style=\"width: 750px;height: 250px\">\n  <svg version=\"1.1\" viewBox=\"0.0 0.0 2252.0183727034123 717.2152230971128\" fill=\"none\" stroke=\"none\" stroke-linecap=\"square\" stroke-miterlimit=\"10\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns=\"http://www.w3.org/2000/svg\"><clipPath id=\"p.0\"><path d=\"m0 0l2252.0183 0l0 717.2152l-2252.0183 0l0 -717.2152z\" clip-rule=\"nonzero\"/></clipPath><g clip-path=\"url(#p.0)\"><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m0 0l2252.0183 0l0 717.2152l-2252.0183 0z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m240.29156 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"3.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m240.29156 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m299.10846 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m299.10846 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m357.92535 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m357.92535 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m416.74228 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m416.74228 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m475.55917 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m475.55917 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m710.8268 187.26698l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m710.8268 187.26698l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m710.8268 246.08388l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"3.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m710.8268 246.08388l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m710.8268 304.9008l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m710.8268 304.9008l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m710.8268 363.71768l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m710.8268 363.71768l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m710.8268 422.53458l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m710.8268 422.53458l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m710.8268 598.9853l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m710.8268 598.9853l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m710.8268 540.1684l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m710.8268 540.1684l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m710.8268 481.35147l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m710.8268 481.35147l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m710.8268 128.45007l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m710.8268 128.45007l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m122.65776 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m122.65776 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m181.47466 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m181.47466 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m534.37604 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m534.37604 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m593.193 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m593.193 10.816273l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m123.1548 246.13118l175.77953 0l0 175.77953l-175.77953 0z\" fill-rule=\"evenodd\"/><path stroke=\"#ff0000\" stroke-width=\"8.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m123.1548 246.13118l175.77953 0l0 175.77953l-175.77953 0z\" fill-rule=\"evenodd\"/><path fill=\"#ffffff\" d=\"m278.63733 246.01866l0 0c0 -10.828262 8.778015 -19.606293 19.606293 -19.606293l0 0c5.1999207 0 10.186859 2.0656586 13.863739 5.7425385c3.67688 3.6768951 5.7425537 8.663834 5.7425537 13.863754l0 0c0 10.828262 -8.778046 19.606308 -19.606293 19.606308l0 0c-10.828278 0 -19.606293 -8.778046 -19.606293 -19.606308z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m278.63733 246.01866l0 0c0 -10.828262 8.778015 -19.606293 19.606293 -19.606293l0 0c5.1999207 0 10.186859 2.0656586 13.863739 5.7425385c3.67688 3.6768951 5.7425537 8.663834 5.7425537 13.863754l0 0c0 10.828262 -8.778046 19.606308 -19.606293 19.606308l0 0c-10.828278 0 -19.606293 -8.778046 -19.606293 -19.606308z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m302.81735 250.56366l0 2.375l-8.96875 0q0.140625 -1.34375 0.859375 -2.546875q0.734375 -1.21875 2.890625 -3.203125q1.734375 -1.625 2.125 -2.1875q0.53125 -0.796875 0.53125 -1.578125q0 -0.84375 -0.46875 -1.296875q-0.453125 -0.46875 -1.265625 -0.46875q-0.796875 0 -1.28125 0.484375q-0.46875 0.46875 -0.546875 1.59375l-2.546875 -0.25q0.234375 -2.109375 1.421875 -3.03125q1.203125 -0.921875 3.015625 -0.921875q1.96875 0 3.09375 1.0625q1.140625 1.0625 1.140625 2.65625q0 0.890625 -0.328125 1.71875q-0.3125 0.8125 -1.015625 1.703125q-0.46875 0.59375 -1.6875 1.703125q-1.203125 1.109375 -1.53125 1.484375q-0.3125 0.359375 -0.515625 0.703125l5.078125 0z\" fill-rule=\"nonzero\"/><path fill=\"#ffffff\" d=\"m220.00803 422.36725l0 0c0 -10.828247 8.77803 -19.606293 19.606293 -19.606293l0 0c5.1999207 0 10.186859 2.0656738 13.863754 5.7425537c3.6768951 3.6769104 5.7425385 8.663849 5.7425385 13.863739l0 0c0 10.828278 -8.77803 19.606323 -19.606293 19.606323l0 0c-10.828262 0 -19.606293 -8.778046 -19.606293 -19.606323z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m220.00803 422.36725l0 0c0 -10.828247 8.77803 -19.606293 19.606293 -19.606293l0 0c5.1999207 0 10.186859 2.0656738 13.863754 5.7425537c3.6768951 3.6769104 5.7425385 8.663849 5.7425385 13.863739l0 0c0 10.828278 -8.77803 19.606323 -19.606293 19.606323l0 0c-10.828262 0 -19.606293 -8.778046 -19.606293 -19.606323z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m235.4537 425.7404l2.46875 -0.296875q0.125 0.953125 0.640625 1.453125q0.53125 0.5 1.265625 0.5q0.78125 0 1.328125 -0.59375q0.546875 -0.609375 0.546875 -1.640625q0 -0.953125 -0.53125 -1.515625q-0.515625 -0.578125 -1.25 -0.578125q-0.5 0 -1.1875 0.203125l0.28125 -2.09375q1.046875 0.03125 1.59375 -0.4375q0.546875 -0.484375 0.546875 -1.28125q0 -0.671875 -0.40625 -1.078125q-0.390625 -0.40625 -1.0625 -0.40625q-0.65625 0 -1.125 0.46875q-0.453125 0.453125 -0.5625 1.328125l-2.359375 -0.40625q0.25 -1.203125 0.734375 -1.921875q0.5 -0.734375 1.390625 -1.140625q0.890625 -0.421875 2.0 -0.421875q1.875 0 3.015625 1.203125q0.9375 0.984375 0.9375 2.21875q0 1.765625 -1.921875 2.8125q1.15625 0.234375 1.84375 1.09375q0.6875 0.859375 0.6875 2.0625q0 1.765625 -1.296875 3.015625q-1.28125 1.234375 -3.1875 1.234375q-1.8125 0 -3.015625 -1.046875q-1.1875 -1.046875 -1.375 -2.734375z\" fill-rule=\"nonzero\"/><path fill=\"#ffffff\" d=\"m278.639 305.43875l0 0c0 -10.828247 8.778046 -19.606293 19.606293 -19.606293l0 0c5.1999207 0 10.186859 2.0656433 13.86377 5.7425537c3.67688 3.67688 5.7425537 8.663818 5.7425537 13.863739l0 0c0 10.828278 -8.778046 19.606293 -19.606323 19.606293l0 0c-10.828247 0 -19.606293 -8.778015 -19.606293 -19.606293z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m278.639 305.43875l0 0c0 -10.828247 8.778046 -19.606293 19.606293 -19.606293l0 0c5.1999207 0 10.186859 2.0656433 13.86377 5.7425537c3.67688 3.67688 5.7425537 8.663818 5.7425537 13.863739l0 0c0 10.828278 -8.778046 19.606293 -19.606323 19.606293l0 0c-10.828247 0 -19.606293 -8.778015 -19.606293 -19.606293z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m300.7253 312.35876l-2.5625 0l0 -9.640625q-1.40625 1.3125 -3.3125 1.9375l0 -2.328125q1.015625 -0.328125 2.1875 -1.234375q1.171875 -0.921875 1.609375 -2.140625l2.078125 0l0 13.40625z\" fill-rule=\"nonzero\"/><path fill=\"#ffffff\" d=\"m456.07043 246.01833l0 0c0 -10.828262 8.778015 -19.606293 19.606293 -19.606293l0 0c5.1999207 0 10.186859 2.0656433 13.863739 5.7425385c3.67688 3.6768951 5.7425537 8.663834 5.7425537 13.863754l0 0c0 10.828262 -8.778046 19.606308 -19.606293 19.606308l0 0c-10.828278 0 -19.606293 -8.778046 -19.606293 -19.606308z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m456.07043 246.01833l0 0c0 -10.828262 8.778015 -19.606293 19.606293 -19.606293l0 0c5.1999207 0 10.186859 2.0656433 13.863739 5.7425385c3.67688 3.6768951 5.7425537 8.663834 5.7425537 13.863754l0 0c0 10.828262 -8.778046 19.606308 -19.606293 19.606308l0 0c-10.828278 0 -19.606293 -8.778046 -19.606293 -19.606308z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m476.62546 252.93832l0 -2.6875l-5.46875 0l0 -2.234375l5.796875 -8.484375l2.15625 0l0 8.46875l1.65625 0l0 2.25l-1.65625 0l0 2.6875l-2.484375 0zm0 -4.9375l0 -4.5625l-3.078125 4.5625l3.078125 0z\" fill-rule=\"nonzero\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m976.2758 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"3.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m976.2758 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1035.0928 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1035.0928 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1093.9097 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1093.9097 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1152.7266 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1152.7266 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1211.5435 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1211.5435 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1446.811 186.63672l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1446.811 186.63672l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1446.811 245.45361l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"3.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1446.811 245.45361l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1446.811 304.2705l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1446.811 304.2705l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1446.811 363.0874l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1446.811 363.0874l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1446.811 421.90433l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1446.811 421.90433l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1446.811 598.35504l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1446.811 598.35504l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1446.811 539.53815l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1446.811 539.53815l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1446.811 480.72122l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1446.811 480.72122l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1446.811 127.81981l-696.0 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1446.811 127.81981l-696.0 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m858.642 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m858.642 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m917.4589 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m917.4589 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1270.3604 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1270.3604 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1329.1772 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1329.1772 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1034.9186 187.02853l175.77954 0l0 175.77951l-175.77954 0z\" fill-rule=\"evenodd\"/><path stroke=\"#ff0000\" stroke-width=\"8.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1034.9186 187.02853l175.77954 0l0 175.77951l-175.77954 0z\" fill-rule=\"evenodd\"/><path fill=\"#ffffff\" d=\"m1014.6216 245.3884l0 0c0 -10.828262 8.778015 -19.606293 19.606323 -19.606293l0 0c5.199829 0 10.186768 2.0656433 13.863647 5.7425385c3.677002 3.6768951 5.7425537 8.663834 5.7425537 13.863754l0 0c0 10.828247 -8.777954 19.606293 -19.606201 19.606293l0 0c-10.828308 0 -19.606323 -8.778046 -19.606323 -19.606293z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1014.6216 245.3884l0 0c0 -10.828262 8.778015 -19.606293 19.606323 -19.606293l0 0c5.199829 0 10.186768 2.0656433 13.863647 5.7425385c3.677002 3.6768951 5.7425537 8.663834 5.7425537 13.863754l0 0c0 10.828247 -8.777954 19.606293 -19.606201 19.606293l0 0c-10.828308 0 -19.606323 -8.778046 -19.606323 -19.606293z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m1038.8016 249.9334l0 2.375l-8.96875 0q0.140625 -1.34375 0.859375 -2.546875q0.734375 -1.21875 2.890625 -3.203125q1.734375 -1.625 2.125 -2.1875q0.53125 -0.796875 0.53125 -1.578125q0 -0.84375 -0.46875 -1.296875q-0.453125 -0.46875 -1.265625 -0.46875q-0.796875 0 -1.28125 0.484375q-0.46875 0.46875 -0.546875 1.59375l-2.546875 -0.25q0.234375 -2.109375 1.421875 -3.03125q1.203125 -0.921875 3.015625 -0.921875q1.96875 0 3.09375 1.0625q1.140625 1.0625 1.140625 2.65625q0 0.890625 -0.328125 1.71875q-0.3125 0.8125 -1.015625 1.703125q-0.46875 0.59375 -1.6875 1.703125q-1.203125 1.109375 -1.53125 1.484375q-0.3125 0.359375 -0.515625 0.703125l5.078125 0z\" fill-rule=\"nonzero\"/><path fill=\"#ffffff\" d=\"m955.99225 421.737l0 0c0 -10.828278 8.778076 -19.606293 19.606323 -19.606293l0 0c5.19989 0 10.186829 2.0656433 13.86377 5.7425537c3.67688 3.67688 5.7425537 8.663818 5.7425537 13.863739l0 0c0 10.828247 -8.778076 19.606293 -19.606323 19.606293l0 0c-10.828247 0 -19.606323 -8.778046 -19.606323 -19.606293z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m955.99225 421.737l0 0c0 -10.828278 8.778076 -19.606293 19.606323 -19.606293l0 0c5.19989 0 10.186829 2.0656433 13.86377 5.7425537c3.67688 3.67688 5.7425537 8.663818 5.7425537 13.863739l0 0c0 10.828247 -8.778076 19.606293 -19.606323 19.606293l0 0c-10.828247 0 -19.606323 -8.778046 -19.606323 -19.606293z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m971.4379 425.1101l2.46875 -0.296875q0.125 0.953125 0.640625 1.453125q0.53125 0.5 1.265625 0.5q0.78125 0 1.328125 -0.59375q0.546875 -0.609375 0.546875 -1.640625q0 -0.953125 -0.53125 -1.515625q-0.515625 -0.578125 -1.25 -0.578125q-0.5 0 -1.1875 0.203125l0.28125 -2.09375q1.046875 0.03125 1.59375 -0.4375q0.546875 -0.484375 0.546875 -1.28125q0 -0.671875 -0.40625 -1.078125q-0.390625 -0.40625 -1.0625 -0.40625q-0.65625 0 -1.125 0.46875q-0.453125 0.453125 -0.5625 1.328125l-2.359375 -0.40625q0.25 -1.203125 0.734375 -1.921875q0.5 -0.734375 1.390625 -1.140625q0.890625 -0.421875 2.0 -0.421875q1.875 0 3.015625 1.203125q0.9375 0.984375 0.9375 2.21875q0 1.765625 -1.921875 2.8125q1.15625 0.234375 1.84375 1.09375q0.6875 0.859375 0.6875 2.0625q0 1.765625 -1.296875 3.015625q-1.28125 1.234375 -3.1875 1.234375q-1.8125 0 -3.015625 -1.046875q-1.1875 -1.046875 -1.375 -2.734375z\" fill-rule=\"nonzero\"/><path fill=\"#ffffff\" d=\"m1014.6233 304.8085l0 0c0 -10.828278 8.778015 -19.606323 19.606323 -19.606323l0 0c5.199829 0 10.186768 2.0656738 13.863647 5.7425537c3.67688 3.6769104 5.7425537 8.663849 5.7425537 13.86377l0 0c0 10.828247 -8.777954 19.606293 -19.606201 19.606293l0 0c-10.828308 0 -19.606323 -8.778046 -19.606323 -19.606293z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1014.6233 304.8085l0 0c0 -10.828278 8.778015 -19.606323 19.606323 -19.606323l0 0c5.199829 0 10.186768 2.0656738 13.863647 5.7425537c3.67688 3.6769104 5.7425537 8.663849 5.7425537 13.86377l0 0c0 10.828247 -8.777954 19.606293 -19.606201 19.606293l0 0c-10.828308 0 -19.606323 -8.778046 -19.606323 -19.606293z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m1036.7096 311.7285l-2.5625 0l0 -9.640625q-1.40625 1.3125 -3.3125 1.9375l0 -2.328125q1.015625 -0.328125 2.1875 -1.234375q1.171875 -0.921875 1.609375 -2.140625l2.078125 0l0 13.40625z\" fill-rule=\"nonzero\"/><path fill=\"#ffffff\" d=\"m1192.0547 245.38806l0 0c0 -10.828262 8.778076 -19.606308 19.606323 -19.606308l0 0c5.199829 0 10.186768 2.0656586 13.863647 5.7425537c3.677002 3.6768951 5.7425537 8.663834 5.7425537 13.863754l0 0c0 10.828247 -8.777954 19.606293 -19.606201 19.606293l0 0c-10.828247 0 -19.606323 -8.778046 -19.606323 -19.606293z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1192.0547 245.38806l0 0c0 -10.828262 8.778076 -19.606308 19.606323 -19.606308l0 0c5.199829 0 10.186768 2.0656586 13.863647 5.7425537c3.677002 3.6768951 5.7425537 8.663834 5.7425537 13.863754l0 0c0 10.828247 -8.777954 19.606293 -19.606201 19.606293l0 0c-10.828247 0 -19.606323 -8.778046 -19.606323 -19.606293z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m1212.6097 252.30806l0 -2.6875l-5.46875 0l0 -2.234375l5.796875 -8.484375l2.15625 0l0 8.46875l1.65625 0l0 2.25l-1.65625 0l0 2.6875l-2.484375 0zm0 -4.9375l0 -4.5625l-3.078125 4.5625l3.078125 0z\" fill-rule=\"nonzero\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1711.5969 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"3.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1711.5969 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1770.4138 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1770.4138 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1829.2307 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1829.2307 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1888.0476 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1888.0476 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1946.8645 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1946.8645 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m2182.132 186.63672l-695.9999 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m2182.132 186.63672l-695.9999 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m2182.132 245.45361l-695.9999 0\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"3.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m2182.132 245.45361l-695.9999 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m2182.132 304.2705l-695.9999 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m2182.132 304.2705l-695.9999 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m2182.132 363.0874l-695.9999 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m2182.132 363.0874l-695.9999 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m2182.132 421.90433l-695.9999 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m2182.132 421.90433l-695.9999 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m2182.132 598.35504l-695.9999 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m2182.132 598.35504l-695.9999 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m2182.132 539.53815l-695.9999 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m2182.132 539.53815l-695.9999 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m2182.132 480.72122l-695.9999 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m2182.132 480.72122l-695.9999 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m2182.132 127.81981l-695.9999 0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m2182.132 127.81981l-695.9999 0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1593.9631 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1593.9631 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1652.78 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1652.78 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m2005.6814 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m2005.6814 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m2064.4983 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path stroke=\"#999999\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m2064.4983 10.1860075l0 696.0\" fill-rule=\"evenodd\"/><path fill=\"#000000\" fill-opacity=\"0.0\" d=\"m1710.1322 245.50099l235.87402 0l0 235.87401l-235.87402 0z\" fill-rule=\"evenodd\"/><path stroke=\"#ff0000\" stroke-width=\"8.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1710.1322 245.50099l235.87402 0l0 235.87401l-235.87402 0z\" fill-rule=\"evenodd\"/><path fill=\"#ffffff\" d=\"m1749.9427 245.3884l0 0c0 -10.828262 8.777954 -19.606293 19.606201 -19.606293l0 0c5.199951 0 10.18689 2.0656433 13.86377 5.7425385c3.67688 3.6768951 5.7425537 8.663834 5.7425537 13.863754l0 0c0 10.828247 -8.778076 19.606293 -19.606323 19.606293l0 0c-10.828247 0 -19.606201 -8.778046 -19.606201 -19.606293z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1749.9427 245.3884l0 0c0 -10.828262 8.777954 -19.606293 19.606201 -19.606293l0 0c5.199951 0 10.18689 2.0656433 13.86377 5.7425385c3.67688 3.6768951 5.7425537 8.663834 5.7425537 13.863754l0 0c0 10.828247 -8.778076 19.606293 -19.606323 19.606293l0 0c-10.828247 0 -19.606201 -8.778046 -19.606201 -19.606293z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m1774.1228 249.9334l0 2.375l-8.96875 0q0.140625 -1.34375 0.859375 -2.546875q0.734375 -1.21875 2.890625 -3.203125q1.734375 -1.625 2.125 -2.1875q0.53125 -0.796875 0.53125 -1.578125q0 -0.84375 -0.46875 -1.296875q-0.453125 -0.46875 -1.265625 -0.46875q-0.796875 0 -1.28125 0.484375q-0.46875 0.46875 -0.546875 1.59375l-2.546875 -0.25q0.234375 -2.109375 1.421875 -3.03125q1.203125 -0.921875 3.015625 -0.921875q1.96875 0 3.09375 1.0625q1.140625 1.0625 1.140625 2.65625q0 0.890625 -0.328125 1.71875q-0.3125 0.8125 -1.015625 1.703125q-0.46875 0.59375 -1.6875 1.703125q-1.203125 1.109375 -1.53125 1.484375q-0.3125 0.359375 -0.515625 0.703125l5.078125 0z\" fill-rule=\"nonzero\"/><path fill=\"#ffffff\" d=\"m1691.3134 421.737l0 0c0 -10.828278 8.778076 -19.606293 19.606323 -19.606293l0 0c5.199951 0 10.18689 2.0656433 13.86377 5.7425537c3.67688 3.67688 5.7425537 8.663818 5.7425537 13.863739l0 0c0 10.828247 -8.778076 19.606293 -19.606323 19.606293l0 0c-10.828247 0 -19.606323 -8.778046 -19.606323 -19.606293z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1691.3134 421.737l0 0c0 -10.828278 8.778076 -19.606293 19.606323 -19.606293l0 0c5.199951 0 10.18689 2.0656433 13.86377 5.7425537c3.67688 3.67688 5.7425537 8.663818 5.7425537 13.863739l0 0c0 10.828247 -8.778076 19.606293 -19.606323 19.606293l0 0c-10.828247 0 -19.606323 -8.778046 -19.606323 -19.606293z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m1706.759 425.1101l2.46875 -0.296875q0.125 0.953125 0.640625 1.453125q0.53125 0.5 1.265625 0.5q0.78125 0 1.328125 -0.59375q0.546875 -0.609375 0.546875 -1.640625q0 -0.953125 -0.53125 -1.515625q-0.515625 -0.578125 -1.25 -0.578125q-0.5 0 -1.1875 0.203125l0.28125 -2.09375q1.046875 0.03125 1.59375 -0.4375q0.546875 -0.484375 0.546875 -1.28125q0 -0.671875 -0.40625 -1.078125q-0.390625 -0.40625 -1.0625 -0.40625q-0.65625 0 -1.125 0.46875q-0.453125 0.453125 -0.5625 1.328125l-2.359375 -0.40625q0.25 -1.203125 0.734375 -1.921875q0.5 -0.734375 1.390625 -1.140625q0.890625 -0.421875 2.0 -0.421875q1.875 0 3.015625 1.203125q0.9375 0.984375 0.9375 2.21875q0 1.765625 -1.921875 2.8125q1.15625 0.234375 1.84375 1.09375q0.6875 0.859375 0.6875 2.0625q0 1.765625 -1.296875 3.015625q-1.28125 1.234375 -3.1875 1.234375q-1.8125 0 -3.015625 -1.046875q-1.1875 -1.046875 -1.375 -2.734375z\" fill-rule=\"nonzero\"/><path fill=\"#ffffff\" d=\"m1749.9443 304.8085l0 0c0 -10.828278 8.778076 -19.606323 19.606323 -19.606323l0 0c5.199951 0 10.18689 2.0656738 13.86377 5.7425537c3.67688 3.6769104 5.7425537 8.663849 5.7425537 13.86377l0 0c0 10.828247 -8.778076 19.606293 -19.606323 19.606293l0 0c-10.828247 0 -19.606323 -8.778046 -19.606323 -19.606293z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1749.9443 304.8085l0 0c0 -10.828278 8.778076 -19.606323 19.606323 -19.606323l0 0c5.199951 0 10.18689 2.0656738 13.86377 5.7425537c3.67688 3.6769104 5.7425537 8.663849 5.7425537 13.86377l0 0c0 10.828247 -8.778076 19.606293 -19.606323 19.606293l0 0c-10.828247 0 -19.606323 -8.778046 -19.606323 -19.606293z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m1772.0306 311.7285l-2.5625 0l0 -9.640625q-1.40625 1.3125 -3.3125 1.9375l0 -2.328125q1.015625 -0.328125 2.1875 -1.234375q1.171875 -0.921875 1.609375 -2.140625l2.078125 0l0 13.40625z\" fill-rule=\"nonzero\"/><path fill=\"#ffffff\" d=\"m1927.3759 245.38806l0 0c0 -10.828262 8.777954 -19.606308 19.606201 -19.606308l0 0c5.199951 0 10.18689 2.0656586 13.86377 5.7425537c3.67688 3.6768951 5.7425537 8.663834 5.7425537 13.863754l0 0c0 10.828247 -8.778076 19.606293 -19.606323 19.606293l0 0c-10.828247 0 -19.606201 -8.778046 -19.606201 -19.606293z\" fill-rule=\"evenodd\"/><path stroke=\"#000000\" stroke-width=\"2.0\" stroke-linejoin=\"round\" stroke-linecap=\"butt\" d=\"m1927.3759 245.38806l0 0c0 -10.828262 8.777954 -19.606308 19.606201 -19.606308l0 0c5.199951 0 10.18689 2.0656586 13.86377 5.7425537c3.67688 3.6768951 5.7425537 8.663834 5.7425537 13.863754l0 0c0 10.828247 -8.778076 19.606293 -19.606323 19.606293l0 0c-10.828247 0 -19.606201 -8.778046 -19.606201 -19.606293z\" fill-rule=\"evenodd\"/><path fill=\"#000000\" d=\"m1947.9309 252.30806l0 -2.6875l-5.46875 0l0 -2.234375l5.796875 -8.484375l2.15625 0l0 8.46875l1.65625 0l0 2.25l-1.65625 0l0 2.6875l-2.484375 0zm0 -4.9375l0 -4.5625l-3.078125 4.5625l3.078125 0z\" fill-rule=\"nonzero\"/></g></svg>\n</div>\n\n<p>\n  In Sample Case #2, there are 6 cafes and they are at\n  (3, 1), (4, 1), (5, 1), (6, 1), (7, 1) and (8, 1).\n  Since they are all on the same vertical street, every triplet of cafes\n  has a square parade going through it. So the answer is 6 choose 3 = 20.\n</p><p>\n  In Sample Case #3, there are 3 cafes and they are at (7, 24), (19, 17),\n  (0, 34). There is no square parade that goes through these cafes, so the\n  answer is 0.\n</p>\n<p>\n  <b>Note</b>: We do not recommend using interpreted/slower languages for the Large dataset of this problem.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":16},{"type":2,"type__str":"HIDDEN","value":27}],"title":"King's Circle","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>No Nine: Analysis</h2>\n\n<h3>Small dataset</h3>\n<p>\n  To solve the Small dataset, we can check all numbers in the range [<b>A</b>, <b>B</b>] and count how many of them are legal.\n</p>\n\n<h3>Large dataset</h3>\n<p>\n  Let f(X) be the number of legal numbers in the range [0, X].\n  Then the answer is f(<b>B</b>) - f(<b>A</b>) + 1, since <b>A</b> and <b>B</b> are both legal numbers.\n</p>\n\n<p>\nTo calculate f(X), let x[0], x[1], ..., x[n-1] be the decimal representation of X,\nsuch that X = &Sigma;<sub>0&le;i&lt;n</sub>x[i]&times;10<sup>i</sup>.\nFor numbers in the range [X - x[0], X],\nwe will check each number individually to see if it is legal.\n</p>\n\n<p>\nIf we list numbers without the digit 9 in their decimal representations,\nwe can find that their decimal representations are the same as listing numbers in base 9.\nSo for numbers in the range [0, X-x[0]),\nthere are C = &Sigma;<sub>1&le;i&lt;n</sub>x[i]&times;9<sup>i</sup> numbers consisting only of digits in the range [0, 8].\nAccording to the formula, C is divisible by 9.\n</p>\n\n<p>\nFor any integer Y, there is exactly one number divisible by 9 in the set {10Y + 0, 10Y + 1, ..., 10Y + 8}.\nThe C numbers form C/9 such groups, and in each group, there are exactly 8 legal numbers,\nso there are 8C/9 legal numbers in the range [0, X-x[0]).\n</p>\n\n<p>\n  <b>Alternative solution (Dynamic Programming):</b>\n  To calculate f(X), we can define dp[i][j] to be the number of integers Y such that\n<ul>\n  <li>Y &lt; floor(X/10<sup>i</sup>)</li>\n  <li>Y does not contain 9 in its decimal representation;</li>\n  <li>Y &equiv; j (mod 9).</li>\n</ul>\nThen f(X) = dp[0][1] + dp[0][2] + ... + dp[0][8] + 1.\n</p>\n\n<p>\n  The <a href=\"https://en.wikipedia.org/wiki/Bellman_equation\">Bellman equation</a> is\n  dp[k-1][j] = sum[dp[k][j'] for 0&le;d&le;8, 10j'+d &equiv; j (mod 9)] +\n  |{g | 10floor(X/10<sup>k</sup>)&le;g&lt;floor(X/10<sup>k-1</sup>), g &equiv; j (mod 9)}|.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3podtid350EyymN3mZIq0QATm_BD9o6QIXJfW4K5PqQorzFSK7gwyVBIZoJ9oLhUee4tjVmQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000051183","statement":"<h2>Problem</h2>\n\n<p>\n  No Nine is a counting game that you can try when you are bored.\n  In this game, you are only allowed to say numbers that are <i>legal</i>.\n  A number is legal if and only if <u>all</u> of the following are true:\n</p>\n<ul>\n  <li>it is a natural number (i.e. in the set {1, 2, 3...})\n  <li>it does not contain the digit 9 anywhere in its base 10 representation\n  <li>it is not divisible by 9\n</ul>\n<p>\n  For example, the numbers 16 and 17 are legal. The numbers 18, 19, 17.2, and\n  -17 are not legal.\n</p><p>\n  On the first turn of the game, you choose and say a legal number <b>F</b>.\n  On each subsequent turn, you say the next legal number.\n  For example, if you played a game with <b>F</b> = 16, you would say 16, 17,\n  20, 21, and so on.\n</p><p>\n  Alice is very good at this game and never makes mistakes.\n  She remembers that she played a game in which the first number was <b>F</b>\n  and the last number was <b>L</b> (when she got tired of the game and stopped),\n  and she wonders how many turns were in the game in total (that is, how many\n  numbers she said).\n</p>\n\n<h3>Input</h3>\n<p>\n  The input starts with one line containing one integer <b>T</b>; <b>T</b> test\n  cases follow.\n  Each test case consists of a single line containing two integers <b>F</b> and\n  <b>L</b>: the first and last numbers from the game, as described above.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>,\n  where <code>x</code> is the test case number (starting from 1),\n  and <code>y</code> is the number of the turns played in the game.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 60 seconds per test set.<br/>\n  Memory limit: 1 GB.<br/>\n  <b>F</b> does not contain a <code>9</code> digit.<br/>\n  <b>F</b> is not divisible by 9.<br/>\n  <b>L</b> does not contain a <code>9</code> digit.<br/>\n  <b>L</b> is not divisible by 9.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  1 &le; <b>F</b> &lt; <b>L</b> &le; 10<sup>6</sup>.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  1 &le; <b>F</b> &lt; <b>L</b> &le; 10<sup>18</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U37I_J78nCaTL2mDwez7-6nkPoC4dQrN9Q266J_sP3vQ_eA0Py_mSFNHpNVaa7TMZOHkC9nZaNQCS0_Muh7E1ouogs9lw/no_nine_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n16 26\n88 102\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2k5vP7KwLRd7in8D6rdTG-sLx4RPhCcju4Pflut9Rj6KWr-sotzr42bkc9cmboIi2TQ5DX0CwAfIfzC2QOax7k4SuAVr4/no_nine_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 9\nCase #2: 4\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn Sample Case #1, the game lasted for 9 turns, and the numbers Alice said were:\n16, 17, 20, 21, 22, 23, 24, 25, 26.\n</p><p>\nIn Sample Case #2, the game lasted for 4 turns, and the numbers Alice said were:\n88, 100, 101, 102.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":7},{"type":2,"type__str":"HIDDEN","value":13}],"title":"No Nine","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000050ff4","type":1,"type__str":"SPECTATOR"},"title":"Round B"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
