{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1587261600000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"000000000019ffc8","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  Thank you for participating in Kick Start 2020 Round B.\n</p>\n<p>\n</p>\n<hr>\n<p>\n<b>Cast</b>\n</p><p>\n  Bike Tour: Written by Swante Scholz and prepared by Raihat Zaman Neloy.\n</p><p>\n  Bus Routes: Written by Jin Park and prepared by Swapnil Gupta.\n</p><p>\n  Robot Path Decoding: Written by Swante Scholz and prepared by Jonathan Irvin Gunawan.\n</p><p>\n  Wandering Robot: Written by Yossi Matsumoto and prepared by Anson Ho.\n</p><p>\n  Solutions, other problem preparation, reviews and contest monitoring by\n  Ankit Goyal,\n  Anson Ho,\n  Bohdan Pryshchenko,\n\nBoon Eng Oh,\n\n  Goutham Harsha,\n  Jared Gillespie,\n  Jonathan Irvin Gunawan,\n  Kashish Bansal,\n  Kevin Tran,\n  Krists Boitmanis,\n  Lalit Kundu,\n  Lizzie Sapiro,Naranbayar Uuganbayar,\n  Paul Hoang,\n  Raihat Zaman Neloy,\n  Ruoyu Zhang,\n  Sadia Atique,\n  Seunghyun Jo,\n  Shantam Agarwal,\n  Sudarsan Srinivasan,\n  Swante Scholz, and\n  Swapnil Gupta,\nYuxin Wei.\n</p>\n<p>\nAnalysis authors:\n</p>\n<ul>\n  <li>Bike Tour: Sadia Atique</li>\n  <li>Bus Routes: Swapnil Gupta</li>\n  <li>Robot Path Decoding: Swapnil Gupta</li>\n  <li>Wandering Robot: Jonathan Irvin Gunawan</li>\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1587250800000,"tasks":[{"analysis":"<p>\n  For each of the checkpoints, we can determine if it is a peak in O(1) time by comparing its\n  height to the heights of the checkpoints before and after it.\n</p>\n<p>\n  There are <b>N</b> checkpoints, so the total time complexity of this approach is O(<b>N</b>),\n  which is sufficient for both Test Set 1 and Test Set 2.\n</p>\n<h5>Sample Code(C++)</h5>\n<pre><code class=\"language-cpp\">\n<var>int</var> countPeaks(vector<<var>int</var>> checkpoints) {\n  <var>int</var> peaks = 0;\n  for(<var>int</var> i = 1; i < checkpoints.size() - 1; i++) {\n     if(checkpoints[i-1] < checkpoints[i] && checkpoints[i+1] < checkpoints[i]) {\n        peaks++;\n     }\n  }\n  return peaks;\n}\n</code></pre>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0q6TMYfiStX3CGfeLVkWHrtReG2ht8aHN6S17Wjf9KdhdQqRKfgWGrazIKfUN-4a4fYdhMj7A/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000002d82e6","statement":"<h3>Problem</h3>\n<p>\n  Li has planned a bike tour through the mountains of Switzerland. His tour consists of <b>N</b> checkpoints, numbered from 1 to <b>N</b>\n  in the order he will visit them. The i-th checkpoint has a height of <b>H<sub>i</sub></b>.\n</p><p>\n  A checkpoint is a <i>peak</i> if:\n  <ul>\n    <li>It is not the 1st checkpoint or the <b>N</b>-th checkpoint, and</li>\n    <li>The height of the checkpoint is <i>strictly greater than</i> the checkpoint immediately before it and the checkpoint immediately after it.</li>\n  </ul>\n</p><p>\n  Please help Li find out the number of peaks.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the integer <b>N</b>.\n  The second line contains <b>N</b> integers. The i-th integer is <b>H<sub>i</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the number of peaks in Li's bike tour.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 10 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>H<sub>i</sub></b> &le; 100.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  3 &le; <b>N</b> &le; 5.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  3 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U205O2PxpBL9NuQgM5lPbP-jU-7UE2kSrZX57QZETfXiMgd4c4MIe4p0bM8tGkOT8GsBYDQ_4ArzlyFVEM_xWVT339VVGXATw/bike_tour_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n3\n10 20 14\n4\n7 7 7 7\n5\n10 90 20 90 10\n3\n10 3 10\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1XiY_jY5Wa6tcvjD-rpKaV-s3gW40QJOAPUSwu3ChBqm-bVZyOOmzU6YskQ0_7RnntzKDlEO6YBxmg44fWtLSZ0WSepmpw72E/bike_tour_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 0\nCase #3: 2\nCase #4: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  <ul>\n    <li>In sample case #1, the 2nd checkpoint is a peak.</li>\n    <li>In sample case #2, there are no peaks.</li>\n    <li>In sample case #3, the 2nd and 4th checkpoint are peaks.</li>\n    <li>In sample case #4, there are no peaks.</li>\n  </ul>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":1,"type__str":"VISIBLE","value":7}],"title":"Bike Tour","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  We need to take the buses in order from 1 to <b>N</b>. Let the buses be B<sub>1</sub>,\n  B<sub>2</sub>, ...., B<sub><b>N</b></sub>. Also, let us define a <i>good starting day</i> to be\n  any day Y in the range [1..<b>D</b>] such that\n  it is possible to start the journey on day Y and take all buses in the order from\n  1 to <b>N</b> before the end of day <b>D</b>. Note that we do not require Y to be a multiple of\n  <b>X<sub>1</sub></b>, so there may be some waiting time involved in the beginning of the journey.\n</p>\n<p>\n  For a fixed day Y, let us see if it is a good starting day or not.\n  The best strategy would be to take bus B<sub>1</sub> as early as possible on or after\n  day Y.\n  This is because it would give us more days to take subsequent buses. Let us say we took bus\n  B<sub>1</sub> on day D<sub>1</sub>. Now the best strategy would be to take bus B<sub>2</sub>\n  as early as possible on or after day D<sub>1</sub>. Thus, if we took bus B<sub>i</sub> on day\n  D<sub>i</sub>, it would be optimal to take bus B<sub>i+1</sub> as early as possible on or after day\n  D<sub>i</sub>.\n</p>\n\n<p>\n  Now we need to find out what is the earliest possible day for Bucket to take\n  bus B<sub>i</sub> on or after a particular day K. Since bus B<sub>i</sub> only runs on days\n  that are multiples of <b>X<sub>i</sub></b>, we need to find the smallest multiple of\n  <b>X<sub>i</sub></b> greater than or equal to K. This can be calculated using the formula\n  &lceil; K / <b>X<sub>i</sub></b> &rceil; * <b>X<sub>i</sub></b>. Thus if bus B<sub>i</sub> is\n  taken on day D<sub>i</sub>, then it would be optimal to take bus B<sub>i+1</sub> on day\n  D<sub>i+1</sub> &equals; &lceil; D<sub>i</sub> / <b>X<sub>i+1</sub></b> &rceil; * <b>X<sub>i+1</sub></b>.\n  Thus, day Y is a good starting day if D<sub><b>N</b></sub> &le; <b>D</b>, and this question\n  can be answered in O(<b>N</b>) time.\n</p>\n\n<h3>Test set 1 </h3>\n<p>\n  <b>D</b> can be at most 100, so we can find the latest good starting day by using the above\n  approach for each day Y in the range [1..<b>D</b>]. The time complexity of this naive algorithm\n  is O(<b>DN</b>).\n</p>\n\n<h3>Test set 2 </h3>\n<p>\n  Now <b>D</b> can be at most 10<sup>12</sup>, so the naive algorithm would time out.\n  Consider the largest good starting day P. Obviously, any day before P would be good as well\n  because we can take the buses on the same days as if we started the journey on day P.\n  Because of this observation, we can binary search on the range from 1 to <b>D</b> to find the\n  largest good starting day P. The time complexity of the solution is O(<b>N</b> log <b>D</b>).\n  Note that we can reduce the time complexity to O(<b>N</b> log(<b>D</b>/<b>X<sub>1</sub></b>)) by\n  restricting the search to multiples of <b>X<sub>1</sub></b> only.\n</p>\n\n<h3>Alternate solution</h3>\n<p>\n  It is possible to solve the problem in linear time by working out the solution backwards.\n  If we want to start our journey as late as possible, we should try to take the last bus\n  B<sub><b>N</b></sub> as late a possible, namely, on day D<sub><b>N</b></sub>, which is the largest\n  multiple of <b>X<sub>N</sub></b>, less than or equal to day <b>D</b>. Similarly, in order to be on\n  time for the last bus on day D<sub><b>N</b></sub>, we have to take bus B<sub><b>N</b>-1</sub> no\n  later than on day D<sub><b>N</b>-1</sub>, which is the largest multiple of\n  <b>X<sub><b>N</b>-1</sub></b>, less than or equal to D<sub><b>N</b></sub>. In general, bus\n  B<sub>i</sub> should be taken no later than on day D<sub>i</sub>, which is the largest\n  multiple of <b>X<sub>i</sub></b>, less than or equal to D<sub>i+1</sub>. The last calculated value\n  D<sub>1</sub> is the answer to the problem.\n</p>\n<p>\n  Note that the largest multiple of\n  <b>X<sub>i</sub></b> that occurs before a day L can be calculated in constant time as L - L mod\n  <b>X<sub>i</sub></b>. Therefore, the overall time complexity of this solution is O(<b>N</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3P1CDCrhymLF9YsGWn2CXhT_PWuSgEG_EKl1MaYNhkUm8Bm-VQ5T-c95xtU7uflS5jZpXN8xE/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000002d83bf","statement":"<h3>Problem</h3>\n<p>\n  Bucket is planning to make a very long journey across the countryside by bus.\n  Her journey consists of <b>N</b> bus routes, numbered from 1 to <b>N</b> in the order she must take them.\n  The buses themselves are very fast, but do not run often. The i-th bus route only runs every <b>X<sub>i</sub></b> days.\n</p><p>\n  More specifically, she can only take the i-th bus on day\n  <b>X<sub>i</sub></b>,\n  2<b>X<sub>i</sub></b>,\n  3<b>X<sub>i</sub></b> and so on. Since the buses are very fast, she can take multiple buses on the\n  same day.\n</p><p>\n  Bucket must finish her journey by day <b>D</b>, but she would like to start the journey\n  as late as possible.\n  What is the latest day she could take the first bus, and still finish her journey by day <b>D</b>?\n</p><p>\n  It is guaranteed that it is possible for Bucket to finish her journey by day <b>D</b>.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the two integers <b>N</b> and <b>D</b>.\n  Then, another line follows containing <b>N</b> integers, the i-th one is <b>X<sub>i</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the latest day she could take the first bus, and still finish her journey by day <b>D</b>.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 10 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>X<sub>i</sub></b> &le; <b>D</b>.<br/>\n  1 &le; <b>N</b> &le; 1000.<br/>\n  It is guaranteed that it is possible for Bucket to finish her journey by day <b>D</b>.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  1 &le; <b>D</b> &le; 100.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  1 &le; <b>D</b> &le; 10<sup>12</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1kF6VdEBuw9tOG5fayHMy1xd3OwIThlNnJz8H8Te2yYXUHDDs5kSkjw-azJ0QivP8tr3hMfB5ioNAYGmddD-ftPQ-wt-B9b6Q/bus_routes_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3 10\n3 7 2\n4 100\n11 10 5 50\n1 1\n1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3oJYnCZjm3rzwSJ4ItFvubthnbgT4Xc0OYCO5LVCe8QAlHYVVQAUQOnMs0XTmGvzg_r2XAw0z2sF1VyIUG115pGpcZKAypFd94/bus_routes_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 6\nCase #2: 99\nCase #3: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, there are <b>N</b> = 3 bus routes and Bucket must arrive by day <b>D</b> = 10.\n  She could:\n  <ul>\n    <li>Take the 1st bus on day 6 (<b>X<sub>1</sub></b> = 3),</li>\n    <li>Take the 2nd bus on day 7 (<b>X<sub>2</sub></b> = 7) and</li>\n    <li>Take the 3rd bus on day 8 (<b>X<sub>3</sub></b> = 2).</li>\n  </ul>\n</p>\n<p>\n  In Sample Case #2, there are <b>N</b> = 4 bus routes and Bucket must arrive by day <b>D</b> = 100.\n  She could:\n  <ul>\n    <li>Take the 1st bus on day 99 (<b>X<sub>1</sub></b> = 11),</li>\n    <li>Take the 2nd bus on day 100 (<b>X<sub>2</sub></b> = 10),</li>\n    <li>Take the 3rd bus on day 100 (<b>X<sub>3</sub></b> = 5) and</li>\n    <li>Take the 4th bus on day 100 (<b>X<sub>4</sub></b> = 50),</li>\n  </ul>\n</p>\n<p>\n  In Sample Case #3, there is <b>N</b> = 1 bus route and Bucket must arrive by day <b>D</b> = 1.\n  She could:\n  <ul>\n    <li>Take the 1st bus on day 1 (<b>X<sub>1</sub></b> = 1).</li>\n  </ul>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":10},{"type":1,"type__str":"VISIBLE","value":13}],"title":"Bus Routes","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n<p>\n  To facilitate parsing of the program, let us define <i>ClosingBracket</i>(i) as the index of the\n  closing bracket corresponding to the opening bracket at index i. We can find\n  <i>ClosingBracket</i>(i) for each opening bracket using a stack in linear time, which is similar to\n  checking whether a string is a correct bracket sequence or not, see\n  <a href=\"https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\">this article</a>\n  for more details.\n</p>\n\n<h3>Test Set 1</h3>\n<p>\n  The total number of moves is limited by 10<sup>4</sup> per test. Consider the expanded\n  version of a program P to be the string consisting of characters N,S,W,E only and having the same\n  moves as P. For example, the program 2(3(N)EW) would expand to NNNEWNNNEW.  Since the number of moves\n  is small, we can generate the expanded program, and calculate the position of the robot easily by\n  taking one step at a time.\n</p>\n\n<p>\n  For an original subprogram between indices L and R, the equivalent expanded version\n  <i>Expanded</i>(L, R) can be constructed recursively as follows.\n  We start with an empty string <i>Result</i>, iterate the subprogram from the left index L to the\n  right index R, and consider two cases:\n  <ul>\n    <li>If the i-th symbol is in {'N','S','E','W'}, append it to <i>Result</i>.</li>\n    <li>If the i-th symbol is a digit D then\n      <ul>\n        <li>Call <i>Expanded</i>(i+2, <i>ClosingBracket</i>(i+1)-1) to construct the expanded\n          version P' of the next subprogram recursively,</li>\n        <li>Append P' to <i>Result</i> D times, and</li>\n        <li>Advance the current position i to <i>ClosingBracket</i>(i+1)+1.</li>\n      </ul>\n    </li>\n  </ul>\n</p>\n\n<p>\nThe first case takes constant time. In the second case, it takes O(D &times; |P'|) time to append the\nsubprogram P' to the result D times. Let LEN be the length of the expanded program. The total expanded\nlength of the subprograms at the second nesting level is at most LEN/2. The total expanded length of\nsubprograms at the third nesting level is at most LEN/4, and so on. Thus the time complexity would\n  be bounded by LEN + LEN / 2 + LEN / 4 + LEN / 8 + .. which is equal to 2 &times; LEN as this is a\n  geometric progression. Hence, the time complexity to generate the expanded version of the original\n  program would be O(LEN).\n</p>\n\n<h3>Test Set 2</h3>\n<p>\n  Now it is possible that the number of moves is exponential in the length of the original program.\n Thus it would be impossible to execute the moves one by one in the given time.\n</p>\n\n<p>\n  For the ease of explanation, let us assume that the rows and columns are numbered from 0\n  (inclusive) to 10<sup>9</sup> (exclusive). Suppose that the robot is at position (a, b) and now we\n  come across instruction X(Y) in the program. Let us say subprogram Y changes the current position\n  of the robot by dx, dy (because of the torus shape of Mars, we can assume that\n  0 &le; dx &lt; 10<sup>9</sup> and 0 &le; dy &lt; 10<sup>9</sup>). Then the position of the robot\n  after following the instruction X(Y) would be ((a + X * dx) mod 10<sup>9</sup>, (b + X * dy) mod 10<sup>9</sup>)\n  as the subprogram Y is repeated X times. Hence, we just need to find the relative displacement of\n  the robot by each subprogram.\n</p>\n\n<p>\n For a subprogram between indices L and R, the relative displacement of the robot can be calculated\n  using <i>Evaluate</i>(L, R) recursively as follows.\n\n Consider that we are currently at the square (a, b), which is initially the square (0, 0). Iterate\n  the subprogram from the left index L to the right index R, and consider two cases:\n  <ul>\n    <li>If the i-th symbol is in {'N','S','E','W'}, change the current position of the robot\n      accordingly.</li>\n    <li>If the i-th symbol is a digit D then\n      <ul>\n        <li>Call <i>Evaluate</i>(i+2, <i>ClosingBracket</i>(i+1)-1)to get the relative displacement\n          (dx, dy) of the robot by the next subprogram recursively,</li>\n        <li>Change the current position to ((a + D * dx) mod 10<sup>9</sup>, (b + D * dy) mod 10<sup>9</sup>), and</li>\n        <li>Advance the current position i to <i>ClosingBracket</i>(i+1)+1.</li>\n      </ul>\n     </li>\n  </ul>\n</p>\n\n<p>\n  Clearly, we visit each character in the program exactly once. Hence, the time complexity of the\n  solution is O(N), where N is the length of the program.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2gxIUxZmxrXxHq1Q4Htrf8ZQRcgrzT3r7gjG8PItAiz2sOWum5eP-_DoesnGogyzE_tPN05_4/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000002d83dc","statement":"<h3>Problem</h3>\n<p>\n  Your country's space agency has just landed a rover on a new planet. The planet's surface can be thought of as\n  a grid of squares containing 10<sup>9</sup> columns (numbered starting from 1 from west to east)\n  and 10<sup>9</sup> rows (numbered starting from 1 from north to south). Let (w, h) denote the square\n  in the w-th column and the h-th row. The rover begins on the square (1, 1).\n</p><p>\n  The rover can be maneuvered around\n  on the surface of the planet by sending it a <i>program</i>, which contains a string of characters\n  representing movements in the four cardinal directions. The robot executes each character of the string in order.\n  The rover moves according to the following rules:\n  <ul>\n    <li><code>N</code>: Move one unit north.</li>\n    <li><code>S</code>: Move one unit south.</li>\n    <li><code>E</code>: Move one unit east.</li>\n    <li><code>W</code>: Move one unit west.</li>\n  </ul>\n</p><p>\n  There is also a special instruction <code>X(Y)</code>, where <code>X</code> is a number between\n  2 and 9 (inclusive) and <code>Y</code> is a non-empty subprogram. This denotes that the robot should\n  repeat the subprogram <code>Y</code> a total of <code>X</code> times. For example:\n  <ul>\n    <li><code>2(NWE)</code> is equivalent to <code>NWENWE</code>.</li>\n    <li><code>3(S2(E))</code> is equivalent to <code>SEESEESEE</code>.</li>\n    <li><code>EEEE4(N)2(SS)</code> is equivalent to <code>EEEENNNNSSSS</code>.</li>\n  </ul>\n</p><p>\n  Since the planet is a spheroid, the first and last columns are adjacent, so\n  moving east from column 10<sup>9</sup> will move the rover to column 1 and\n  moving south from row 10<sup>9</sup> will move the rover to row 1.\n  Similarly, moving west from column 1 will move the rover to column 10<sup>9</sup> and\n  moving north from row 1 will move the rover to row 10<sup>9</sup>.\n  Given a program that the robot will execute, determine the final position of the robot after it has finished all its movements.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> lines follow.\n  Each line contains a single string: the program sent to the rover.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: w h</code>, where <code>x</code> is the test case number (starting from 1) and <code>w h</code>\n  is the final square (w, h) the rover finishes in.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 10 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  The string represents a valid program.<br/>\n  The length of each program is between 1 and 2000 characters inclusive.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  The total number of moves the robot will make in a single test case is at most 10<sup>4</sup>.\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  No additional constraints.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U08D0cv0wdGTU7Wefh7HeaWMF5JO6E_fhZ1LEpdGpZc5hVbzxNLsOIzNvRm7DaLx262D4KP469OhwG0wNrbpLGBnlFx_YUp-bxYxP3riMpo2zc/robot_path_decoding_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\nSSSEEE\nN\nN3(S)N2(E)N\n2(3(NW)2(W2(EE)W))\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U04cFwT5Ifck5N32gsGeveNPbLkkRyNhpLhGd3y7-AtAG-1uohVTAmcdO6OCvHR-GrKjU0mZ2ANospXkyIa8JgWt-lCVduBwGs6WP82UAZG3IaX/robot_path_decoding_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4 4\nCase #2: 1 1000000000\nCase #3: 3 1\nCase #4: 3 999999995\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the rover moves three units south, then three units east.\n</p>\n<p>\n  In Sample Case #2, the rover moves one unit north. Since the planet is a torus, this moves it\n  into row 10<sup>9</sup>.\n</p>\n<p>\n  In Sample Case #3, the program given to the rover is equivalent to <code>NSSSNEEN</code>.\n</p>\n  <p>\n  In Sample Case #4, the program given to the rover is equivalent to <code>NWNWNWWEEEEWWEEEEWNWNWNWWEEEEWWEEEEW</code>.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":11},{"type":1,"type__str":"VISIBLE","value":16}],"title":"Robot Path Decoding","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n<p>\n  We can solve this test set using dynamic programming. Let f(x, y) be the probability Jemma passes\n  the challenge if she is currently in the square (x, y). The base case of this function is\n  f(<b>W</b>, <b>H</b>) = 1. Also, if the square (x, y) has been removed, then f(x, y) = 0.\n</p><p>\n  If there is only one possible square to go to from square (x, y) (i.e. either x = <b>W</b> or\n  y = <b>H</b>), then f(x, y) = f(x', y'), where (x', y') is the possible next square. Otherwise,\n  let (x<sub>1</sub>', y<sub>1</sub>') and (x<sub>2</sub>', y<sub>2</sub>') be the possible next\n  squares. Since they have the same probability to become the next square,\n  f(x, y) = 0.5 &times; f(x<sub>1</sub>', y<sub>1</sub>')\n  + 0.5 &times; f(x<sub>2</sub>', y<sub>2</sub>').\n</p><p>\n  The running time and space of this solution is O(<b>W</b> &times; <b>H</b>).\n</p>\n<h3>Test Set 2</h3>\n<p>\n  The first observation to solve this problem is to realize that there are two ways to avoid the\n  hole: either going to the left and the bottom of the hole (illustrated by the red path in the\n  figure below), or going to the top and the right of the hole (illustrated by the blue path in the\n  figure below).\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0SzQoFXQwiq674qwgkW_QLK_gb-9nx0phlLhMKO1jpa80-Ss56tQrgDB4YaRmWDpdXShNsEA826eV4xSpf/two_paths.png\" height=\"25%\" />\n<p>\n  It can be seen that the set of paths in the red path and the blue path are disjoint--there is no\n  path that goes both to the left of the hole and to the top of the hole simultaneously. Therefore,\n  we can compute the probability that Jemma passes the challenge by taking the red path and the blue\n  path separately and compute the sum of both probabilities.\n</p><p>\n  Since the probability of passing the challenge by taking the blue path can be computed similarly,\n  we only focus on computing the probability of passing the challenge by taking the red path for the\n  rest of the discussion. The next observation to solve this problem is that we can choose a set of\n  squares diagonally from the bottom-left corner of the hole (illustrated by the green squares\n  below) such that Jemma has to pass exactly one of the squares to pass the challenge by taking the\n  red path. Also, by landing on one of the squares, it is no longer possible that Jemma will fall to\n  the hole, thus passing the challenge by taking the red path is now guaranteed.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1zYfu5JHR4NptMHfMEMAKRkUtiPGkcqJfDTviL1dk2s7AN0bQwDC9ktNzWSbc1blq5mg13cMi0kh6b6ErhQ62O1_gA/critical_points.png\" height=\"25%\" />\n<p>\n  Therefore, computing the probability of passing the challenge by taking the red path is equivalent\n  to computing the probability that Jemma will land on one of the green squares. Similar to the red\n  and blue paths discussion, since Jemma cannot pass two green squares simultaneously, we can\n  compute the probability that Jemma lands on each square separately and compute the sum of all\n  probabilities.\n</p><p>\n  Let us take square X for an example. Consider all paths that go to the square X. For each move in\n  the path, there is a 0.5 probability that the move will follow the path. Since the number of moves\n  to square X is (<b>L</b> + <b>D</b> - 2), there is a (0.5)<sup>(<b>L</b> + <b>D</b> - 2)</sup>\n  probability that this path will be taken. This number has to be multiplied with the number of\n  paths to go to square X, which can be\n  <a href=\"https://www.geeksforgeeks.org/maths-behind-number-of-paths-in-matrix-problem/\">computed\n  using a single binomial coefficient</a>. The probability of reaching any particular green square\n  is the same for all but the green square in the last row, which is left to the reader as an\n  exercise.\n</p><p>\n  To handle floating point issues, we can store every huge number in their log representation (i.e.\n  storing log<sub>2</sub>(x) instead of x). We can then compute the value of C(n, k) / 2<sup>n</sup>\n  using 2<sup>log<sub>2</sub>(n! / (k! &times; (n - k)!) / 2<sup>n</sup>)</sup> =\n  2<sup>log<sub>2</sub>(n!) - log<sub>2</sub>(k!) - log<sub>2</sub>((n - k)!) - n</sup>, which takes\n  constant time to compute if we have precomputed every value of log<sub>2</sub>(x!). Since there\n  can be at most O(N) green squares, where N is the larger length of the grid\n  (i.e. N = max(<b>H</b>, <b>W</b>)), the total running time of this solution is O(N).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0SBi8IjqvfnCjK8aRZdRWSQ1khvdhpm-aW0l-o0QQw9FB0l4xYcN5O43zdyXLXPQ-LPbUGjhw/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000002d8565","statement":"<h3>Problem</h3>\n<p>\n  Jemma is competing in a robotics competition. The challenge for today is to build a robot\n  that can navigate around a hole in the arena.\n</p><p>\n  The arena is a grid of squares containing\n  <b>W</b> columns (numbered 1 to <b>W</b> from left to right) and\n  <b>H</b> rows (numbered 1 to <b>H</b> from top to bottom).\n  The square in the x-th column and y-th row is denoted (x, y).\n  The robot begins in the top left square (1,1) and must navigate to the bottom right square (<b>W</b>, <b>H</b>).\n</p><p>\n  A rectangular subgrid of squares has been cut out of the grid. More specifically, all the squares\n  that are in the rectangle with top-left square (<b>L</b>, <b>U</b>) and bottom-right square (<b>R</b>, <b>D</b>)\n  have been removed.\n</p><p>\n  Jemma did not have much time to program her robot, so it follows a very simple algorithm:\n  <ul>\n    <li>If the robot is in the rightmost column, it will always move to the square directly below it. Otherwise, </li>\n    <li>If the robot is in the bottommost row, it will always move to the square directly right of it. Otherwise, </li>\n    <li>The robot will randomly choose to either move to the square directly to the right, or to the square directly below it with equal probability.</li>\n</ul>\n</p><p>\n  Jemma passes the challenge if her robot avoids falling into the hole and makes it to the square (<b>W</b>, <b>H</b>).\n  What is the probability she passes the challenge?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case consists of a single line containing\n  <b>W</b>, <b>H</b>, <b>L</b>, <b>U</b>, <b>R</b> and <b>D</b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  a real number between 0 and 1 inclusive, the probability that Jemma passes the challenge.\n</p>\n<p>\n<code>y</code> will be considered correct if it is within an absolute or\nrelative error of 10<sup>-5</sup> of the correct answer.\nSee the <a href=\"https://codejam.withgoogle.com/codejam/resources/faq#real-number-behavior\">FAQ</a> for an explanation of what that means,\nand what formats of real numbers we accept.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 15 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>U</b> &le; <b>D</b> &le; <b>H</b>.<br/>\n  1 &le; <b>L</b> &le; <b>R</b> &le; <b>W</b>.<br/>\n  Neither the top-left nor bottom-right squares will be missing.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  1 &le; <b>W</b> &le; 300.<br/>\n  1 &le; <b>H</b> &le; 300.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  1 &le; <b>W</b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>H</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1TGjQYIY5vYWfvqThrY_q3Zc0Jin5y-WXaRFYYnqQULq_MFz0EgfWbRdT166w28DzqQRGN94pB8K6RTxmjCnfjkP7nmftwFRkWHupfVQ/wandering_robot_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n3 3 2 2 2 2\n5 3 1 2 4 2\n1 10 1 3 1 5\n6 4 1 3 3 4\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U39bXeIL9lohjk_vNIdfs4-_3ECadICe2JOWEqLpIQsyZnAK53MeXWOXygK-3wEU4SG9vEJpamxIQi0hvZkor4Y3-WqFumB6ifJD3sQF7Q/wandering_robot_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0.5\nCase #2: 0.0625\nCase #3: 0.0\nCase #4: 0.3125\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":14},{"type":1,"type__str":"VISIBLE","value":24}],"title":"Wandering Robot","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"000000000019ffc8","type":1,"type__str":"SPECTATOR"},"title":"Round B 2020"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
