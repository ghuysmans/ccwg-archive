{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1553411700000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000050e01","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  Thank you for participating in Kick Start’s Round A, especially given some of the issues affecting\n  the scoreboard and submitting solutions. We apologize — we’ve heard you and understand these\n  issues caused frustration, and our team is working hard to ensure we fix the issue for future rounds.\n</p>\n<p>\n  Our first Kick Start round this year featured problems requiring varied skills. The first problem, <i>Training</i>,\n  required an ad-hoc reasoning around optimal decisions and optimizing the implementation via precomputation.\n  The second problem, <i>Parcel</i>'s solution was based on binary search and the concepts of graph theory. The last problem, <i>Contention</i>\n  was a data structures heavy problem requiring some nice observations.\n</p>\n<p>\n</p>\n<hr>\n<p>\n<b>Cast</b>\n</p><p>\n  Training: Written by Asim Krishna Prasad and prepared by Sadia Nahreen.\n</p><p>\n  Parcels: Written by Bartosz Kostka and prepared by Kunal Jain and Lalit Kundu.\n</p><p>\n  Contention: Written and prepared by Kevin Tran.\n</p><p>\n  Solutions, other problem preparation, reviews and contest monitoring by\n  Akashdeep Nain,\n  Anupam Das,\n  Bir Bahadur Khatri,\n  Himanshu Jaju,\n  Ian Tullis,\n  Jilei (Jerry) Wang,\n  Jonathan Irvin Gunawan,\n  Kevin Tran,\n  Lalit Kundu,\n  Lizzie Sapiro,\n  Max Ward,\n  Raihat Zaman Neloy,\n  Sadia Atique, and\n  Shimi Zhang.\n</p>\n<p>\nAnalysis authors:\n</p>\n<ul>\n  <li>Training: Sadia Atique</li>\n  <li>Parcels: Reyno Tilikaynen</li>\n  <li>Contention: Himanshu Jaju</li>\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1553400000000,"tasks":[{"analysis":"<h3>Test set 1 (Visible) </h3>\n<p>\n  For Test Set 1, we are able to check all possible locations for the new delivery office in order\n  to find the one that minimizes delivery time. We will do this in two stages. First, we will\n  compute the delivery time for each square given the existing delivery offices. Second, we will try\n  all possible locations for the new office. The precomputation in the first part will allow us to\n  find the delivery time in the second part more efficiently.\n</p>\n<p>\n  For the first stage, we compute the delivery time of a square by iterating over the entire grid\n  and finding the minimum manhattan distance to a square that has a delivery office. This has a time\n  complexity of O(<b>RC</b>) per square for a total time complexity of O((<b>RC</b>)<sup>2</sup>).\n</p>\n<p>\n  For the second stage, we iterate over all possible locations for the new delivery office and for\n  each location, search the entire grid for the square with the maximum new delivery time. The new\n  delivery time is the minimum of the delivery time computed in the first part and the manhattan\n  distance to the new delivery office. This also has a time complexity of O(<b>RC</b>) per delivery\n  location for a total time complexity of O((<b>RC</b>)<sup>2</sup>), which is sufficient for Test\n  Set 1.\n</p>\n<p>\n  Alternatively, we could skip the first stage if we use a faster way of computing the delivery time\n  for each square such as breadth-first search. See the next section for more details.\n</p>\n<h3>Test set 2 (Hidden) </h3>\n<p>\n  We can use a similar approach for Test Set 2, however we will need a more efficient way to compute\n  the maximum delivery time for a new delivery location. We will do this by solving the following\n  subproblem: given a value of <b>K</b>, can we add a new delivery office so that the maximum\n  delivery time is at most <b>K</b>? The solution to this subproblem will be similar to Test Set 1,\n  however having a target value of <b>K</b> allows us to identify exactly which squares need to be\n  serviced by the new delivery office. We can use this difference to create a faster solution.\n</p>\n<p>\n  Note that if the answer to the original problem is <b>K</b>, then the answer to our subproblem\n  will be 'No' for values in the range [1, <b>K</b>-1] and 'Yes' for values in the range\n  [<b>K</b>, infinity]. For these kinds of subproblems, we can use binary search: if a given value\n  works, then it is an upper bound for the answer; otherwise it's a strict lower bound for the\n  answer. Hence, once we have a solution for the subproblem, we can use binary search to solve\n  the original problem. This is a common technique to transform optimization problems into decision\n  problems.\n</p>\n<p>\n  First, we efficiently compute the existing delivery time of every square by inverting the problem:\n  instead of finding the shortest distance to a delivery office for each square, we find the\n  shortest distance to each square from a delivery office. This can be done using a multiple-source,\n  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Breadth-first_search\">\n    breadth-first search\n  </a>\n  starting at all of the delivery offices. A multiple-source BFS is the same as a regular BFS except\n  that you use multiple starting locations instead of one. This search visits each square at most\n  once, which gives us a time complexity of O(<b>RC</b>).\n</p>\n<p>\n  Second, we identify all of the squares which have a delivery time greater than <b>K</b> and then\n  determine if there exists a location that is within a distance of <b>K</b> to each of these\n  squares. In order to do this efficiently, we note that the manhattan distance has an equivalent\n  formula:\n</p>\n<p>\n  dist((x<sub>1</sub>, y<sub>1</sub>), (x<sub>2</sub>, y<sub>2</sub>)) =\n      max(abs(x<sub>1</sub> + y<sub>1</sub> - (x<sub>2</sub> + y<sub>2</sub>)),\n          abs(x<sub>1</sub> - y<sub>1</sub> - (x<sub>2</sub> - y<sub>2</sub>)))\n</p>\n<p>\n  This formula is based on the fact that for any point, the set of points within a manhattan\n  distance of <b>K</b> form a square rotated by 45 degrees. The benefit of this formula is that if\n  we fix (x<sub>2</sub>, y<sub>2</sub>), the distance will be maximized when\n  x<sub>1</sub> + y<sub>1</sub> and x<sub>1</sub> - y<sub>1</sub> are either maximized or minimized.\n</p>\n<p>\n  Hence, we can compute the maximum and minimum values of both x<sub>1</sub> + y<sub>1</sub> and\n  x<sub>1</sub> - y<sub>1</sub> for all squares with a delivery time greater than <b>K</b>. Then, we\n  can try all possible locations for the new delivery office and check if the maximum distance from\n  the location to a square with a current delivery time greater than <b>K</b> is at most <b>K</b> in\n  constant time. Hence, we can check if the answer is at most <b>K</b> with a time complexity of\n  O(<b>RC</b>).\n</p>\n<p>\n  With the binary search, the time complexity becomes O(<b>RC</b>log(<b>R</b>+<b>C</b>)), which is\n  sufficient for the test set. There is a way to improve this to O(<b>RC</b>) time by computing the\n  min/max values mentioned above for all possible <b>K</b> in a single pass over the grid and then\n  using casework to determine if a viable new delivery office location exists for each <b>K</b>, but\n  this optimization is unnecessary.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3YaHmoIpIpuQw2R8W1zjV-VgaUgCKjI1wseOzS362M_dg_p2aL30MHs2VNSRl07USTELHlQQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000006987d","statement":"<h3>Problem</h3>\n<p>\n  You have been hired recently as the Chief Decision Maker (CDM) at a famous parcel delivery\n  company, congratulations! Customers love speedy deliveries of their parcels and you have decided\n  to decrease the time it takes to deliver parcels around the world to win customers. You have\n  introduced this idea to the authorities and they have allocated you enough budget to build at most\n  one new delivery office.\n</p>\n<p>\n  The world can be divided into an <b>R</b> &times; <b>C</b> grid of squares. Each square either\n  contains a delivery office or it does not. You may pick a grid square that does not already\n  contain a delivery office and build a new delivery office there.\n</p>\n<p>\n  The delivery time of a parcel to a square is 0 if that\n  square contains a delivery office. Otherwise, it is defined as the minimum Manhattan distance\n  between that square and any other square containing a delivery office. The overall delivery\n  time is the maximum of delivery times of all the squares. What is the minimum overall\n  delivery time you can obtain by building at most one new delivery office?\n</p>\n<p>\n  Note: The <a href=\"https://en.wikipedia.org/wiki/Taxicab_geometry\">Manhattan distance</a> between\n  two squares (r1,c1) and (r2,c2) is defined as |r1 - r2| + |c1 - c2|, where |*| operator denotes\n  the absolute value.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  The first line of each test case contains the number of rows <b>R</b> and number of columns\n  <b>C</b> of the grid. Each of the next <b>R</b> lines contains a string of <b>C</b> characters\n  chosen from the set {<code>0</code>, <code>1</code>}, where <code>0</code> denotes the absence of a\n  delivery office and <code>1</code> denotes the presence of a delivery office in the square.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is the minimum overall delivery time you\n  can obtain after adding at most one additional delivery office.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 15 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n  There is at least one delivery office in the initial grid.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  1 &le; <b>R</b> &le; 10.<br/>\n  1 &le; <b>C</b> &le; 10.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  1 &le; <b>R</b> &le; 250.<br/>\n  1 &le; <b>C</b> &le; 250.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0y389-xRpZd0Su8eOaAlgv4O8keKFX4IlsAB65Q9275ZRN_aLkHA4a6YHqACJqlhMQubmg9iu3lnoNvWnCDl0XmWx6xA/parcels_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3 3\n101\n000\n101\n1 2\n11\n5 5\n10001\n00000\n00000\n00000\n10001\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0sBFcxuFn4sWyRnJ925a7aEGybTN9TXcBPgvtxY7_gw2tvwWWTS1McsSJi73C52qXf7Yry4UBW-u38y6yh45bFuCVp-Lo/parcels_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 0\nCase #3: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, you get a minimum overall delivery time of 1 by building a new delivery office\n  in any one of the five squares without a delivery office.\n</p><p>\n  In Sample Case #2, all the squares already have a delivery office and so the minimum\n  overall delivery time is 0. Note you have to add <b>at most</b> one delivery office.\n</p><p>\n  In Sample Case #3, to get a minimum overall delivery time of 2, you can build a new\n  delivery office in any of these squares: (2, 3), (3, 2), (3, 3), (3, 4), or (4, 3).\n  Any other possibility results in a higher overall delivery time than 2.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":15},{"type":2,"type__str":"HIDDEN","value":20}],"title":"Parcels","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  The number of possible orderings of the requests is\n  <a href=\"https://en.wikipedia.org/wiki/Factorial\">Factorial(<b>Q</b>)</a>, which would not be fast enough\n  for either of the test sets. We can observe that for a chosen ordering of the requests, the number\n  of seats that the system books in the last request does not depend on the ordering of the previous\n  <b>Q</b> - 1 requests. So, we could start by finding the request to be processed last and move\n  backwards towards the earlier requests. The answer is the minimum seats booked across the <b>Q</b>\n  steps.\n</p>\n<p>Another observation is that at every step, we can always choose this last request greedily from\n  the remaining set: the one where we can book the maximum number of seats. An intuitive proof of\n  why this works would be noticing that our final answer is non-increasing over the <b>Q</b> steps. Now,\n  we can use exchange argument to prove this observation since choosing a request with lesser seats\n  booked would not give us a better answer.\n</p>\n<h3>Test set 1 (Visible)</h3>\n<p>\n  A naive implementation would be of the order O(<b>N</b> &times; <b>Q</b>), where we recalculate\n  number of seats for remaining requests in O(<b>N</b>) using\n  <a href=\"https://en.wikipedia.org/wiki/Sweep_line_algorithm\">sweep line algorithm</a> for each of\n  the <b>Q</b> steps. We can speed this up with another observation: the number of unique ranges\n  that the requests cover is at max 2 * <b>Q</b>, which would make our solution run in O(<b>Q</b><sup>2</sup>)\n  for every test case.\n</p>\n<h3>Test set 2 (Hidden)</h3>\n<p>\n  Let us try to speed up the slow process of recalculating number of seats we can book at every step\n  For every seat, let us denote the <em>value</em> of a seat as the number of remaining requests\n  trying to book this seat. Everytime the value of a seat drops to 1, we increase the number of\n  seats we can book for the corresponding request containing this seat booking.\n</p>\n<p>\n  Since requests are represented by an interval, we can use an\n  <a href=\"https://en.wikipedia.org/wiki/Interval_tree\">interval tree</a> to support the operations\n  of removing an interval after the initial construction of the tree. Each node of the interval tree\n  stores the set of intervals that cover it, and also the minimum value of any seat in it's range.\n  Whenever a remove operation makes the minimum value become one, we walk down the tree to\n  find the seats that became one, and walk back up the tree to find out which  interval is the only interval that now\n  covers that seat. We now set that seat's value to infinity so that we don't process it again.\n\n  This happens only once per seat, for a total amortised cost of O(<b>N</b>log<b>N</b>).\n  In total this algorithm is O(<b>N</b>log(<b>Q</b>+<b>N</b>)), if you use a constant time set (like a hashset).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U074fb0preSXpYZBHiH46IYwGySnkNBpiUryFcnZfZw9GsK2b3Y6lluNHo2hc3vqWY-VaiSYQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000069881","statement":"<h3>Problem</h3>\n<p>\n  You are selling tickets for the front row of seats at a movie theater.\n  The front row has <b>N</b> seats, numbered 1 to <b>N</b> from left to right.\n\n  You have been out of the office the last week, and upon your return, <b>Q</b> <i>bookings</i> for\n  seats have piled up!\n  The i-th booking requests all the seats from\n  <b>L<sub>i</sub></b> to <b>R<sub>i</sub></b> inclusive.\n  You now have the boring job of entering each booking into the system, one at a time.\n</p><p>\n  Since some of the bookings may overlap, the system might not be able to fulfill each booking entirely.\n  When you enter a booking into the system, it will assign every seat requested by the booking\n  that hasn't already been assigned to a booking entered into the system earlier.\n</p><p>\n  What is the largest integer k where there exists an order that you can enter the\n  bookings into the system, such that each booking is assigned at least k seats?\n\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case starts with a line containing two integers <b>N</b> and <b>Q</b>,\n  the number of seats and the number of bookings, respectively.\n  Then, there are <b>Q</b> more lines, the i-th of which contains the two integers\n  <b>L<sub>i</sub></b> and <b>R<sub>i</sub></b>, indicating that the i-th booking would like to\n  book all the seats from <b>L<sub>i</sub></b> to <b>R<sub>i</sub></b>, inclusive.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is\n  the largest value k, as described above.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 15 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  <b>T</b> = 100.<br/>\n  1 &le; <b>N</b> &le; 10<sup>6</sup>.<br/>\n  1 &le; <b>L<sub>i</sub></b> &le; <b>R<sub>i</sub></b> &le; <b>N</b>.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  1 &le; <b>Q</b> &le; 300.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  1 &le; <b>Q</b> &le; 30000.<br/>\n  For at least 85 of the test cases, <b>Q</b> &le; 3000.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2G2gMXXsG06J57M067th2Vp7QfNQ7xzK12GFFAdXLtc6XMegsys2i7FzxIQjHipK1OxCMSX57FAtbf7Bp-RLlNxaaA3546Zw/contention_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n5 3\n1 2\n3 4\n2 5\n30 3\n10 11\n10 10\n11 11\n10 4\n1 8\n4 5\n3 6\n2 7\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3zdDZoBI5v6UxJ3FV1UiKqFc_dBvmbI_lrJNpjQkJKUnKiNwKgcHEqz-O_XaDYpnmFQBXl2Domk976n_Cp0bawd73SiywRU6U/contention_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 0\nCase #3: 2\n\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn Sample Case #1, there are <b>N</b> = 5 seats and <b>Q</b> = 3 bookings. One possible order is:\n<ul>\n  <li> Put in the second booking, where the system will book 2 seats (3 and 4).</li>\n  <li> Put in the first booking, where the system will book 2 seats (1 and 2).</li>\n  <li> Put in the third booking, where the system will book 1 seat (only seat 5, since seats 1, 2, 3 and 4 are already booked).</li>\n</ul>\nEach booking is assigned at least 1 seat, and there is no order that assigns at least 2 seats to each booking, so the answer is 1.\n</p>\n\n<p>\nIn Sample Case #2, there are <b>N</b> = 30 seats and <b>Q</b> = 3 bookings.\nNo matter what order you assign the seats in, at least one booking will have no seats assigned to it. So the answer is 0.\nNotice that there can be seats that are not part of any bookings!\n</p>\n\n<p>\nIn Sample Case #3, there are <b>N</b> = 10 seats and <b>Q</b> = 4 bookings. One possible order is:\n<ul>\n  <li> Put in the second booking, where the system will book 2 seats (4 and 5).</li>\n  <li> Put in the third booking, where the system will book 2 seats (3 and 6, since 4 and 5 are already booked). Notice that the seats booked are not necessarily adjacent to each other.</li>\n  <li> Put in the fourth booking, where the system will book 2 seats (2 and 7).</li>\n  <li> Put in the first booking, where the system will book 2 seats (1 and 8).</li>\n</ul>\nEach booking is assigned at least 2 seats, and there is no order that assigns at least 3 seats to each booking, so the answer is 2.\n</p><p>\n  <b>Note</b>: We do not recommend using interpreted/slower languages for the Large dataset of this problem.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":18},{"type":2,"type__str":"HIDDEN","value":27}],"title":"Contention","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  To make a fair team, we have to train the members of the team to the same skill level as the most\n  skillful member of the team.\n  <br>\n  For any <b>P</b> students we pick, the time required to make a fair team is =\n  &Sigma;(max(<b>S</b><sub>i</sub>, <b>S</b><sub>i+1</sub>... <b>S</b><sub>P</sub>) - <b>S</b><sub>i</sub>),\n  for all students i = 1 to <b>P</b> in the team. Our goal is to minimize this value.\n  <br>\n  One possible approach could be to go through all possible subsets of <b>P</b> students, from the\n  given <b>N</b> students.\n  But there exists <sup><b>N</b></sup>C<sub><b>P</b></sub> such subsets(here symbol C denotes\n  <a href=\"https://en.wikipedia.org/wiki/Combination/\">Combination</a>). Number of such subsets will\n  be in the order of <a href=\"https://en.wikipedia.org/wiki/Factorial\">Factorial(<b>N</b>)</a> and\n  so enumerating through all of them will not fit within the time limit.\n</p>\n<h3>Test set 1 (Visible)</h3>\n<p>\n  We can start with the observation that once we fix the student with highest skill level x, to minimize\n  our goal we should always choose students with skills as high as possible, but less than or equal to\n  x. Hence we can sort students on the basis of skill level in decreasing order, and iterate over each\n  student assuming they would have the highest skill level in the team. Say, this student is at position\n  i in the sorted sequence; the team would be formed of students on positions i, i + 1, ..., i + <b>P</b> - 1\n  (i.e. a contiguous subarray of size <b>P</b>).\n  <br>\n  For each subarray of size <b>P</b> in the sorted array, we can calculate the training time required\n  to make a fair team using the aforementioned formula. There are <b>N</b> - <b>P</b> + 1 subarrays of size\n  <b>P</b>, and the complexity of calculating training time of subarray size <b>P</b> is O(<b>P</b>).\n  So the overall complexity of this approach is O(<b>N</b> &times; <b>P</b>), which will be sufficient\n  for test set 1.\n</p>\n<h3>Test set 2 (Hidden)</h3>\n<p>\n  We need to go through all of the subarrays once, but can we calculate the training time of a subarray faster?\n  <br>\n  Let us assume the array is sorted in decreasing order. The training time formula for a subarray\n  starting at position i is\n  <br>\n  = &Sigma;(<b>S</b>[i] - <b>S</b>[j]) where j = i to i + <b>P</b> -1\n  <br>\n  = <b>P</b> &times; <b>S</b>[i] - &Sigma;(<b>S</b>[j]) where j = i to i + <b>P</b> - 1\n  <br>\n  As we always need the sum of a contiguous subarray, we can pre compute the prefix sum of the whole\n  array in advance, and get the sum of any subarray in O(1) time, which makes the calculation of\n  training time O(1).\n  <br>\n  So, the overall complexity of this approach is O(<b>N</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2ujlK-KSrXbwOE-1j1ySqZmdz4nFxR3XpcU7tKrxtC6vetIcZhA2qdLW8IOv5BXjydHRKvDQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000000698d6","statement":"<h3>Problem</h3>\n<p>\n  As the football coach at your local school, you have been tasked with picking a team of exactly\n  <b>P</b> students to represent your school. There are <b>N</b> students for you to pick from.\n  The i-th student has a <i>skill rating</i> <b>S<sub>i</sub></b>, which is a positive integer\n  indicating how skilled they are.\n</p><p>\n  You have decided that a team is <i>fair</i> if it has exactly <b>P</b> students on it and they all\n  have the same skill rating. That way, everyone plays as a team.\n\n  Initially, it might not be possible to pick a fair team, so you will give\n  some of the students one-on-one coaching. It takes one hour of coaching to increase the skill\n  rating of any student by 1.\n</p><p>\n  The competition season is starting very soon (in fact, the first match has already started!),\n  so you'd like to find the minimum number of hours of coaching you need to give before you are\n  able to pick a fair team.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case starts with a line containing the two integers <b>N</b> and <b>P</b>,\n  the number of students and the number of students you need to pick, respectively.\n  Then, another line follows containing\n  <b>N</b> integers <b>S<sub>i</sub></b>; the i-th of these is the skill of the i-th student.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>y</code> is the minimum number\n  of hours of coaching needed, before you can pick a fair team of <b>P</b> students.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 15 seconds per test set.<br/>\n  Memory limit: 1 GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>S<sub>i</sub></b> &le; 10000, for all i.<br/>\n  2 &le; <b>P</b> &le; <b>N</b>.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  2 &le; <b>N</b> &le; 1000.\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  2 &le; <b>N</b> &le; 10<sup>5</sup>.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3YQZ7tCtHQdNOmD1_7QqIuwM_W8AjlOvosbn1k1MQVZXVTwk5imDQSBxHcj9KyX58b0qKdW9WkHZS1sUNcjUMk1zv61A0/training_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n4 3\n3 1 9 100\n6 2\n5 5 1 2 3 4\n5 5\n7 7 1 7 7\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2j_LBwxbJv4cLZp__llfKRsqFwgy8poeOpP0rYd76277_8UOmKwZrtNQV8Ijt4aGxf1Qk5US1tj_59PI1Ay-cxsfrIzxlF/training_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 14\nCase #2: 0\nCase #3: 6\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, you can spend a total of 6 hours training the first student and\n  8 hours training the second one. This gives the first, second and third students a skill\n  level of 9. This is the minimum time you can spend, so the answer is 14.\n</p><p>\n  In Sample Case #2, you can already pick a fair team (the first and second student) without\n  having to do any coaching, so the answer is 0.\n</p><p>\n  In Sample Case #3, <b>P</b> = <b>N</b>, so every student will be on your team. You have to\n  spend 6 hours training the third student, so that they have a skill of 7, like everyone else.\n  This is the minimum time you can spend, so the answer is 6.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":2,"type__str":"HIDDEN","value":13}],"title":"Training","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000050e01","type":1,"type__str":"SPECTATOR"},"title":"Round A 2019"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
