{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1661063400000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"00000000008cb0f5","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Thank you for participating in Kick Start 2022 Round E!</p>\n<hr>\n<p><b>Cast</b></p>\n<p>Coloring Game: Written by Anurag Singh and prepared by Bryan (Seunghyun) Jo.</p>\n<p>Students and Mentors: Written by Carlos Martinez Romero and prepared by Shadman Protik.</p>\n<p>Matching palindrome: Written by Bartosz Kostka and prepared by Shadman Protik.</p>\n<p>Pizza Delivery: Written by Swante Scholz and prepared by Chun-nien Chan.</p>\n<p>Solutions, other problem preparation, reviews and contest monitoring by\nAbhilash Tayade, Adilet Zhaxybay, Advitiya Brijesh, Alan Lou, Anurag Singh, Bartosz Kostka, Bohdan Pryshchenko, Bryan (Seunghyun) Jo, Carlos Martinez Romero, Chinmay Sagade, Chu-ling Ko, Chun-nien Chan, Cristhian Bonilha, Darpan Shah, Deeksha Kaurav, Diksha Saxena, Duong Hoang, Eunice Hameyie, Hana Joo, Hung-Wei Hung, Jakub Kuczkowiak, Jimmy Dang, Joseph Kottapurath, Kashish Bansal, Krists Boitmanis, Laksh Nachiappan, Lizzie Sapiro Santor, Lucas Maciel, Mantek Singh, Piyush, Pratibha Jagnere, Priyam Khandelwal, Raghul Rajasekar, Rahul Goswami, Rohan Garg, Ruoyu Zhang, Sanyam Garg, Sara Biavaschi, Shadman Protik, Shipra Choudhary, Surya Upadrasta, Swante Scholz, Swapnil Gupta, Swapnil Mahajan, Tanya Chauhan, Teja Vardhan Reddy Dasannagari, Tushar Jape, Umang Goel, Vinay Khilwani, Vishal Som, Yash Ranka.</p>\n<p>Analysis authors:</p><ul>\n<li>Coloring Game: Deeksha Kaurav</li>\n<li>Students and Mentors: Adilet Zhaxybay</li>\n<li>Matching palindrome: Krists Boitmanis</li>\n<li>Pizza Delivery: Krists Boitmanis</li>\n</ul>\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1661052600000,"tasks":[{"analysis":"<p>\n  We should not consider any string $$$Q$$$ longer than $$$\\mathbf{P}$$$ itself because $$$\\mathbf{P}\\mathbf{P}$$$ is a\n  palindrome and we can always use $$$Q=\\mathbf{P}$$$ if there is no shorter valid string $$$Q$$$. Hence,\n  in what follows, we assume that $$$|Q| \\le |\\mathbf{P}|$$$.\n</p>\n<p>\n  Since $$$\\mathbf{P}Q$$$ is a palindrome, $$$\\mathbf{P}$$$ must start with the reverse of $$$Q$$$, which is $$$Q$$$\n  itself since $$$Q$$$ is a palindrome. Thus $$$\\mathbf{P}=QX$$$ for some suffix $$$X$$$.\n</p>\n\n<h3>\n  Test Set 1\n</h3>\n\n<p>\n  We can check every prefix $$$Q$$$ of $$$\\mathbf{P}$$$ and verify if $$$Q$$$ and $$$\\mathbf{P}Q$$$ are both\n  palindromes. The shortest of such valid prefixes $$$Q$$$ is our answer. Any given prefix $$$Q$$$\n  can be verified in linear time, and the overall time complexity of this brute-force algorithm\n  is therefore $$$O(\\mathbf{N}^2)$$$.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\nThe time complexity of the naive algorithm above can be improved to $$$O(\\mathbf{N})$$$ using\n<a href=\"https://en.wikipedia.org/wiki/Rolling_hash\" target=\"_blank\">string hashing</a>,\nwhich is a widely applicable technique for various string matching problems. In this section,\nthough, we discuss two other approaches.\n</p>\n\n<h4>\n  Manacher's Algorithm\n</h4>\n\n<p>\n  So we are looking for the shortest palindromic prefix $$$Q$$$ such that $$$\\mathbf{P}=QX$$$ and $$$QXQ$$$\n  is also a palindrome. It follows that the suffix $$$X$$$ must be palindromic as well. Our task is\n  then to split the string $$$\\mathbf{P}$$$ into two palindromes $$$Q$$$ and $$$X$$$ such that $$$Q$$$ is as\n  short as possible. Finding such a split would be a trivial task if we knew in advance if any\n  particular prefix or suffix of $$$\\mathbf{P}$$$ is a palindrome.\n</p>\n\n<p>\n  This is where the linear time\n  <a href=\"https://en.wikipedia.org/wiki/Longest_palindromic_substring#Manacher's_algorithm\" target=\"_blank\">\n  Manacher's algorithm</a> can help. Its main purpose is to find the longest palindromic substring\n  in a given string, however, the algorithm does more than that. Assuming\n  $$$\\mathbf{P}=p_1p_2p_3 \\ldots p_\\mathbf{N}$$$, Manacher's algorithm finds the longest palindromic substring of\n  odd length centered at any particular letter $$$p_i$$$ and similarly the longest palindromic\n  substring of even length centered at any particular pair of letters $$$p_ip_{i+1}$$$.\n  Now, how do we know if a certain prefix $$$\\mathbf{P}=p_1p_2p_3 \\ldots p_k$$$ of, say, odd length is a\n  palindrome? It is a palindrome precisely when the length of the longest palindromic substring\n  centered at $$$p_\\frac{k+1}{2}$$$ is $$$k$$$. In a similar vein, we can test if a prefix of\n  even length or any suffix is palindromic.\n</p>\n\n<p>\n  The overall time complexity of this solution is $$$O(\\mathbf{N})$$$.\n</p>\n\n<h4>\n  Optimized Brute-Force Algorithm\n</h4>\n<p>\n  There is a much simpler algorithm if you trust your intuition that for the shortest prefix\n  $$$Q$$$, the string $$$\\mathbf{P}$$$ must be of the form $$$\\mathbf{P}=Q^k$$$ for some $$$k \\ge 1$$$. If this\n  assumption holds true, then we can use a modification of the same brute-force algorithm above,\n  where we test a prefix $$$Q$$$ only if $$$|Q|$$$ divides $$$\\mathbf{N}$$$. There are only $$$128$$$\n  divisors of $$$\\mathbf{N}$$$ in the worst case given the constraints of the problem, and that is a small enough\n  constant.\n</p>\n\n<p>\n  The time complexity of this modified algorithm is $$$O(\\mathbf{N}\\sqrt{\\mathbf{N}})$$$ or better\n  depending on the function we use for approximating the number of divisors of $$$\\mathbf{N}$$$.\n</p>\n\n<p>\n  It remains to show that our assumption indeed holds.\n</p>\n\n<p>\n  <i>Claim:</i> If $$$X$$$, $$$Y$$$, and $$$S=XY$$$ are all palindromic strings, then $$$X=Z^k$$$\n  and $$$Y=Z^l$$$ for some palindrome $$$Z$$$ and some integers $$$k \\ge 1$$$ and $$$l \\ge 1$$$.\n</p>\n\n<p>\n  <i>Proof:</i> We will prove the claim using mathematical induction on $$$|S|$$$. Without loss\n  of generality, let us assume that $$$|X| \\le |Y|$$$. Since $$$S$$$ is a palindrome with the prefix\n  $$$X$$$, $$$S$$$ must also end in $$$X$$$ (and so must $$$Y$$$). Now, since $$$Y$$$ is a\n  palindrome with the suffix $$$X$$$, $$$Y$$$ must also start with $$$X$$$, and consequently $$$S$$$\n  has a prefix $$$XX$$$. And again, since $$$S$$$ is a palindrome, $$$XX$$$ must be a suffix of both\n  $$$S$$$ and $$$Y$$$. And continuing this back and forth process, we may conclude that\n  $$$S=X^tWX^t$$$, where $$$W$$$ is a palindromic substring in the middle of $$$S$$$ and\n  $$$|W| \\lt 2|X|$$$.\n  We consider four possible cases:\n</p>\n<ul>\n  <li>$$$|W|=\\emptyset$$$: This is a base case of our inductive proof. The entire string $$$S$$$ is\n  a power of $$$X$$$, hence we can choose $$$Z=X$$$.</li>\n  <li>$$$|W|=|X|$$$: Another base case. Since the palindrome $$$Y$$$ equals $$$X^{t-1}WX^t$$$,\n  $$$W$$$ must be $$$X$$$, and again, $$$S$$$ is a power of $$$X$$$.</li>\n  <li>$$$0 \\lt |W| \\lt |X|$$$: Since $$$Y=X^{t-1}WX^t$$$ is a palindrome, the substring $$$WX$$$\n  in the middle must be palindromic as well. Recall that both $$$W$$$ and $$$X$$$ are palindromes\n  and $$$|WX| \\lt |S|$$$, hence, by inductive hypothesis, $$$W$$$ and $$$X$$$ must be powers of\n  some palindrome $$$Z$$$, and so is $$$S$$$.</li>\n  <li>$$$|X| \\lt |W| \\lt 2|X|$$$: Again, $$$Y=X^{t-1}WX^t$$$ is a palindrome, so $$$W$$$ must be of\n  the form $$$XR$$$, where $$$R$$$ is palindromic. Since $$$|W| \\lt |S|$$$, the palindromes $$$X$$$\n  and $$$R$$$ are powers of some palindrome $$$Z$$$ by inductive hypothesis.</li>\n</ul>\n<p>\n  That concludes the proof of our claim.\n</p>\n\n<p>\n  To connect the dots, let us see how this claim validates our optimization of the brute-force\n  algorithm. Suppose we split $$$\\mathbf{P}$$$ into two palindromes $$$Q$$$ and $$$Y$$$ and $$$|Q|$$$ does not\n  divide $$$\\mathbf{N}$$$. Then, by the claim, both $$$Q$$$ and $$$Y$$$ are powers of a shorter palindrome\n  $$$Z$$$, and $$$Q$$$ can be disregarded in favour of $$$Z$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3u7ogQcjsPEL_W14JW68-vNp2Tqvoo8AkYBWwZtYu4ibPud9NHVLbasXjrEWilBUS3qQz4s2dp/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000ba82c5","statement":"<h3>Problem</h3>\n<p>\nYou are given a <a href=\"https://en.wikipedia.org/wiki/Palindrome\" target=\"_blank\">palindrome</a>\nstring $$$\\mathbf{P}$$$ of length $$$\\mathbf{N}$$$ consisting of only lowercase letters of the English alphabet. Find the\nshortest non-empty palindrome string $$$Q$$$ such that $$$\\mathbf{P}$$$ concatenated with $$$Q$$$ forms a\npalindrome. Formally, the string $$$\\mathbf{P}Q$$$ forms a palindrome.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case consists of two lines. The first line of each test case contains an integer $$$\\mathbf{N}$$$\ndenoting the length of the string $$$\\mathbf{P}$$$. The second line of each test case contains a palindrome\nstring $$$\\mathbf{P}$$$ of length $$$\\mathbf{N}$$$.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the non-empty palindrome\nstring $$$Q$$$ as described above.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\nString $$$\\mathbf{P}$$$ is a palindrome consisting of only lowercase letters of the English alphabet.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 10^3$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3bsErg2cfRIyZxnb6Uqy_FmBNpeCRDLjYtEhgw9fi02a3SANSrNkh6MyQl17ylYRJ-4Pr1gR316XAPA9FA-SJcIZQsBTEqt_nB9Yd1nztlpiqq/matching_palindrome_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n4\nabba\n4\ncccc\n6\ncdccdc\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1zYQUrMz4FqAop4yLN3ugD3ZVYlVU6YwMQkRKQtEITBXgyHdPi9Nw2AoxYci08Ks2pVy73Dk6O4CvGU6HVwTehQ3hyKP7gaTS0ndU7S49XJKUmDw/matching_palindrome_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: abba\nCase #2: c\nCase #3: cdc\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nIn Case 1, the shortest palindrome string $$$Q$$$ is <code>abba</code> such that the concatenation\n$$$\\mathbf{P}Q$$$ is <code>abbaabba</code> which is a palindrome.<br/>\nIn Case 2, the shortest palindrome string $$$Q$$$ is <code>c</code> such that the concatenation\n$$$\\mathbf{P}Q$$$ is <code>ccccc</code> which is a palindrome.<br/>\nIn Case 3, the shortest palindrome string $$$Q$$$ is <code>cdc</code> such that the concatenation\n$$$\\mathbf{P}Q$$$ is <code>cdccdccdc</code> which is a palindrome.<br/>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":10},{"type":1,"type__str":"VISIBLE","value":18}],"title":"Matching Palindrome","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n\n<p>\n  In Test Set 1, you can simply try all possible options. For each student,\n  check all the other students as a potential mentor, and choose the highest\n  rated possible one. The time complexity of this solution will be $$$O(N^2)$$$,\n  which is enough for this test set.\n</p>\n\n<h3>Test Set 2</h3>\n\n<p>\n  In Test Set 2, we have $$$\\mathbf{N} \\le 10^5$$$, and $$$O(N^2)$$$ will take too much\n  time, so a smarter, more efficient solution is needed. Below are two of the\n  possible approaches.\n</p>\n\n<p>\n  <b>Binary Search</b>\n</p>\n\n<p>\n  If we sort an array of student ratings, then for each $$$R_i$$$ we can find\n  the maximum $$$R_j $$$ such that $$$R_j \\le 2 \\times R_i$$$ using binary\n  search. The only caveat is that an extra care is required to prevent picking yourself as the\n  highest rated possible mentor. We can prevent this\n  from happening as follows. Make sure the binary search chooses the <i>rightmost</i> one of the\n  several equal ratings in an array. Then if the rating of the mentor for a student $$$i$$$\n  found with binary search is equal to $$$R_i$$$, we take rating to the left of it as an answer,\n  or output $$$-1$$$ if it is the first element of an array.\n</p>\n\n<p>\n  The time complexity of this solution will be $$$O(\\mathbf{N}\\log \\mathbf{N})$$$ because of\n  sorting and performing binary search $$$\\mathbf{N}$$$ times.\n</p>\n\n<p>\n  <b>Two Pointers</b>\n</p>\n\n<p>\n  If we have a sorted array of student ratings, we could also use the two pointer\n  approach to solve the problem. Let us consider students one by one, from the\n  lowest rated ones to the highest rated ones, and try to find the ratings of the\n  mentors for them. As we do this, we will maintain a \"pointer\" to the index of the\n  highest possible rating of a mentor for the current student. Initially the\n  pointer will be at the start of the array. Notice that as your consider the\n  student with the higher rating and try to find the mentor for them, pointer to\n  the highest possible mentor rating can move only to the right in the sorted array of\n  ratings. As such, we can simply try to move the pointer to the right as far\n  as we can for each student, and it will move no more than $$$\\mathbf{N}$$$ times in total.\n  An additional care is required to prevent picking yourself as a mentor,\n  similarly to the binary search solution.\n</p>\n\n<p>\n  The time complexity of this solution will also be $$$O(\\mathbf{N}\\log \\mathbf{N})$$$ because you need to sort\n  the array first. As a fun variation, it is also possible to trade time for space, and use the\n  fact that $$$\\max(R_i) \\le 10^6$$$. We can then sort the array of ratings using an array of size\n  $$$10^6$$$ and a variation of\n  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Counting_sort\">counting sort</a>, and later\n  execute two pointer part of the solution in $$$O(N)$$$. Total time complexity of the solution will\n  be $$$O(\\max(N, \\max(R_i)))$$$, or $$$O(N)$$$ as $$$\\max(R_i) \\approx 10 \\times N$$$, although in\n  practice it might be not much faster than $$$O(\\mathbf{N}\\log \\mathbf{N})$$$ solution.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3juGTx0I8IndcalqCffgQsKBkOagsWdjPXroTm6xdyCUfUavinrzXeUd7mrywfEi1p_4gb98pW/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000ba84ae","statement":"<h3>Problem</h3>\n<p>\n  A group of $$$\\mathbf{N}$$$ students prepares together for upcoming programming\n  competitions such as Kick Start and Code Jam by Google. To help each other\n  prepare, it was decided that each student will pick a mentor among other\n  students. A mentor will help their mentee to solve problems, learn algorithms,\n  track their progress, and will generally support them throughout preparation.\n</p>\n\n<p>\n  Each student will have exactly one mentor among all other students, and a\n  person can be a mentor to multiple people. For every student $$$i$$$ we\n  know their rating $$$\\mathbf{R_i}$$$ which approximates how good that student is at\n  programming competitions. Because it is believed that a mentor should not be\n  much stronger than their mentee, a student $$$j$$$ can be a mentor of student\n  $$$i$$$ only if $$$\\mathbf{R_j} \\le 2 \\times \\mathbf{R_i}$$$. Note that a mentor can even\n  have a rating that is lower or equal to their mentee's rating.\n</p>\n\n<p>\n  Unsurprisingly, each student wants to have the strongest possible mentor. For\n  each student, can you help to figure out what is the highest possible rating\n  of a mentor they can pick?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow. Each test case consists of two lines.\n</p>\n<p>\n  The first line of each test case contains an integer $$$\\mathbf{N}$$$, representing the\n  number of students in a group.\n</p>\n<p>\n  The second line of each test case contains $$$\\mathbf{N}$$$ integers $$$\\mathbf{R_1} \\ \\mathbf{R_2} \\\n  \\mathbf{R_3} \\ \\dots \\ \\mathbf{R_N}$$$ where $$$\\mathbf{R_i}$$$ is a rating of the $$$i$$$-th student.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$M_1 \\ M_2 \\ M_3 \\ \\dots \\ M_N$$$</code> where $$$x$$$\n  is the test case number (starting from 1), and $$$M_i$$$ is the maximum\n  possible rating of the $$$i$$$-th student's mentor or $$$-1$$$ if there\n  are no suitable mentors for that student.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n$$$1 \\le \\mathbf{R_i} \\le 10^6$$$, for all $$$i$$$.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n $$$2 \\le \\mathbf{N} \\le 1000$$$.<br /> </p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n  $$$2 \\le \\mathbf{N} \\le 10^5$$$.<br />\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1TtE7yvwMWzVbsKVEGWv0ivxG7qcKtASY67V-GlkmrzMn0ZuBq54o_ZxMR7K5Tc24iyKriTL4xQ2q0fr8P90xWFiVRVTUbEOcPXSwtqpACtxVxBg/students_and_mentors_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3\n2000 1500 1900\n5\n1000 600 1000 2300 1800\n2\n2500 1200\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0L-VRNOzQGdcNdi5qdKO0GJzBoSF2M3sD-q07Y-TOh2nXpxqeaLDN0JEvS78r8N4XaDFIdOuqayOowkyy7yIh6QbnuKT6rXyKialMACPtmniZI1JY/students_and_mentors_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1900 2000 2000\nCase #2: 1800 1000 1800 1800 2300\nCase #3: 1200 -1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In the Sample Case #1, there are three students with ratings $$$2000$$$,\n  $$$1500$$$, and $$$1900$$$. All students can pick any other student as their\n  mentor, so they all pick a mentor with the highest possible rating. As a\n  result, they pick mentors with ratings $$$1900$$$, $$$2000$$$, and\n  $$$2000$$$, respectively. Note that in this case a student with the rating\n  $$$2000$$$ will be a mentor of two other students.\n</p>\n<p>\n  In the Sample Case #2, there are five students with ratings $$$1000$$$,\n  $$$600$$$, $$$1000$$$, $$$2300$$$, and $$$1800$$$ (note that some students\n  may have equal ratings). For both students with ratings $$$1000$$$, the\n  highest rated possible mentor for them has rating $$$1800$$$. They cannot\n  pick a mentor with rating $$$2300$$$ as $$$2300 > 2 \\times 1000$$$. Student\n  with rating $$$600$$$ cannot pick mentors with ratings $$$1800$$$ or\n  $$$2300$$$, so they pick a mentor with rating $$$1000$$$ (either of two\n  students with rating $$$1000$$$ works). Student with rating $$$2300$$$ can\n  pick any other student as their mentor, so they pick a mentor with rating\n  $$$1800$$$ &#8212; the highest possible. Finally, student with rating\n  $$$1800$$$ can pick any other student as their mentor too, so they pick a\n  mentor with the highest possible rating of $$$2300$$$. So in the end, the\n  students pick the mentors with the ratings $$$1800$$$, $$$1000$$$,\n  $$$1800$$$, $$$1800$$$, and $$$2300$$$, respectively.\n</p>\n<p>\n  In the Sample Case #3, there are two students with ratings $$$2500$$$ and\n  $$$1200$$$. For a student with rating $$$2500$$$, another student with\n  rating $$$1200$$$ can be a mentor, and there are no other options. For a\n  student with rating $$$1200$$$, we cannot assign a mentor with rating\n  $$$2500$$$, as $$$2500 > 2 \\times 1200$$$, and therefore this student has no\n  suitable mentor. In the end, we output $$$1200$$$ and $$$-1$$$ as a\n  result for this test case.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":6},{"type":1,"type__str":"VISIBLE","value":12}],"title":"Students and Mentors","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Let us use the following notation for the analysis:\n  <ul>\n    <li>Cells painted by the bot are marked as $$$B$$$.</li>\n    <li>Cells painted by John are marked as $$$J$$$.</li>\n    <li>Valid cells are marked as $$$V$$$.</li>\n    <li>Invalid cells are marked as $$$X$$$.</li>\n  </ul>\n</p>\n<p>\n  Let us first look at the case with $$$\\mathbf{N}=5$$$. All cells are valid in the beginning.\n</p>\n<p>\n  Initial state: $$$[V, V, V, V, V]$$$.\n</p>\n<p>\n  The cell numbered with integer $$$i$$$ is represented as $$$C_i$$$. As the bot makes the first move, it colors the leftmost valid cell, which is $$$C_1$$$. This move makes the cells $$$C_1$$$ and $$$C_2$$$ invalid and reduces the number of valid cells by $$$2$$$.\n</p>\n<p>\n  State after first move: $$$[B, X, V, V, V]$$$.\n</p>\n<p>\n  As John plays optimally to minimize the bot's score, he colors a cell which makes as many invalid cells as possible. Coloring the cell $$$C_3$$$, which is adjacent to an invalid cell, makes the cells $$$C_3$$$ and $$$C_4$$$ invalid, while\n  coloring the cell $$$C_4$$$ makes the cells $$$C_3$$$, $$$C_4$$$ and $$$C_5$$$ invalid. Thus, John colors the cell $$$C_4$$$, reducing the number of valid cells by $$$3$$$ and leaving no more cells for the bot to color in the next turn.\n</p>\n<p>\n  State after John's move: $$$[B, X, X, J, X]$$$\n</p>\n<h3>\n  Test Set 1\n</h3>\n<p>\n  For $$$\\mathbf{N} \\le 5$$$, the bot can color at most 1 cell in its first move and John can make the remaining cells invalid. Thus, maximum achievable score by the bot for $$$\\mathbf{N} \\le 5$$$ is $$$1$$$.<br/>\n  For $$$\\mathbf{N} = 6$$$, the bot can color another cell in the second move. Thus, maximum achievable score by the bot for $$$\\mathbf{N} = 6$$$ is $$$2$$$.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n<p>\n  Since the bot always paints the first valid cell from the left, we can show that after each move by the bot, the number of valid cells reduces by at most $$$2$$$. Also, after each move by John, the number of valid cells reduces by at most $$$3$$$.\n  We can show that this is achievable if John always paints the second valid cell from the left unless there is only one valid cell remaining.\n  This results in reduction of the number of valid cells by at most $$$5$$$ between successive turns of the bot.\n</p>\n<p>\n  In other words, the bot paints $$$1$$$ cell for every $$$5$$$ cells. Thus, the total number of cells the bot can paint is at least $$$\\lceil\\mathbf{N}/5\\rceil$$$.\n</p>\n<p>\n  <b>Time and Space Complexity:</b> The answer for both the test sets can be found in $$$O(1)$$$ time and no extra space  is required for calculating the answer.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3AZRV1Yd0F1aYIqtH9J44pIcsgH_1UwUPCeqUwtUjdVVqIeDKB-bHJ6LL_XLOIbCwNnjqKt3de/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000ba856a","statement":"<h3>Problem</h3>\n<p>\n  John loves to play computer games. He recently discovered an interesting game.\n  In the game there are $$$\\mathbf{N}$$$ cells, which are aligned in a row from left to right\n  and are numbered with consecutive integers starting from $$$1$$$. Initially,\n  all cells are coloured <i>white</i>. A cell is valid if it has\n  <i>white</i> color and it does not have any adjacent <i>red</i> colored cell.\n  On each turn, a player paints any valid cell with the <i>red</i> color. The\n  game ends when no valid cells are present. The score of the player is equal to\n  the number of cells they paint.\n</p>\n<p>\n  To master the game, John is practicing against a bot. The bot is poorly\n  trained and it always paints the first valid cell from the left. John on the\n  other hand is playing the game very carefully and he can choose any valid\n  cell. The bot makes the first move and the players take turns alternately.\n</p>\n<p>\n  Find the <i>maximum</i> achievable score by the bot, assuming that John is\n  playing optimally to minimize the score of his opponent.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow.<br />\n  The only line of each test case contains an integer $$$\\mathbf{N}$$$ representing the\n  number of cells in the game.<br />\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the test case number\n  (starting from 1) and $$$y$$$ is the <i>maximum</i> achievable score by the\n  bot given that John is playing optimally.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n </p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{T} \\le 6$$$.<br />\n  $$$1 \\le \\mathbf{N} \\le 6$$$.<br />\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n  $$$1 \\le \\mathbf{N} \\le 10^6$$$.<br />\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U28U5Qs5x9xllQ0uhfUCRXn7oUnGOQaSNv7tuiuAaSKToSheK9MJxUzHkaOHneFfKOo4fcqg_dgX3vHw0TB38v90FKx050cgPkYaBXw/coloring_game_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n1\n3\n6\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0TRrcTTxuIvUvkUfWJnDG5UZAsUwbKWJRwdzTeMmtlkGln1xWad3UrwfhAScKjhbt63xpvN0-gRpl6PFiNsdkjUXHTyMcBoVzHQXuo7A/coloring_game_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 1\nCase #3: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, there is $$$\\mathbf{N} = 1$$$ cell. The maximum achievable score\n  by the bot is $$$1$$$.\n</p>\n\n<ul>\n  <li>First move: The bot paints the first cell with red color.</li>\n</ul>\n<p>\n  Since there are no more possible moves, so the game ends. Thus, the answer\n  is $$$1$$$.\n</p>\n\n<p>\n  In Sample Case #2, there are $$$\\mathbf{N} = 3$$$ cells. The maximum achievable\n  score by the bot is $$$1$$$.\n</p>\n\n<p>\n  <img\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0NurDLAbaFOKjXNLaygXruXJ69qpuQJl5OS-TbgJWh8nC1-cWaTCB6ixpvvi-no8L7IyhSRla41KTO3MjO9OsxQLt9Js5d/sample_testcase_2.png\"\n    alt=\"Explanation for sample testcase 2\"\n  />\n</p>\n\n<ul>\n  <li>First move: The bot paints the first cell with red color.</li>\n  <li>Second move: John paints the third cell with red color.</li>\n</ul>\n\n<p>\n  Since there are no more possible moves, so the game ends. Thus, the answer\n  is $$$1$$$.\n</p>\n\n<p>\n  In Sample Case #3, there are $$$\\mathbf{N} = 6$$$ cells. The maximum achievable\n  score by the bot is $$$2$$$. In this sample, there exist multiple solutions,\n  one of them would be:\n</p>\n\n<p>\n  <img\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1me_wBU-SmqtSkU1p-bIstjbC1VQf_27OEGBtj0boKnNzjGEXb5_eEgQ_R6Pzr3Q2zhZXsFK2eLy56K4VQXDAtvnojX5QA/sample_testcase_3.png\"\n    alt=\"Explanation for sample testcase 3\"\n  />\n</p>\n\n<ul>\n  <li>First move: The bot paints the first cell with red color.</li>\n  <li>Second move: John paints the third cell with red color.</li>\n  <li>Third move: The bot paints the fifth cell with red color.</li>\n</ul>\n\n<p>\n  Since there are no more possible moves, so the game ends. Thus, the answer\n  is $$$2$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":6},{"type":1,"type__str":"VISIBLE","value":11}],"title":"Coloring Game","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\n  Test Set 1\n</h3>\n\n<p>\n  Since Ada does not have to deliver any pizzas in this test set, our task is simply to find the\n  most profitable path of $$$\\mathbf{M}$$$ steps starting from the location $$$(\\mathbf{A_r},\\mathbf{A_c})$$$. It is important\n  to note that the functions $$$F_i(c)$$$ are\n  <a href=\"https://en.wikipedia.org/wiki/Monotonic_function\" target=\"_blank\">increasing</a> given that\n  $$$\\mathbf{K_i} \\ge 1$$$. In other words, to maximize the outcome of the functions, we should try\n  maximizing the current number of coins $$$c$$$. Therefore, to find the profit of an optimal path\n  of length $$$\\mathbf{M}$$$ from $$$(\\mathbf{A_r},\\mathbf{A_c})$$$ to a specific location $$$(i,j)$$$, we must find optimal\n  paths of length $$$\\mathbf{M}-1$$$ to all of its neighbouring locations first, apply the respective toll\n  functions $$$F$$$, and take the maximum outcome. And whenever we can reduce a problem to the\n  same but smaller sub-problems, dynamic programming can help most of the time.\n</p>\n<p>\n  Formally, let $$$DP_{i,j,t}$$$ be the maximum profit of a path of length $$$t$$$ from\n  $$$(\\mathbf{A_r},\\mathbf{A_c})$$$ to the location $$$(i,j)$$$ and let $$$L_{i,j}$$$ be the neighbouring\n  locations of $$$(i,j)$$$ ($$$|L_{i,j}| \\le 4$$$). Then\n<p/>\n<p>\n  $$$DP_{i,j,0}=\\left\\{\n  \\begin{matrix}\n  0 & \\textrm{if } (i,j)=(\\mathbf{A_r},\\mathbf{A_c}) \\\\\n  -\\infty & \\textrm{otherwise}\n  \\end{matrix}\\right.$$$\n<p/>\n<p>\n  and\n<p/>\n<p>\n  $$$DP_{i,j,t+1}=\\max(DP_{i,j,t}, \\max_{(i',j') \\in L_{i,j}} DP_{i',j',t} \\mathbf{OP_*} \\mathbf{K_*})$$$.\n<p/>\n<p>\n  For brevity, $$$\\mathbf{OP_*} \\mathbf{K_*}$$$ refers to the appropriate function $$$F$$$ when going from\n  location $$$(i',j')$$$ to location $$$(i,j)$$$. Note that Ada can choose to not move at all, hence\n  the term $$$DP_{i,j,t}$$$ in the recurrence above.\n</p>\n<p>\n  The final answer is $$$\\max_{1 \\le i,j \\le \\mathbf{N}} DP_{i,j,\\mathbf{M}}$$$.\n  The time complexity for computing the entire $$$DP$$$ table is $$$O(\\mathbf{N}^2\\mathbf{M})$$$.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  In the case Ada actually has to deliver some pizzas, the problem can be solved in much the same\n  way, except that we need to keep track of the pizzas that have been delivered already. So\n  instead of asking, what is the best way to reach the location $$$(i,j)$$$ in $$$t$$$ steps, we\n  are wondering, what is the best way to deliver a subset $$$S \\subseteq \\{1,2,\\ldots,\\mathbf{P}\\}$$$ of\n  pizzas in $$$t$$$ steps and end up in the location $$$(i,j)$$$. All we have to do is extend our\n  $$$DP$$$ table by another dimension, namely, all the possible subsets $$$S$$$ of pizzas.\n</p>\n\n<p>\n  Formally, let $$$DP_{i,j,S,t}$$$ be the maximum profit of delivering the subset of pizzas $$$S$$$\n  in $$$t$$$ steps and ending up at the location $$$(i,j)$$$. Then\n<p/>\n<p>\n  $$$DP_{i,j,S,0}=\\left\\{\n  \\begin{matrix}\n  0 & \\textrm{if } (i,j)=(\\mathbf{A_r},\\mathbf{A_c}) \\textrm{ and } S=\\emptyset \\\\\n  -\\infty & \\textrm{otherwise}\n  \\end{matrix}\\right.$$$.\n<p/>\n<p>\n  As for the recurrence relation, we must account for Ada's choice to deliver pizzas after each\n  step. If none of the customers in $$$S$$$ lives at the location $$$(i,j)$$$, then delivering\n  a pizza after the next step is not an option, and our recurrence relation remains the\n  same:\n<p/>\n<p>\n  $$$DP_{i,j,S,t+1}=\\max(DP_{i,j,S,t}, \\max_{(i',j') \\in L_{i,j}} DP_{i',j',S,t} \\mathbf{OP_*} \\mathbf{K_*})$$$.\n<p/>\n<p>\n  However, if, say, customer $$$x$$$ lives at the location $$$(i,j)$$$ and $$$x \\in S$$$, then Ada\n  can choose to deliver their pizza after making the next step, therefore, our recurrence relation\n  becomes\n</p>\n<p>\n  $$$DP_{i,j,S,t+1}=\\max(DP_{i,j,S,t}, DP_{i,j,S-\\{x\\},t}+\\mathbf{C_x}, \\max_{(i',j') \\in L_{i,j}} DP_{i',j',S,t} \\mathbf{OP_*} \\mathbf{K_*}, \\max_{(i',j') \\in L_{i,j}} DP_{i',j',S-\\{x\\},t} \\mathbf{OP_*} \\mathbf{K_*} + \\mathbf{C_x})$$$.\n<p/>\n<p>\n  The final answer is $$$\\max_{1 \\le i,j \\le \\mathbf{N}} DP_{i,j,\\{1,2,\\ldots,\\mathbf{P}\\}, \\mathbf{M}}$$$ and\n  the time complexity of the algorithm is now $$$O(\\mathbf{N}^2 2^\\mathbf{P} \\mathbf{M})$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2Ezqvlqy8_3_UScuiZ7B6p31HN_2Y4Oc6L_N1m99LzzMg5uS4zKtf4qKG7gRWIwn51EP0FweSm/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000ba86e6","statement":"<h3>Problem</h3>\n<p>\n    Ada delivers pizzas in a city consisting of a grid of $$$\\mathbf{N}$$$ horizontal and $$$\\mathbf{N}$$$ vertical\n    streets, heading from North to South and from West to East, respectively, and numbered from $$$1$$$ to $$$\\mathbf{N}$$$. The top left street crossing of the grid is $$$(1,1)$$$.\n</p>\n<p>\n    Today, Ada has to\n    deliver $$$\\mathbf{P}$$$ pizzas, one for each of $$$\\mathbf{P}$$$ customers. Each customer lives at a different street\n    crossing; the $$$k$$$-th customer lives at street crossing $$$(\\mathbf{X_k}, \\mathbf{Y_k})$$$\n    and will pay Ada $$$\\mathbf{C_k}$$$ coins after the pizza is delivered to their location.\n</p>\n<p>\n    Ada starts at her pizza restaurant at $$$(\\mathbf{A_r}, \\mathbf{A_c})$$$ with $$$0$$$ coins and carrying $$$\\mathbf{P}$$$ pizzas.\n    Her goal is to deliver all of the pizzas within $$$\\mathbf{M}$$$ minutes.\n    She is free to take any path she likes around the city and finish deliveries anywhere, as long as\n    she manages to drop off all $$$\\mathbf{P}$$$ pizzas to their respective customers within $$$\\mathbf{M}$$$ minutes.\n    It takes one minute to walk between two adjacent street crossings, and takes no additional time to drop off a pizza at a customer's location.\n    There are some additional rules and constraints to note:\n  <ul>\n   <li> Ada is not allowed to go outside the grid.</li>\n   <li> No customer lives at the same street\n    crossing as the pizza restaurant Ada starts her trip.</li>\n   <li> At any point in time Ada can choose to stay in her current location\n    and not move. </li>\n     <li>Ada can also choose not to deliver a pizza when at a customer's location.</li>\n   </ul>\n</p>\n\n<p>\n  Formally, if Ada is currently at street crossing $$$(i,j)$$$, where $$$i$$$ is $$$i$$$-th row from the top,\n  and $$$j$$$ is $$$j$$$-th column from the left, she can decide to do any of the following as long as she\n  does not go outside the grid:\n  <ul>\n    <li>Go north, she reaches street crossing $$$(i-1, j)$$$.</li>\n    <li>Go east, she reaches street crossing $$$(i, j+1)$$$.</li>\n    <li>Go west, she reaches street crossing $$$(i, j-1)$$$.</li>\n    <li>Go south, she reaches street crossing $$$(i+1, j)$$$.</li>\n    <li>Stay at street crossing $$$(i, j)$$$.</li>\n  </ul>\n</p>\n\n<p align=\"center\">\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3LmsJpO9fN_6BNAhRkBqFghfiC5gQejaoEZQNEQxlsOG5AphmiifmToNaeXgbZBcLRr8IwAac5xwwd7t9KPTNgTljICv_oedG92g/statement_description.png\" width=\"60%\" alt=\"City with 3 horizontal and vertical streets\"/>\n</p>\n\n<p>\n    The city has a unique toll system in place for using the streets. There is a toll for using each street\n    and the toll depends on Ada's current number of coins and the direction in which she is travelling to.\n    The toll function is defined for every cardinal direction (North, East, West, South) separately.\n    The toll function $$$F_d$$$ for $$$d \\in \\{ North, East, West, South \\}$$$ returns the amount of coins\n    Ada will have after moving in the direction $$$d$$$ and is defined as follows:\n</p>\n<p align=\"center\">\n    <code>$$$F_d$$$ = $$$c$$$ $$$\\mathbf{OP_d}$$$ $$$\\mathbf{K_d}$$$</code>\n</p>\n<p>\n    where $$$c$$$ is the current number of coins that Ada has and $$$\\mathbf{OP_d}$$$ is an\n    operator and $$$\\mathbf{K_d}$$$ is a fixed positive integer. The allowed operators are:\n  <ul>\n    <li><code>+</code> (addition),</li>\n    <li><code>-</code> (subtraction),</li>\n    <li><code>*</code> (multiplication),</li>\n    <li><code>/</code> (<a href=\"https://mathworld.wolfram.com/IntegerDivision.html\" target=\"_blank\">integer division</a>).</li>\n  </ul>\n</p>\n<p>\n  For example, we can have <code>$$$F_{North}$$$ = $$$c$$$ + $$$3$$$</code>,\n    <code>$$$F_{East}$$$ = $$$c$$$ * $$$4$$$</code>, <code>$$$F_{West}$$$ = $$$c$$$ - $$$4$$$</code>, <code>$$$F_{South}$$$ = $$$c$$$ / $$$2$$$</code>. That means that if Ada\n    moves North one street then she will have $$$3$$$ more coins; if Ada\n    moves East then Ada's coins will quadruple; if Ada moves West then she loses\n    $$$4$$$ coins; and if Ada moves South then her coins are halved.\n</p>\n\n<p>\n    All divisions are <a href=\"https://mathworld.wolfram.com/IntegerDivision.html\" target=\"_blank\">integer divisions</a>\n    and are computed by using <a href=\"https://en.wikipedia.org/wiki/Floor_and_ceiling_functions\" target=\"_blank\"> floor function</a>.\n    For example, $$$\\frac{-1}{4} = \\lfloor\\frac{-1}{4}\\rfloor = -1$$$. Notice that Ada is allowed to have a negative\n    number of coins. Note that the tolls might actually give Ada\n    coins.\n</p>\n<p>\n    Find out if Ada can deliver all the $$$\\mathbf{P}$$$ pizzas in $$$\\mathbf{M}$$$ minutes\n    and, if so, the maximum number of coins Ada could have after $$$\\mathbf{M}$$$ minutes.\n</p>\n\n<h3>Input</h3>\n<p>\n    The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n</p>\n<p>\n    The first line of each test case contains $$$\\mathbf{N}$$$, $$$\\mathbf{P}$$$, $$$\\mathbf{M}$$$, $$$\\mathbf{A_r}$$$, $$$\\mathbf{A_c}$$$ denoting the\n    grid size, the number of pizzas to deliver, the minutes in which\n    all pizzas should be delivered, and the coordinates of the street crossing at which Ada starts respectively.\n</p>\n<p>\n    The next four lines denote the toll functions for North, East, West, South respectively.\n    Each of these lines contains $$$\\mathbf{OP_d}$$$, denoting the operator (one of <code>+</code>,\n    <code>-</code>, <code>*</code>, <code>/</code>),  and $$$\\mathbf{K_d}$$$, the positive integer used in toll\n    function.\n</p>\n<p>\n    The following $$$\\mathbf{P}$$$ lines describe the customers. Each of these lines consists\n    of three integers $$$\\mathbf{X_k}$$$, $$$\\mathbf{Y_k}$$$, $$$\\mathbf{C_k}$$$ denoting the row number\n    of the $$$k$$$-th customer from the top of the grid, the column number of the $$$k$$$-th customer from the left of the grid,\n    and the amount of coins they pay on delivery, respectively.\n</p>\n\n<h3>Output</h3>\n<p>\n    For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\n    where $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is <code>IMPOSSIBLE</code>\n    if all pizzas cannot be delivered within $$$\\mathbf{M}$$$ minutes; otherwise, the output should be the\n    maximum number of coins Ada can have after $$$\\mathbf{M}$$$ minutes (which could be negative).\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{N} \\le 10$$$.<br/>\n$$$1 \\le \\mathbf{M} \\le 20$$$.<br/>\n$$$1 \\le \\mathbf{A_r}, \\mathbf{A_c} \\le \\mathbf{N}$$$.<br/>\n$$$1 \\le \\mathbf{X_k}, \\mathbf{Y_k} \\le \\mathbf{N}$$$, for all $$$k$$$.<br/>\n$$$1 \\le \\mathbf{C_k} \\le 4$$$, for all $$$k$$$.<br/>\n$$$1 \\le \\mathbf{K_d} \\le 4$$$, for all $$$d$$$.<br/>\n$$$\\mathbf{OP_d}$$$ is one of (<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>), for all $$$d$$$.<br/>\nIt is guaranteed that no customer lives at the same street crossing\nas the pizza restaurant Ada starts her trip, i.e. $$$(\\mathbf{X_k}, \\mathbf{Y_k}) \\neq (\\mathbf{A_r}, \\mathbf{A_c})$$$, for all $$$1 \\le k \\le \\mathbf{P}$$$.<br/>\nIt is guaranteed that every customer lives at a different street crossing, i.e. $$$(`X_k, \\mathbf{Y_k}) \\neq (\\mathbf{X_l}, \\mathbf{Y_l})$$$, for all $$$1 \\le k, l \\le \\mathbf{P}$$$ and $$$k \\neq l$$$.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n$$$\\mathbf{P} = 0$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n$$$0 \\le \\mathbf{P} \\le 10$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2uzjhXP9UIHqZhy8XQRNtmYeZs-6lYcA0DQd8jjP514fn7z2dgYhYrbbbPLmEDzb13tB48FXQlRcV2lLZmQnryLz3APCPAl04H9vLdfw/pizza_delivery_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3 0 1 1 2\n+ 1\n- 2\n+ 3\n/ 4\n3 0 1 2 3\n- 2\n- 2\n- 2\n- 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U016B12FKe9oQYx9uMwCc5YEAa50KncaQVB7yVEJlUlUVxNVb_d5v_TXXSUmyLFLsdgRqvkc1TTH9RKcHjw4VUmwkOrcFqoGyLEVxwQDEk/pizza_delivery_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 0\n\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n    In Sample Case #1, Ada does not deliver any pizzas. Ada is located at street crossing\n    $$$(1,2)$$$. In $$$1$$$ minute she can decide to move west and go to $$$(1,1)$$$, so that the toll at $$$(1,2)$$$\n    calculates Ada's coins using the toll function <code>F_{West} = $$$c$$$ + $$$3$$$</code>, which results in $$$3$$$\n    coins. Therefore Ada can have maximum of $$$3$$$ coins with her after $$$1$$$ minute.\n</p>\n\n<p>\n  In Sample Case #2, Ada does not deliver any pizzas. Ada is located at street crossing\n    $$$(2, 3)$$$. All directions have a similar toll function, <code>$$$F_d$$$ = $$$c$$$ - $$$2$$$</code> for all $$$d$$$. If she decides\n  to go in any direction, she will end up with $$$-2$$$ coins. It is optimal for Ada to stay at the same location\n  and have $$$0$$$ coins at the end.\n  </p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0DAlIMS_wbjLaHzwCfLXy0x9uCrNSNcxhr_eoT63ufvBQ9rMBRyKWBxEy-LroJIVxM3KiI2s8rNeqvA26Ly1HTyxIyBkuwT1Qk9xEa-w/pizza_delivery_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">3\n3 1 3 1 3\n+ 4\n- 2\n* 1\n/ 4\n1 2 4\n2 2 1 1 2\n+ 2\n+ 3\n* 2\n* 1\n1 1 4\n2 2 1\n3 1 2 1 3\n+ 1\n* 1\n- 3\n/ 4\n2 2 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0r0Qaafg1FU_PZsfU8mbf9ojwnaD1AyP-ry_AGlnujXcXwkTmqXpyAFaB2MJE0MpCpCKET4c_LvFvPZxBgtBvMppvvCkK1l7DT45jXqxU/pizza_delivery_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 8\nCase #2: IMPOSSIBLE\nCase #3: 1\n\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  <p align=\"center\">\n    <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3MW9UyX3zlgu4eYZd51DNAE17P62M0VAcvofUxqqPtNzdxAeLEECgHvBS-m3d_G93ZDkl9Bq3nRpWNcRs46wMKFKEa-cv0KiSiqemj/sample_case_explanation.png\" width=\"80%\" alt=\"Additional Sample case 1 explanation\"/>\n</p>\n    In Additional Sample Case #1, Ada started at street crossing $$$(1,3)$$$ with $$$0$$$ coins.\n  Ada can receive maximum coins by following the steps below:\n  <ul>\n    <li>\n        Go west to $$$(1,2)$$$. Using the toll function for moving west <code>$$$F_{west}$$$ = $$$c$$$ * $$$1$$$</code>, Ada now has\n      $$$0 * 1 = 0$$$ coins.\n    </li>\n    <li>\n      Do not deliver the pizza at $$$(1,2)$$$ yet, and go south to $$$(2,2)$$$. Using the toll function for moving south <code>$$$F_{South}$$$ = $$$c$$$ / $$$4$$$</code>, Ada\n      now has $$$0 / 4 = 0$$$ coins.\n    </li>\n    <li>\n      Go north to $$$(1,2)$$$. Using the toll function for moving north <code>$$$F_{North}$$$ = $$$c$$$ + $$$4$$$</code>, Ada now\n      has $$$0 + 4 = 4$$$ coins.\n    </li>\n    <li>\n      Deliver the pizza at $$$(1,2)$$$. Ada receives $$$4$$$ additional coins for delivering the pizza. Ada has a total of $$$8$$$ coins in the end.\n    </li>\n  </ul>\n</p>\n<p>\n    In Additional Sample Case #2, Ada cannot deliver two pizzas in one minute, so the output is\n    <code>IMPOSSIBLE</code>.\n</p>\n<p>\n  In Additional Sample Case #3, Ada started at street crossing $$$(1,3)$$$ with $$$0$$$ coins.\n  Ada can receive maximum coins by following the steps below:\n  <ul>\n    <li>\n        Go west to $$$(1,2)$$$. Using the toll function for moving west <code>$$$F_{West}$$$ = $$$c$$$ - $$$3$$$</code>, Ada now has\n      $$$0 - 3 = -3$$$ coins.\n    </li>\n    <li>\n      Go south to $$$(2,2)$$$. Using the toll function for moving south <code>$$$F_{South}$$$ = $$$c$$$ / $$$4$$$</code>, Ada now\n    has $$$-3 / 4 = \\lfloor\\frac{-3}{4}\\rfloor = -1$$$ coins.\n  </li>\n  <li>\n    Deliver the pizza at $$$(2,2)$$$. Ada receives $$$2$$$ additional coins for delivering the pizza.\n    Ada has a total of $$$1$$$ coins in the end.\n  </li>\n  </ul>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":15},{"type":1,"type__str":"VISIBLE","value":22}],"title":"Pizza Delivery","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000008cb0f5","type":1,"type__str":"SPECTATOR"},"title":"Round E 2022","ui_appearance":0,"ui_appearance__str":"APPEARANCE_TYPE_DEFAULT"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
