{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1661871600000,"hide_scoreboard":true,"hide_scoreboard_config":{"embed_video_url":"https://www.youtube.com/embed/E2icOW6Ntfo"},"id":"00000000008f49d7","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"Thanks for participating in Coding Practice with Kick Start Session #3! Feel free to continue practicing the problems in practice-mode and <a href=\"https://youtu.be/ys2akzpjl3k\">watch the welcome video</a> if you are just getting started. Read through the analyses and download the test set data by clicking on each problem statement to learn more about how to approach solving each problem. If you missed the Problem Walkthrough video or want to reference it, please find the <a href=\"https://codingcompetitionsonair.withgoogle.com/events/cpwks-2022/watch?talk=cpwks-3\">on-demand video here</a>. You can also try out other past problems at <a href=\"https://g.co/kickstart/archive\">g.co/kickstart/archive</a>.<br><br>\nThanks again for participating and hope to see in <a href=\"https://codingcompetitions.withgoogle.com/kickstart/schedule?utm_medium=email&utm_source=emailer&utm_campaign=cpwks&src=Online%2FTOPs%2FKS\"><b>future Kick Start rounds</a></b>. You can participate in as many rounds as you wish! ","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1661526000000,"tasks":[{"analysis":"<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a href=\"https://youtu.be/ys2akzpjl3k?t=126\" target=\"_blank\"\n    >View problem and solution walkthrough video\n  </a>\n</p>\n<p>\n  Solving this problem involves a number of steps. First, we must determine the total number of\n  candies we have available to distribute. We can calculate this by summing together the number of\n  candies in each bag, $$${total} := \\sum_{i=1}^{\\mathbf{N}} \\mathbf{C_i}$$$. Once we have the total number\n  of candies, we must determine the number of candies that will remain after evenly distributing as\n  many as possible among $$$\\mathbf{M}$$$ kids. We can calculate this by dividing the total number of candies by\n  the number of kids. $$$\\mathbf{M}$$$ may not evenly divide $$$total$$$, so $$$({total} \\div \\mathbf{M})$$$\n  will have an integer part (the amount each kid receives) and a remainder part (the amount left\n  over). Because we only care about the remainder, we can use the\n  <a target=\"_blank\" href=\" https://en.wikipedia.org/wiki/Modulo_operation\">modulo operation</a> which\n  does exactly this.\n</p>\n<h3>Example solution:</h3>\n<p>\n<pre><code>\nSolve(<var>N</var>, <var>M</var>, <var>C</var>) {\n  <var>total</var> = 0\n  for <var>i</var> in 1:<var>N</var> {\n    <var>total</var> = <var>total</var> + <var>C</var>[<var>i</var>]\n  }\n  <var>remainder</var> = modulo(<var>total</var>, <var>M</var>)\n  return <var>remainder</var>\n}\n</code></pre>\n</p>\n<h3>Limits and complexity:</h3>\n<p>\n  With the input limits for this problem, the default integer size for most programming languages\n  will be sufficient to perform all arithmetic without risk of overflow. Specifically, the largest\n  possible value is $$${total}=({\\mathbf{N_{max}}} \\times {\\mathbf{{C_{i}}_{max}}})=10^8$$$, which is easily stored\n  in a 32-bit signed integer (<!-- NOTYPO -->$$${int_{max}} \\approx 2.147 \\times 10^9$$$). If the\n  limits were larger, we could take advantage of the transitive and symmetric properties of modular\n  arithmetic to calculate the remainder provided by each bag, and the running remainder after each\n  addition:\n<pre><code>\nSolve(<var>N</var>, <var>M</var>, <var>C</var>) {\n  <var>remainder</var> = 0\n  for <var>i</var> in 1:<var>N</var> {\n    <var>remainder</var> = <var>remainder</var> + modulo(<var>C</var>[<var>i</var>], <var>M</var>)\n    <var>remainder</var> = modulo(<var>remainder</var>, <var>M</var>)\n  }\n  return <var>remainder</var>\n}\n</code></pre>\n  This reduces the largest intermediate value to $$$2 \\times ({\\mathbf{M_{max}}} - 1)$$$ with only a small\n  amount of extra computation. When solving other problems in this competition, you are likely to\n  encounter limits that will require this kind of optimization.\n</p>\n<p>\n  Computational complexity is also an important factor to consider when deciding how to approach a\n  problem. Both approaches presented here have the same complexity, $$$O(\\mathbf{N})$$$, which is sufficient\n  to solve the problem within the time limit. Other problems in this competition can often be solved\n  using a variety of approaches, but only some will be sufficiently fast to solve all test sets\n  within the time limit. An algorithm with complexity $$$O(\\mathbf{G}^3)$$$ may work for a small test set\n  with $$$\\mathbf{G}_{max}=20$$$, but that same algorithm will be too slow for a large test set with\n  $$$\\mathbf{G}_{max}=10^6$$$.\n</p>\n<p>\n  In general, time and memory limits for the problems in this competition, and the bounds for their\n  test sets, are chosen so that algorithms pass or fail based on their overall time and memory\n  complexity order. In other words, if a problem has a time limit of 60 seconds, it is unlikely\n  that a fast algorithm would take 40 seconds while a slow one took 80 seconds. Instead, you will\n  find that a fast algorithm might take 5 seconds while a slow one takes 5 years. So if you find\n  your solution exceeding the time limit for a problem, take a moment to reevaluate your algorithm.\n  There may be another approach that is many times faster.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3_4MhUSD9w_1_SNwIpzHsPvKBs445ujPQqj6txYQxES98cEH379lBwtOf7C_0s-V6H8XEhZBrE/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000bcee64","statement":"<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a href=\"https://youtu.be/ys2akzpjl3k?t=126\" target=\"_blank\"\n    >View problem and solution walkthrough video\n  </a>\n</p>\n<h3>Problem</h3>\n<p>\n  You have gathered $$$\\mathbf{N}$$$ bags of candy and you want to distribute the candy\n  amongst $$$\\mathbf{M}$$$ kids. The $$$i$$$-th bag contains $$$\\mathbf{C_i}$$$ pieces of candy. You want\n  to make sure that every kid get the same amount of candy and that the number\n  of pieces of candy they receive is the greatest possible. You can open each\n  bag and mix all pieces of candy before distributing them to the kids.\n</p>\n<p>\n  How many pieces of candy will remain after you share the candy amongst kids,\n  based on the rules described above?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow.\n</p>\n<p>\n  Each test case consists of two lines. The first line of each test case\n  contains two integers: integer $$$\\mathbf{N}$$$, the number of candy bags, and $$$\\mathbf{M}$$$, the\n  number of kids.\n</p>\n<p>\n  The next line contains $$$\\mathbf{N}$$$ non-negative integers $$$\\mathbf{C_1},\\mathbf{C_2},\\dots,\\mathbf{C_N}$$$\n  representing array $$$\\mathbf{C}$$$, where the $$$i$$$-th integer represents the number of\n  candies in the $$$i$$$-th bag.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from $$$1$$$) and\n  <code>y</code> is the number of candies that will remain if you divide candies\n  between kids according to the rules described above.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 60 seconds.<br/>\nMemory limit: 1 GB.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n  $$$1 \\le \\mathbf{N} \\le 10^5$$$.<br />\n  $$$1 \\le \\mathbf{M} \\le 10^4$$$.<br />\n  $$$0 \\le \\mathbf{C_i} \\le 1000$$$, for all $$$i$$$ from $$$1$$$ to $$$\\mathbf{N}$$$.<br />\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0uXw0AlPVv6DTgAUQk-IYwUBqi-6XFP54gpArPjfxwJ9PFmXX8Sfre3ovewmr2vcbUFcVycoDsqgkV3gCw08Yyjb2H61Ybp5kNkEQylA/sample_problem_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n7 3\n1 2 3 4 5 6 7\n5 10\n7 7 7 7 7\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2IWTz2BEZQhJbjp9luOSp_520U3W0yWx1RgvPWEjTDl03c9__ENtV0D19ju9OzipZlpK5FWwXYXefU_X3MRoUEQRD-Wj5SzoTcL_UaidQ/sample_problem_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nIn Sample Case #1, we have $$$\\mathbf{N}=7$$$ bags of candy. In total we have $$$1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$$$\ncandies that we want to divide between $$$\\mathbf{M} = 3$$$ kids.\nEvery kid can get $$$9$$$ pieces of candy, so $$$28 - 3 \\times 9 = 1$$$ pieces of candy will remain.\n</p>\n<p>\nIn Sample Case #2, we have $$$\\mathbf{N}=5$$$ bags of candy. In total we have $$$7 + 7 + 7 + 7 + 7 = 35$$$\ncandies that we want to divide between $$$\\mathbf{M} = 10$$$ kids.\nEvery kid can get $$$3$$$ pieces of candy, so $$$35 - 10 \\times 3 = 5$$$ pieces of candy will remain.\n</p>\n\n<h3>Sample codes</h3>\n\n<p>If you want to learn how to structure your code, read from the standard input,\n  or print to the standard output, please find the sample solutions to this problem below\n  in all the programming languages that are available on our platform.\n</p>\n\n<ul>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1Hgba_BF-scK0ypaz4vJv8ZgqKmr7w_OnCOyvQnAgzwfIWqZMH-bW1hF9N3AUW7S4vr_Us0rRBSOfY/sample.c?dl=1\">C</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U01xJ6mD4tlUNKAeVcahPHYZwV1EDnZIbqFVB-BuWDLdchpArnQSAujM6x4VWkTMTjTzXi7hoSsNghAY-Q/sample.clj?dl=1\">Clojure</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3FUckIW_vn0H8lQM6qA1GX8KwhhGQeDnkeBIXSegKeLYP-3qtJ-1JCIXxDu1oVAOvM1I-1K0061H6Q_VY/sample.cpp?dl=1\">C++</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0_D2OANVH8CpqEjSdONKJ6NdG0NBAZsbK0KGI1LKwQLzTjD_pBFnlZzJ44PFA36BD1J7rCfMbhMojbKQ/sample.cs?dl=1\">C#</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2JdJQg9OLF-_Tj6Wp4vmv7aXkANylCkoGfXrs15gh4t4JiwXMUacBLJNaJ6t1REpjfntPKhodX8gCE/sample.d?dl=1\">D</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2ppkOCew-pmbXuoLYFCblSWZqTXU44ZDtN8JCIpOo8cLSyJ5yAU0PHDW_EMWTBTniPFGcOWxAmP3v4GK5i/sample.dart?dl=1\">Dart</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3q44qgfMU5VLz1M6sApMhO9P2T4afTJp1giiDivMfu3qIdO3ct5ssfh_1DfRaoGhYBHwCMpwDqqYDwlA/sample.fs?dl=1\">F#</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1nhpMXpzPEuXXtRU8Om4r8P5FWiBC_M6HKTd62GEPwyqKegJBYAnnR7JxIhfTYk8SlAsVcnaLXW1f4xw/sample.go?dl=1\">Go</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0hsBiqdRPtRirI_AZdYjxO4OU2QWsKPERLCY9YZBaLFU8d2V7PQ_G_ZoFCKP3Zl9uhzHp3mu5yDwuC8YvI_Uc/sample.groovy?dl=1\">Groovy</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U00bY47Rk3GB4pG3JLUlaYc5JmZ5KvofuK56gmagMKyHED1F3cItsf0LL7ZvpJLMhryn72LDpLgaCjJNA/sample.hs?dl=1\">Haskell</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2fQnsOOUZi4IHnKrsjh_e9-1x7XaDT6K441e4xsxGE-cJYfOr1Gsn59RIqpX-XMFufZ88AKAewhngjQuD0/sample.java?dl=1\">Java</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2PP2Ynv9n8HDqcU5iMTE3Uw1VtvF-_2z2vkPZkGsVzdOb3JkQb95ntBL0lbtQ2eEeDcXh0hzb2I8fQ8g/sample.jl?dl=1\">Julia</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3e7i78hDoi-22SYV8t3tTLvRY6cMDp7kzqyaHn-wwMaLCtAf2S-QufTa_--ektj1WHok51YVY9wydrPw/sample.js?dl=1\">JavaScript</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0bHJWyS_2KBmp0v1gQHZmEYoppNenNtoxbDgSYl4adS2FoleOVxoQeIG1qeVUQvm4aVUJ8ucpour_kUA/sample.kt?dl=1\">Kotlin</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2HiBO0ayBHX7f2GJBumV516GwHqC5exemmcmUfKcKFY_UdqGcr9c_lKgSrjD2s_ZniAEQLJ8QnRVRMCe9Z/sample.lisp?dl=1\">Lisp</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0iYdBNIHRTSXU_so74yPUlfEnpiPQ2sVhbWv3SOyA1o4NkFgnEeTPWbO2kESB-ICpHspS-kKCM6DLdhlY/sample.lua?dl=1\">Lua</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3qhfpqv52ZkQmKC6EfncrYxjPoisPZ9bhXK-7OvXEqjlmSHIJcaULDn2hOgjHxjQOvJJzUKDh0AJuvSXkcll7ydg/sample_octave.m?dl=1\">Octave</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1zn-avzBVkts1DWaCEQj2TjAXfHoQ0-0MoAdh_1AhlkGWlJpBJUKZgME91iqobXZU57NRIz-U8_LqNHe_dnmqnEr9QATkx/sample_objective_c.m?dl=1\">Objective-C</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2aN_v7fidcHYZAP_3tUGlWP-tjHu9rKDcK6yhd2VCdNWb4eIGS7yYM3yKfPDT2Ys5KULhSKPlP6w4Nvg/sample.ml?dl=1\">OCaml</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1EfxGhGiknl7tuLxxSmT2212qFylwVbeoKe7fA2PTEkDHktMXp1d3m2YQ_zRJx0jLYbnr74DjOElip70w/sample.pas?dl=1\">Pascal</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U39gtRpOQlCYHsE-xpwI8uMOqRrMIVxlbCfCk11gBpfzZ0WbK1mgULdls2j3LY67ve27nnXsg5DtfL805M/sample.php?dl=1\">PHP</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2-5p50ZGE6TNIr6rc-dWfwOuxWxvP9onXR1jwLi26F-j0v54KTZlrVOcrhwGEhBlcpYBMQ10OpOZtHXg/sample.pl?dl=1\">Perl</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0IuSbRmRU8XrwVy29T2CUZqJ5toMuioHYERIwFYhRZMrj6BC-J0B_9KCY7S_HYUjliyfNkbkBkRxYkEUg/sample.py3?dl=1\">Python3</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U03D5v-Vvssy7yrBfUP-bwEHGIOXPSuW673ugFq8aM2Up9vavaQ_whErKxi5uUXE0sKEvUnK0cBt9a1CMj-jA/sample.pypy3?dl=1\">PyPy 3</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2RV-8gAbK_s1lRnD8i_gsR45BCODu743Iw8qAgfP4yP8fblBT3lumyo0Rj6umthHcXqnVW545MpQBO/sample.r?dl=1\">R</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2Ni3FI6MHJe9KaAgjjsV_PDzhH0Zx__NngEzKAdT_FKd9bqalRZSi4Ccx0toa-yZyx4x6-Fod-wJLb0g/sample.rb?dl=1\">Ruby</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U21kj7p9DYRGvZlRPanljps7x6udtW9u5jzkbaBXsCcXkr2LfGD4Ojhe7QLCe6FqzegJwtBRq_n7qEH-g/sample.rs?dl=1\">Rust</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3ijOq6CzcrrAQeyxNN8Nr3YyRrUXumTtimjgljp6o5i5DdgY2x3mLx3qsP9dRdz9WMlv63ymN5lFjHUtuILw/sample.scala?dl=1\">Scala</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0LhRXhEkv0Qso-OsUXAdvTx4EZKm099R_LD3HKughDmfvB0_afsklpzDmmLUPuEm5JNeesvrG2HcQUIA/sample.sh?dl=1\">Bash</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3SlOH3q-9BdKEY_RBcrqM0yPbLf7QRgmhC85ECWcxEhkpGXp_uyeC5Naa2nYhLZXoijirMTJDVjGJqbgL2Iw/sample.swift?dl=1\">Swift</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2Qm6UXqmBPjC1OZNi2C1bvqK0Fe2l0Y22lCS-aO7QD6x6zKNdmR-ClAMYf735qBeCEB0IxGXpq6Lj9-A/sample.ts?dl=1\">TypeScript</a></li>\n  <li><a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3phKWr1DpEeO8JRvQWHbN-RxZSm96_CaUVDZtdZ4Y7RCu5fSLfCAnlxtIpMy9y0z3EAb69B9L6XrcCRw/sample.vb?dl=1\">Visual Basic</a></li>\n</ul>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":1}],"title":"Sample Problem","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a href=\"https://www.youtube.com/watch?v=E2icOW6Ntfo&t=1116s\" target=\"_blank\"\n    >View problem and solution walkthrough video\n  </a>\n</p>\n<p>\n  The problem translates to given $$$\\mathbf{A}$$$, $$$\\mathbf{B}$$$, $$$\\mathbf{N}$$$, $$$\\mathbf{K}$$$, find number of pairs\n  <b>$$$(i, j)$$$</b>\n  which satisfy the following conditions:\n</p>\n<ol>\n  <li>$$$i \\neq j$$$</li>\n  <li>$$$1 \\le i \\le \\mathbf{N} $$$ and $$$ 1 \\le j \\le \\mathbf{N}$$$</li>\n  <li>$$$(i^\\mathbf{A} + j^\\mathbf{B}) \\enspace mod \\enspace \\mathbf{K} = 0$$$</li>\n</ol>\n\n<h4>Test Set 1</h4>\n\n<p>\n  We can brute force through all possible pairs $$$(i, j)$$$ which satisfy the\n  first two conditions and calculate if $$$(i^\\mathbf{A} + j^\\mathbf{B}) \\enspace mod \\enspace\n  \\mathbf{K} = 0$$$. As $$$1 \\le i \\le \\mathbf{N}$$$ and $$$1 \\le j \\le \\mathbf{N}$$$, we have\n  $$$\\mathbf{N}^2$$$ pairs and for each pair we need to compute $$$(i^\\mathbf{A} + j^\\mathbf{B})\n  \\enspace mod \\enspace \\mathbf{K}$$$, If we compute this naively, we will require\n  $$$O(\\mathbf{A}+\\mathbf{B})$$$ operations, but we can use <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Exponentiation_by_squaring\">exponentiation by squaring</a> to\n  compute this efficiently in $$$O(log(\\mathbf{A}) + log(\\mathbf{B}))$$$.\n</p>\n<p>\n  Since we need to compute this sum for each pair $$$(i, j)$$$, we get\n  $$$O(\\mathbf{N}^2(log(\\mathbf{A})+log(\\mathbf{B})))$$$.\n</p>\n\n<h4>Test Set 2</h4>\n\n<p>\n  As $$$\\mathbf{N}$$$ is quite large for this test set, the previous approach would not\n  work here, Let us try another approach. For $$$(i^\\mathbf{A}+j^\\mathbf{B}) \\enspace mod\n  \\enspace \\mathbf{K} = 0$$$, we know that $$$j^\\mathbf{B} \\enspace mod \\enspace \\mathbf{K} =\n  -{i^\\mathbf{A}} \\enspace mod \\enspace \\mathbf{K}$$$.\n</p>\n<p>\n  For each possible $$$i$$$, let us try to find how many such $$$j$$$ exists.\n  <br />\n  Let us create an array $$$L$$$, where $$$L[x]$$$ denotes the number of possible\n  values of $$$j$$$ such that $$$j^\\mathbf{B} \\enspace mod \\enspace \\mathbf{K} = x$$$. Now, we\n  can iterate over all possible values of $$$i$$$ i.e. $$$(1,2,3,\\dots,\\mathbf{N})$$$ and add\n  $$$L[-{i^\\mathbf{A}} \\enspace mod \\enspace \\mathbf{K}]$$$ to the answer. One more thing\n  which is left to handle here is the condition $$$i \\neq j$$$, for which we can\n  simply check if $$$(i^\\mathbf{A} + i^\\mathbf{B}) \\enspace mod \\enspace \\mathbf{K} = 0$$$ and\n  decrement $$$1$$$ from the answer. <br />\n  The complexity of this approach would be $$$O(\\mathbf{N(}log(\\mathbf{A})+log(\\mathbf{B})))$$$ which\n  is better than the previous approach but still exceeds the time limit. But we\n  can try to optimize more from here.\n</p>\n<p>\n  You can note that even though $$$i$$$ can take $$$\\mathbf{N}$$$ possible values, $$$i\n  \\enspace mod \\enspace \\mathbf{K}$$$ can only take $$$\\mathbf{K}$$$ possible values. Can we take\n  advantage of this ?\n  <br />\n  We defined $$$L[x]$$$ = number of $$$j$$$ such that $$$j^\\mathbf{B} \\enspace mod\n  \\enspace \\mathbf{K} = x$$$. A more optimized way to construct $$$L$$$ can be:\n  Consider a variable $$$q, 0 \\le q \\lt K$$$. (The number of values $$$j\n  \\enspace mod \\enspace \\mathbf{K}$$$ can take), we can iterate over all possible\n  values of $$$q$$$ i.e. $$$(1,2,3,\\dots,\\mathbf{K})$$$ and increment $$$L[q^\\mathbf{B} \\enspace mod\n  \\enspace \\mathbf{K}]$$$ by number of $$$j$$$'s such that $$$j \\enspace mod \\enspace \\mathbf{K}\n  = q$$$. This reduces the time complexity of constructing $$$L$$$ from\n  $$$O(\\mathbf{N}log(\\mathbf{B}))$$$ to $$$O(\\mathbf{K}log(\\mathbf{B}))$$$.\n</p>\n<p>\n  Similarly, instead of iterating over all possible values of $$$i$$$, Consider\n  a variable $$$p, 0 \\le p \\lt \\mathbf{K}$$$ (The number of values $$$i \\enspace mod\n  \\enspace \\mathbf{K}$$$ can take), Let $$$z$$$ = number of $$$i$$$'s such that $$$i\n  \\enspace mod \\enspace \\mathbf{K} = p$$$, and add $$$z \\times L[-{p^\\mathbf{A}} \\enspace mod\n  \\enspace \\mathbf{K}]$$$ to the answer.\n  <br />\n  We still need to handle the condition of $$$ i \\neq j$$$, for which we can\n  simlpy check for each $$$p$$$ if $$$(p^\\mathbf{A} + p^\\mathbf{B}) \\enspace mod \\enspace \\mathbf{K}\n  = 0$$$ and subtract $$$z$$$ from the answer.\n</p>\n<p>\n  As we are iterating over $$$p$$$ and $$$q$$$ which take only $$$\\mathbf{K}$$$ distinct\n  values instead of $$$\\mathbf{N}$$$ distinct values for $$$i$$$ and $$$j$$$, the complexity\n  of this approach reduces to $$$O(\\mathbf{K}(log(\\mathbf{A})+log(\\mathbf{B})))$$$.\n</p>\n\n<p>\n  A small mistake which can happen in exponention by squaring is $$$x^0 = 1$$$,\n  which would be wrong in case of $$$\\mathbf{K} = 1$$$, hence take $$$x^0 = 1 \\enspace\n  mod \\enspace \\mathbf{K}$$$.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0v3uRo68YlKpyyLUdrXcAOF1AMwcRdsEzzmSa1hvxKDnTbaGS-M7QwBWqJad7RCOjhPWPTjPvb/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000bcf0aa","statement":"<h3>Problem</h3>\n<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a target=\"_blank\" href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2CKA8n_5EspT52QK5tqthqmmTb047Rk8kkOJKcsuCR8ac3EYvYRS3yeAoDM2Nf8mKH4s-jQMvVsq7M/starter_code.zip?dl=1\">Download the Starter Code!</a>\n</p>\n<p>\nWatson and Sherlock are gym buddies.\n</p>\n<p>\nTheir gym trainer has given them three numbers, $$$\\mathbf{A}$$$, $$$\\mathbf{B}$$$, and $$$\\mathbf{N}$$$, and has asked Watson and Sherlock to pick two different strictly positive integers $$$i$$$ and $$$j$$$, where $$$i$$$ and $$$j$$$ are both less than or equal to $$$\\mathbf{N}$$$. Watson is expected to eat exactly $$$i^A$$$ sprouts every day, and Sherlock is expected to eat exactly $$$j^B$$$ sprouts every day.\n</p>\n<p>\nWatson and Sherlock have noticed that if the total number of sprouts eaten by them on a given day is divisible by a certain integer $$$\\mathbf{K}$$$, then they get along well that day.</p>\n<p>\nSo, Watson and Sherlock need your help to determine how many such pairs of $$$(i, j)$$$ exist, where $$$i \\neq j$$$ and they get along well that day. As the number of pairs can be really high, please output it modulo $$$10^9+7(1000000007)$$$.<br>\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow. Each test case consists of one line with 4 integers $$$\\mathbf{A}$$$, $$$\\mathbf{B}$$$, $$$\\mathbf{N}$$$ and $$$\\mathbf{K}$$$, as described above.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the required answer.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 60 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$0 \\le \\mathbf{A} \\le 10^{6}$$$.<br/>\n  $$$0 \\le \\mathbf{B} \\le 10^{6}$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{K} \\le 10^{4}$$$.<br/>\n  $$$1 \\le \\mathbf{N} \\le 10^{3}$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$1 \\le \\mathbf{K} \\le 10^{5}$$$.<br/>\n  $$$1 \\le \\mathbf{N} \\le 10^{18}$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3NTvD8Eb_NE32eqyOCZrIlJybcHOeSrbP3VtdalPDZmjuLfF0jgPUSBHCHDHpSuDzfgrbX0tgA1g3dy3inCRSqh68eNmZIyUy36pE4iEOq6Phwu1qAp16T6iv_jegP/sherlock_and_watson_gym_secrets_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n1 1 5 3\n1 2 4 5\n1 1 2 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U03BUUHJlwKbqCHl_q_9iLCjfSmNdQDjALMcH_YRAkM_Fhy3Wbr5yA9q3UwmfJi9gKvQWuJDFmtSFuUJeMhDxOwfCEjjzrfXNdKeLsIdx6JiYv40SfnWDwMNlUG_u-1Cg/sherlock_and_watson_gym_secrets_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 8\nCase #2: 3\nCase #3: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    In Case #1, the possible pairs are $$$(1, 2)$$$, $$$(1, 5)$$$, $$$(2, 1)$$$, $$$(2, 4)$$$, $$$(4, 2)$$$, $$$(4, 5)$$$, $$$(5, 1)$$$, and $$$(5, 4)$$$.\n    </p>\n  <p>\n     In Case #2, the possible pairs are $$$(1, 2)$$$, $$$(1, 3)$$$, and $$$(4, 1)$$$.\n  </p>\n  <p>\n    In Case #3, No possible pairs are there, as $$$i \\neq j$$$.\n  </p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":12},{"type":1,"type__str":"VISIBLE","value":20}],"title":"Sherlock and Watson Gym Secrets","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a href=\"https://www.youtube.com/watch?v=E2icOW6Ntfo&t=335s\" target=\"_blank\"\n    >View problem and solution walkthrough video\n  </a>\n</p>\n<h3>Test set 1</h3>\n<p>\n    A naive approach to this problem is to simply simulate what has been mentioned in the problem statement.\n    In other words, for each instruction, we will keep moving the robot in the specified direction until it reaches an unvisited square.\n    This approach is going to have a time complexity of $$$O(\\mathbf{N}^2)$$$, which is good enough for test set 1.\n</p>\n<h3>Test set 2</h3>\n<p>\n    For this test set, the naive approach will not be good enough. The problem with the naive approach is that it visits a lot of already visited squares.\n    In cases such as when the input alternates continuously between <code>E</code> and <code>W</code>, each instruction will visit all the previously visited squares.\n    We need a way to compute the destination square for each instruction faster to reduce the complexity.\n</p>\n<p>\n    Let us use intervals to represent all the contiguous segments of visited squares in the same row. For example, if in a row $$$r$$$ the robot has already visited squares $$$(r, 3)$$$, $$$(r, 5)$$$, $$$(r, 6)$$$, and $$$(r, 7)$$$,\n    the visited squares in this row can be represented with the intervals $$$(3, 3)$$$ and $$$(5, 7)$$$.\n</p>\n<p>\n    With that in mind, consider we have a <a href=\"https://en.wikipedia.org/wiki/Set_(abstract_data_type)\">set</a> of intervals for each row and each column of the grid to represent all the squares that have been visited in that particular row or column.\n    Let us call them interval-sets. Initially, the robot has only visited the starting squares ($$$\\mathbf{S_R}$$$, $$$\\mathbf{S_C}$$$) it started in, so all these sets are empty except for the set corresponding to row $$$\\mathbf{S_R}$$$, which has a single interval ($$$\\mathbf{S_C}$$$, $$$\\mathbf{S_C}$$$), and the set corresponding to the column $$$\\mathbf{S_C}$$$, which has a single interval ($$$\\mathbf{S_R}$$$, $$$\\mathbf{S_R}$$$).\n</p>\n<p>\n    Using this data structure, we can quickly find the destination square for the robot for each instruction.\n    Let the robot be located at $$$(r, c)$$$. For each instruction, we will look at the interval-set corresponding\n    to the row $$$r$$$ (if the instruction is <code>W</code> or <code>E</code>) or column $$$c$$$ (if the instruction is <code>N</code> or <code>S</code>).\n    Then, we will find the interval in this set that contains the robot's current position (there is guaranteed be one, because the square the robot is currently in is already considered to be visited).\n    Once we find that interval, we will immediately know the location of the next unvisited squares in either direction, as they will be first row or column that lies outside of that interval.\n</p>\n<p>\n    For example, let the robot be located in square $$$(2, 6)$$$ and the next instruction is <code>W</code>.\n    Let the interval set for row $$$2$$$ be $$$(3, 3)$$$ and $$$(5, 7)$$$. The robot is currently located at column $$$6$$$, which is inside the interval $$$(5, 7)$$$.\n    From this, we know that the next unvisited square in the west is $$$(2, 4)$$$, and the next unvisited square in the east is $$$(2, 8)$$$. As the instruction is <code>W</code>, the robot will move to square $$$(2, 4)$$$.\n</p>\n<p>\n    All that remains now is to find a way to update our interval-sets suitably whenever the robot visits a new square. Let $$$(r, c)$$$ be the newly visited square.\n    This can be done by updating the interval-set for both row $$$r$$$ and column $$$c$$$. For both interval-sets, we will check if any existing intervals are next to the newly visited square:\n</p>\n<ul>\n    <li>If there are two intervals adjacent to the newly visited square on both sides, we will merge these two intervals into one.</li>\n    <li>If there is one interval adjacent to the newly visited square, we will extend this interval by 1 to include the newly visited square.</li>\n    <li>Otherwise, we will add a new interval of length 1 containing just the newly visited square.</li>\n</ul>\n<p>\n    Since we add at most one interval in each case, the number of intervals is $$$O(\\mathbf{N})$$$. Since all operations are about finding/inserting/removing a single interval, all of those can be handled easily in $$$O(log(\\mathbf{N}))$$$ time. So the overall run time of this approach is $$$O(\\mathbf{N}log(\\mathbf{N}))$$$.\n    There is also a $$$O(\\mathbf{N})$$$ solution to this problem using hash tables. It is left as an exercise to the reader.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3N1W386Fdh9CN-lCgnZSrHuYgoHgDHB8gbf39CgCK9YWY3CRCNfbzTgK-7w0q0ewEvU9e9z1TP/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000bcf0fd","statement":"<h3>Problem</h3>\n<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a target=\"_blank\" href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U23mYeDZCTzGARxZZB1fBTEgH4r7cAXfkJCM85z6de961sMpE79QMcsgtUKrI93avrj73DQA07OAPdF/starter_code.zip?dl=1\">Download the Starter Code!</a>\n</p>\n<p>\n  Banny has just bought a new programmable robot. Eager to test his coding\n  skills, he has placed the robot in a grid of squares with $$$\\mathbf{R}$$$ rows (numbered\n  $$$1$$$ to $$$\\mathbf{R}$$$ from north to south) and $$$\\mathbf{C}$$$ columns (numbered $$$1$$$ to $$$\\mathbf{C}$$$\n  from west to east). The square in row $$$r$$$ and column\n  $$$c$$$ is denoted $$$(r, c)$$$.\n</p>\n<p>\n  Initially the robot starts in the square ($$$\\mathbf{S_R}$$$, $$$\\mathbf{S_C}$$$). Banny will give the\n  robot $$$\\mathbf{N}$$$ instructions. Each instruction is one of\n  <code>N</code>, <code>S</code>, <code>E</code>, or <code>W</code>, instructing\n  the robot to move one square north, south, east, or west respectively.\n</p>\n<p>\n  If the robot moves into a square that it has been in before, the robot will\n  continue moving in the same direction until it reaches a square that it\n  <i>has not</i> been in before. Banny will never give the robot an instruction\n  that will cause it to move out of the grid.\n</p>\n<p>\n  Can you help Banny determine which square the robot will finish in, after\n  following the $$$\\mathbf{N}$$$ instructions?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow. Each test case starts with a line containing the five integers\n  $$$\\mathbf{N}$$$, $$$\\mathbf{R}$$$, $$$\\mathbf{C}$$$, $$$\\mathbf{S_R}$$$, and $$$\\mathbf{S_C}$$$, the number of instructions, the number of\n  rows, the number of columns, the robot's starting row, and the robot's\n  starting column, respectively.\n</p>\n<p>\n  Then, another line follows containing a single string consisting of $$$\\mathbf{N}$$$\n  characters; the $$$i$$$-th of these characters is the $$$i$$$-th instruction Banny gives\n  the robot (one of\n  <code>N</code>, <code>S</code>, <code>E</code>, or <code>W</code>, as\n  described above).\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$r$$$ $$$c$$$</code>,\n  where $$$x$$$ is the test case number (starting from 1),\n  $$$r$$$ is the row the robot finishes in, and $$$c$$$ is the\n  column the robot finishes in.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n  $$$1 \\le \\mathbf{R} \\le 5 \\times 10^4$$$.<br />\n  $$$1 \\le \\mathbf{C} \\le 5 \\times 10^4$$$.<br />\n  $$$1 \\le \\mathbf{S_R} \\le \\mathbf{R}$$$.<br />\n  $$$1 \\le \\mathbf{S_C} \\le \\mathbf{C}$$$.<br />\n  The instructions will not cause the robot to move out of the grid.<br />\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  <p>\n    $$$1 \\le \\mathbf{N} \\le 100$$$.<br />\n  </p>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 60 seconds.<br/>\n\n  <p>\n    $$$1 \\le \\mathbf{N} \\le 5 \\times 10^4$$$.<br />\n  </p>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0rbBp26t1MbH1Ic6dXPtd2JeCvG_XUM0RXVfll3sxGqTZNmuyGf0z6ijMEhnzSQePEp4XS_wtZUU68tgIrz55_7QRWZMCw3eXIUw/wiggle_walk_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n5 3 6 2 3\nEEWNS\n4 3 3 1 1\nSESE\n11 5 8 3 4\nNEESSWWNESE\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2M-KAabncP9KxQhCknLt_wsOgmdWSvKrX1mxrQJTs2Ja5J1zl1kgjPWysSS7cMpk5E3SPigyPvsQ1A5cANHma4gnSXDc-pSHUZtI4/wiggle_walk_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3 2\nCase #2: 3 3\nCase #3: 3 7\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  Sample Case #1 corresponds to the top-left diagram, Sample Case #2 corresponds\n  to the top-right diagram, and Sample Case #3 corresponds to the lower diagram.\n  In each diagram, the yellow square is the square the robot starts in, while\n  the green square is the square the robot finishes in.\n\n  <img alt=\"\" src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1I76SXpjyg-bfIPTy9QU40E4vN0Arj_3_jFW2ABTiXlUzckcCP94vZ3-9XjjBlNsp3QcNMs8FhUw/wigglewalk.png\">\n</sampleio>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":6},{"type":1,"type__str":"VISIBLE","value":8}],"title":"Wiggle Walk","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a href=\"https://www.youtube.com/watch?v=E2icOW6Ntfo&t=54s\" target=\"_blank\"\n    >View problem and solution walkthrough video\n  </a>\n</p>\n<p>\n  To check whether $$$i$$$ is a record breaking day, we make two checks:\n  <ul>\n    <li> The number of visitors on day $$$i$$$ ($$$\\mathbf{V_i}$$$) must be greater than the number of visitors for any previous days.</li>\n    <li> Either it is the last day OR the number of visitors on the day $$$i$$$ are more than the day $$$i + 1$$$.</li>\n  </ul>\n  The second one is easy to check in constant time. Checking the first one is the difficult part of this problem. Here's how we would do that:\n</p>\n<h3>Test Set 1</h3>\n<p>\n  For each element $$$j$$$ such that $$$(1 &le; j &lt; i)$$$,\n  check that the number of visitors on\n  day $$$j$$$ are less than number of visitors on day $$$i$$$. In other words $$$(\\mathbf{V_j} &lt; \\mathbf{V_i})$$$.\n  Hence, for each day we would compare it with all\n  the previous days and it would take $$$O(\\mathbf{N})$$$ time.\n  Therefore, for $$$\\mathbf{N}$$$ days, the time complexity of this solution would be $$$O(\\mathbf{N^2})$$$.\n</p>\n<h3>Test Set 2</h3>\n<p>\n  However, a solution that takes $$$O(\\mathbf{N^2})$$$ time is not fast enough for Test Set 2, so we need a faster approach.\n  Instead of comparing the number of visitors of\n  day $$$i$$$ against <i>all</i> the previous days one by\n  one, we can compare the number of visitors of day $$$i$$$ against the\n  <i>greatest number of visitors</i> from all previous days.\n  That reduces our processing time for each day from O($$$\\mathbf{N}$$$) to O($$$1$$$).\n  Therefore, for $$$\\mathbf{N}$$$ days, the time complexity of this solution would be O($$$\\mathbf{N}$$$), which is\n  sufficiently fast for both Test Set 1 and Test Set 2.\n</p>\n<h5>Sample Code (C++)</h5>\n<pre><code class=\"language-cpp\">\n<var>int</var> countRecordBreakingDays(vector<<var>int</var>> visitors) {\n  <var>int</var> recordBreaksCount = 0;\n  <var>int</var> previousRecord = 0;\n  for(<var>int</var> i = 0; i < checkpoints.size(); i++) {\n     <var>bool</var> greaterThanPreviousDays = i == 0 || visitors[i] > previousRecord;\n     <var>bool</var> greaterThanFollowingDay = i == checkpoints.size()-1 || visitors[i] > visitors[i+1];\n     if(greaterThanPreviousDays && greaterThanFollowingDay) {\n        recordBreaksCount++;\n     }\n     previousRecord = max(previousRecord, visitors[i]);\n  }\n  return recordBreaksCount;\n}\n</code></pre>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2kle4HENjcrwUUVZf_hEEGR7ZDVwuLhRPeF5QhML5T3QOZ0AtcJIcCVWPXs3UFxnEWddsxzx_7/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000bcf2ed","statement":"<h3>Problem</h3>\n<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a target=\"_blank\" href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0NhokkmurXAFBdTH_lX47NsG7HGAgtO1RS6m2DlI0kdsZ6YYRQX3isGVF030KiX3EnCtqZaZuj8bOG/starter_code.zip?dl=1\">Download the Starter Code!</a>\n</p>\n<p>\n  Isyana is given the number of visitors at her local theme park on $$$\\mathbf{N}$$$ consecutive days. The\n  number of visitors on the $$$i$$$-th day is $$$\\mathbf{V_i}$$$. A day is <i>record breaking</i> if it\n  satisfies both of the following conditions:\n  <ul>\n    <li>Either it is the first day, or the number of visitors on the day is strictly larger than\n      the number of visitors on each of the previous days.</li>\n    <li>Either it is the last day, or the number of visitors on the day is strictly larger than\n        the number of visitors on the following day.</li>\n  </ul>\n  Note that the very first day could be a record breaking day!\n</p><p>\n  Please help Isyana find out the number of record breaking days.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n  Each test case begins with a line containing the integer $$$\\mathbf{N}$$$. The second line contains\n  $$$\\mathbf{N}$$$ integers. The $$$i$$$-th integer is $$$\\mathbf{V_i}$$$ and represents the number of visitors on the $$$i$$$-th day.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is\n  the test case number (starting from $$$1$$$) and $$$y$$$ is the number of record breaking days.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$0 \\le \\mathbf{V_i} \\le 2 \\times 10^5$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{N} \\le 1000$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$1 \\le \\mathbf{N} \\le 2 \\times 10^5$$$, for at most 10 test cases.<br/>\n  For the remaining cases, $$$1 \\le \\mathbf{N} \\le 1000$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U33dP75MNDtcR2__zq_Wub0l6CrwV_rljSuDPEduHjrwbna_X0-MMM_2PAhQ_osDZNviLJp-Yi592HnYPpBa7JpumMdDs9gbqP2LTR6aw/record_breaker_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n8\n1 2 0 7 2 0 2 0\n6\n4 8 15 16 23 42\n9\n3 1 4 1 5 9 2 6 5\n6\n9 9 9 9 9 9\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2apasTT3pdlbB1_zhDTQP9OXFM-UEH4eNO8AmvqdnYVGoMAHBqlVXFYwT4X51djpBjU-IMLJ_bllIMnOaZe98GHU30XbxOdu5wJdIJ-hc/record_breaker_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 1\nCase #3: 3\nCase #4: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the underlined numbers in the following represent the record breaking\n  days:\n  $$$1\\,\\mathbf{\\underline{2}}\\,0\\,\\mathbf{\\underline{7}}\\,2\\,0\\,2\\,0$$$.\n</p><p>\n  In Sample Case #2, only the last day is a record breaking day: $$$4\\,8\\,15\\,16\\,23\\,\\mathbf{\\underline{42}}$$$.\n</p><p>\n  In Sample Case #3, the first, the third, and the sixth days are record breaking days: $$$\\mathbf{\\underline{3}}\\,1\\,\\mathbf{\\underline{4}}\\,1\\,5\\,\\mathbf{\\underline{9}}\\,2\\,6\\,5$$$.\n</p><p>\n  In Sample Case #4, there is no record breaking day: $$$9\\,9\\,9\\,9\\,9\\,9$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":1,"type__str":"VISIBLE","value":7}],"title":"Record Breaker","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a href=\"https://www.youtube.com/watch?v=E2icOW6Ntfo&t=715s\" target=\"_blank\"\n    >View problem and solution walkthrough video\n  </a>\n</p>\n<p>\n  Given the serving range of every GBus, we need to determine the number of\n  GBuses serving a particular list of cities. If we start from the leftmost city\n  and move towards the right, we can make the following observations.\n</p>\n<ol>\n  <li>\n    There will be a certain point where the GBus starts to contribute to the\n    total number of GBuses for a given city. This certain point is the left end\n    of the GBus serving range (which is $$$\\mathbf{A_i}$$$ for $$$i$$$-th GBus).\n  </li>\n  <li>\n    And there will be another certain point where the GBus is out of the serving\n    range, and it will never come back again. This certain point is one city to\n    the right of the right end of the GBus serving range (which is $$$\\mathbf{B_{i+1}}$$$ for\n    $$$i$$$-th GBus).\n  </li>\n</ol>\n<p>Based on the two observations above, let us start formulating a solution.</p>\n<ul>\n  <li>\n    For each city, we maintain the total number of GBuses whose left end point\n    is at this city. Denote this value as $$$X_i$$$ for $$$i$$$-th city.\n  </li>\n  <li>\n    Similarly, we maintain the total number of GBuses whose right end point is\n    one city to the left of this city. Denote this value as $$$Y_i$$$ for\n    $$$i$$$-th city.\n  </li>\n  <li>\n    Now we can simply scan the cities from left to right. For $$$i$$$-th city,\n    we add $$$X_i$$$ to the current total number of GBuses (initially $$$0$$$),\n    which denotes the number of GBuses that starts to contribute to the total\n    number at this point. Then, we subtract $$$Y_i$$$ from the current total\n    number of GBuses, which denotes the number of GBuses that no longer\n    contribute to the total number at this point.\n  </li>\n  <li>\n    After that, for each city from the query, we just output the total number\n    pre calculated for that city.\n  </li>\n</ul>\n<p>\n  The time complexity for the solution will be linearly dependent on the maximum\n  number of cities that a GBus can serve, which can be at most $$$5000$$$ given\n  the constraints of both test sets.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2S8G24LOgXrtSmh0_wucPIp3pf8HLJdejzdswrBg2hYNUUUO60VpsbaV9ZsPKLxjUU7NAnlZEI/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000bcf2ee","statement":"<h3>Problem</h3>\n<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a target=\"_blank\" href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3KI25p2LIzoyMsvaP8E3rO7Hv_Qb3WOo101AMhJoGDxu1XpCsdhZ96viBM-iITqXnuNwvKWY5RSysv/starter_code.zip?dl=1\">Download the Starter Code!</a>\n</p>\n<p>\nThere exist some cities that are built along a straight road. The cities are numbered $$$1,2,3,\\dots$$$ from left to right.\n</p>\n<p>\nThere are $$$\\mathbf{N}$$$ GBuses that operate along this road. For each GBus, the range of cities that it serves is provided: the $$$i$$$-th gBus serves the cities with numbers between $$$\\mathbf{A_i}$$$ and $$$\\mathbf{B_i}$$$, inclusive.\n</p>\n<p>\nWe are interested in a particular subset of $$$\\mathbf{P}$$$ cities. For each of those cities, we need to find out how many GBuses serve that particular city.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. Then, $$$\\mathbf{T}$$$ test cases follow; each case is separated from the next by one <u>blank</u> line. (Notice that this is unusual for Kickstart data sets.)\n</p><p>\nIn each test case:\n</p>\n<ul>\n<li>The first line contains one integer $$$\\mathbf{N}$$$: the number of GBuses.</li>\n<li>The second line contains 2$$$\\mathbf{N}$$$ integers representing the ranges of cities that the buses serve, in the form $$$\\mathbf{A_1}$$$ $$$\\mathbf{B_1}$$$ $$$\\mathbf{A_2}$$$ $$$\\mathbf{B_2}$$$ $$$\\mathbf{A_3}$$$ $$$\\mathbf{B_3}$$$ ... $$$\\mathbf{A_N}$$$ $$$\\mathbf{B_N}$$$. That is, the first GBus serves the cities numbered from $$$\\mathbf{A_1}$$$ to $$$\\mathbf{B_1}$$$ (inclusive), the second GBus serves the cities numbered from $$$\\mathbf{A_2}$$$ to $$$\\mathbf{B_2}$$$ (inclusive), and so on.</li>\n<li>The third line contains one integer $$$\\mathbf{P}$$$: the number of cities we are interested in, as described above. (Note that this is not necessarily the same as the total number of cities in the problem, which is not given.)</li>\n<li>Finally, there are $$$\\mathbf{P}$$$ more lines; the $$$i$$$-th of these contains the number $$$\\mathbf{C_i}$$$ of a city we are interested in.</li>\n</ul>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the number of the test case (starting from 1), and $$$y$$$ is a list of $$$\\mathbf{P}$$$ integers, in which the $$$i$$$-th integer is the number of GBuses that serve city $$$\\mathbf{C_i}$$$.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 10$$$.<br/>\n</p>\n\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 60 seconds.<br/>\n\n  $$$1 \\le \\mathbf{N} \\le 50$$$.<br/>\n  $$$1 \\le \\mathbf{A_i} \\le 500$$$, for all $$$i$$$.<br/>\n  $$$1 \\le \\mathbf{B_i} \\le 500$$$, for all $$$i$$$.<br/>\n  $$$1 \\le \\mathbf{C_i} \\le 500$$$, for all $$$i$$$.<br/>\n  $$$1 \\le \\mathbf{P} \\le 50$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 120 seconds.<br/>\n\n  $$$1 \\le \\mathbf{N} \\le 500$$$.<br/>\n  $$$1 \\le \\mathbf{A_i} \\le 5000$$$, for all $$$i$$$.<br/>\n  $$$1 \\le \\mathbf{B_i} \\le 5000$$$, for all $$$i$$$.<br/>\n  $$$1 \\le \\mathbf{C_i} \\le 5000$$$, for all $$$i$$$.<br/>\n  $$$1 \\le \\mathbf{P} \\le 500$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3NQVV4wgLth4DCyk36mzOUUgSpkXvv3KPEfvYRl_yp_hcLNNKgXO6HCAC4Zo_GFVkWJhS93kJKblwSUlWP33YWrapUwixS7-1A/gbus_count_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n4\n15 25 30 35 45 50 10 20\n2\n15\n25\n\n10\n10 15 5 12 40 55 1 10 25 35 45 50 20 28 27 35 15 40 4 5\n3\n5\n10\n27\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0m9blyNsnaTJHy6hoHTuMwmpNKxmlbXn1es80iqM-dSEeSFnjg7HwgsIq6WCNA-Lr6fO3i4Ge9piyPCH5vqPiNMiYXr1Vkx_1iOQ/gbus_count_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2 1\nCase #2: 3 3 4\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nIn Sample Case #1, there are four GBuses. The first serves cities $$$15$$$ through $$$25$$$, the second serves cities $$$30$$$ through $$$35$$$, the third serves cities $$$45$$$ through $$$50$$$, and the fourth serves cities $$$10$$$ through $$$20$$$. City $$$15$$$ is served by the first and fourth buses, so the first number in our answer list is $$$2$$$. City $$$25$$$ is served by only the first bus, so the second number in our answer list is $$$1$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":1,"type__str":"VISIBLE","value":12}],"title":"GBus count","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000008f49d7","type":1,"type__str":"SPECTATOR"},"title":"Coding Practice with Kick Start Session #3","ui_appearance":1,"ui_appearance__str":"APPEARANCE_TYPE_CODING_PRACTICE_WITH_KS"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
