{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1634396400000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"00000000004362d6","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Thank you for participating in Kick Start 2021 Round G!</p>\r\n<hr>\r\n<p><b>Cast</b></p>\r\n<p>Dogs and Cats: Written by Sumedha Agarwal and prepared by Chu-ling Ko.</p>\r\n<p>Staying Hydrated: Written by Deepika Naryani and prepared by Gagan Kumar.</p>\r\n<p>Banana Bunches: Written by Claire Yang and prepared by Anson Ho.</p>\r\n<p>Simple Polygon: Written by Pablo Heiber and prepared by Mahmoud Ezzat.</p>\r\n<p>Solutions, other problem preparation, reviews and contest monitoring by\r\nAbhishek Singh, Akul Siddalingaswamy, Alan Lou, Anson Ho, Anurag Singh, Bartosz Kostka, Bohdan Pryshchenko, Chu-ling Ko, Chun-nien Chan, Claire Yang, Cristhian Bonilha, Dee Guo, Deeksha Kaurav, Deep Chowdhury, Deepak Gour, Deepika Naryani, Diksha Saxena, Gagan Kumar, Ishank Bhardwaj, Ishita Mundhra, Jared Gillespie, Kashish Bansal, Krists Boitmanis, Lizzie Sapiro Santor, Lucas Maciel, Mahmoud Ezzat, Maneeshita Sharma, Michał Łowicki, Mo Luo, Pablo Heiber, Phil Sun, Pranjal Jain, Rahul Goswami, Rathin Bhargava, Rishabh Agarwal, Ruoyu Zhang, Samiksha Gupta, Sangeeta Mishra, Sara Biavaschi, Sarah Young, Sasha Fedorova, Sharath Holla, Shweta Karwa, Sumedha Agarwal, Swapnil Gupta, Swapnil Mahajan, Teja Vardhan Reddy Dasannagari, Umang Goel, Vasyl Franchuk, Vijay Krishan Pandey.</p>\r\n<p>Analysis authors:</p><ul>\r\n<li>Dogs and Cats: Vijay Krishan Pandey</li>\r\n<li>Staying Hydrated: Krists Boitmanis</li>\r\n<li>Banana Bunches: Swapnil Gupta</li>\r\n<li>Simple Polygon: Krists Boitmanis</li>\r\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1634385600000,"tasks":[{"analysis":"<p>\n  According to <a href=\"https://en.wikipedia.org/wiki/Pick%27s_theorem\" target=\"_blank\">Pick's theorem</a>, the\n  area of a simple polygon having integer vertex coordinates is $$$Area=i+\\frac{b}{2}-1$$$, where\n  $$$i$$$ is the number of integer points inside the polygon and $$$b$$$ is the number of integer\n  points on its border. If we double this area, as in our problem statement, it follows that\n  $$$\\mathbf{A}=2 \\times Area = 2i+b-2$$$. Since $$$i \\ge 0$$$ and $$$b \\ge \\mathbf{N}$$$, a lower bound on the\n  'doubled-area' $$$\\mathbf{A}$$$ of a\n  polygon with $$$\\mathbf{N}$$$ vertices is $$$\\mathbf{A}=2i+b-2 \\ge \\mathbf{N}-2$$$. Therefore, if $$$\\mathbf{A} \\lt \\mathbf{N}-2$$$, the\n  answer is <code>IMPOSSIBLE</code>. In what follows, we will show that this is a\n  <a href=\"https://en.wikipedia.org/wiki/Upper_and_lower_bounds#:~:text=%E2%89%A5%20with%20%E2%89%A4.-,Tight%20bounds,value%20is%20a%20lower%20bound\" target=\"_blank\">tight</a>\n  lower bound by constructing an $$$\\mathbf{N}$$$ vertex simple polygon having a 'doubled-area' $$$\\mathbf{A}$$$ for any given\n  $$$\\mathbf{A} \\ge \\mathbf{N}-2$$$.\n</p>\n\n<h3>\nTest Set 1\n</h3>\n\n<p>\n  There are many ways to construct the necessary polygons. The following drawing shows possible\n  constructions for $$$3 \\le \\mathbf{N} \\le 5$$$.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U09mpeZ6d4bTEDprsM_ypzhgwmq1V-m3gwviM5wdYK0PreqkC-gil9QVGCjZ4aHi2XphxbkGeufTKsfQkYjsUr1RPFi/analysis_small.png\" width=\"40%\"\n     alt=\"A triangle with coordinates (0,0), (0,A), and (1,0).\n          A quadrilateral with coordinates (0,0), (0,A-1), (1,1), and (1,0).\n          A pentagon with coordinates (0,0), (0,A-2), (1,1), (2,2), and (1,0).\"/>\n<p>\n  These polygons have no internal integer points, therefore, by Pick's theorem, their 'doubled-area'\n  is $$$b-2$$$. For example, for $$$\\mathbf{N}=5$$$, we can verify that $$$b=\\mathbf{A}+2$$$ by counting the\n  integer points on the border. Therefore, the 'doubled-area' is $$$b-2=\\mathbf{A}+2-2=\\mathbf{A}$$$, which\n  validates our construction. Similarly, it can be verified that we have achieved the desired area for\n  $$$\\mathbf{N}=3$$$ and $$$\\mathbf{N}=4$$$ as well.\n</p>\n<p>\n  The time complexity of the construction is $$$O(1)$$$.\n</p>\n\n<h3>\nTest Set 2\n</h3>\n\n<p>\n  For $$$\\mathbf{N} \\gt 5$$$, the construction is a little more involved. Let us start with the base case,\n  where the 'doubled-area' of the polygon is the smallest possible, namely, $$$\\mathbf{N}-2$$$. The following\n  drawing illustrates the construction for $$$6 \\le \\mathbf{N} \\le 10$$$, but it can be generalized for\n  arbitrary $$$\\mathbf{N}$$$ by extending the zig-zag shape to the right.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1n4wvlfALYX9VFK2jJ5LSt_gqqdBWtADzOOWwqJVy6F0vhL1CLHIp60bCZlCOCk4jSuGU03lZ6ECYDSwIL0mJpxhQ/analysis_base.png\" width=\"40%\"\n     alt=\"A polygon with 6 vertices at (0,2), (0,1), (1,0), (2,1), (2,2), and (1,1).\n          A polygon with 7 vertices at (0,2), (0,1), (1,0), (2,1), (3,1), (2,2), and (1,1).\n          A polygon with 8 vertices at (0,2), (0,1), (1,0), (2,1), (3,0), (3,1), (2,2), and (1,1).\n          A polygon with 9 vertices at (0,2), (0,1), (1,0), (2,1), (3,0), (4,1), (3,1), (2,2), and (1,1).\n          A polygon with 10 vertices at (0,2), (0,1), (1,0), (2,1), (3,0), (4,1), (4,2), (3,1), (2,2), and (1,1).\"/>\n<p>\n  The base polygon has $$$\\mathbf{N}$$$ integer points on the border and no internal integer points, therefore,\n  its 'doubled-area' is $$$\\mathbf{N}-2$$$. If $$$\\mathbf{A} \\gt \\mathbf{N}-2$$$, we just need to introduce\n  $$$\\mathbf{A}-\\mathbf{N}+2$$$ more points on the border by say, lifting the top-left vertex up $$$\\mathbf{A}-\\mathbf{N}+2$$$\n  units as shown in the following drawing for $$$\\mathbf{N}=10$$$ and $$$\\mathbf{A}=10$$$.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2hfshQ5egrf_Ycp2mlPmES4eT6Twzk3M-e1uXsjNMcU_UvqlE-wKr4otKJa8d6tl4Rc0bwr4Ubt6u7rsnUv8HNgXaD/analysis_large.png\" width=\"40%\"\n     alt=\"A polygon with 'doubled-area' 8 and 10 vertices at\n          (0,2), (0,1), (1,0), (2,1), (3,0), (4,1), (4,2), (3,1), (2,2), and (1,1).\n          A polygon with 'doubled-area' 10 and 10 vertices at\n          (0,4), (0,1), (1,0), (2,1), (3,0), (4,1), (4,2), (3,1), (2,2), and (1,1).\"/>\n<p>\n  The time complexity of the construction is $$$O(\\mathbf{N})$$$.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1cxggRJtRX3qpHK9BiyR9zXDRupS6ElbughRzAsqKfqM_S3SVKIQ3ZpwEJnJqm__DHOfjFoQGi/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000008b36f9","statement":"<h3>Problem</h3>\n<p>\nYou are given two integers, the number of vertices $$$\\mathbf{N}$$$ and area $$$\\mathbf{A}$$$. You need to construct a <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Simple_polygon\">simple\n  polygon</a> of $$$\\mathbf{N}$$$ vertices such that the area of the polygon is exactly $$$\\frac{\\mathbf{A}}{2}$$$, and\n  all the vertices have non-negative integer coordinates with value up to $$$10^9$$$.\n</p>\n\n<p>\nA simple polygon is one that:\n\n  <li>Defines a closed area.</li>\n  <li>Does not have self-intersections, even at a single point.</li>\n  <li>No two consecutive edges form a straight angle.</li>\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ lines follow.\nThe first line of each test case contains two integers, $$$\\mathbf{N}$$$ denoting the number of vertices and\n  $$$\\mathbf{A}$$$, denoting double the required area of the polygon.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is\n<code>IMPOSSIBLE</code> if it is not possible to construct a polygon with the given requirements\nand <code>POSSIBLE</code> otherwise.\n</p>\n\n<p>If you output <code>POSSIBLE</code>,\noutput $$$\\mathbf{N}$$$ more lines with $$$2$$$ integers each.\n  The $$$i$$$-th line should contain two\n  integers $$$X_{i}$$$ and $$$Y_{i}$$$ which denote the coordinates of the $$$i$$$-th vertex. For each\n  $$$i$$$, the coordinates should satisfy the $$$0 \\le X_{i}, Y_{i} \\le 10^9$$$ constraints.\n  Vertices of the polygon should be listed in consecutive order ( $$$vertex_{i}$$$ should be adjacent\n  to  $$$vertex_{i-1}$$$ and  $$$vertex_{i+1}$$$ in the polygon).\n</p>\n\n<p>If there\n  are multiple possible solutions, you can output any of them.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$1 \\le \\mathbf{A} \\le 10^9$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n$$$3 \\le \\mathbf{N} \\le 5$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n$$$3 \\le \\mathbf{N} \\le 1000$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2cxRHe_g3pMzdSZL7paTsG-S9tyoQ6p7jWZaGiCBRNKKmP9W20yqc0vpL9jTuzGW2DAr6NNjdSt9T5NOHXA3N1aHMNA6HW17vWw1i5dQ/simple_polygon_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n4 36\n5 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1NxqQX0OiUVZmjbgp2rIP6IWmmtvbDj-gTlMaB5y6Qm3PjVEkXW3ZRbMbtqfIVJNOso0b4ScQadY0wZ-B9JQAHHOW7EUGffkTx0hh9NwE/simple_polygon_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: POSSIBLE\n2 5\n6 5\n8 2\n0 2\nCase #2: IMPOSSIBLE\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3UFRCuz8j_FYDlClz14sQ0daJK9leUbl6zp_gy4YvoQjD7xCLGYwb6yo14Maipac86CUCAlsQogxB-A5J6/sample_1.png\" alt=\"diagram for sample case 1\"/>\n</p>\n<p>\nIn Sample Case #1, we can output the above quadrilateral with coordinates $$$(2, 5)$$$, $$$(6, 5)$$$, $$$(0, 2)$$$ and\n  $$$(8, 2)$$$. The area of this quadrilateral is equal to $$$18$$$.\n</p>\n\n<p>\nIn Sample Case #2, there is no way to construct a polygon with $$$5$$$ vertices and area equal to $$$1$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":15},{"type":1,"type__str":"VISIBLE","value":24}],"title":"Simple Polygon","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  We need to determine if all the dogs will be able to eat food given the condition that an animal\n  can only eat if the animal before it has already eaten. We do not worry if some cats are hungry\n  as long as all the dogs are able to eat. Let us assume that the last (or rightmost) dog is\n  at position $$$p$$$. We do not need to worry about the cats in positions $$$[p + 1, N]$$$. Since\n  an animal can only eat food if the animal before it has already eaten, we need to\n  make sure that all cats and dogs in positions $$$[1, p]$$$ are able to eat food.\n</p>\n\n<h3>\n    Test Set 1\n</h3>\n\n<p>\n  We are given $$$\\mathbf{M}$$$ $$$= 0$$$. This means whenever a dog eats food, no cat foods magically appear. If\n  $$$\\mathbf{S}$$$ contains all $$$0$$$ i.e., no dog is present, the answer is <code>YES</code>. Otherwise, we find the position\n  of the last (or rightmost) dog, $$$p$$$. Let the total number of dogs i.e., the number of $$$1$$$ in $$$\\mathbf{S}$$$ be $$$X$$$ and the number of cats\n  before the rightmost dog i.e., the number of $$$0$$$ in $$$[1, p - 1]$$$ be $$$Y$$$. The answer is <code>YES</code>\n  if $$$\\mathbf{D} \\ge X$$$ and $$$\\mathbf{C} \\ge Y$$$ and <code>NO</code> otherwise.\n</p>\n\n<p>\n<i>Complexity : $$$O(\\mathbf{N})$$$ per test case</i>\n</p>\n\n<h3>\n    Test Set 2\n</h3>\n\n<p>\n  We are given $$$\\mathbf{M} \\ge 0$$$. This means whenever a dog eats food, $$$\\mathbf{M}$$$ cat food portions are added.\n  We iterate over positions $$$[1,N]$$$ and whenever we see a cat we feed it with the cat food i.e.,\n  subtract $$$1$$$ from $$$\\mathbf{C}$$$ and whenever a dog appears we feed it with the dog food,\n  i.e., subtract $$$1$$$ from $$$\\mathbf{D}$$$. We need to ensure that the dog can only\n  eat if the animal before it has already eaten, and to do so, we first make sure that $$$\\mathbf{D} \\ge 1$$$,\n  as $$$1$$$ food item is needed to feed this dog and $$$\\mathbf{C} \\ge 0$$$. If this is not true, our\n  answer is <code>NO</code>. Otherwise we subtract $$$1$$$ from $$$\\mathbf{D}$$$ and add $$$\\mathbf{M}$$$ to $$$\\mathbf{C}$$$.\n  If the above condition is satisfied for all the dogs, our answer is <code>YES</code>. Note that this\n  algorithm will also work for Test Set $$$1$$$ but not vice versa.\n</p>\n\n<h5>Sample Code(C++)</h5>\n<pre><code class=\"language-cpp\">\n<var>bool</var> have_dogs_eaten(<var>string</var> S, <var>int</var> N, <var>int</var> D, <var>long long</var> C, <var>int</var> M) {\n  for(<var>int</var> i = 0; i < N; i++) {\n    if (S[i] == '1') {\n      if(D <= 0 || C < 0) {\n        return false;\n      }\n      D--;\n      C += M;\n    } else {\n      C--;\n    }\n  }\n  return true;\n}\n</code></pre>\n\nNote that variable <code>C</code> is long long since maximum possible value does not fit in 32-bit data type.\n<p>\n<i>Complexity : $$$O(\\mathbf{N})$$$ per test case</i>\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1dHp2k8Bp4wBSiECfkmZ-2xSaknBBK3SxLXiWR7TjNj4hw07v0YGlIgmCJDSBV4rxj4DXVuB6-/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000008b3771","statement":"<h3>Problem</h3>\n<p>\n\nYou work for an animal shelter and you are responsible for feeding the animals.\nYou already prepared $$$\\mathbf{D}$$$ portions of dog food and $$$\\mathbf{C}$$$ portions of cat food.\n</p>\n\n<p>\nThere are a total of $$$\\mathbf{N}$$$ animals waiting in a line, some of which are dogs and others are cats. It might be possible\nthat all the animals in the line are dogs or all the animals are cats.\nA string $$$\\mathbf{S}$$$ of $$$\\mathbf{N}$$$ characters <code>C</code> and <code>D</code> represents the order of cats and dogs in the line.\nThe $$$i$$$-th character is equal to <code>C</code> if the $$$i$$$-th animal in the line is a cat.\nSimilarly, the $$$i$$$-th character is equal to <code>D</code> if the $$$i$$$-th animal in the line is a dog.\n</p>\n\n<p>The animals are fed in the order they stay in the line.\nEach dog eats exactly $$$1$$$ portion of dog food and similarly each cat eats exactly $$$1$$$ portion of cat food.\nMoreover, you have extra portions of cat food. Every time <u>a dog</u> eats food,\nyou bring $$$\\mathbf{M}$$$ extra portions of cat food for cats.\n</p>\n\n<p>\nAnimals have to be fed in the order they wait in line and an animal\ncan only eat if the animal before it has already eaten.\nThat means that if you run out of dog (or cat) food portions and a dog (or a cat) is about to get fed,\nthe line will not move, as all the animals will wait patiently.\n</p>\n\n<p>\nYou need to determine if in this scenario <u>all the dogs</u> in the line will be fed.\nNote that this means that some cats might remain in the line,\nbut worry not, you will eventually feed them later!\n</p>\n\n<h3>Input</h3>\n<p>\n\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.</p>\n<p>\nThe first line of each test case contains four integers $$$\\mathbf{N}$$$, $$$\\mathbf{D}$$$, $$$\\mathbf{C}$$$, and $$$\\mathbf{M}$$$: the number of animals,\nthe initial number of dog food portions, the initial number of cat food portions,\nand the additional portions of cat food that we add after a dog eats a portion of dog food, respectively.\n</p><p>\nThe next line contains a string $$$\\mathbf{S}$$$ of length $$$\\mathbf{N}$$$ representing the arrangement of animals.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\n  where $$$x$$$ is the test case number (starting from $$$1$$$) and $$$y$$$ is <code>YES</code>\n  if all the dogs will be fed and <code>NO</code> otherwise.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{N} \\le 10^4$$$.<br/>\n$$$0 \\le \\mathbf{D}, \\mathbf{C} \\le 10^6$$$.<br/>\n$$$\\mathbf{S}$$$ consists of only characters <code>C</code> and <code>D</code>.\n\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n$$$\\mathbf{M} = 0$$$<br/>\n\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n$$$0 \\le \\mathbf{M} \\le 10^6$$$.<br/>\n</p>\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2YRAzuXMM0OAK2JaT4il5rQOBabBvXx89wwu2xzIiJSWxWBXz_SeQBbrTK584cUTI6cjp4EmsxpRS1y8hc5TYBguetvnoBuajlZeAl/dogs_and_cats_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n6 10 4 0\nCCDCDD\n4 1 2 0\nCCCC\n4 2 1 0\nDCCD\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0EXm17CHLgizxmuwgtMc3g-TvAQlzJ14vHijNeeWT3cb_KfIxLYhOtL-3JDd3F6hKCdnKy08FN5-wB0J5rKkOTWnkd5PTdiSDWtFO79Q/dogs_and_cats_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: YES\nCase #2: YES\nCase #3: NO\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n  In Sample Case #1, there are $$$10$$$ portions of dog food and $$$4$$$ portions of cat food.\n    <ol>\n      <li>The first two animals are cats, so after they eat, $$$2$$$ portions of cat food remain.</li>\n      <li>Then a dog eats one portion of dog food. Now, there are $$$9$$$ portions of dog food left.</li>\n      <li>Next, a cat eats a portion of cat food, reducing the number of portions of cat food to $$$1$$$.</li>\n      <li>The last two animals are dogs and they each eat one portion of dog food. </li>\n  </ol>\n      So in this case, all the dogs are able to eat.\n  </p>\n  <p>\n    In Sample Case #2, there are no dogs. Hence, all (zero) dogs will be able to eat trivially.\n  </p>\n\n<p>\n    In Sample Case #3, the cat before the second dog will not be able to eat because there will not be enough portions of cat food. Hence, the second dog will also not eat.\n  </p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1iIN-sBSokLkn-OMQR-CFqL9eYMNh1Z4HgAmPEYgbQHVet1StgbZF4YSb5hqhaTakp6H-fEhNA48GNckO_TM1EWMAG98pOGJ7AX28X/dogs_and_cats_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">2\n12 4 2 2\nCDCCCDCCDCDC\n8 2 1 3\nDCCCCCDC\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2yTtY1kUcMRiN6rwAp4AJQEllDxlfOOKR-yeeXSAlzsuTOhn-R95NMAsRWzcB1gXa-J6MLPFsD9TwAPemjt8HKTy300hydg1PNXowEow/dogs_and_cats_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: YES\nCase #2: NO\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    In Sample Case #1, $$$2$$$ portions of cat food appear whenever a dog eats a portion of dog food. <br/>\n    <ol>\n      <li>After the first cat eats, there is $$$1$$$ portion of cat food left.</li>\n      <li>Then a dog eats, leaving $$$3$$$ portions of dog food and $$$3$$$ portions of cat food.</li>\n      <li>After the next $$$3$$$ cats eat, there are $$$3$$$ portions of dog food and $$$0$$$ portions of cat food remaining. </li>\n      <li> Then a dog eats, leaving $$$2$$$ portions of dog food and $$$2$$$ portions of cat food. </li>\n      <li>After the next $$$2$$$ cats eat food, there are $$$2$$$ portions of dog food and $$$0$$$ portions of cat food left.</li>\n      <li>Now a dog eats, leaving $$$1$$$ portion of dog food and $$$2$$$ portions of cat food.</li>\n      <li>Next a cat eats, leaving $$$1$$$ portion of dog food and $$$1$$$ portion of cat food.</li>\n      <li>The last dog eats the remaining portion of dog food.</li>\n  </ol>\n  So in this case, all the dogs are able to eat.\n      </p>\n  <p>\n    In Sample Case #2, the cat before the second dog will not be able to eat because there will not be enough portions of cat food.\n  </p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":1,"type__str":"VISIBLE","value":6}],"title":"Dogs and Cats","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  The <a href=\"https://en.wikipedia.org/wiki/Taxicab_geometry\" target=\"_blank\">Manhattan distance</a>\n  between a point $$$P=(x,y)$$$ and an axis-parallel rectangle $$$R$$$ with the lower-left corner\n  $$$(x_1,y_1)$$$ and the upper-right corner $$$(x_2,y_2)$$$ is\n  $$$d(P,R)=\\max(x_1 - x, x - x_2, 0) + \\max(y_1 - y, y - y_2, 0)$$$. Intuitively, the first term\n  represents the minimal horizontal movement from $$$P$$$ to the nearest point inside the\n  $$$x$$$-interval $$$[x_1,x_2]$$$, which could be $$$0$$$ if $$$P$$$ itself is in that interval.\n  Similarly, the second term represents the minimal vertical movement from $$$P$$$ to the nearest\n  point inside the $$$y$$$-interval $$$[y_1,y_2]$$$.\n</p>\n\n<h3>\n  Test Set 1\n</h3>\n\n<p>\n  In this test set, the furnished area of the room is so small that we can afford testing every point\n  $$$P=(x,y)$$$ in the range $$$-100 \\le x,y \\le 100$$$ and select the point with the smallest total\n  distance to all rectangular objects. The time complexity of such a brute-force algorithm is\n  $$$O(\\mathbf{K}WH)$$$, where $$$\\mathbf{K}$$$ is the number of input objects and $$$W$$$ and $$$H$$$ is the width and\n  the height of the smallest\n  axis-parallel rectangle covering all input rectangles. Note that it is not necessary to test any\n  points outside this covering rectangle as moving from such a point towards the covering rectangle\n  would reduce the distance to all input rectangular objects.\n  The time complexity can be further improved to $$$O(\\mathbf{K}(W + H))$$$ if we realize that the optimal\n  $$$x$$$- and $$$y$$$-coordinates are in fact independent and can be calculated separately.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  In this test set, the furnished area of the room may be huge, therefore, even the improved version\n  of the\n  brute-force algorithm would be too slow. However, with a little bit of sorting, we can find the\n  optimal location of the bottle without ever computing any distances.\n</p>\n\n<p>\n  Let us consider finding the optimal $$$x$$$-coordinate of the bottle (the optimal\n  $$$y$$$-coordinate can be found in the same way). Imagine that we are seeking the optimal location\n  by sweeping the coordinate plane from left to right. Suppose we are currently at the position\n  $$$x$$$ and let $$$a(x)$$$ be the number of rectangles that are strictly ahead of $$$x$$$, i.e.\n  $$$x \\lt x_1$$$, where $$$x_1$$$ is the left coordinate of the rectangle. Simlarly, let $$$b(x)$$$\n  be the number of rectangles that are behind $$$x$$$ in the non-strict sense, namely,\n  $$$ x_2 \\le x$$$. Now, if $$$a(x) \\gt b(x)$$$, then $$$x$$$ is not the optimal location as moving\n  one step to the right would reduce the total horizontal distance to the rectangles by\n  $$$a(x)-b(x) \\gt 0$$$.\n</p>\n\n<p>\n  What happens to the value of $$$a(x)-b(x)$$$ as we sweep the plane from left to right? For a\n  sufficiently small $$$x$$$, which is strictly to the left from all rectangles, $$$a(x)=\\mathbf{K}$$$ and\n  $$$b(x)=0$$$, and therefore, $$$a(x)-b(x) = \\mathbf{K} \\gt 0$$$. Conversely, for a sufficiently large\n  $$$x$$$, it is the other way around and $$$a(x)-b(x) = -\\mathbf{K} \\lt 0$$$. And since $$$a(x)$$$ is\n  a decreasing function while $$$b(x)$$$ is an increasing function, the difference $$$a(x)-b(x)$$$\n  is also a decreasing function. What does it mean for our plane sweeping approach? As long as\n  $$$a(x)-b(x) \\gt 0$$$, we should keep moving to the right as, by doing so, we are reducing the\n  total distance to the rectangles. But as soon as $$$a(x)-b(x) \\le 0$$$, we have found the optimal\n  $$$x$$$-coordinate, since further reduction of the total distance is not possible.\n</p>\n\n<p>\n  In summary, we have reduced the task of calculating the optimal Manhattan distance to finding\n  the smallest $$$x$$$ with $$$a(x)-b(x) \\le 0$$$. This can be done by iterating through the left\n  and right\n  coordinates of rectangles in sorted non-decreasing order and maintaining the values of\n  functions $$$a(x)$$$ and $$$b(x)$$$. The time complexity of this algorithm is dominated by the\n  sorting, and is therefore $$$O(\\mathbf{K} \\log \\mathbf{K})$$$.\n</p>\n\n<p>\n  Left as an exercise to the reader: This problem can also be solved in $$$O(\\mathbf{K})$$$ by using\n  <a href=\"https://en.wikipedia.org/wiki/Selection_algorithm\"> linear-time selection algorithms</a>.\n  Though both our test sets should pass with the above $$$O(\\mathbf{K} \\log \\mathbf{K})$$$ approach.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1MTp0JqyU1CigPThiUL2koaQDa1NNarWK8d5jl6udVmFi4ggbGsITa1lyOFX855Gm9JV_klh_k/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000008b3a1c","statement":"<h3>Problem</h3>\n<p>\nWith online classes in full swing, it is important for Grace to take\nbreaks and keep herself hydrated at all times. She has decided to place a water bottle in her room\nin the most convenient place. This means that the position of this water bottle should be close\nto all the places in the room where she generally hangs out like the study desk, bed and coffee\ntable among other places.\n</p>\n<p>\nThe room is represented in the form of a coordinate plane. The number of steps Grace needs to go\nfrom Point A to Point B is equal to the Manhattan distance between the 2 points. This means, Grace\ncan only walk parallel to the axes of the coordinate plane and with each step, she can move one unit\nin either of the four directions.\n</p>\n<p>\nCan you help her find a position in the room to keep the bottle, such that the sum of steps from the\nbottle to all her favourite furniture pieces will be minimum?\n</p>\n<p>\nNotes:\n<li>All the furniture (like study desk, bed, or coffee table) can be represented\nas rectangles of non-zero area in the plane with edges parallel to the axes.</li>\n<li>It is possible for\nfurniture pieces to overlap, as she likes to work on her bed-table too.</li>\n<li>Assume that Grace can simply pass through the furniture while walking and does not need\nto go around them.</li>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow. <br/>\nThe first line of each test case contains an integer $$$\\mathbf{K}$$$ which represents the number of objects in\nGrace's room. <br/>\n$$$\\mathbf{K}$$$ lines follow, each of them describing one object. The $$$i$$$-th line contains four integers,\n$$$\\mathbf{x_{i,1}}$$$, $$$\\mathbf{y_{i,1}}$$$, $$$\\mathbf{x_{i,2}}$$$, $$$\\mathbf{y_{i,2}}$$$, where ($$$\\mathbf{x_{i,1}}$$$, $$$\\mathbf{y_{i,1}}$$$) represents coordinates of\nthe bottom left corner and ($$$\\mathbf{x_{i,2}}$$$, $$$\\mathbf{y_{i,2}}$$$) represents coordinates of the top right corner of\nthe $$$i$$$-th rectangular object.<br/>\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$i$$$: $$$x$$$ $$$y$$$</code>,\nwhere $$$i$$$ is the test case number (starting from 1) and $$$x$$$ and $$$y$$$ are coordinates of\nthe water bottle such that the sum of steps from these coordinates to all the furniture\npieces will be minimum.  <br/>\nNote, the bottle can lie on the floor or on top of any furniture but should be placed on integer\ncoordinates only.  <br/>\nIf multiple solutions exist, output the one with minimum x coordinate, if multiple solutions have\nthe same x coordinate output the one with minimum y coordinate.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$\\mathbf{x_{i,1}} \\lt \\mathbf{x_{i,2}}$$$, for all $$$i$$$.<br/>\n$$$\\mathbf{y_{i,1}} \\lt \\mathbf{y_{i,2}}$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n$$$1 \\le \\mathbf{K} \\le 20 $$$.<br/>\n$$$-100 \\le \\mathbf{x_{i,1}},\\mathbf{x_{i,2}},\\mathbf{y_{i,1}},\\mathbf{y_{i,2}} \\le 100$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 90 seconds.<br/>\n\n\n$$$1 \\le \\mathbf{K} \\le 10^5$$$<br/>\n$$$-10^9 \\le \\mathbf{x_{i,1}},\\mathbf{x_{i,2}},\\mathbf{y_{i,1}},\\mathbf{y_{i,2}} \\le 10^9$$$, for all $$$i$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1sfWXt90TR0y3iJp6ztfhKLoVaACs-3r2WEctG9sAyTaGPJJYABlOMqFMf1SawbcdjeXlr1NifTm0ThjuOMPMk07RBEvmC17vMr-WIo-KU/staying_hydrated_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3\n0 0 1 1\n2 3 4 6\n0 3 5 9\n1\n0 0 1 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0Cvo0ARsjP7_mCBibIE52oO7Ef1rj9fYEOf3uQTr-8Mev9A-5Y5PojR5bMcKywWEv7SFqiPQVB99qKbz-83afDjN9j98LR9GMa-q--nFc0Xg/staying_hydrated_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1 3\nCase #2: 0 0</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2aqwp2oDX1oAB7VLe20FzuaMTHs0fMGG-VYD3UCsr3jiK6wettFJzbQlA1Zbk6aJ3ZrsdV0LsjH36ZWEsFwXRfBAA/room_sample_1.jpg\" alt=\"diagram for sample case 1\"/>\n</p>\n<p>\nIn Sample Case #1, Grace can place the bottle at coordinates ($$$1$$$, $$$3$$$).\nIt is at a distance of $$$2$$$ steps from first object, $$$1$$$ step from second and $$$0$$$ steps\nfrom the third one which gives us $$$3$$$ as the minimum possible sum of steps from a point.\n</p>\n\n<p>\nIn Sample Case #2, the water bottle can lie anywhere on the object itself but coordinates ($$$0$$$,\n $$$0$$$) correspond to the minimum x and y coordinates.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":1,"type__str":"VISIBLE","value":10}],"title":"Staying Hydrated","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Formally the problem can be written as: given an array of size $$$\\mathbf{N}$$$, select at most two non-overlapping\n  subarrays, such that, sum of all the selected elements is equal to $$$\\mathbf{K}$$$.\n  We need to minimise the sum\n  of lengths of these two subarrays. We can calculate the prefix sum of the given array in $$$O(\\mathbf{N})$$$.\n  $$$Pre_{i}$$$ denotes the sum of all the elements from $$$1$$$ to $$$i$$$. The sum of elements\n  in a particular $$$subarray(i, j)$$$ is given by $$$Pre_{j} - Pre_{i-1}$$$ and can be calculated in\n  $$$O(1)$$$ time.\n</p>\n\n<p>\n  One special case is when there is an element equal to $$$\\mathbf{K}$$$ in the given array. In this case, we\n  can return $$$1$$$ as the answer and can be done in a $$$O(\\mathbf{N})$$$ traversal. For all the other\n  cases, we can get the answer by selecting two non-overlapping subarrays.\n</p>\n\n<h3> Test set 1 </h3>\n\n<p>\n  For this test set, we can consider all possible pair of subarrays as constraints on $$$\\mathbf{N}$$$ are small.\n  The total number of pair of subarrays are $$$O(\\mathbf{N}^{4})$$$. For each pair of non-overlapping subarrays,\n  one can check whether the sum of elements in these subarrays is equal to $$$\\mathbf{K}$$$.\n  Formally, consider all $$$(i, j, x, y)$$$ such that sum of $$$subarray(i, j)$$$ and $$$subarray(x, y)$$$\n  is equal to $$$\\mathbf{K}$$$ and $$$i \\le j \\lt x \\le y$$$.\n  Among all such pairs of subarrays,\n  the optimal answer is the pair with the minimum sum of length of the subarrays. Formally, we need to\n  minimise $$$j - i + 1 + y - x + 1$$$ over all such pairs. For each pair,\n  one can calculate the sum and length of these subarrays in $$$O(1)$$$. Hence, the overall\n  complexity of the solution is $$$O(\\mathbf{N}^{4})$$$.\n</p>\n\n<h3> Test set 2 </h3>\n\n<p>\n  For this test set, we cannot consider all possible pair of subarrays as this solution would time out\n  with the given constraints.\n  We can iterate on all possible $$$(i, j, x)$$$ and find an optimal index $$$y$$$ such\n  that sum of $$$subarray(i, j)$$$ and $$$subarray(x, y)$$$\n  is equal to $$$\\mathbf{K}$$$ and $$$i \\le j \\lt x \\le y$$$.\n  For a particular $$$(i, j, x)$$$ we need to find smallest index $$$y$$$ such that $$$Pre_{j}-Pre_{i-1} +\n  Pre_{y} - Pre{x-1} = \\mathbf{K}$$$. This can be done by performing a binary search on indexes from $$$x$$$ to $$$N$$$.\n  If there is no such index $$$y$$$, we can ignore this triplet.\n  Among all such possible $$$(i, j, x, y)$$$ quadruples, we need to\n  minimise $$$j - i + 1 + y - x + 1$$$.\n  We are able to find an optimal index $$$l$$$\n  in $$$O(\\log \\mathbf{N})$$$ time complexity for a particular triplet $$$(i, j, x)$$$. There are $$$O(\\mathbf{N}^{3})$$$\n  such triplets. Hence, the overall complexity of the solution is $$$O(\\mathbf{N}^{3} \\log \\mathbf{N})$$$.\n</p>\n\n<p>\n    We can further reduce the complexity by using two pointers instead of binary search. We can consider\n  all possible $$$(j, x)$$$ and then use two pointer approach to find optimal $$$y$$$ for each $$$i$$$.\n  For each pair $$$(j, x)$$$, we perform $$$O(\\mathbf{N})$$$ operations. Hence, the overall complexity of\n  the solution is $$$O(\\mathbf{N}^{3})$$$.\n</p>\n\n<h3> Test set 3 </h3>\n<p>\nFor this test set, we can store the optimal second subarray length for each sum and iterate over each possible\n  first subarray.\n<p>\n  Consider the following pseudocode:\n</p>\n\n<pre>\n<code>\n  for i = 0 to K:\n    Best[i] = inf\n  ans = inf\n  for i = N to 1:\n    currSum = 0\n    for j = i to 1:\n      // |currSum| denotes sum of subarray(j, i).\n      currSum += B[j]\n      if currSum <= K:\n        // Best[K - currSum] denotes the minimum length of subarray starting after index i which has sum equal to K - currSum.\n        ans = min(ans, j - i + 1 + Best[K - currSum])\n\n    currPostSum = 0\n    for x = i to N:\n      // |currPostSum| denotes sum of subarray(i, x).\n      currPostSum += B[x]\n      if currPostSum <= K:\n        // Update the minimum length of subarray with sum equal to |currPostSum|.\n        Best[currPostSum] = min(Best[currPostSum], x - i + 1)\n</code>\n</pre>\n<p>\nWhen we are iterating from $$$\\mathbf{N}$$$ to $$$1$$$ and are at index $$$i$$$ currently, $$$Best_{S}$$$\n  stores the minimum length of subarray starting\n  at any index greater than $$$i$$$ and having sum $$$S$$$. Basically, this would denote the optimal\n  length of second subarray with sum $$$S$$$ if we choose first subarray ending at index $$$i$$$.\nWe consider all indexes $$$j$$$ from $$$1$$$ to $$$i$$$. If sum of subarray $$$(j,i)$$$ is\n  $$$currSum$$$ (such that $$$currSum \\le \\mathbf{K}$$$), we update the answer.\nThen, we update the minimum length for each sum for the subarrays starting at index $$$i$$$.\n We do this by iterating for $$$x$$$ from $$$i$$$ to $$$\\mathbf{N}$$$. If sum of $$$subarray(i,x)$$$ is\n  $$$currPostSum$$$, then update $$$Best_{currPostSum}=min(Best_{currPostSum}, x - i + 1)$$$.\n  As $$$K \\le 10^{6}$$$, we can maintain an array for storing $$$Best$$$. This would allow updating and\n  looking up the sum in $$$O(1)$$$ time.\nFor each index we do $$$O(\\mathbf{N})$$$ operations, hence the overall complexity is $$$O(\\mathbf{N}^2 + \\mathbf{K})$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0Or70qo0gRKMS_NwFlmbAMvt_BWyQd58YNPmCiuZ5v54YCb8p9Hb7jQ3hky14stqvPVf3My7d3/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000008b44ef","statement":"<h3>Problem</h3>\n<p>\n  Barbara goes to Alan's banana farm, where the $$$\\mathbf{N}$$$ banana trees are organized in one long line\n  represented by an array $$$\\mathbf{B}$$$. The tree at position $$$i$$$ has $$$\\mathbf{B_i}$$$ banana bunches. Each tree\n  has the same cost. Once Barbara buys a tree, she gets all the banana bunches on that tree.<br/>\n  Alan has a special rule: because he does not want too many gaps in his line, he allows Barbara\n  to buy at most $$$2$$$ contiguous sections of his banana tree line.\n</p>\n<p>\n  Barbara wants to buy some number of trees such that the total number of banana bunches on\n  these purchased trees equals the capacity $$$\\mathbf{K}$$$ of her basket. She wants to do this while\n  spending as little money as possible. How many trees should she buy?\n</p>\n\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow. <br/>\n  Each test case begins with a line containing two integers integer $$$\\mathbf{N}$$$, the number of trees on\n  Alan's farm, and $$$\\mathbf{K}$$$, the capacity of Barbara's basket. <br/>\n  The next line contains $$$\\mathbf{N}$$$ non-negative integers $$$\\mathbf{B_1}, \\mathbf{B_2},\\dots, \\mathbf{B_N}$$$ representing array $$$\\mathbf{B}$$$, where\n  the $$$i$$$-th integer represents the number of banana bunches on the $$$i$$$-th tree on Alan's\n  farm. <br/>\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\n  where $$$x$$$ is the test case number (starting from $$$1$$$) and $$$y$$$ is the minimum number\n  of trees Barbara must purchase to obtain $$$\\mathbf{K}$$$ banana bunches using at most $$$2$$$ contiguous\n  sections of the farm, or <code>-1</code> if it is impossible to do so.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$0 \\le \\mathbf{B_{i}} \\le \\mathbf{K}$$$, for each $$$i$$$ from $$$1$$$ to $$$\\mathbf{N}$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{K} \\le 10^4$$$.<br/>\n  $$$1 \\le \\mathbf{N} \\le 50$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$1 \\le \\mathbf{K} \\le 10^4$$$.<br/>\n  $$$1 \\le \\mathbf{N} \\le 500$$$.<br/>\n</p>\n\n<h4>Test Set 3</h4>\n<p>\n\n  $$$1 \\le \\mathbf{K} \\le 10^6$$$.<br/>\n  <br/>\n  For at most 25 cases:<br/>\n  $$$1 \\le \\mathbf{N} \\le 5000$$$.<br/>\n  <br/>\n  For the remaining cases:<br/>\n  $$$1 \\le \\mathbf{N} \\le 500$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U10_45o6gMH7WaQBfLk43_D7y3in4ZKR5DyF88UXMiEakpCv299qXM8AOxF15QT3bH37peOHyDh43b8pz93QIC8E5UJYec5ACxWu96IAQ/banana_bunches_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n6 8\n1 2 3 1 2 3\n4 10\n6 7 5 2\n6 8\n3 1 2 1 3 1\n4 6\n3 1 2 0\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U11jHFe2SVMTRF6ZfvuoniWyUcsh67k31dVDGfE35w1YN8bWmX8oFqHuIAmybRdgQ_ZPsD5mp6Yy_Tes9mf_HP5CduF7WyHTNYPiEXcC40/banana_bunches_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: -1\nCase #3: 4\nCase #4: 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, the first section can contain the trees at indices $$$2$$$ and $$$3$$$, and the\n  second section can contain the tree at index $$$6$$$.\n</p>\n\n<p>\n  In Sample Case #2, it is impossible to achieve a sum of $$$10$$$ with $$$2$$$ contiguous sections.\n</p>\n\n<p>\n  In Sample Case #3, the first section can contain the trees at indices $$$\\{1, 2\\}$$$, and the\n  second section can contain the trees at indices $$$\\{5, 6\\}$$$.\n  We cannot take the $$$2 + 3 + 3$$$ combo (trees at indices $$$\\{1, 3, 5\\}$$$)\n  since that would be $$$3$$$ contiguous sections.\n</p>\n\n<p>\n  In Sample Case #4, the only section contains the trees at indices $$$\\{1, 2, 3\\}$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":8},{"type":1,"type__str":"VISIBLE","value":11},{"type":1,"type__str":"VISIBLE","value":14}],"title":"Banana Bunches","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000004362d6","type":1,"type__str":"SPECTATOR"},"title":"Round G 2021"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
