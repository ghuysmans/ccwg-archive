{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1629613800000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"000000000043585c","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Thank you for participating in Kick Start 2021 Round E!</p>\r\n<hr>\r\n<p><b>Cast</b></p>\r\n<p>Shuffled Anagrams: Written by Pablo Heiber and prepared by Swapnil Mahajan.</p>\r\n<p>Birthday Cake: Written by Mohamed Omar and prepared by Laksh Nachiappan.</p>\r\n<p>Palindromic Crossword: Written by Bartosz Kostka and prepared by Attila Toth.</p>\r\n<p>Increasing Sequence Card Game: Written by Yossi Matsumoto and prepared by Swapnil Gupta.</p>\r\n<p>Solutions, other problem preparation, reviews and contest monitoring by\r\nAbhishek Saini, Abhishek Singh, Akul Siddalingaswamy, Alexandra Goodman, Aneesh D H, Anik Sarker, Ankit Goyal, Anurag Singh, Anushi Maheshwari, Attila Toth, Bartosz Kostka, Bohdan Pryshchenko, Erick Wong, Gregory Yap, Harshil Shah, Jared Gillespie, Jennifer Zhou, Kashish Bansal, Krists Boitmanis, Laksh Nachiappan, Lizzie Sapiro Santor, Lucas Maciel, Mahmoud Ezzat, Manav Jain, Mohamed Omar, Pablo Heiber, Pranjal Jain, Rudhir Gupta, Ruoyu Zhang, Samiksha Gupta, Sarah Young, Sasha Fedorova, Sera Wang, Sharath Holla, Shweta Karwa, Swapnil Gupta, Swapnil Mahajan, Swetank Modi, Szymon Rze≈∫nik, Teja Vardhan Reddy Dasannagari, Umang Goel, Utsav Rajpara, Vijay Krishan Pandey, Wajeb Saab, Wei Zhou, Yossi Matsumoto.</p>\r\n<p>Analysis authors:</p><ul>\r\n<li>Shuffled Anagrams: Sarah Young</li>\r\n<li>Birthday Cake: Krists Boitmanis</li>\r\n<li>Palindromic Crossword: Ankit Goyal</li>\r\n<li>Increasing Sequence Card Game: Ankit Goyal</li>\r\n</ul>\r\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1629603000000,"tasks":[{"analysis":"<h3>\nTest Set 1\n</h3>\n<p>\nSuppose we were solving the crossword on paper. Then, for each word we will\ncheck if any of the palindromic positions can be filled (we consider two\npositions as \"palindromic positions\" if their distances to the closer word\nboundary (start or end) are equal). We will need to repeat this process until no\nmore positions in the crossword can be filled. We can simulate this process by\nrepeatedly trying to fill in one more position. The simulation ends when we\ncannot fill any character in the crossword.\n</p>\n\n<p>\nRuntime analysis: In each successful pass over the crossword, at least one\ncharacter will be filled. There are at most $$$\\mathbf{N} \\times \\mathbf{M}$$$ spots on the\ncrossword that need to be filled, which means at most $$$\\mathbf{N} \\times \\mathbf{M}$$$\npasses are needed to fill the crossword. Now, in each pass over the crossword,\nwe will be checking all the rows and columns once. We will need to divide each\nrow/column into its constituent words (using '#' as separators). Then for each\nword, we will check the palindromic positions for a filled character and fill-in\nthe other position. This process will take $$$O(\\mathbf{N} \\times \\mathbf{M})$$$ for checking\nall rows and columns once. So, total runtime will be: <br/>\n$$$O((\\mathbf{N} \\times \\mathbf{M}) \\times (\\mathbf{N} \\times \\mathbf{M})) = O(\\mathbf{N}^2 \\times \\mathbf{M}^2)$$$\n</p>\n\n<h3>\nTest Set 2\n</h3>\n<p>\nConsider the following crossword:\n</p>\n<p align=\"left\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3vdSMz7NI6rR4xlXOn_I2wlpbnqP1OuAuEghdi8omPTPArT6mB4HsUl9zaIkAFhYJfIQPTfXQ1CpYPHu2CT7sW/equivalence.jpg\" alt=\"Equivalence crossword\" />\n</p>\n\n<p>\nThis image shows the equivalence classes on a partially solved crossword. Now, if\nwe find these equivalence classes, we can fill all the cells for each class if\nany of the cells in that class contains a character.<br/>\nNow, to build equivalence classes, let us start by building a graph from our\ncrossword. We will consider all cells in the crossword (which are not '#') as\nnodes of our graph and draw edges between palindromic positions. To generate\nthese edges, we can traverse over all rows and then over all columns of the\ncrossword. For each row/column, split it into its constituent words and add an\nedge between the palindromic positions. Now, if two cells belong to the same\nconnected component, they are equivalent. We can find connected components\n(equivalence classes) optimally from our constructed graph using any\n<a href=\"https://en.wikipedia.org/wiki/Graph_traversal\"\n    target=\"_blank\">graph search</a> algorithm (such as DFS or BFS) or using <a\n    href=\"https://en.wikipedia.org/wiki/Disjoint-set_data_structure\"\n    target=\"_blank\">DSU</a>.\n</p>\n\n<p>\nRuntime analysis: Any graph traversal algorithm will visit each cell only once\nand a cell can be connected to at most two other cells. Then, each cell will be\nvisited at most once more when filling in equivalence classes. So, total runtime\nwill be:<br />\n$$$O(\\mathbf{N} \\times \\mathbf{M})$$$\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2ERYjUQcHsX6x1LXy_xLQb9-Tyt5keo_CiUNvT3cPv-tpQn5_4_m0nIzO6CUvJVCqDmWgk1dYG/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000859dcd","statement":"<h3>Problem</h3>\n\n<p>\n  A <a href=\"https://en.wikipedia.org/wiki/Crossword\" target=\"_blank\">crossword puzzle</a> is a\n  rectangular grid of black cells and letters\n  <code>A-Z</code> like the one shown below.\n</p>\n  <p align=\"center\">\n    <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U37PLrnzZZ-znaHj6F2dTEJt7M1Y1QBVMJBvfcMG_iyLqMiTUFb-6I_EJd-wz9OliLuxHm3w3-7Fow-Oc69r60/crossword1.png\" alt=\"Example crossword\"/>\n  </p>\n<p>\n  Words in the crossword are defined as maximal vertical or horizontal segments\n  of characters.\n  In the crossword\n  below, <code>DO</code> and <code>ON</code> are examples of words.\n\n</p>\n  <p align=\"center\">\n    <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3W7C7DeQB6NXSxXuZGPVUQsemz4MZObTldkUKTfDTxXEUBnDZQMjTGVGHqyzl9yyijSaSkB6notl4DzRMjAzk/crossword2.png\" alt=\"Example crossword with highlighted words\"/>\n  </p>\n\n<p> A palindromic crossword is one where every word is a\n  <a href=\"https://en.wikipedia.org/wiki/Palindrome\" target=\"_blank\">palindrome</a>.\n  Let $$$\\mathbf{R_{i,j}}$$$ represent the character on the $$$i$$$-th row\n  and $$$j$$$-th column, where $$$i$$$ and $$$j$$$ are $$$1$$$-indexed. The top left corner\n  is $$$\\mathbf{R_{1,1}}$$$.\n  In the example palindromic crossword below, the <code>B</code> in $$$\\mathbf{R_{3,2}}$$$\n    is part of both the horizontal word starting at $$$\\mathbf{R_{3,1}}$$$ and the vertical word ending at\n    $$$\\mathbf{R_{4,2}}$$$, and both are palindromes.\n</p>\n\n <p align=\"center\">\n    <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1piq0-Gc9Y8Lpj5Os1379K23asRMXqUSUajmjxkYsjJfm5lAbIUBzOEMsnsm_qXu6cv_GyouKRX-zYTk-BDulqKOmsn0Viney6ZijXag/fullPalindromicCrossword.png\" alt=\"Full palindromic crossword\"/>\n  </p>\n\n\n\n<p>\nYou have been gifted a palindromic crossword puzzle with $$$\\mathbf{N}$$$ rows and $$$\\mathbf{M}$$$ columns.\n  You finished the crossword and throw away the clues,\n  preparing to hang it on your wall. However, you accidentally erase some of the letters! You want to recover as much of the crossword as possible,\n  but you do not have the clues anymore. Using only the knowledge that the crossword is palindromic,\n  restore the maximum possible number of missing characters in the given crossword.\n</p>\n  <p>\n  Missing letters are represented as empty white cells in the below diagram. The crossword on\n  the left is the crossword you are given and the crossword on the right\n  is the result after you recover as many letters\n  as possible. The remaining cells cannot be filled because we do not have sufficient information\n  to recover them.\n</p>\n\n <p align=\"center\">\n    <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U29i7NaR0H1yyFx6FBYFzVW46c1-OqBSVu8pM2TZIg88ukJgY-JapdbsF-O8BmDm7K6rStV1T0MZgyk8w0CO9Tdm2N_sA/fillInCrossword.png\" alt=\"Example palindromic crossword\"/>\n  </p>\n\n\n\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.<br/>\nThe first line of each test case contains two\n  integers, $$$\\mathbf{N}$$$ and $$$\\mathbf{M}$$$, representing the number of rows and columns in the crossword,\n  respectively.<br/>\nThe next $$$\\mathbf{N}$$$ lines represent the $$$\\mathbf{N}$$$ rows of the grid. The $$$i$$$-th row consists of $$$\\mathbf{M}$$$ characters\n  representing $$$\\mathbf{R_{i,1}}$$$, $$$\\mathbf{R_{i,2}}$$$, $$$\\dots$$$, $$$\\mathbf{R_{i,M}}$$$. Each character is one of the\n  following:<br/>\n<ul>\n <li>A capital letter of the alphabet (<code>A-Z</code>)</li>\n <li>A period (<code>.</code>) for a missing letter (empty white cell in the example crossword)</li>\n <li>A hash (<code>#</code>) for black cell</li>\n</ul>\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>\nwhere $$$x$$$ is the test case number (starting from $$$1$$$) and $$$y$$$ is the number of empty white\n  cells that were filled. Then, output $$$\\mathbf{N}$$$ more lines representing the final grid, with\n  the missing characters (<code>.</code>) replaced by capital letters (<code>A-Z</code>)\n  where possible.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 60 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  There exists at least one way to fill in the given input grid such\n  that it is a palindromic crossword. <br/>\nAll characters in the grid are in the set $$$\\{$$$<code>A-Z</code>, <code>#</code>, <code>.</code>$$$\\}$$$<br/>\n\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n$$$1 \\le \\mathbf{N},\\mathbf{M} \\le 50$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\nFor at most 10 cases:<br/>\n$$$1 \\le \\mathbf{N},\\mathbf{M} \\le 1000$$$.<br/>\n  <br/>\n  For the remaining cases:<br/>\n  $$$1 \\le \\mathbf{N},\\mathbf{M} \\le 50$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2Wm7wu-LNuznqfxubeZflZdQO7qvwLPGmavCGTpFuM2yWygPPGgscNW08Wkn14POSTKUvjxi3we0DwVjcRcglyxCHlTThj9JOfIp-9WEuu9U-uMFI/palindromic_crossword_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2 2\nA.\n.#\n4 6\nA...#.\nB##...\nB.###.\nA...#.\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0aZtS2xq0JBzDEmnWJlDFJyOMG8t-b5kiN-o8htfkXK1H7h_DSmlH50sIRecoBiuGMH2kBiTXYg3LMi9YHkGmSCofX4cqAgHsE1Pcm2zaL8f6IofYj/palindromic_crossword_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nAA\nA#\nCase #2: 8\nA..A#.\nB##A.A\nBB###A\nABBA#.</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nIn Sample Case #2, we are able to fill in $$$8$$$ of the blanks. We can fill in the missing letters as follows:\n  <li>row $$$1$$$, column $$$4$$$: We know this is <code>A</code> from character at row $$$1$$$, column $$$1$$$.</li>\n  <li>row $$$2$$$, column $$$4 =$$$ <code>A</code> from row $$$1$$$, column $$$4$$$.</li>\n  <li>row $$$2$$$, column $$$6 =$$$ <code>A</code> from row $$$2$$$, column $$$4$$$.</li>\n  <li>row $$$3$$$, column $$$6 =$$$ <code>A</code> from row $$$2$$$, column $$$6$$$.</li>\n  <li>row $$$3$$$, column $$$2 =$$$ <code>B</code> from row $$$3$$$, column $$$1$$$.</li>\n  <li>row $$$4$$$, column $$$2 =$$$ <code>B</code> from row $$$3$$$, column $$$2$$$.</li>\n  <li>row $$$4$$$, column $$$3 =$$$ <code>B</code> from row $$$4$$$, column $$$2$$$.</li>\n  <li>row $$$4$$$, column $$$4 =$$$ <code>A</code> from row $$$4$$$, column $$$1$$$.</li>\n\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":11},{"type":1,"type__str":"VISIBLE","value":17}],"title":"Palindromic Crossword","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test set 1</h3>\n<p>\n  For this test set, since the length of $$$\\mathbf{S}$$$ $$$\\le 8$$$, we can try every permutation of characters\n  and check whether there exists a permutation such that for all $$$i$$$, $$$S[i] \\neq A[i]$$$.\n  To find every permutation, we can first convert the string to a character array. Then, we\n  swap the first element with every other element and recursively find permutations of the rest of\n  the string.\n</p>\n<p>\n  This can be performed in $$$O(N!)$$$, where $$$N$$$ is the length of $$$\\mathbf{S}$$$.\n</p>\n\n<h3>Test set 2</h3>\n<p>\n  For this test set, the above solution would exceed the time limits.\n</p>\n<p>\n   The key observation here is that if a character exists more than $$$\\lfloor \\frac{N}{2} \\rfloor$$$\n  times, then it's impossible to\n  find such a permutation, because at least one position will have a letter that stays the same.\n\n  Otherwise, we can sort the letters and keep track of the initial position of each letter.\n</p>\n<p>\n  Let the new sorted letters be $$$P$$$. We can split the sorted letters into two halves, from\n  index $$$0$$$ to $$$\\frac{N}{2}$$$, $$$P[0:\\frac{N}{2}]$$$, and from $$$\\frac{N}{2}$$$ to the end,\n  $$$P[\\frac{N}{2}:]$$$. If $$$N$$$ is odd, split $$$P$$$ such that the second half has an extra letter,\n  where the first half is $$$0$$$ to $$$\\lfloor \\frac{N}{2} \\rfloor$$$ and the second half is from\n  $$$\\lceil \\frac{N}{2} \\rceil$$$ to the end.\n\n\n  Then, we put each character from the second half of the sorted letters $$$P[i + (\\frac{N}{2})]$$$\n  into the original position of the corresponding letter in the first half $$$P[i]$$$.\n  Similarly, we put each character from the first half of the sorted letters $$$P[i]$$$ into\n  the original position of the corresponding letter in the second half $$$P[i + (\\frac{N}{2})]$$$.\n  Note that if $$$N$$$ is odd, the second half of the sorted letters $$$P[i + (\\frac{N}{2})]$$$\n  will occupy the first $$$\\lfloor \\frac{N}{2} \\rfloor +1$$$ spaces, while the original first half will occupy the\n  last $$$\\lfloor \\frac{N}{2} \\rfloor $$$ spaces, as shown in the example below. The letter\n  orginally at $$$P[N-1]$$$ will be in the middle of the array after the swap, replacing\n  $$$P[i + \\lfloor \\frac{N}{2} \\rfloor]$$$.\n</p>\n<br>\n\n<p align=\"center\">\n    <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1OdLYpn1cjBAehcoYCb7ekJMtr4xbLFq8F8897cqL47jVFFQhs56uO1anuuZbPpHFgtcB-yI-WmPLmmGPfM5xrrE7frRQ/analysis_diagram.png\" alt=\"Example solution.\"/>\n  </p>\n\n<p>\n  This works because we know that no more than half the characters\n  are equal, and hence the character at $$$P[i]$$$ cannot be equal to\n  the letter at $$$P[i + (\\frac{N}{2})]$$$.\n</p>\n<p>\n  This can be performed in $$$O(N \\log N)$$$, due to sorting.\n  However, due to the limited size of the alphabet, we can actually sort even faster using a\n  non-comparative sorting algorithm such as\n  <a href=\"https://en.wikipedia.org/wiki/Counting_sort\" target=\"_blank\">counting sort</a>.\n\n\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U34vFvuUHnlV3dJErTI9SaR5j1l3WGW5JbaVwm2IZCNtxGibQPF6spuL72MLXoqRQmQnzHZbEYk/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000085a152","statement":"<h3>Problem</h3>\n<p>\nLet $$$\\mathbf{S}$$$ be a string containing only letters of the English alphabet. An anagram of $$$\\mathbf{S}$$$ is any\nstring that contains exactly the same letters as $$$\\mathbf{S}$$$ (with the same number of occurrences for each\n  letter), but in a different order. For example, the word <code>kick</code> has anagrams such as <code>kcik</code> and\n<code>ckki</code>.\n</p>\n<p>\nNow, let $$$S[i]$$$ be the $$$i$$$-th letter in $$$\\mathbf{S}$$$. We say that an anagram of $$$\\mathbf{S}$$$, A, is <i>shuffled</i>\nif and only if for all $$$i$$$, $$$S[i] \\neq A[i]$$$. So, for instance, <code>kcik</code> is not a shuffled\nanagram of <code>kick</code> as the first and fourth letters of both of them are the same. However, <code>ckki</code>\nwould be considered a shuffled anagram of <code>kick</code>, as would <code>ikkc</code>.\n</p>\n<p>\nGiven an arbitrary string $$$\\mathbf{S}$$$, your task is to output any one shuffled anagram of $$$\\mathbf{S}$$$, or else print\n<code>IMPOSSIBLE</code> if this cannot be done.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case consists of one line, a string of English letters.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is a shuffled anagram of the\nstring for that test case, or <code>IMPOSSIBLE</code> if no shuffled anagram exists for that string.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\nAll input letters are lowercase English letters.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n$$$1 \\le$$$ the length of $$$\\mathbf{S}$$$ $$$\\le 8$$$.\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n$$$1 \\le$$$ the length of $$$\\mathbf{S}$$$ $$$\\le 10^4$$$.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0sZZuFW_wa-fayD2CFrFH4s7LkCUGPcABLj41eyv2JupyaNigVwZZ8oejf8eLZwFRCBJniHWTSvqaYcmUWgMcGoR4Z_r_Wvy26heJAhzHI1Q/shuffled_anagrams_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\nstart\njjj\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Oh4oEqfBA0NXPreqmT714IkLOcJSC4LzgOvYo3snnePGWwgTTw04XjJmtBRwP9d5X9SAxFNbSpl31SpfMCviIOAguk-nMuqE2fyTPyDUc0Xo/shuffled_anagrams_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: tarts\nCase #2: IMPOSSIBLE\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn test case #1, <code>tarts</code> is a shuffled anagram of <code>start</code> as none of the letters in each position of\nboth strings match the other. Another possible solution is <code>trsta</code> (though you only need to provide one solution).\nHowever, in test case #2, there is no way of anagramming <code>jjj</code> to form a shuffled anagram,\nso <code>IMPOSSIBLE</code> is printed instead.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":4},{"type":1,"type__str":"VISIBLE","value":8}],"title":"Shuffled Anagrams","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  In what follows, let us suppose that the delicious part of the cake has $$$n$$$ rows and $$$m$$$\n  columns.\n</p>\n\n<h3>\nTest Set 1\n</h3>\n<p>\n  When $$$\\mathbf{K}=1$$$, we must consider two cases. If the delicious part is fully inside the cake,\n  meaning that the outer cells are not delicious, then all grid lines around the delicious cells\n  must be cut. Specifically, there are $$$n+1$$$ grid lines of length $$$m$$$ and $$$m+1$$$ grid\n  lines of length $$$n$$$, so the answer is $$$n(m+1)+m(n+1)=2nm+n+m$$$ plus the minimum distance\n  to cut from the border to the delicious part. On the other hand, if the delicious\n  part shares some border with the whole cake, then the answer is $$$2nm+n+m$$$ minus the length of\n  the shared border. The time complexity is $$$O(1)$$$.\n</p>\n\n<h3>\nTest Set 2\n</h3>\n\n<p>\n  Let us start out simple. Suppose a cake of size $$$n \\times m$$$ is entirely delicious and needs to\n  be cut into $$$1 \\times 1$$$ squares. This means that we need to cut the cake along all internal\n  grid lines, which are marked bold in the following picture. Moreover, suppose for the moment that\n  our knife is infinitely long. One way to cut the cake would be to make $$$n-1$$$ horizontal\n  cuts and then make $$$m-1$$$ vertical cuts for each of the resulting $$$n$$$ horizontal strips.\n  This strategy amounts to $$$n-1+n(m-1)=nm-1$$$ cuts. If we start with $$$m-1$$$ long vertical cuts\n  first, then we would need $$$n-1$$$ horizontal cuts for each of the $$$m$$$ vertical strips,\n  which again results in $$$m-1+m(n-1)=nm-1$$$ cuts.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0D8R2xf1K4olwrQR06o-fetQmkth2wNEXJWm_4NxjI98ssmYqhebh583vQPt2j_8wS22MoK4u1BYE/grid.png\" width=\"30%\" alt=\"An example grid with 7 rows and 11 columns.\"/>\n<p>\n  Can we do any better? No. In order to\n  prove this claim, let us consider the worst case scenario where we make cuts of length $$$1$$$\n  only, which means $$$n(m-1)+m(n-1)=2nm-n-m$$$ cuts in total. Since we have a very long knife,\n  we can try to combine or merge some of those unit cuts into longer cuts. Now, at each internal\n  grid point, we\n  can merge the two vertical cuts meeting at that point or the two horizontal cuts, but not both.\n  Thus, we can save at most one cut at each internal grid point. There are $$$(n-1)(m-1)=nm-n-m+1$$$\n  internal grid points, which is how many cuts we can possibly save. It follows that we need at\n  least $$$2nm-n-m-(nm-n-m+1)=nm-1$$$ cuts to divide the cake into unit squares.\n</p>\n<p>\n  Now that we know how to cut a fully delicious cake with a sufficiently long knife (i.e.\n  $$$\\mathbf{K} \\ge n$$$ or $$$\\mathbf{K} \\ge m$$$), let us turn our\n  attention to the case where the length of the knife is $$$\\mathbf{K} \\lt \\min(n,m)$$$. With a cake this\n  large, some cuts will necessarily terminate at a previously unexposed internal grid point. For\n  convenience, we will call them <i>red</i> points. And if we continue the reasoning from the\n  previous paragraph, the red points will not save a cut for us. In other words, as soon as we stop\n  at a previously unexposed grid point, the three other grid lines meeting at that point will\n  belong to different cuts with no chance of merging any two of them.\n  Conversely, if a cut exposes an\n  internal grid point without terminating at it, then that grid point belongs to just three\n  different cuts and so one cut is saved.\n  Consequently, we want to minimize the number of red points.\n</p>\n<p>\n  To prove a lower bound on the number\n  of red points, let us consider $$$\\lfloor \\frac{n-1}{\\mathbf{K}} \\rfloor$$$ rows of $$$\\mathbf{K} \\times \\mathbf{K}$$$\n  blocks,\n  $$$\\lfloor \\frac{m-1}{\\mathbf{K}} \\rfloor$$$ blocks in each row as shown in the following picture for\n  $$$\\mathbf{K}=3$$$. If we consider the blocks open at the left and bottom sides and closed at the right\n  and top sides, then each of the blocks contains $$$\\mathbf{K} \\times \\mathbf{K}$$$ internal grid points and any\n  two blocks are disjoint. One can easily verify that the very first cut that has a point common\n  with a particular block will create a red point in that block. Since the blocks are disjoint,\n  there will be at least $$$\\lfloor \\frac{n-1}{\\mathbf{K}} \\rfloor \\times \\lfloor \\frac{m-1}{\\mathbf{K}} \\rfloor$$$\n  red points for any cutting strategy.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1Qj08bxg75X8_6k4ZEH41L_PWE8ATT82pWIBUdkJj8m1TMP1Y1J1_Bcikij-fmOFtH1y5ch6V_-Dl8OzOmYVj_QbckFtY/grid_with_blocks.png\" width=\"30%\" alt=\"A 7x11 grid with six 3x3 blocks of cells in a compact arrangement starting from the bottom-left corner.\"/>\n<p>\n  It turns out that for an optimal cutting strategy this is also the upper bound on the number of\n  red points. One\n  way of achieving this bound is to select the top-right corner of each block as the red point, cut\n  out the blocks with $$$2\\lfloor \\frac{n-1}{\\mathbf{K}} \\rfloor \\times \\lfloor \\frac{m-1}{\\mathbf{K}} \\rfloor$$$ full\n  cuts, and finally cut all the blocks and the L-shaped remaining part into unit squares without\n  ever terminating at a previously unexposed grid point (i.e. without introducing new red points).\n  Recall that every internal grid point that is not red saves us one cut. It follows that the\n  minimum number of cuts to partition a fully delicious cake is\n  $$$nm-1+\\lfloor \\frac{n-1}{\\mathbf{K}} \\rfloor \\times \\lfloor \\frac{m-1}{\\mathbf{K}} \\rfloor$$$. Note that the case\n  with a sufficiently long knife is a special case of this formula, as\n  $$$\\lfloor \\frac{n-1}{\\mathbf{K}} \\rfloor \\times \\lfloor \\frac{m-1}{\\mathbf{K}} \\rfloor=0$$$.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0iY_61viumaJBepyd42TGaRQ1Jrf-cpXyVEN0VskP4wEOGmuDNjHCiJutX3rNAJy0pJ9ESqZGz-opf-bKscwPdRG9lwIBKnIMU/grid_with_red_points.png\" width=\"30%\" alt=\"The same grid containing 3x3 blocks with the top-right grid point of each block marked as red.\"/>\n<p>\n  It remains to solve the problem for a cake that is partially not delicious. Intuitively, it\n  seems reasonable to cut out the delicious rectangle first and then proceed with the above\n  strategy to partition the delicious part into unit squares. To cut out the delicious rectangle, we\n  should start cutting from the outer border of the cake towards one of the corners of the delicious\n  rectangle and then cut around the rectangle as shown in the following picture for $$$\\mathbf{K}=3$$$.\n  There are eight symmetric variants to try and we take the minimum number of cuts obtained this\n  way. We should be careful, though, not to include any sides of the delicious rectangle that are\n  touching the border of the whole cake.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2nnwsAam-B9H19l73QKwOKb6fImQpNU3Gr3-OKmyTKRqwkpdlpuDPPO_MMwOMh2ImM-eInZOJVn91E95FwRfxCBQ/outer_border.png\" width=\"30%\" alt=\"A 7x11 cake with the delicious part between rows 3 and 6 and columns 3 and 8. One way of cutting out the delicious part is shown as follows: Start at the left side between rows 2 and 3, cut 3 cells to the right, cut another 3 cells to the right, cut 2 cells to the right, cut 3 cells down, cut 1 cell down, cut 3 cells to the left, cut another 3 cells to the left, cut 4 cells up, cut 1 cell up.\"/>\n<p>\n  A skeptical reader might ask whether it could be worth considering a cutting strategy where we\n  start from the outer border and cut towards somewhere in the middle of the delicious rectangle.\n  If the distance from the border to the delicious rectangle is not divisible by $$$\\mathbf{K}$$$, then the\n  last step would cut right into the delicious part and perhaps save one cut for the internal\n  grid lines of the delicious rectangle. It can be shown, however, that we would need one extra\n  cut for the outline in this case, so overall we would not gain anything. The proof of this\n  claim is technical yet not very interesting, so it is left for the reader as an exercise.\n</p>\n<p>\n  The time complexity of the solution for Test Set 2 is still $$$O(1)$$$.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0nC-wvTYz_lrJyv9JhWDcM7Xih9w1g9KsKwL2LNK8QAPmwVQeQDXFl_e1TORrDTjweZKrmaKFm/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000085a285","statement":"<h3>Problem</h3>\n<p>\n  You are given a grid of $$$\\mathbf{R}$$$ rows and $$$\\mathbf{C}$$$ columns that corresponds to a birthday cake. <br/>\n  The rows are numbered from $$$1$$$ to $$$\\mathbf{R}$$$ starting from the top.\n  The columns are numbered from $$$1$$$ to $$$\\mathbf{C}$$$ starting from the left.\n  Each cell in the grid is a square of size $$$1 \\times 1$$$. <br/>\n  You noticed that the most delicious part of the cake forms a single filled rectangle;\n  that means all the cells inside this single rectangle will be delicious as well,\n  but all the cells outside this rectangle are not delicious. <br/>\n\n  You have a knife that is long enough to make straight-line cuts of length up to $$$\\mathbf{K}$$$.\n</p>\n<p>\n  We want to make a series of cuts to extract each of the delicious cells separately,\n  so that we can put candles on them, and enjoy the birthday party. <br/>\n\n  To extract each of the delicious cells separately, they must be disconnected from any other cell.\n  <br/>\n  A cell is disconnected if no other cell is connected to it\n  in any of the $$$4$$$ directions (up, down, left, right). <br/>\n</p>\n<p>\n  A cut is a directed line segment which is valid if the following conditions are met:\n  <ul>\n    <li> The cut runs along one of the horizontal or vertical lines between the rows and columns of the grid.\n    <li> The length of the cut must not exceed $$$\\mathbf{K}$$$.\n    <li> The starting and ending points of the cut must be grid points (i.e. a corner of a cell).\n      In addition, the starting point must be already exposed, meaning that it lies on\n      one of the $$$4$$$ sides of the grid or on one of the previous cuts.\n    <li> The cut must not pass through any other exposed points.\n      It may touch an exposed point, but if it does, it must end right there.\n  </ul>\n</p>\n\n<p>\n  Suppose that $$$\\mathbf{K} = 4$$$.\n  Below you can find five examples of valid cuts.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1jcjLSig94EW1diVpjiN42MUlJclK1URtqjbsqxeisSZYGZLypCXivVjDlrcEtb4sCQ-tC_tmZc3pyuXKiFm3jIuXV/examples_valid.png\" alt=\"Examples of valid cuts.\" width=\"600\" height=\"auto\">\n<p>\n  And here are four examples of invalid cuts\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U19_-xGFrNunImLrAxaxQqTZGn94oMTChAzWUgUmm76ff5fU5GMS16Hs0z4hOWiVbWrQpVK60J2d4r43y30jKie5V2uNCo/examples_invalid.png\" alt=\"Examples of invalid cuts.\" width=\"600\" height=\"auto\">\n  <ul>\n    <li> In the first picture, the cut is too long (longer than $$$4$$$).\n    <li> In the second picture, the cut starts from an unexposed point (neither one of the $$$4$$$ sides of the grid nor a previous cut).\n    <li> In the third picture, the cut passes through an exposed point, it must stop once it touches the exposed point at length $$$2$$$.\n    <li> The fourth picture is invalid because of the same reason as the third picture.\n  </ul>\n<p>\n  We need to find the minimum number of cuts needed to extract all the delicious cells.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n</p>\n<p>\n  Each test case starts with a line containing three integers, $$$\\mathbf{R}$$$, $$$\\mathbf{C}$$$ and $$$\\mathbf{K}$$$.  <br/>\n  The next line contains four integers, $$$\\mathbf{r_1}$$$, $$$\\mathbf{c_1}$$$, $$$\\mathbf{r_2}$$$, $$$\\mathbf{c_2}$$$,\n  representing the top-left and bottom-right cell of the delicious rectangle respectively.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is\n  the test case number (starting from 1) and $$$y$$$ is the minimum number of cuts.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 10 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$1 \\le \\mathbf{r_1} \\le \\mathbf{r_2} \\le \\mathbf{R}$$$.<br/>\n  $$$1 \\le \\mathbf{c_1} \\le \\mathbf{c_2} \\le \\mathbf{C}$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{R}, \\mathbf{C} \\le 100$$$.<br/>\n  $$$\\mathbf{K} = 1$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$1 \\le \\mathbf{R}, \\mathbf{C} \\le 10^5$$$.<br/>\n  $$$1 \\le \\mathbf{K} \\le 10^5$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0JCkyi5ymqDE7BSpaOnRsEbRmzD-ORjC-4zYdNLdc1QqZqZzs7_uTqe6id6OfoM96o12-1l4AmeYDleb2VbKunPZ6GEsEqmExFZHBK/birthday_cake_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">1\n3 3 1\n2 2 2 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U21vqVfLETsTWVeGZ8OgdJ66p4H2QAqpDpp52gDYSGDSKu7f7wroqFBAxZAghVBS6JKlOozucuR4BE_MYa1C09wT7NQ-Kq20A9EuyXMCw/birthday_cake_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1MRf3BIJ2V6X0Alw6p0cKpelqNYi8cA0F6HrIIyd1Hwgd26QxxFYWYvEP7iSkGIl11zEq6u17GDJKhpZNFfuwSytQyahFv63VRPA7A/birthday_cake_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">1\n2 3 4\n2 1 2 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3obrYqNmSOBrWwHx9lzK5-m-pqFOOdgPrRal54P9kY--tPANtwuGR2hWq-18alJ2uAbBCEwqQHdXj6r0M4dA6yk2FaEFPg_E9rw885iA/birthday_cake_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In the Sample Case, the minimum number of cuts is $$$5$$$.\n  One of the possible series of cuts is as follows:\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0fV_8dIlAEp-UF5uYz637dbvv9WM1OYx9AElsgoETTIV-NeIQZAP7ZlfHW9WeghNAXQesTZY6PQkHMNmyY/sample_1.png\" alt=\"Visualization for the first sample case, showing 5 cuts.\">\n<p>\n  In the Additional Sample Case, the minimum number of cuts is $$$3$$$.\n  One of the possible series of cuts is as follows:\n</p>\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2xERdP96dPNhMq2jErKSi0tldUKvzqmBI7LDy3dOAniITyws3Sxk4OdBwo-cp_RLmWkhOZFiSlpaU09X7V/sample_2.png\" alt=\"Visualization for the second sample case, showing 3 cuts.\">\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":1,"type__str":"VISIBLE","value":13}],"title":"Birthday Cake","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\n    Test Set 1\n</h3>\n<p>\nFor the first test set, we can generate all possible arrangements of the cards\nfrom $$$1$$$ to $$$\\mathbf{N}$$$. For each arrangement of the cards, we can play the game to\nfind the score for that particular arrangement. Then the expected score of the\ngame will be the average score over all arrangements. The total number of\npossible arrangements for $$$\\mathbf{N}$$$ cards is $$$\\mathbf{N}!$$$.\n</p>\n\n<p>\nThe time complexity is $$$O(\\mathbf{N} \\cdot \\mathbf{N}!)$$$ which is under the required limit\nfor $$$\\mathbf{N} = 10$$$.\n</p>\n\n<h3>\n    Test Set 2\n</h3>\n<p>\nOur previous strategy would not work for this test set. <br />\nLet us consider arrangements where the number on top of the pile is $$$x$$$.\nThen among the remaining $$$\\mathbf{N} - 1$$$ cards, all the cards that are smaller\nthan $$$x$$$ will be discarded. We only need to take care of the ones that are\ngreater than $$$x$$$. So, the expected score for arrangements with $$$x$$$ on\ntop of the pile will be one higher than the expected score of the rest of the\ncards greater than $$$x$$$. Also, it does not matter what the starting and\nending number on the cards is, all that matters is the number of cards. So, the\nexpected score of cards from $$$x + 1$$$ to $$$\\mathbf{N}$$$ is equal to expected score of\ncards from $$$1$$$ to $$$\\mathbf{N} - x$$$. Assuming $$$E_\\mathbf{N}$$$ denotes the expected\nscore of $$$\\mathbf{N}$$$ cards, the expected score when $$$x$$$ is on top is $$$E_{\\mathbf{N} - x}\n+ 1$$$.\n</p>\n\n<p>\nNow, $$$x$$$ ranges from $$$1$$$ to $$$\\mathbf{N}$$$, so the expected score for $$$\\mathbf{N}$$$ cards is\n$$$E_\\mathbf{N} = \\frac{\\sum_{x=1}^{\\mathbf{N}}(E_{\\mathbf{N} - x} + 1)}{\\mathbf{N}} =\n\\frac{\\sum_{i=0}^{\\mathbf{N}-1}E_{i}}{\\mathbf{N}} + 1$$$. The summation in the term is a\ncumulative sum of expected scores of first $$$\\mathbf{N}-1$$$ natural numbers. So,\nexpected score for $$$\\mathbf{N}$$$ cards can be computed in linear time if we maintain the\ncumulative sum of the expected score for $$$\\mathbf{N}-1$$$ cards.\n</p>\n\n<h3>\n    Test Set 3\n</h3>\n<p>\nLet us denote $$$\\sum_{i=0}^{\\mathbf{N}}E_i$$$ as $$$S_\\mathbf{N}$$$, then from the result of\nthe previous section, we have $$$E_\\mathbf{N} = \\frac{S_{\\mathbf{N}-1}}{\\mathbf{N}} + 1$$$. Now, for\n$$$E_{\\mathbf{N}+1}$$$ we have: <br />\n$$$E_{\\mathbf{N}+1} = \\frac{S_\\mathbf{N}}{\\mathbf{N}+1} + 1 = \\frac{E_\\mathbf{N} + S_{\\mathbf{N}-1}}{\\mathbf{N}+1} + 1$$$\n<br />\nNow, substituting $$$E_\\mathbf{N}$$$ from the previous result, we get: <br />\n$$$E_{\\mathbf{N}+1} = \\frac{\\frac{S_{\\mathbf{N}-1}}{\\mathbf{N}} + 1 + S_{\\mathbf{N}-1}}{\\mathbf{N}+1} + 1 =\n\\frac{\\frac{(\\mathbf{N}+1)S_{\\mathbf{N}-1}}{\\mathbf{N}} + 1}{\\mathbf{N}+1} + 1$$$ <br />\n$$$\\Rightarrow E_{\\mathbf{N}+1} = \\frac{S_{\\mathbf{N}-1}}{\\mathbf{N}} + \\frac{1}{\\mathbf{N}+1} + 1$$$ <br />\n$$$\\Rightarrow E_{\\mathbf{N}+1} = E_\\mathbf{N} + \\frac{1}{\\mathbf{N}+1}$$$ <br />\n</p>\n\n<p>\nThis is the\n<a href=\"https://en.wikipedia.org/wiki/Harmonic_series_(mathematics)\" target=\"_blank\">\n    harmonic series\n</a> since $$$E_1 = 1$$$. We can estimate $$$E_\\mathbf{N}$$$ for $$$\\mathbf{N} \\gt 10^{6}$$$\nwith $$$E_{10^{6}} + \\int_{10^{6} +1}^{\\mathbf{N}+1} \\frac{1}{x} \\,dx$$$.  Since\n$$$\\int \\frac{1}{x} \\,dx = \\log(x) + C$$$, we get (for $$$\\mathbf{N} \\gt 10^6$$$):\n<br/>\n$$$E_\\mathbf{N} = E_{10^{6}} + \\log(\\mathbf{N}+1) - \\log(10^{6} + 1)$$$.</p>\n\n<p>\nWe can precompute the harmonic series till $$$10^6$$$ in linear time and then\nestimate the score using the above formula for $$$\\mathbf{N} \\gt 10^6$$$. So, the\noverall time complexity is constant, specifically $$$O(10^6)$$$ for the\nprecomputation.\n</p>\n\n<h5>Error Bounds</h5>\n<p>\nConsider the following $$$3$$$ graphs:\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0g5KHLXSxObR76puAHh9Giu1XCfc__z9JP0hKKUC7zDY6JATMoQEs8WkNr1UZAaDSMTPPMpP5Rxi3Tqg/actual.jpg\" width=\"60%\" alt=\"Actual area\" />\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0O2ITgq7YM93NATpAb67qMuMWc-IdUyNV4Jj8GBUg-04Q9F33Imv_tbiP1A019pumrA6oVJupXYz33zw/larger.jpg\" width=\"60%\" alt=\"Larger area\" />\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U114niHe6HiYLyz5yKEyn6GA4GHVfCT0Sb3VFCNBDKI-mfnrFTd09DgDSokKN4jZDgLuUrHLAeBvDo_ElA/smaller.jpg\" width=\"60%\" alt=\"Smaller area\" />\n\n<p>\nThe first image represents the actual number we need\n$$$\\sum_{x=s+1}^{e}\\frac{1}{x}$$$, second image represents a larger area\n$$$\\int_{s}^{e}\\frac{1}{x}\\,dx$$$ and third image represents a smaller area\n$$$\\int_{s+1}^{e+1}\\frac{1}{x}\\,dx$$$. So, error (denoted as $$$Er_{s,e}$$$) is\ngiven by:\n</p>\n<p>\n$$$Er_{s,e} \\lt \\int_{s}^{e}\\frac{1}{x}\\,dx -\n\\int_{s+1}^{e+1}\\frac{1}{x}\\,dx$$$<br/>\n$$$\\Rightarrow Er_{s,e} \\lt \\int_{s}^{s+1}\\frac{1}{x}\\,dx -\n\\int_{e}^{e+1}\\frac{1}{x}\\,dx \\lt \\int_{s}^{s+1}\\frac{1}{x}\\,dx$$$<br/>\n$$$\\Rightarrow Er_{s,e} \\lt \\frac{1}{s}$$$<br/>\n<br/>\nNow, we are estimating only after $$$10^6$$$, so $$$s = 10^6$$$, hence\n$$$Er_{10^6,e} \\lt 10^{-6}$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0MHDjJ1ICUTComLiAI7jSZ8MGlVmLmz3RZNeQW2VQ-TpRGL6nHVU-JXMclhld4u2RRyFYFBeDZ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000085a709","statement":"<h3>Problem</h3>\n<p>\n  You're playing a card game as a single player.\n</p>\n\n<p>\n  There are $$$\\mathbf{N}$$$ cards. The $$$i$$$-th card has integer $$$i$$$ written on it.\n</p>\n\n<p>\n  You first shuffle $$$\\mathbf{N}$$$ cards randomly and put them in a pile. Take the card at the top of the\n  pile to your hand. Then repeat the following process until the pile becomes empty:\n  <ol>\n    <li>Check the card on the top of the pile.</li>\n    <li>If the number on the card is larger than the number on the last card you\n        took, take the card.</li>\n    <li>Otherwise, discard the card.</li>\n  </ol>\n</p>\n\n<p>\n  The score of the game is the number of cards in your hand at the end.\n  With the given number of cards $$$\\mathbf{N}$$$, what is the expected score of the game?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input contains the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ lines follow.\n  Each line contains a single integer $$$\\mathbf{N}$$$, the number of cards in the pile.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is the expected score at the end of the\n  game.\n</p>\n<p>\n  <code>y</code> will be considered correct if it is within an absolute or\n  relative error of 10<sup>-6</sup> of the correct answer.\n  See the <a href=\"https://codingcompetitions.withgoogle.com/kickstart/faq#how-does-kick-start-handle-real-numbers\" target=\"_blank\">FAQ</a>\n  for an explanation of what that means, and what formats of real numbers we accept.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n$$$1 \\le \\mathbf{N} \\le 10$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n$$$1 \\le \\mathbf{N} \\le 10^6$$$.<br/>\n</p>\n\n<h4>Test Set 3</h4>\n<p>\n\n$$$1 \\le \\mathbf{N} \\le 10^{18}$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1rQjHtr5uDoT9EpIA86x2GUQg--P8R691SCGXJY_j-GPoTsTc6Nl6NLEU-uaiT7ByJF9tyX907B8a9T1nGzgnvKAHr4wRIJF87GMi1SyFsJXKQIFMEepIwV8op2w/increasing_sequence_card_game_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n1\n2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0oarohg4RwOofYDRO5GNVs0102DZ3pZw6Mli6Q40UGhaK23NAwvxED1-D7LLGqyRJMc9McGLKK3Gng39q3I9z--Mah3hr1BkEL3D8kKFO7jz84ISQbO6jtN2KKqjo/increasing_sequence_card_game_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1.0\nCase #2: 1.5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":9},{"type":1,"type__str":"VISIBLE","value":13},{"type":1,"type__str":"VISIBLE","value":18}],"title":"Increasing Sequence Card Game","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"000000000043585c","type":1,"type__str":"SPECTATOR"},"title":"Round E 2021"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
