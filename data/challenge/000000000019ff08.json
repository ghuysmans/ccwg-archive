{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1594540800000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"000000000019ff08","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  Thank you for participating in Kick Start 2020 Round D.\n</p>\n<p>\n</p>\n<hr>\n<p>\n<b>Cast</b>\n</p><p>\n  Breaking Records: Written by Kevin Tran and prepared by Jonathan Irvin Gunawan.\n</p><p>\n  Alien Piano: Written by Gregory Yap and prepared by Swapnil Gupta.\n</p><p>\n  Beauty of Tree: Written by Saurabh Joshi and prepared by Sherry Wu.\n</p><p>\n  Locked Doors: Written by Kevin Tran and prepared by Anson Ho.\n</p><p>\n  Solutions, other problem preparation, reviews and contest monitoring by\n  Akul Siddalingaswamy,\n  Anson Ho,\n  Anushi Maheshwari,\n  Bohdan Pryshchenko,\n  Cristhian Bonilha,\n  Gregory Yap,\n  Hsin-Yi Wang,\n  Jared Gillespie,\n  Jonathan Irvin Gunawan,\n  Kevin Tran,\n  Krists Boitmanis,\n  Lalit Kundu,\n  Lizzie Sapiro,\n  Michał Łowicki,\n  Nikhil Hassija,\n  Paul Hoang,\n  Raihat Zaman Neloy,\n  Ruoyu Zhang,\n  Sadia Atique,\n  Sanyam Garg,\n  Saurabh Joshi,\n  Shantam Agarwal,\n  Sherry Wu,\n  Sudarsan Srinivasan,\n  Swapnil Gupta,\n  Vikash Dubey,\n  Vipin Singh, and\n  Wajeb Saab.\n</p>\n<p>\nAnalysis authors:\n</p>\n<ul>\n  <li>Breaking Records: Cristhian Bonilha</li>\n  <li>Alien Piano: Krists Boitmanis</li>\n  <li>Beauty of Tree: Akul Siddalingaswamy</li>\n  <li>Locked Doors: Swapnil Gupta</li>\n</ul>\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1594530000000,"tasks":[{"analysis":"<h3>\nTest Set 1\n</h3>\n<p>\n  We can say that the rooms which Bangles has covered in the journey\n  will always form a contiguous subarray. This is because, to go from room i to room j, Bangles must have unlocked the doors that\n  occur between room i and room j once, only then Bangles would be able to move to room j. At any point of time, if Bangles has\n  visited rooms from l to r, Bangles need to make a decision whether to go from room r to r+1 or from room l to l-1 depending which door has\n  lower difficulty. Accordingly, Bangles can update l and r. For deciding which room to go next, it would take constant time. Thus, for taking <b>K</b>\n  pictures, it would take O(<b>K</b>) time. <b>K</b> can be at most <b>N</b>. For each query, it would take O(<b>N</b>) time to process the query. Thus, overall complexity\n  of the solution would be O(<b>Q</b> * <b>N</b>).\n</p>\n\n<h3>\nTest Set 2\n</h3>\n<p>\n  The naive solution would time out for the constraints of test set 2.\n  Thus, we can use the following approach to solve this:\n</p>\n<p>\n  Let InterestingLeft[i] be the door which is the closest door to the left of door i and has\n  difficulty higher than door i. In case there is no such door, assign -1 to it.\n  Similarly, let InterestingRight[i] be the door which is the closest door to the right of door i\n  and has difficulty higher than door i. In case there is no such door, assign -1 to it.\n  InterestingLeft[i] and InterestingRight[i] can be calculated by using the\n  <a href=\"https://www.geeksforgeeks.org/find-the-nearest-smaller-numbers-on-left-side-in-an-array/\">stack method</a>\n  in O(<b>N</b>) time.\n</p>\n<p>\n  After we are done unlocking the door i and all doors with difficulty lower than <b>D</b>[i] between\n  doors InterestingLeft[i] and InterestingRight[i], we would either unlock door InterestingLeft[i] or\n  door InterestingRight[i] next depending on which one has lower\n  difficulty. If we have have only one choice, then we unlock that door itself.\n  For generality, let us assume the next door that would be unlocked would be j. j would be equal to either InterestingLeft[i]\n  or InterestingRight[i].\n</p>\n<p>\n  Let us construct a tree using the given relations. For each door i, we find such j and assign j as parent of i. We can see that a node\n  can have at most 2 children: at most one from the left side and at most one from the right side. Thus the relations would form a Cartesian tree.\n  From the given tree, we can make the following observations:\n</p>\n<p>\n  <ul>\n    <li>If a node has only one child:\n      <ul>\n        <li>If the starting node is inside the subtree of current node, then the node will be visited only after all the nodes in its subtree have been visited.</li>\n        <li>If the starting node is outside the subtree of current node, then first the node will be visited and after that the nodes in its subtree will be visited.</li>\n      </ul>\n    </li>\n    <li>If a node has two children:\n      <ul>\n        <li>If the starting node is in left subtree, then first all the nodes in subtree of left child will be visited, then\n    the current node will be visited, and finally the subtree of right child will be visited.</li>\n        <li>Similarly, if the starting node is in right subtree, then first all the nodes in subtree of right child will be visited, then\n    the current node will be visited, and finally the subtree of left child will be visited.</li>\n      </ul>\n    </li>\n  </ul>\n</p>\n<p>\nBuilding this tree can be done in O(<b>N</b>) time because assigning the parents for each node according\nto InterestingLeft[i] and InterestingRight[i] takes constant time.\n</p>\n\n<p>\n  Let the subtree size of node i be Size[i]. Consider a query with starting room <b>S</b> and we need to find <b>K</b>-th room we will be in.\n  Let the starting door X be the first door that we unlock. This can be determined in constant time by comparing the doors adjacent to room <b>S</b>.\n  In the constructed tree, if size[X] &lt; <b>K</b>, the whole subtree will be visited and we will move to its parent node.\n  This will continue until we reach the node u such that size[u] &ge; <b>K</b>, so that we know that our answer lies within this subtree.\n  To find such node, we can use the binary lifting approach similar to finding the\n  <a href=\"https://www.geeksforgeeks.org/lca-in-a-tree-using-binary-lifting-technique/\">lowest common ancestor between two nodes in a tree</a>.\n  This can be precomputed in O(<b>N</b> * log(<b>N</b>)) time.\n  In a query we have following cases:\n</p>\n<p>\n  <ul>\n    <li>If size[X] &ge; <b>K</b>, then:\n      <ul>\n        <li>If X is the door left to <b>S</b>, then answer is <b>S</b> - <b>K</b>.</li>\n        <li>Otherwise, answer is <b>S</b>+<b>K.</b></li>\n      </ul>\n    </li>\n    <li>Otherwise, find node Y which is the first node on path from X to root such that size[Y] &ge; <b>K</b>.\n      This can be done using binary lifting in O(log<b>N</b>). Now we can find the answer in constant time as follows:\n      <ul>\n        <li>If X &lt; Y, then answer is Y + <b>K</b> - size[leftChild[Y]]</li>\n        <li>Otherwise, answer is Y + 1 - (<b>K</b> - size[rightChild[Y]])</li>\n      </ul>\n    </li>\n  </ul>\n</p>\n\n<p>\n  Each query takes O(log<b>N</b>) time and building the binary tree and preprocessing for binary lifting takes O(<b>N</b> log<b>N</b>) time.\n  Hence, overall complexity of the solution is O(<b>N</b> log<b>N</b> + <b>Q</b> log<b>N</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3uFTz8xbr2o7WEwbAQ4fUBzoaEj3xH3qa768E7xlvdGZTVl6rBLoW52013uTpXrPI14ZGUxEE/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000386d5c","statement":"<h3>Problem</h3>\n<p>\n  Bangles is preparing to go on a tour of her local museum.\n  The museum is made up of <b>N</b> rooms in a row, numbered from 1 to <b>N</b> from left to right.\n  The rooms are connected by <b>N</b>-1 locked doors, each connecting a pair of adjacent rooms.\n  Each door has a <i>difficulty level</i> indicating how difficult it is for Bangles to open the door.\n  No two doors will have the same difficulty level. The door between the i-th room and (i+1)-th room has difficulty level <b>D<sub>i</sub></b>.\n</p><p>\n  Bangles will pick one of the rooms to start in, and visit each of the rooms in the museum one at\n  a time, taking pictures as she goes. She takes a picture in her starting room, then she repeats the following procedure until she has taken a picture in all the rooms:\n  Of the two locked doors available to her, she will open the door with the lower difficulty level and take a picture in the newly\n  unlocked room. If there is only one locked door available to her, then she will unlock that door.\n  Once a door is unlocked, it remains unlocked.\n</p><p>\n  Bangles is not yet sure which room she would like to start in, so she needs you to answer <b>Q</b>\n  queries. For the i-th query, she would like to know: What is the <b>K<sub>i</sub></b>-th room\n  that she will take a picture in if she starts in the <b>S<sub>i</sub></b>-th room?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  The first line of each test case contains the two integers <b>N</b> and <b>Q</b>.\n  The second line contains <b>N</b>-1 integers, describing the locked doors.\n  The i-th integer (starting from 1) is <b>D<sub>i</sub></b>.\n  Then, <b>Q</b> lines follow, describing the queries.\n  The i-th of these lines contains the two integers <b>S<sub>i</sub></b> and <b>K<sub>i</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code>\n  is a list of the answers for the <b>Q</b> queries in order, separated by spaces.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 40 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>D<sub>i</sub></b> &le; 10<sup>5</sup>, for all i.<br/>\n  All <b>D<sub>i</sub></b> are distinct.<br/>\n  1 &le; <b>S<sub>i</sub></b> &le; <b>N</b>, for all i.<br/>\n  1 &le; <b>K<sub>i</sub></b> &le; <b>N</b>, for all i.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  2 &le; <b>N</b> &le; 1000.<br/>\n  1 &le; <b>Q</b> &le; 1000.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  2 &le; <b>N</b> &le; 10<sup>5</sup> and 1 &le; <b>Q</b> &le; 10<sup>5</sup> for at most 20 test cases.<br/>\n  For the remaining cases, 2 &le; <b>N</b> &le; 1000 and 1 &le; <b>Q</b> &le; 1000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3PHC43fFA6PO4Uyg4fjraX4O-QAyqGKJ3FsDNiWoF2i-Bi7945d8BoCWDnx1NfGGl7xy6t-zHGLF9FJ1E39l2wzjl7e8SR_4rd_g/locked_doors_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5 4\n90 30 40 60\n3 4\n3 1\n1 5\n4 3\n10 2\n6 2 4 5 9 30 7 1 8\n6 8\n6 8\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0zDjXnp-Gun9DvF5Dp9uUsq-nFH9JgJWu61eETImUnoPElpTwf0-gk7oTNb-2aGloZyIUiPYKuga7x09fK-Yv2JL6JjoJME8H5YpY/locked_doors_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 5 3 5 2\nCase #2: 8 8\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In sample case #1, there are four queries:\n  <ul>\n    <li>In the first query, Bangle takes pictures in the rooms in the order 3, 2, 4, 5 and 1, so the answer is 5.</li>\n    <li>In the second query, Bangle takes pictures in the rooms in the order 3, 2, 4, 5 and 1, so the answer is 3.</li>\n    <li>In the third query, Bangle takes pictures in the rooms in the order 1, 2, 3, 4 and 5, so the answer is 5.</li>\n    <li>In the fourth query, Bangle takes pictures in the rooms in the order 4, 3, 2, 5, and 1, so the answer is 2.</li>\n  </ul>\n</p>\n<p>\n  In sample case #2, there are two queries:\n  <ul>\n    <li>In the first query, Bangle takes pictures in the rooms in the order 6, 5, 4, 3, 2, 1, 7, 8, 9 and 10, so the answer is 8.</li>\n    <li>The second query is the same as the first, so the answer is also 8.</li>\n  </ul>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":12},{"type":1,"type__str":"VISIBLE","value":26}],"title":"Locked Doors","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  For a given node, the P(visited by either Amadea or Bilva) = 1 - P(not visited by Amadea nor Bilva).\n  <br/>This leads to P(visited by either Amadea or Bilva) = 1 - ((1-P(visited by Amadea)) * (1-P(visited by Bilva)))\n  <br/>i.e. For a given node, note that events of visited-by-Amadea and visited-by-Bilva are\n  <a href=\"https://en.wikipedia.org/wiki/Conditional_probability\">mutually independent events</a>, and hence\n  P(being visited by either Amadea or Bilva) = P(visited by Amadea) + P(visited by Bilva) - (P(visited by Amadea)*P(visited by Bilva))\n</p>\n\n<p>\n  Given the above formula, our goal now is to find out P(visited by Amadea) and P(visited by Bilva) for every node in the tree.\n  We can use DFS in order to do this.\n  <br/>Firstly, let's define 2 variables visits_a[] and visits_b[] where visits_a[i] and visits_b[i] denote\n  the number of visits to node-i across all paths starting from any node in the subtree of node i with skips <b>A</b> and <b>B</b> respectively.\n</p>\n\n<p>\n  Now, the first DFS run would be from node-1 to compute visits_a[]. As we perform this DFS,\n  we can keep a track of the path that has been taken so far, let's say path_taken[]. As we enter a node-i, we add it to\n  path_taken[] and call DFS on it's children. Once we come back to node-i, we remove it from the\n  path_taken[] and increment visit_a[i] by 1. Note that this increment is for the path leading from node-i to itself.\n  Next, we check if there is some node-<b>j</b> which is <b>A</b> skips behind node-i. Using\n  path_taken[], we check to see if such a node is present and increment the visits_a[node-j] by visits_a[i].\n  At the end of this DFS run, we have the total visit count for all nodes with the skip distance of <b>A</b>.\n  Now, dividing visits_a[] by <b>N</b> gives us the P(visited by Amadea) for each node in the tree.\n  Repeat the above process for to compute visits_b[] and obtain P(visited by Bilva) for every node in the tree.\n</p>\n\n<p>\n  With P(visited by Amadea) and P(visited by Bilva) computed for every node in the tree, computing\n  and summing over P(being visited by either Amadea or Bilva) for each node will give us the answer.\n  Since DFS takes linear time in the number of vertices, the time complexity of the solution is O(<b>N</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2R7JmP37N5YD-0G2CGdcIz_pGYRrXGyMRkCzg4-KcvayfMNHNm3s8TTFucfydQd9G9Ia-94Ro/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000386edd","statement":"<h3>Problem</h3>\n<p>\n  Amadea and Bilva are decorating a rooted tree containing <b>N</b> nodes, labelled from 1 to <b>N</b>.\n  Node 1 is the root of the tree, and all other nodes have a node with a numerically smaller label\n  as their parent.\n</p><p>\n  Amadea and Bilva's decorate the tree as follows:\n  <ul>\n    <li>Amadea picks a node of the tree uniformly at random and paints it. Then, she travels up\n    the tree painting every <b>A</b>-th node until she reaches the root.</li>\n    <li>Bilva picks a node of the tree uniformly at random and paints it. Then, she travels up\n    the tree painting every <b>B</b>-th node until she reaches the root.</li>\n  </ul>\n</p><p>\n  The <i>beauty</i> of the tree is equal to the number of nodes painted <i>at least once</i> by either\n  Amadea or Bilva. Note that even if they both paint a node, it only counts once.\n</p><p>\n  What is the <a href=\"https://en.wikipedia.org/wiki/Expected_value\">expected</a> beauty of the tree?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the three integers <b>N</b>, <b>A</b> and <b>B</b>.\n  The second line contains <b>N</b>-1 integers. The i-th integer is the parent of node i+1.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the expected beauty of the tree.\n</p><p>\n  <code>y</code> will be considered correct if it is within an absolute or\n  relative error of 10<sup>-6</sup> of the correct answer.\n  See the <a href=\"https://codejam.withgoogle.com/codejam/resources/faq#real-number-behavior\">FAQ</a> for an explanation of what that means,\n  and what formats of real numbers we accept.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>A</b> &le; <b>N</b>.<br/>\n  1 &le; <b>B</b> &le; <b>N</b>.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  1 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n  For up to 5 cases, 1 &le; <b>N</b> &le; 5 &times; 10<sup>5</sup>.<br/>\n  For all other cases, 1 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2B3yUcvMubHpYFl43-7msv8lenuLw_xLaJmUOCzQXQ3RFrJgwxsEH63y_-_8-B7A8FPNSjswWn9LhRCZTEbl6jK0gtIRBquT3MbPDz/beauty_of_tree_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n8 2 3\n1 1 3 4 4 3 4\n10 3 4\n1 1 1 1 1 1 1 1 1\n4 3 1\n1 2 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1gyVqlDmVBzGutKgvm28upalr7Y28Qc0Azb8NNPF9anpC7aXDvN_lJf-9uo9b7XTaRmcmQOYPVfloQB6pwPPv9HGBCePtYJVmE_HFpCA/beauty_of_tree_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2.65625\nCase #2: 1.9\nCase #3: 2.875\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  The trees for each sample case are shown in the diagram below.\n\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1aDFv-KcwCaQ7hrwrldQHZ4SWPPVxsR9zfh6rc1ajoqUOBLITNkkjk3QnUKNnIQMQzEgdWIctsS6H4/sample.svg\"/>\n\n  A few example colourings for sample case #1 are shown below.\n  <ul>\n    <li>\n      If Amadea picks node 5 and Bilva picks node 8, then together they paint 4 unique nodes:\n        Amadea paints nodes 5 and 3, while\n        Bilva paints nodes 8 and 1.\n    </li>\n    <li>\n      If Amadea picks node 7 and Bilva picks node 6, then together they paint 3 unique nodes:\n        Amadea paints nodes 7 and 1, while\n        Bilva paints nodes 6 and 1 (note that Amadea painted node 1 as well).\n    </li>\n  </ul>\n\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1dBvIjc-xLXvLA10t5pESAaQEobx-ytkEIxM6hXdwUNQfMmIs4kFeSgyodm-jORdvBZJCEcsqbd9WzOQ/sample1.svg\"/>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":13},{"type":1,"type__str":"VISIBLE","value":19}],"title":"Beauty of tree","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  We can check whether the current element is the last element and, if not, if it is\n  greater than the next element in constant time.\n  To check whether i is a record breaking day,\n  we also need to check whether the number of visitors of day\n  i is greater than number of visitors from all the previous days.\n</p>\n<h3>Test Set 1</h3>\n<p>\n  For each element j such that (1 &lt;= j &lt; i),\n  check that the number of visitors on\n  day j are less than number of visitors on day i.\n  Hence, for each day we would compare it with all\n  the previous days and it would take O(<b>N</b>) time.\n  Therefore, for <b>N</b> days, the time complexity of this solution would be O(<b>N</b>^2).\n</p>\n<h3>Test Set 2</h3>\n<p>\n  However that wouldn't be fast enough for Test Set 2, so we need a faster approach.\n  Instead of comparing the number of visitors of\n  day i against <i>all</i> the previous days one by\n  one, we can compare the number of visitors of day i against the\n  <i>greatest number of visitors</i> from all previous days.\n  That reduces our processing time for each day from O(<b>N</b>) to O(1).\n  Therefore, for <b>N</b> days, the time complexity of this solution would be O(<b>N</b>), which is\n  sufficiently fast for both Test Set 1 and Test Set 2.\n</p>\n<h5>Sample Code (C++)</h5>\n<pre><code class=\"language-cpp\">\n<var>int</var> countRecordBreakingDays(vector<<var>int</var>> visitors) {\n  <var>int</var> recordBreaksCount = 0;\n  <var>int</var> previousRecord = 0;\n  for(<var>int</var> i = 0; i < checkpoints.size(); i++) {\n     <var>bool</var> greaterThanPreviousDays = i == 0 || visitors[i] > previousRecord;\n     <var>bool</var> greaterThanFollowingDay = i == checkpoints.size()-1 || visitors[i] > visitors[i+1];\n     if(greaterThanPreviousDays && greaterThanFollowingDay) {\n        recordBreaksCount++;\n     }\n     previousRecord = max(previousRecord, visitors[i]);\n  }\n  return recordBreaksCount;\n}\n</code></pre>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U37qCn4lpyjkTj8yTOT8JIcGb35n-gseJbP7cxit96UcE3UUsUNT-VRp8MCjmoIF9KP3RSTR7w/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000387171","statement":"<h3>Problem</h3>\n<p>\n  Isyana is given the number of visitors at her local theme park on <b>N</b> consecutive days. The\n  number of visitors on the i-th day is <b>V<sub>i</sub></b>. A day is <i>record breaking</i> if it\n  satisfies both of the following conditions:\n  <ul>\n    <li>The number of visitors on the day is strictly larger than the number of visitors on\n        each of the previous days.</li>\n    <li>Either it is the last day, or the number of visitors on the day is strictly larger than\n        the number of visitors on the following day.</li>\n  </ul>\n  Note that the very first day could be a record breaking day!\n</p><p>\n  Please help Isyana find out the number of record breaking days.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the integer <b>N</b>. The second line contains\n  <b>N</b> integers. The i-th integer is <b>V<sub>i</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is the number of record breaking days.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  0 &le; <b>V<sub>i</sub></b> &le; 2 &times; 10<sup>5</sup>.</br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  1 &le; <b>N</b> &le; 1000.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  1 &le; <b>N</b> &le; 2 &times; 10<sup>5</sup> for at most 10 test cases.<br/>\n  For the remaining cases, 1 &le; <b>N</b> &le; 1000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1TcOUqXNZpydcLtg1RZZpnOAz4G7jD8_YW7gJ0GdcP4kX7lAW01AQ31gQxzihCteBwo6oN3PPMWQDJe6HCewD5djEjgWBLS1DF2lwQ/record_breaker_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n8\n1 2 0 7 2 0 2 0\n6\n4 8 15 16 23 42\n9\n3 1 4 1 5 9 2 6 5\n6\n9 9 9 9 9 9\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3GRxVc5X0BWRvEXfD6o50sgGx2MDCOE9wk4DuGmlu4qscNj51KgfOf_rA63aIGG0ef0b99_gOoW7NupqNpRDrWoi7O6puZakZcQQDK-A/record_breaker_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 1\nCase #3: 3\nCase #4: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the bold and underlined numbers in the following represent the record breaking\n  days:\n  1 <b><u>2</u></b> 0 <b><u>7</u></b> 2 0 2 0.\n</p><p>\n  In Sample Case #2, only the last day is a record breaking day.\n</p><p>\n  In Sample Case #3, the first, the third, and the sixth days are record breaking days.\n</p><p>\n  In Sample Case #4, there is no record breaking day.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":4},{"type":1,"type__str":"VISIBLE","value":8}],"title":"Record Breaker","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\nTest Set 1\n</h3>\n\n<p>\n  For the small test set, one can generate all possible conversions recursively and select the one\n  with the smallest number of rule violations as the answer. Since each note can be converted to\n  four possible notes in the alien scale, this results into 4<sup><b>K</b></sup> combinations to be\n  tested and O(4<sup><b>K</b></sup>) time complexity.\n</p>\n\n<h3>\nTest Set 2\n</h3>\n\n<h4>\nDynamic Programming Solution\n</h4>\n\n<p>\n  Let DP[i, j] be the minimum number of rule violations required to convert the first i notes\n  <b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>, ..., <b>A<sub>i</sub></b> such that the i-th note <b>A<sub>i</sub></b> is converted to\n  note j of the alien piano (1 &le; j &le; 4). Then the answer is the minimum DP[<b>K</b>, j] over\n  all j, 1 &le; j &le; 4.\n</p>\n\n<p>\n  The table DP[i, j] can be computed using dynamic programming as follows.<br/>\n  (1) DP[1, j] = 0 for all j.<br/>\n  (2) For i > 1, DP[i, j] = min{ DP[i - 1, j'] + P(i, j', j) | 1 &le; j'\n  &le; 4 }. Here P(i, j', j) is a binary penalty term accounting for a rule violation between the\n  notes <b>A<sub>i-1</sub></b> and <b>A<sub>i</sub></b>. For example, if <b>A<sub>i-1</sub></b> > <b>A<sub>i</sub></b>, then\n  P(i, j', j) = 1 whenever j' &le; j and P(i, j', j) = 0 otherwise.\n</p>\n\n<p>\n  Since each entry of the table is calculated using a constant number of operations, the overall\n  time complexity of the algorithm is O(<b>K</b>), which is okay to pass the large test set.\n</p>\n\n<h4>\nGreedy Solution\n</h4>\n\n<p>\n  Let us say that a sequence of pitches is <i>playable</i> if it can be converted to the alien piano\n  notes without violating any rules. Our goal here is to split the given sequence of pitches into as\n  few playable fragments as possible.\n</p>\n<p>\n  We can take the longest playable prefix of the sequence as the first fragment of the split.\n  In this way, the remainder of the sequence is as short as possible, and therefore requires\n  potentially fewer rule violations.\n</p>\n<p>\n  Now let us characterise the playable sequences. Note that repeated notes of the same pitch do not\n  affect the playability of the sequence, therefore, without loss of generality, suppose that any\n  two consecutive notes are at a different pitch. Let us say that two consecutive notes form an\n  <i>upward step</i> if the second note has a higher pitch than the first. Otherwise, we call it a\n  <i>downward step</i>.\n</p>\n<p>\n  Clearly, a sequence of notes is not playable if it contains more than three consecutive upward or\n  downward steps, as we would run out of the alien scale. Otherwise, the sequence is playable and\n  we can convert it using this simple strategy (assuming the note names A, B, C, and D of the alien\n  piano from the lowest to the highest note):<br/>\n  (1) If the first step is upward, convert the first note to A.<br/>\n  (2) If the first step is downward, convert the first note to D.<br/>\n  (3) If three consecutive notes form an upward step followed by a downward step, convert the\n    second note to D.<br/>\n  (4) If three consecutive notes form a downward step followed by an upward step, convert the\n    second note to A.<br/>\n  (5) In all other cases, convert a note one step higher or lower than the note before depending\n    on whether they form an upward or downward step.<br/>\n  Since any maximal sequence of upward steps starts at A and has no more than three steps (and\n  similarly for any maximal sequence of downward steps), we will never leave the alien scale.\n</p>\n<p>\n  The following diagram illustrates the process of splitting the sequence (1, 8, 9, 7, 6, 5, 4, 3,\n  2, 1, 3, 2, 1, 3, 5, 7) into two playable fragments. Since the subsequence (9, 7, 6, 5, 4)\n  consists of four downward steps, the sequence needs to be split between notes 5 and 4.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2Q_TS_GASwvZadO3jvjYd2fMH6D-y74bzug156jL6Os1DlTKGcj1nHkoLxv0y3sfU41QN22fqmAA/song.png\" height=\"100%\" />\n<p>\n  According to the analysis above, a single pass through the given sequence of notes maintaining\n  the current number of consecutive upward and downward steps results in an O(<b>K</b>) solution,\n  where <b>K</b> is the number of notes in the sequence. As soon as the number of upward or downward\n  steps exceeds 3, we have to split the sequence by violating the rules and start a new fragment.\n  A Python code snippet is included below for clarity.\n</p>\n<pre>\ndef solve():\n  k = input()\n  a = map(int, raw_input().split())\n  # Filter out repeated notes.\n  a = [a[i] for i in xrange(0, k) if i == 0 or a[i - 1] != a[i]]\n  upCount = 0\n  downCount = 0\n  violations = 0\n  for i in xrange(1, len(a)):\n    if a[i] > a[i - 1]:\n      upCount += 1\n      downCount = 0\n    else:\n      downCount += 1\n      upCount = 0\n    if upCount > 3 or downCount > 3:\n      violations += 1\n      upCount = downCount = 0\n  return violations\n</pre>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3O2OOHRG9HuHCq7EGDCnEENECq-Y5aa-w-doPLm3nmC9nJejAYkRjv_jNoPVtnrEI2I63v-DU/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000387174","statement":"<h3>Problem</h3>\n<p>\n  An alien has just landed on Earth, and really likes our music. Lucky for us.\n</p><p>\n  The alien would like to bring home its favorite human songs, but it only has a very strange instrument to do it with: a piano with just 4 keys of different pitches.\n</p><p>\n  The alien converts a song by writing it down as a series of keys on the alien piano. Obviously, this piano will not be able to convert our songs completely, as our songs tend to have many more than 4 pitches.\n</p><p>\n  The alien will settle for converting our songs with the following rules instead:\n  <ul>\n    <li>The first note in our song can be converted to any key on the alien piano.</li>\n    <li> For every note after,\n    <ul>\n      <li>if its pitch is higher than the previous note, it should be converted into a higher-pitched key than the previous note's conversion; </li>\n      <li>if lower, it should be converted into a lower-pitched key than the previous note's conversion;</li>\n      <li>if exactly identical, it should be converted into the same key as the previous note's conversion.</li>\n    </ul></li>\n  </ul>\n  Note: two notes with the same pitch do not need to be converted into the same key if they are not adjacent.\n</p><p>\nWhat the alien wants to know is: how often will it have to break its rules when converting a particular song? <br>\n</p><p>\n  To elaborate, let us describe one of our songs as having <b> K </b> notes. The first note we describe as \"note 1\", the second note \"note 2\", and the last note \"note <b>K</b>.\" <br>\n  So note 2 comes immediately after note 1. <br>\n  Now if note 2 is lower than note 1 in our version of the song, yet converted to an equally-pitched or lower-pitched key (relative to note 2's conversion) in the alien's version of the song, then we consider that a single rule break. <br>\n  For each test case, return the minimum amount of times the alien must necessarily break one of its rules in converting that song.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. <br>\n  Each test case consists of two lines. <br>\n  The first line consists of a single integer, <b>K</b>. <br>\n  The second line consists of <b>K</b> space-separated integers, <b>A<sub>1</sub></b>, <b>A<sub>2</sub></b> ... <b>A<sub>K</sub></b>, where <b>A<sub>i</sub></b> refers to the pitch of the i-th note for this test case.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is the minimum number of times that particular test case will require the alien to break its own rules during the conversion process.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n1 &le; <b>T</b> &le; 100. <br/>\n1 &le; <b>A<sub>i</sub></b> &le; 10<sup>6</sup>. <br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n1 &le; <b>K</b> &le; 10. <br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n1 &le; <b>K</b> &le; 10<sup>4</sup>. <br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3wYgYj1FHN5U8njzPgqJW7mPCCX_9-TypMMdjj_JmXwVAFhngEwcySsiWdFEezQEauRuYQOuRmSxSQMnbm1d9Fn-7dqafttqPe/alien_piano_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5\n1 5 100 500 1\n8\n2 3 4 5 6 7 8 9\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Xlw3oaSOXblNTpOQN1fKnH9HV6fOERIlcuPsP8wEOHTf-DV7imKo_T6LRC5CORHBKy0WnYxtLOkYgG7KZtVt2gB7O4yZSqyWnxA/alien_piano_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0\nCase #2: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  We will use the notation A, B, C, D for the alien piano keys where A is the lowest note, and D is the highest.\n  In sample case #1, the alien can simply map our song into the following sequence: <code>A B C D C</code> and this correctly reflects all the following:\n  <ul>\n    <li>our first note with pitch 1 maps to A,</li>\n    <li>our second note with pitch 5 maps to its key B. 5 &gt; 1, and B is a higher key than A,</li>\n    <li>our third note with pitch 100 maps to its key C. 100 &gt; 5, and C is a higher key than B,</li>\n    <li>our fourth note with pitch 500 maps to its key D. 500 &gt; 100, and D is a higher key than C,</li>\n    <li>our fifth note with pitch 1 maps to its key C. 1 &lt; 500, and C is a lower key than D.</li>\n  </ul>\n  So none of the rules are broken.\n  Note: <code>A B C D C</code> is not the only way of conversion. <code>A B C D A</code> or <code>A B C D B</code> are also eligible conversions.\n</p><p>\n  In sample case #2, the only conversion sequence that provides the minimal result of 1 rule broken is: <code>A B C D A B C D</code>.\n  Notably, the rule break comes from the fact that our 4th note with pitch 4 is lower than our 5th note with pitch 5, but A is a lower key than D.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":1,"type__str":"VISIBLE","value":11}],"title":"Alien Piano","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"000000000019ff08","type":1,"type__str":"SPECTATOR"},"title":"Round D 2020"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
