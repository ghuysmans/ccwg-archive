{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1521360000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000050edf","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  This Kickstart round began with <i>Even Digits</i>, which was a simple adhoc problem.\n  Then came <i>Lucky Dip</i>,which could be solved with some knowledge of basic probability theory.\n  Finally, we had <i>Scrambled Words</i>, whose large dataset involved an elegant observation on the number of distinct lengths of words possible given a fixed total length.\n</p><p>\n  Thanks to everyone who participated!\n</p>\n<hr>\n<p>\n  <b>Cast</b>\n</p><p>\n  Problem A (Even Digits): Written and prepared by Jonathan Irvin Gunawan.\n</p><p>\n  Problem B (Lucky Dip): Written and prepared by Celestine Lau.\n</p><p>\n  Problem C (Scrambled Words): Written by Karthik Sundara Raghavan and Akashdeep Nain. Prepared by Lalit Kundu.\n</p><p>\n  Solutions and other problem preparation and review by Ian Tullis, Lalit Kundu, Satyaki Upadhyay, Jonathan Irvin Gunawan, Akashdeep Nain, Shi-Jie Khor, Trung Thanh Nguyen and Hyeonjong Ryu.\n</p>\n</p>\n<p>\nAnalysis authors:\n</p>\n<ul>\n  <li>Even Digits: Jonathan Irvin Gunawan</li>\n  <li>Lucky Dip: Shi-Jie Khor</li>\n  <li>Scrambled Words: Satyaki Upadhyay</li>\n</ul>\n","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1521349200000,"tasks":[{"analysis":"<h2>Lucky Dip: Analysis</h2>\n\nGiven the array of <b>N</b> integers, define E[k] as the optimal expected value\nof the item drawn given k redips.\n\n<h3>Small dataset</h3>\n<p>\n  There are two cases to consider for the small dataset: <b>K</b> = 0 and\n  <b>K</b> = 1.\n</p>\n<p>\n  When <b>K</b> = 0, we must accept the first item which we draw. Since the\n  chance of obtaining each item is the same, the expected value is the average\n  value of all the items in the bag.\n</p>\n<p>\n  When <b>K</b> = 1, we note that if we redip, the expected value that we draw\n  is going to be the same as the case when <b>K</b> = 0. Thus, the best strategy\n  is to keep the item if the value of the item is greater than the average value\n  of the items in the bag, or return the item otherwise.\n</p>\n<p>\n  Thus, we have the following equations to compute the values for E[0] and E[1]:\n</p>\n<pre>\n  E[0] = &Sigma; <b>V<sub>i</sub></b> / <b>N</b>\n  E[1] = &Sigma; max(<b>V<sub>i</sub></b>, E[0]) / <b>N</b>\n</pre>\n<p>\n  The values for E[0] and E[1] can be computed in O(<b>N</b>) time.\n</p>\n<h3>Large dataset</h3>\n<p>\n  When <b>K</b> &gt; 1, we may proceed with a similar recursion as in the case when\n  <b>K</b> = 1. Given k redips, we should keep the item if the value of the item\n  is greater than the expected value for k-1 redips, and we should return the\n  item otherwise. This gives rise to the following recursion:\n</p>\n<pre>\n  E[k] = &Sigma; max(<b>V<sub>i</sub></b>, E[k-1]) / <b>N</b>\n</pre>\n<p>\n  Computing E[<b>K</b>] using the above approach requires us to compute E[0],\n  E[1], ..., E[<b>K</b> - 1], each of which requires O(<b>N</b>) time. Thus,\n  the total runtime amounts to O(<b>N</b><b>K</b>), which is fast enough to pass\n  the large dataset. However, it is possible to derive an even faster solution.\n</p>\n<p>\n  Suppose we have already computed the value for E[k - 1]. If our array of\n  <b>V<sub>i</sub></b>s is sorted, we can use a binary search to quickly\n  determine the quantity of items which have value less than or equal to E[k - 1]. Let us\n  denote this quantity with x<sub>k</sub>. Note that the probability of drawing\n  one of these x<sub>k</sub> items is x<sub>k</sub> / <b>N</b>. This corresponds\n  to the case when we return the item and redip.\n</p>\n<p>\n  On the other hand, there is an equal likelihood for drawing each of the\n  remaining <b>N</b> - x<sub>k</sub> items. This gives us the following\n  equation for E[k]:\n</p>\n<pre>\n  E[k] = x<sub>k</sub> * E[k - 1] / <b>N</b> + &Sigma;<sub>i&gt;x<sub>k</sub></sub> <b>V<sub>i</sub></b> / <b>N</b>\n</pre>\n<p>\n  For fast computation, we precompute by sorting the array of\n  <b>V<sub>i</sub></b>s in increasing order, and computing the suffix sums for the\n  array. We will then compute E[0], E[1], ..., E[<b>K</b>] accordingly, in which\n  each step takes O(log <b>N</b>) time. The total runtime is then\n  O(<b>N</b> + <b>N</b> log <b>N</b> + <b>K</b> log <b>N</b>)\n  = O((<b>N + K</b>) log <b>N</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3q0h44E_U13JvN6hCvgtLBjMvbikRFmQWxdjxJBOGOydkVzXIFG6URAF-AnUUOzTtPd3hemQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000050e1d","statement":"<h2>Problem</h2>\n\n<p>\n  You are participating in the Grand Kickstart Lucky Dip with many fantastic and\n  amazing prizes (and some not so good ones)!\n</p>\n\n<p>\n  In this Lucky Dip, there is a bag with <b>N</b> items. The i-th item in the\n  bag has value <b>V<sub>i</sub></b>. You will put your hand into the bag and\n  draw one item at random; all items in the bag have an equal probability of\n  being chosen. The organizers want contestants to feel that they have some\n  element of choice, so after you draw an item, you can either keep it, or\n  \"redip\" by returning it to the bag and drawing again. (Note that the returned\n  item is now just as likely to be chosen as any of the other items in the bag.)\n  You may only redip a maximum of <b>K</b> times. If you use <b>K</b> redips,\n  you must keep the item that you draw on your (<b>K</b> + 1)-th draw.\n</p>\n\n<p>\n  If you play optimally to maximize the value of the item you will end the game\n  with, what is the <a href=\"https://en.wikipedia.org/wiki/Expected_value\">\n  expected value</a> of that item?\n</p>\n\n<h3>Input</h3>\n\n<p>\n  The input starts with one line containing one integer <b>T</b>: the number of\n  test cases. <b>T</b> test cases follow.\n</p>\n\n<p>\n  Each test case consists of two lines. The first line consists of two integers\n  <b>N</b> and <b>K</b>: the number of items in the bag, and the maximum number\n  of times you may redip. The second line consists of <b>N</b> integers\n  <b>V<sub>i</sub></b>, each representing the value of the i-th item.\n</p>\n\n<h3>Output</h3>\n\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>,\n  where <code>x</code> is the test case number (starting from 1) and\n  <code>y</code> is the expected value described above. Your answer will be\n  considered correct if it is within an absolute or relative error of\n  10<sup>-6</sup> of the correct answer. See the\n  <a href=\"https://codingcompetitions.withgoogle.com/kickstart/faq\" target=\"_blank\">FAQ</a>\n  for an explanation of what that means, and what formats of real numbers we\n  accept.\n</p>\n\n<h3>Limits</h3>\nMemory limit: 1GB.<br/>\n1 &le; <b>T</b> &le; 100.<br>\n1 &le; <b>V<sub>i</sub></b> &le; 10<sup>9</sup>.<br>\n1 &le; <b>N</b> &le; 2 * 10<sup>4</sup>.<br>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\nTime limit: 20 seconds.<br>\n0 &le; <b>K</b> &le; 1.<br>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\nTime limit: 60 seconds.<br>\n0 &le; <b>K</b> &le; 5 * 10<sup>4</sup>.<br>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3iMLj-g9T2OceUT_mHH7z_dJu9NGAkgOC2Xsc1U6oWkR-Yfh5E4XvW8AUnOYLadbhTm7U0O4Yua6ub8KHFD1KHxcQHj1f8/lucky_dip_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">5\n4 0\n1 2 3 4\n3 1\n1 10 1\n3 15\n80000 80000 80000\n1 1\n10\n5 3\n16 11 7 4 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1xB9iyDRfdQM9nisXeYn7hjeeIT--LND4A6_PDgUwulLBUVy1PO6Lp5gRb5nC-jR6t4bIJ5pkFXKGF4An_GFbjGapfVUyB7A/lucky_dip_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2.500000\nCase #2: 6.000000\nCase #3: 80000.000000\nCase #4: 10.000000\nCase #5: 12.358400\n\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, you cannot redip, so the expected value is just the mean\n  of the items in the bag which is (1 + 2 + 3 + 4) / 4 = 2.5.\n</p>\n<p>\n  In Sample Case #2, the best strategy is to keep the item of value 10 if you\n  get it, and redip otherwise. The chance of getting that item (on either the\n  first or second draw) is 1 - (2/3)<sup>2</sup> = 5/9, hence the expected value\n  is (5/9 * 10) + (4/9 * 1) = 6.\n</p>\n<p>\n  In Sample Case #3, since all the items have the same value, it does not matter\n  how many times you redip and hence the expected value is 80000.\n</p>\n<p>\n  Note that cases #3 and #5 would not appear in the Small dataset.\n</p>\n</div></div>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":19}],"title":"Lucky Dip","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Scrambled Words: Analysis</h2>\n<p>\n  Let us first discuss how to check if two words are equivalent. A word is equivalent to another if\n  their corresponding starting and ending letters are same and the sets of letters in between are\n  either the same or permutations of each other.\n  To check if two words are equivalent, after verifying that their starting and ending letters are\n  equal, we populate a frequency array of the characters in each string and check if the two\n  frequency arrays are same or not. Since the strings in this problem consist of only lowercase\n  English letters, the array only needs to hold 26 integers (the counts of those letters'\n  frequencies), and we can compare two such arrays very quickly.\n  arrays will be very fast. An example of this would be the frequency away [1, 1, 2, 0, ... 0]\n  for the string <code>bcca</code>.\n</p>\n<h3>Small dataset</h3>\n<p>\n  Given the relatively small caps on <b>L</b> and <b>N</b> in the Small dataset, one solution that\n  may come to mind is as follows: For each word in the dictionary,\n  iterate over the Professor's text and check for substring match at each position in the text\n  using the method of frequency arrays described above. But we should think carefully about how we\n  check substrings against each other. Suppose that the length of our dictionary word is W. If we do\n  it naively, for each position in the text (assume the length of the dict word\n  is W), we check the substring of length W starting at that position by iterating over it, which is\n  suboptimal. We should maintain a running frequency array. Suppose the frequency array is populated\n  for the substring starting at position <i>i</i>. When we move our substring window one character\n  to the right,\n  we need to decrement the frequency of text[i] and increment the frequency of text[i+l]. This will\n  give us the frequency array of the substring starting at position <i>i+1</i>.\n  These two operations take constant time.\n</p>\n<p>\n  Since we iterate over the whole text for every dictionary word and there are <b>L</b> words and\n  the length of the text is <b>N</b>, the total time complexity of this\n  solution will be O(<b>N</b><b>L</b>).\n</p>\n<h3>Large dataset</h3>\n<p>\n  The above approach will not work in the large dataset because there are too many words in the\n  dictionary.\n</p>\n<p>\n  The solution for this dataset hinges on the observation that if the total length of the words in\n  the dictionary is bounded by <b>M</b>, the maximum possible number of distinct word lengths is\n  atmost <b><span>&#8730;</span>M</b>. This can be seen as follows. Let X be the bound on the number\n  of distinct lengths; then X*(X+1)/2 <span>&#8804;</span> <b>M</b>.\n</p>\n<p>\n  The above solution is now modified by iterating over only those lengths which are present in the\n  dictionary, and for each such length, we perform the same process as above, checking against only\n  the dictionary words with that length.. Let <b>M</b> be\n  the upper bound on the dictionary which is given as 10<sup>5</sup>.\n  Since there are at most <b><span>&#8730;</span>M</b> distinct lengths, the overall complexity of\n  the solution is O(<b>N</b> <b><span>&#8730;</span>M</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1eYEKUEfKJTpbUfEDwDBfDi3TkoTiu49_YaBscF-WduxbQRgSpAO0GCZtLCWUe3SkWOZZpfQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000051004","statement":"<h3>Problem</h3>\n<p>\n  Professor Scrmable noticed spelling mistakes in a research paper she was reviewing, but she had no\n  difficulty in reading or understanding the words. Upon doing some research, she found an\n  interesting <a href=\"http://www.mrc-cbu.cam.ac.uk/people/matt.davis/Cmabrigde/\">article</a> as described below:\n</p>\n\n<p>\n  According to a study at an English University, it doesn't matter in what order the letters in a\n  word are, the only important thing is that the first and last letter be at the correct place. The\n  rest can be a total mess and you can still read it without a problem. This is because the human\n  mind does not read every letter by itself but the word as a whole.\n</p>\n\n<p>\n  Or rather ...\n</p>\n\n<p>\n  Aoccdrnig to a study at an Elingsh uinervtisy, it deosn't mttaer in waht oredr the ltteers in a\n  wrod are, the olny iprmoetnt tihng is taht the frist and lsat ltteer be at the corecrt pclae. The\n  rset can be a toatl mses and you can sitll raed it wouthit a porbelm. Tihs is bcuseae the huamn\n  mnid deos not raed ervey lteter by istlef, but the wrod as a wlohe.\n</p>\n\n<p>\n  Professor Scrmable wants to explore this concept further and starts compiling different sentences\n  containing similarly scrambled words to send to a popular publication. Unfortunately, the space\n  key on the professor's keyboard is not working, so she has produced one long string of characters.\n  She has asked you to determine how many of the words in her dictionary appear (at least once) as\n  substrings in the long string of characters, either in their original or scrambled forms.\n  (A scrambled form consists of the same set of letters with the first and last letters in the same\n  places, and the others in any order.)\n</p>\n<p>\n  Note that a dictionary word can appear multiple times in the string (though it should be counted\n  only once since we only need to know whether it shows up at least once). For example, if we had the\n  word <code>this</code> in the dictionary, the possible valid words which would be counted are\n  <code>this</code> (original version) and <code>tihs</code> (scrambled version), whereas\n  <code>tsih</code>, <code>siht</code> and other variations are not valid since they do not start\n  with <code>t</code> and end with <code>s</code>. Also, <code>tis</code>, <code>tiss</code>, and\n  <code>thiss</code> are not scrambled forms, because they are not reorderings of the original set of letters.\n</p>\n<p>\n  Since the professor is extremely busy, she gives this task to you, her favorite and most trusted\n  research assistant. Given a dictionary, can you count the number of words in the dictionary\n  that appear as a substring in the professor's string at least once, in either their scrambled or\n  original forms.\n</p>\n\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each testcase contains three lines. The first line contains an integer <b>L</b>. The second line\n  contains a list of <b>L</b> words made of lowercase English letters; these make up the dictionary.\n  The third line contains two lowercase English letters <b>S<sub>1</sub></b> and <b>S<sub>2</sub></b>, and five integers <b>N</b>, <b>A</b>,\n  <b>B</b>, <b>C</b> and <b>D</b>.\n  <b>S<sub>1</sub></b> and <b>S<sub>2</sub></b> are the first two characters of the professor's string <b>S</b>,\n  <b>N</b> is the length of <b>S</b>, and the other four integers are parameters that you should use to generate the\n  characters of <b>S</b>, as follows:\n</p>\n<p>\n  First we define ord(<code>c</code>) as the decimal value of a character <code>c</code> and\n  char(n) as the character value of a decimal n. For example,\n  ord(<code>'a'</code>) = 97 and char(97) = <code>'a'</code>. You can refer to\n  <a href=\"https://en.wikipedia.org/wiki/ASCII#Printable_characters\">ASCII table</a>\n  for other conversions.\n  <br/>\n  <br/>\nNow, define x<sub>1</sub> = ord(<b>S<sub>1</sub></b>), x<sub>2</sub> = ord(<b>S<sub>2</sub></b>). Then,\n  use the recurrence below to generate x<sub>i</sub> for i = 3 to <b>N</b>:\n<ul>\n  <li>x<sub>i</sub> = ( <b>A</b> * x<sub>i-1</sub> + <b>B</b> * x<sub>i-2</sub> + <b>C</b> ) modulo <b>D</b>.</li>\n</ul>\n  We define <b>S<sub>i</sub></b> = char(97 + ( x<sub>i</sub> modulo 26 )), for all i = 3 to <b>N</b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is the number of words from the\n  dictionary that appear (in their original or scrambled forms, as defined above) as substrings of the given string.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 20.<br/>\n  Memory limit: 1 GB.<br/>\n  No two words in the dictionary are the same.<br/>\n  Each word in the dictionary is between 2 and 10<sup>5</sup> letters long, inclusive.<br/>\n  The sum of lengths of all words in the dictionary does not exceed 10<sup>5</sup>.<br/>\n  <b>S<sub>1</sub></b> and <b>S<sub>2</sub></b> are lowercase English letters.<br/>\n  0 &le; <b>A</b> &le; 10<sup>9</sup>.<br/>\n  0 &le; <b>B</b> &le; 10<sup>9</sup>.<br/>\n  0 &le; <b>C</b> &le; 10<sup>9</sup>.<br/>\n  1 &le; <b>D</b> &le; 10<sup>9</sup>.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  Time limit: 20 seconds.<br/>\n  1 &le; <b>L</b> &le; 1000.<br/>\n  2 &le; <b>N</b> &le; 1000.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  Time limit: 150 seconds.<br/>\n  1 &le; <b>L</b> &le; 20000.<br/>\n  2 &le; <b>N</b> &le; 10<sup>6</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0h58F_JXHyKJq9-hcmEX1HksGpfKqz0aqLCk0-uWYe1AKHqwrv6a1szrYtZjQxqKfVMoc66nOQYFmItVctwCq-x3ojg0EoiRrIYAzU/scrambled_words_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">1\n5\naxpaj apxaj dnrbt pjxdn abd\na a 50 1 1 1 30\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1BkqY84NIOIGqLLX3rdc0o5Q01FJinw0jruEgIXjLH_ApnBWQJjK71DTTNm3euE8gK7WyVKDjqhEc05PiFP9YQeyZL_zKg7dsO5R8Exg/scrambled_words_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, using the generation method, the generated string <b>S</b> is <code>aapxjdnrbtvldptfzbbdbbzxtndrvjblnzjfpvhdhhpxjdnrbt</code>.\n  Scrambled or original occurences of dictionary words are highlighted as follows:<br/>\n  <ul>\n    <li><code>axpaj</code> occurs in its scrambled form as <code><u>aapxj</u>dnrbtvldptfzbbdbbzxtndrvjblnzjfpvhdhhpxjdnrbt</code>.</li>\n    <li><code>apxaj</code> occurs in its scrambled form as <code><u>aapxj</u>dnrbtvldptfzbbdbbzxtndrvjblnzjfpvhdhhpxjdnrbt</code>.\n    Note that even though <code>apxaj</code> is the scrambled form of another dictionary word <code>axpaj</code>,\n      both should be counted.</li>\n    <li><code>dnrbt</code> occurs twice in its original form as <code>aapxj<u>dnrbt</u>vldptfzbbdbbzxtndrvjblnzjfpvhdhhpxj<u>dnrbt</u></code>,\n    though it should be counted only once.</li>\n    <li><code>pjxdn</code> occurs in its scrambled form as <code>aa<u>pxjdn</u>rbtvldptfzbbdbbzxtndrvjblnzjfpvhdhh<u>pxjdn</u>rbt</code>.\n    Note this occurence overlaps with occurence of another dictionary word, but still they're counted independently.</li>\n    <li><code>abd</code> doesn't occur at all.</li>\n  </ul>\n</p>\n<p>\n  <b>Note</b>: We do not recommend using interpreted/slower languages for the Large dataset of this problem.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":18},{"type":2,"type__str":"HIDDEN","value":30}],"title":"Scrambled Words","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Even Digits: Analysis</h2>\n<p>\n  To make our discussion easier, let us define a <b>beautiful</b> integer as an\n  integer which has only even digits in its decimal representation.\n</p>\n<h3>Small dataset</h3>\n<p>\n  One useful observation for solving this problem is that we either only want to\n  press the minus button or only want to press the plus button. It is useless to\n  have both types in the same sequence, since they cancel each other out.\n</p><p>\n  Therefore, we want to either keep pressing the minus button, or keep pressing\n  the plus button, until we have a beautiful integer. Let M be the minimum\n  number of minus button presses before reaching a beautiful integer, and let P\n  be the minimum number of plus button presses before reaching a beautiful\n  integer. Then the answer is the smaller of M and P.\n</p>\n<p>\n  Note that for this problem, the answer for an input <b>N</b> is bounded above\n  by <b>N</b>, since we can just press the minus button <b>N</b> times to reach\n  the beautiful integer <code>0</code>. Therefore, since\n  <b>N</b> &le; 10<sup>5</sup>, we can solve the Small dataset using complete\n  search.\n</p>\n<p>\n  We can loop over a value i in the range [0, N], and, for each i, check whether\n  <b>N</b>+i or <b>N</b>-i is a beautiful integer. If that is the case, then we\n  break the loop and return i as the answer.\n</p>\n<h3>Large dataset</h3>\n<p>\n  Iterating over the range [0, <b>N</b>] would be too slow for this dataset.\n  Therefore, we need another approach.\n</p>\n<p>\n  To find the value of M, we must find the largest beautiful integer that is\n  still no greater than <b>N</b>. Let us call this integer X. Similarly, to\n  find the value of P, we can find the smallest beautiful integer that is still\n  no smaller than <b>N</b>. Let us call this integer Y.\n</p>\n<p>\n  We can find X by decreasing the first odd digit in <b>N</b> by one and then\n  replacing all digits to the right of that odd digit with the largest even\n  digit (i.e. <code>8</code>). For example, if <b>N</b>=<code>4436271</code>,\n  then X=<code>4428888</code>. This can create a leading 0, which we can simply\n  drop the leading 0 in that case. If there are no odd digits in <b>N</b>, then\n  <b>N</b> is a beautiful integer, thus X=<b>N</b>.\n</p>\n<p>\n  By constructing X this way, it is guaranteed that there will be no beautiful\n  integer between X and <b>N</b>, since the next beautiful integer after X would\n  be larger than <b>N</b> at the first odd digit. For the example above, the\n  next beautiful integer after X is <code>4440000</code>, which is larger than\n  <b>N</b>.\n</p>\n<p>\n  Similarly, we can find Y by increasing the first odd digit in <b>N</b> by one\n  and replacing all digits to the right of that odd digit with the smallest even\n  digit (i.e. <code>0</code>). If there are no odd digits in <b>N</b>, then\n  <b>N</b> is a beautiful integer, thus Y=<b>N</b>. However, when finding Y, we\n  must watch out for some tricky cases. If the first odd digit is\n  <code>9</code>, then we must replace the digit directly to the left of that\n  odd digit as well with the next even digit. For example, if\n  <b>N</b>=<code>86912</code>, then Y=<code>88000</code>.\n</p>\n<p>\n  Another tricky case is when the digit directly to the left of the first odd\n  digit is <code>8</code>. In this case, we must replace the digit directly to\n  the left of that <code>8</code> digit as well, and keep doing this until we\n  have a non-<code>8</code> digit. For example, if\n  <b>N</b>=<code>6488962</code>, then Y=<code>6600000</code>. Finally, if all\n  digits to the left continue to be <code>8</code> until we reach the leftmost\n  digit, or if the first digit of <b>N</b> is a 9, then we must add the smallest\n  non-zero even digit (i.e. <code>2</code>) as a new digit on the left. For\n  example, if <b>N</b>=<code>88892</code> or <b>N</b>=<code>91112</code>, then\n  Y=<code>200000</code>.\n</p>\n<p>\n  Once we know X and Y, we also know M and P, and we can take the smallest of\n  those values, just as we did before.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1AwEU9tswEcnph5So-f0waahzqlAxVPd6dOQYVJ0tzBHMZOnrkNp3FiGR9C82ZAZENB9ZeGw/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000000510ed","statement":"<h3>Problem</h3>\n<p>\n  Supervin has a unique calculator. This calculator only has a display, a plus\n  button, and a minus button. Currently, the integer <b>N</b> is displayed on\n  the calculator display.\n</p><p>\n  Pressing the plus button increases the current number displayed on the\n  calculator display by 1. Similarly, pressing the minus button decreases the\n  current number displayed on the calculator display by 1. The calculator does\n  not display any leading zeros. For example, if <code>100</code> is displayed\n  on the calculator display, pressing the minus button once will cause the\n  calculator to display <code>99</code>.\n</p><p>\n  Supervin does not like odd digits, because he thinks they are \"odd\".\n  Therefore, he wants to display an integer with only even digits in its decimal\n  representation, using only the calculator buttons. Since the calculator is a\n  bit old and the buttons are hard to press, he wants to use a minimal number of\n  button presses.\n</p><p>\n  Please help Supervin to determine the minimum number of button presses to make\n  the calculator display an integer with no odd digits.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow. Each begins with one line containing an integer\n  <b>N</b>: the integer initially displayed on Supervin's calculator.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>y</code>\n  is the minimum number of button presses, as described above.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  1 &le; <b>N</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  1 &le; <b>N</b> &le; 10<sup>16</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0mAFsLMMKvlmQph6I5QyYV1VNs1ut7ArCUpWHSYtuTCqsiJuwgtEoYqbzes6w7rKNN3bYqjT4p9EPSqFufEB9Mcjw_p6NDDaM/even_digits_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n42\n11\n1\n2018\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1IqjwF3iHL7NCYA6LUdzxLs5lmll0prK5U7DEvfu5ldqKCeVXc-n9MXAdGL8ioPYuRXQO8hkfjHR9vAn4bEHKS5vaKDnDrH3Ke/even_digits_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0\nCase #2: 3\nCase #3: 1\nCase #4: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the integer initially displayed on the calculator has no\n  odd digits, so no button presses are needed.\n</p><p>\n  In Sample Case #2, pressing the minus button three times will cause the\n  calculator to display <code>8</code>. There is no way to satisfy the\n  requirements with fewer than three button presses.\n</p><p>\n  In Sample Case #3, either pressing the minus button once (causing the\n  calculator to display <code>0</code>) or pressing the plus button once will\n  cause the calculator to display an integer without an odd digit.\n</p><p>\n  In Sample Case #4, pressing the plus button twice will cause the calculator\n  to display <code>2020</code>. There is no way to satisfy the requirements with\n  fewer than two button presses.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":8},{"type":2,"type__str":"HIDDEN","value":15}],"title":"Even Digits","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000050edf","type":1,"type__str":"SPECTATOR"},"title":"Round A"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
