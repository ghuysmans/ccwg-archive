{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1616871600000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"000000000043580a","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\r\n  Code Jam finally turned 18 this year &mdash; it's now eligible for the World Finals!\r\n  To celebrate, the Qualification Round jammed out for 3 hours longer than usual, for\r\n  the first-ever 30-hour round.\r\n</p><p>\r\n  For the second time, the Qualification Round had five problems, with the first\r\n  one being tied to a follow-up problem. <i>Reversort</i> and <i>Reversort Engineering</i>\r\n  both versed on investigating a quirky sorting algorithm and were inverses of each other\r\n  in a sense. <i>Reversort</i> required careful coding only, but\r\n  <i>Reversort Engineering</i> involved an insight and working out some math.\r\n  <i>Moons and Umbrellas</i> featured an early appearance of Cody-Jamal with a problem that\r\n  could be solved greedily. However, if you wanted to go for the extra credit, a completely\r\n  different approach was needed. In case you haven't noticed, there was no way the extra\r\n  credit could help you or prevent you from advancing, so it really was just extra.\r\n</p><p>\r\n  The last two problems were significantly harder to tackle, as usual. <i>Median Sort</i>\r\n  was an interactive problem that required adapting your knowledge of sorting algorithms and\r\n  possibly putting information theory to work. Finally, <i>Cheating Detection</i>\r\n  was an unusual problem, and not only because we don't do cheating detection for the\r\n  Qualification Round. There were multiple ways to try to pinpoint the cheater, all based on\r\n  finding the signal with the least noise.\r\n</p><p>\r\n  The first hour and a half of the contest had a scoreboard blackout due to a\r\n  configuration mistake that was hard to pinpoint.\r\n  This did not deter our participants from submitting and scoring lots of points during that time.\r\n  When the scoreboard appeared, there were already thousands of contestants on it.\r\n  One of them was <b>ksun48</b> who was the only competitor to achieve a perfect score within\r\n  the first hour.\r\n</p><p>\r\n  In the end, 37398 contestants submitted something, with 33853 getting points.\r\n  When the final results were revealed, 25961 scored at least 30 points and advanced\r\n  to Round 1. 644 contestants went beyond and managed to score a perfect\r\n  100 points, with 436 of them even getting to 101 due to the extra credit in\r\n  Moons and Umbrellas.\r\n</p><p>\r\n  Thank you for joining us for another year of Code Jam! If you got at least 30\r\n  points, congratulations, you have advanced! We will see you in any of the\r\n  Round 1s, starting with Round 1A in two weeks. (You can keep participating in Round 1s\r\n  until you advance to Round 2.) If you did not score enough points to\r\n  get to Round 1 this time, we hope you'll join us in 2022!\r\n  In the mean time, to improve your skills, you can practice with lots\r\n  of old problems from our\r\n  <a href=\"/codejam/archive\" target=\"_blank\">archive</a>.\r\n  In addition,\r\n  <a href=\"/kickstart\" target=\"_blank\">Kick Start</a>\r\n  registration remains open and you can jump in at any round for some live-contest experience!\r\n  If you want additional help,\r\n  <a href=\"https://groups.google.com/forum/#!forum/google-code/join\" target=\"_blank\">join our\r\n  mailing list</a> and ask questions!\r\n</p>\r\n<hr>\r\n<p>\r\n  <b>Cast</b>\r\n</p>\r\n<p>\r\n  Reversort: Written by the Code Jam team. Prepared by Pablo Heiber.\r\n</p><p>\r\n  Moons and umbrellas: Written by Sherry Wu. Prepared by Timothy Buzzelli.\r\n</p><p>\r\n  Reversort Engineering: Written by Pablo Heiber. Prepared by Swapnil Gupta.\r\n</p><p>\r\n  Median Sort: Written and prepared by Pablo Heiber.\r\n</p><p>\r\n  Cheating Detection: Written by Ian Tullis. Prepared by Ian Tullis and Timothy Buzzelli.\r\n</p><p>\r\nSolutions and other problem preparation and review by Andy Huang, Darcy Best, Ian Tullis,\r\n  Jing Wang, Liang Bai, Max Ward, Md Mahbubul Hasan, Mohamed Yosri Ahmed, Nafis Sadique,\r\n  Pablo Heiber, Sherry Wu, Swapnil Gupta, Timothy Buzzelli, and Yeabkal Wubshit.\r\n</p><p>\r\nAnalysis authors:\r\n</p><ul>\r\n  <li>Reversort: Md Mahbubul Hasan.</li>\r\n  <li>Moons and umbrellas: Pablo Heiber.</li>\r\n  <li>Reversort Engineering: Swapnil Gupta.</li>\r\n  <li>Median Sort: Pablo Heiber.</li>\r\n  <li>Cheating Detection: Pablo Heiber.</li>\r\n</ul>\r\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1616763600000,"tasks":[{"analysis":"<p>\n  The pseudocode of the solution is almost given in the statement. We just need to give it\n  the formal shape in the programming language of our choice. There are two non-straightforward\n  statements in the provided pseudocode. We assume we store L in an array, so we have quick\n  access to any index within it.\n</p>\n<p>\n  The first one is to figure out the index of the minimum element in a contiguous subarray. There\n  may be some library functions to perform this task. For example, in\n  C++ we can use <code><a href=\"https://en.cppreference.com/w/cpp/algorithm/min_element\"\n  target=\"_blank\">min_element</a></code>, in Python we can use <code>\n  <a href=\"https://docs.python.org/3/tutorial/datastructures.html\" target=\"_blank\">index</a></code>\n  and\n  <code><a href=\"https://docs.python.org/3/library/functions.html#min\" target=\"_blank\">min</a></code>\n  to figure out the minimum element. We can also run another loop to find out\n  the minimum element in the subarray. Please note, the input numbers are all different\n  so the minimum in each iteration is unique.\n</p>\n<p>\n  The second one is to reverse a subarray. Again, there may be some library functions\n  to perform this task. For example, we can use the <code>\n  <a href=\"https://en.cppreference.com/w/cpp/algorithm/reverse\" target=\"_blank\">reverse</a></code>\n  STL library\n  function for C++, <code>\n  <a href=\"https://docs.python.org/3/library/functions.html#reversed\" target=\"_blank\">reversed</a>\n  </code> or <code><a href=\"https://docs.python.org/3/tutorial/datastructures.html\"\n  target=\"_blank\">reverse</a></code> or simply slicing in Python.\n  We can also run a loop to reverse the subarray.\n</p>\n<p>\n  The length of the subarray we are reversing in the second step above is the cost of the reversal.\n  Accumulating these costs will give our final answer.\n</p>\n<p>\n  This solution has the time complexity of $$$O(\\mathbf{N}^2)$$$. We are running an outer loop\n  from 1 to $$$\\mathbf{N}-1$$$. Inside the loop we are performing two steps that take linear time\n  each: minimum finding and array reversal. Hence the time complexity is $$$O(\\mathbf{N}^2)$$$.\n</p>\n<p>\n  One final note, there are solutions to this problem that run in $$$O(\\mathbf{N}\\log{\\mathbf{N}})$$$ time,\n  but they are a lot more complex. Do you want to try to find one?\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0x3wBhuEsiSAk8D2ouHqTWJI_aIjBLck0SWmzKxccOllZ5cu7-HTxtwz3M3xWQuoSWvWFFd3yM/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000006d0a5c","statement":"<h3>Problem</h3>\n<p><i>\nNote: The main parts of the statements of the problems \"Reversort\" and \"Reversort Engineering\" are\nidentical, except for the last paragraph. The problems can otherwise be solved independently.\n</i></p><p>\nReversort is an algorithm to sort a list of distinct integers in increasing order.\nThe algorithm is based on the \"Reverse\" operation. Each application of this\noperation reverses the order of some contiguous part of the list.\n</p><p>\nThe pseudocode of the algorithm is the following:\n</p><pre>\nReversort(L):\n  for i := 1 to length(L) - 1\n    j := position with the minimum value in L between i and length(L), inclusive\n    Reverse(L[i..j])\n</pre><p>\nAfter $$$i-1$$$ iterations, the positions $$$1,\\;2,\\;\\dots,\\;i-1$$$ of the list\ncontain the $$$i-1$$$ smallest elements of L, in increasing order.\nDuring the $$$i$$$-th iteration, the process reverses the sublist going\nfrom the $$$i$$$-th position to the current position of the $$$i$$$-th minimum\nelement. That makes the $$$i$$$-th minimum element end up in the $$$i$$$-th position.\n</p><p>\nFor example, for a list with $$$4$$$ elements, the algorithm would perform $$$3$$$ iterations.\nHere is how it would process $$$L = [4, 2, 1, 3]$$$: <ol>\n<li>$$$i = 1,~ j = 3 \\longrightarrow L = [1, 2, 4, 3]$$$</li>\n<li>$$$i = 2,~ j = 2 \\longrightarrow L = [1, 2, 4, 3]$$$</li>\n<li>$$$i = 3,~ j = 4 \\longrightarrow L = [1, 2, 3, 4]$$$</li>\n</ol><p>\nThe most expensive part of executing the algorithm on our architecture is the Reverse operation.\nTherefore, our measure for the cost of each iteration is simply the length of the sublist passed\nto Reverse, that is, the value $$$j - i + 1$$$. The cost of the whole algorithm is the sum of the\ncosts of each iteration.\n</p><p>\nIn the example above, the iterations cost $$$3$$$, $$$1$$$, and $$$2$$$, in that order, for a total\nof $$$6$$$.\n</p><p>\nGiven the initial list, compute the cost of executing Reversort on it.\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case consists of 2 lines. The first line contains a single integer $$$\\mathbf{N}$$$, representing\nthe number of elements in the input list. The second line contains $$$\\mathbf{N}$$$ distinct integers\n$$$\\mathbf{L_1}$$$, $$$\\mathbf{L_2}$$$, ..., $$$\\mathbf{L_N}$$$, representing the\nelements of the input list $$$L$$$, in order.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$\nis the test case number (starting from 1) and $$$y$$$ is the total cost of executing\nReversort on the list given as input.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 10 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$2 \\le \\mathbf{N} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{L_i} \\le N$$$, for all $$$i$$$.<br/>\n$$$\\mathbf{L_i} \\ne \\mathbf{L_j}$$$, for all $$$i \\ne j$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2C1phhJC6EjnjwMMZpedT2u-Fyakb1JA5Kb2i8ZrQohDH5iPIp5P2sRbbwwlRp2rt8ZjX46lohTZttT6GcGGSB6MTuptrvsC0/reversort_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n4\n4 2 1 3\n2\n1 2\n7\n7 6 5 4 3 2 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2A9sLFd9mAHHGztrvdpZfsNw6j9xR-ZIWyo2f9t_2jRUX6BIJ9-qZGNUNz4gTO0NEbUF1LzTDJ_oSy0037zoK6m0C8Xi4nKPpj/reversort_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 6\nCase #2: 1\nCase #3: 12\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  Sample Case #1 is described in the statement above.\n</p>\n<p>\n  In Sample Case #2, there is a single iteration, in which Reverse is applied to a sublist of\n  size 1. Therefore, the total cost is 1.\n</p>\n<p>\n  In Sample Case #3, the first iteration reverses the full list, for a cost of 7. After that,\n  the list is already sorted, but there are 5 more iterations, each of which contributes a cost\n  of 1.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7}],"title":"Reversort","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n<p>\nIn Test Set 1, the size of the mural is small enough that we can test every possible final mural.\nLet $$$\\ell$$$ be the length of $$$\\mathbf{S}$$$.\nWe can either check for each string of length $$$\\ell$$$\nconsisting only on <code>C</code>s and <code>J</code>s whether it agrees with\n$$$\\mathbf{S}$$$ in the non-<code>?</code> spots, or brute-force only the <code>?</code>s directly. For\neach valid way of finishing the mural, we can calculate the total cost to Cody-Jamal, and keep\na running minimum to output at the end. Since we check at most $$$2^\\ell$$$ final murals, and for\neach we need only an additional linear pass to check the score, this algorithm takes\n$$$O(2^\\ell \\cdot \\ell)$$$ time, which is fast enough for Test Set 1.\n</p>\n<h3>Test Set 2</h3>\n<p>\nIn Test Set 2, $$$\\ell$$$ can be up to $$$1000$$$, so an exponential algorithm will not do.\nHowever, a simple observation can yield a much faster algorithm:\nsince $$$\\mathbf{X}$$$ > 0 and $$$\\mathbf{Y}$$$ > 0, we would like to avoid inserting <code>CJ</code> or <code>JC</code>\ninto the string. So if all letters\nsurround a consecutive substring of <code>?</code>s are the same letter $$$a$$$, then making\nall those <code>?</code>s into $$$a$$$ adds no <code>CJ</code>s or <code>JC</code>s.\nIf the substring is surrounded by $$$a$$$ on the left and $$$b$$$ on the right, with\n$$$a \\neq b$$$, on the other hand, at some point there will be a change from $$$a$$$ to $$$b$$$,\nso we will be forced into an occurrence of $$$ab$$$. Making all the <code>?</code>s into $$$a$$$s\n(or $$$b$$$s) makes sure that we only add that one forced occurrence and nothing else. This yields\na greedy algorithm that can be implemented in multiple ways, some taking as little as\n$$$O(\\ell)$$$ time. Notice that the cost is the same on the resulting string than on the string\nwhere <code>?</code>s are removed instead of replaced, which leads to a 1-line implementation:\n</p><pre>\nS.replace('?', '').count('CJ') * X + S.replace('?', '').count('JC') * Y\n</pre>\n<h3>Extra credit: Test Set 3</h3>\n<p>\nIn the solution for Test Set 2 we assume that minimizing the number of occurrences of\n<code>CJ</code> and/or <code>JC</code> is best, which is true only when $$$\\mathbf{X}$$$ and $$$\\mathbf{Y}$$$ are\nnon-negative. This means that Test Set 3 needs a completely different solution. In this\ncase, a technique that would not normally show up in the second\nproblem in a Qualification Round:\n<a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\" target=\"_blank\">dynamic programming</a>.\n</p><p>\nWe can take the function $$$f(s)$$$ that we need to compute and define it recursively as\nfollows:\n</p><ul>\n<li>$$$f(\\mathtt{?}s) = \\min(f(\\mathtt{C}s), f(\\mathtt{J}s))$$$</li>\n<li>$$$f(a\\mathtt{?}s) = \\min(f(a\\mathtt{C}s), f(a\\mathtt{J}s))$$$ for\n  $$$a \\in \\{\\mathtt{C}, \\mathtt{J}\\}$$$</li>\n<li>$$$f(aas) = f(as)$$$ for $$$a \\in \\{\\mathtt{C}, \\mathtt{J}\\}$$$</li>\n<li>$$$f(\\mathtt{CJ}s) = \\mathbf{X} + f(\\mathtt{J}s)$$$</li>\n<li>$$$f(\\mathtt{JC}s) = \\mathbf{Y} + f(\\mathtt{C}s)$$$</li>\n<li>$$$f(s) = 0$$$ if the length of $$$s \\le 1$$$</li>\n</ul><p>\nYou can verify that the cases above form a partition and properly define the recursion.\nWe have a constant number of cases, each of which can be computed in constant time not\ncounting the recursion calls, so the time complexity of the solution is $$$O(D)$$$ where\n$$$D$$$ is the size of the domain of the function. You can check that every value of $$$f$$$\nthat is ever required to calculate $$$f(\\mathbf{S})$$$\ncan be defined by a suffix of the input $$$\\mathbf{S}$$$ and at most two extra characters at the beginning.\nThis means $$$D$$$ is linear in the length of $$$\\mathbf{S}$$$, and so is the time complexity of the algorithm.\nNotice that we need to represent each element in the domain in constant space for this to work\nout exactly as mentioned, for example representing suffixes of $$$\\mathbf{S}$$$ by just their length or an\nindex into $$$\\mathbf{S}$$$. However, for the low limits of this problem, even a larger representation using\ncopies of the full suffix is fast enough.\n<p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0qTu7j7jZFBHSsCsZisA6PgIBzboj3dS4khJtxRXCb7YHYphWMASbVWr13bjqs-jpviCHEyISL/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000006d1145","statement":"<h3>Problem</h3>\n<p>\nCody-Jamal is working on his latest piece of abstract art: a mural consisting of a row\nof waning moons and closed umbrellas. Unfortunately, greedy copyright trolls are claiming\nthat waning moons look like an uppercase C and closed umbrellas look like a J, and they have\na copyright on CJ and JC. Therefore, for each time CJ appears in the mural, Cody-Jamal\nmust pay $$$\\mathbf{X}$$$, and for each time JC appears in the mural, he must pay $$$\\mathbf{Y}$$$.\n</p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1-CnRpFiyVWkOOoz90EEKfHAoNyDKjO_jP2Yqsxl2i9W82EWs2vdeFk9rrsyJZHFX7XgjXKDGYJcNmdwUZco3YZQ/moons_and_umbrellas.png\"/></p>\n<p>\nCody-Jamal is unwilling to let them compromise his art, so he will not change\nanything already painted. He decided, however, that the empty spaces he still has\ncould be filled strategically, to minimize the copyright expenses.\n</p><p>\nFor example, if <code>CJ?CC?</code> represents the current state of the mural,\nwith <code>C</code> representing a waning moon, <code>J</code> representing a closed umbrella,\nand <code>?</code> representing a space that still needs to be painted with either\na waning moon or a closed umbrella, he could finish the mural as\n<code>CJCCCC</code>, <code>CJCCCJ</code>, <code>CJJCCC</code>, or <code>CJJCCJ</code>.\nThe first and third options would require paying $$$\\mathbf{X} + \\mathbf{Y}$$$ in copyrights,\nwhile the second and fourth would require paying $$$2 \\cdot \\mathbf{X} + \\mathbf{Y}$$$.\n</p><p>\nGiven the costs $$$\\mathbf{X}$$$ and $$$\\mathbf{Y}$$$ and a string representing the current state of the mural,\nhow much does Cody-Jamal need to pay in copyrights if he finishes his mural in a way that\nminimizes that cost?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ lines\nfollow.\nEach line contains two integers $$$\\mathbf{X}$$$ and $$$\\mathbf{Y}$$$ and a string $$$\\mathbf{S}$$$ representing the two costs\nand the current state of the mural, respectively.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the\nminimum cost that Cody-Jamal needs to pay in copyrights for a finished mural.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 10 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\nEach character of $$$\\mathbf{S}$$$ is either <code>C</code>, <code>J</code>, or <code>?</code>.\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$1 \\le$$$ the length of $$$\\mathbf{S}$$$ $$$\\le 10$$$.<br/>\n$$$1 \\le \\mathbf{X} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{Y} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\n\n$$$1 \\le$$$ the length of $$$\\mathbf{S}$$$ $$$\\le 1000$$$.<br/>\n$$$1 \\le \\mathbf{X} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{Y} \\le 100$$$.<br/>\n</p>\n\n<h3>Extra credit!</h3>\n\n<p>\nWhat if some copyright holders could pay Cody-Jamal for the advertisement\ninstead of being paid? Cody-Jamal getting paid is represented by a negative cost.\n</p>\n\n<h4>Test Set 3 (Hidden Verdict)</h4>\n<p>\n\n$$$1 \\le$$$ the length of $$$\\mathbf{S}$$$ $$$\\le 1000$$$.<br/>\n$$$-100 \\le \\mathbf{X} \\le 100$$$.<br/>\n$$$-100 \\le \\mathbf{Y} \\le 100$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1-OixxaIcElRtkbh4ZliBCPMTsxbXUQvb4qVK_6ZV3WDT7TNCzJme822vwkj8MPlYoSPjViYBQv4vrmz9IIr4v3zcUSUqZgcJ7GWs4MFBUSVAq/moons_and_umbrellas_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n2 3 CJ?CC?\n4 2 CJCJ\n1 3 C?J\n2 5 ??J???\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0vyLP8P5OhhDS-Bljv1UAbp7d01bLmDhr1VSn2ukb5guj4a9P5wlOVadlB9ohF-sC6PW8uTPVBvSoO6RmDTThnrCaXr3PKfl6B1yrJ5F4egSpnqg/moons_and_umbrellas_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 5\nCase #2: 10\nCase #3: 1\nCase #4: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nSample Case #1 is the one explained in the problem statement. The minimum cost is\n$$$\\mathbf{X} + \\mathbf{Y} = 2 + 3 = 5$$$.\n</p><p>\nIn Sample Case #2, Cody-Jamal is already finished, so he does not have a choice.\nThere are two <code>CJ</code>s and one <code>JC</code> in his mural.\n</p><p>\nIn Sample Case #3, substituting either <code>C</code> or <code>J</code> results\nin one <code>CJ</code> either from the second and third characters or the first\nand second characters, respectively.\n</p><p>\nIn Sample Case #4, Cody-Jamal can finish his mural with all <code>J</code>s.\nSince that contains no instance of <code>CJ</code> nor <code>JC</code>, it yields\nno copyright cost.\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 3</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 3. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1VfCPOyWnJRLX6HDup9KFElZr-dHV8LsVhZAepl94hQGRcEHWsBYEZGRn6TmFktk3aMuTET9cp1fUzwEZo3KCu4KCS8VYpdgpyTE1t_y2SW2Ck/moons_and_umbrellas_sample_ts3_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_2').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_2');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_2\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_2\">1\n2 -5 ??JJ??\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3nfa1vjqClWP9FWZSvqvO98iFTVt-9cK4hXNM0M8SqQ9tvKfwKh-RpKfrGjrtjWhlT7Bfbid3-zRkqyTEZ6FQ9RL7is-W8ctTWmOq_aLaFcWoIWA/moons_and_umbrellas_sample_ts3_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_2').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_2');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_2\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_2\">Case #1: -8\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn Sample Case #1 for Test Set 3, Cody-Jamal can finish his mural optimally\nas <code>JCJJCC</code> or <code>JCJJJC</code>. Either way, there is one\n<code>CJ</code> and two <code>JC</code>s in his mural.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":1,"type__str":"VISIBLE","value":11},{"type":2,"type__str":"HIDDEN","value":1}],"title":"Moons and Umbrellas","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\nSolutions for this problem are based on the fact that the cheater's advantage pumps up their\nnumbers independently of the difficulty. Judged by their total number of correct answers,\na cheater with base skill level $$$B$$$ is going to look like a player with skill\n$$$B+\\Delta$$$ for some significant $$$\\Delta$$$ ($$$\\Delta$$$ depends on $$$B$$$).\nHowever, this cheater does worse on easy problems than a player of actual $$$B+\\Delta$$$\nskill level, and better on hard problems, because the correct answers that are coming\nfrom cheating happen uniformly instead of more heavily on easier problems like skill-based\nimprovements.\n</p>\n<h3>Test Set 1</h3>\n<p>\nThere are multiple ways to get to $$$10\\%$$$ accuracy to pass Test Set 1. One such way is to\nestimate each question's difficulty as its number of correct answers, then sort by that difficulty,\nand check how uniform the distribution of corrects for each candidate is. The closer to\nuniform a candidate looks, the more they look like a cheater. One possible metric is the number\nof pairs of questions with different answers such that the incorrect answer is estimated to\nbe for an easier question than the correct one. Using this metric is just enough to pass Test\nSet 1.\n</p>\n<h3>Test Set 2</h3>\n<p>\nThe issue with counting inversions as the suggested metric for Test Set 1 is that it is a\nmetric that is very susceptible to the contestant's strength. More concretely, a list that has\nfew corrects or few incorrects has fewer opportunities to have inversions than one that\nis fairly evenly split. We can solve this by dividing the number of inversions by the expected\nnumber of inversions in a randomly arranged one. This reduces the noise enough to pass Test Set 2.\n</p><p>\nAnother way to increase accuracy, of invesions or any other metric, is to\ncheck super-easy and super-hard questions, because the difference between a uniform distribution\nof correct answers and a heavily biased distribution is more pronounced in those. Exactly how\nmuch depends on the metric, but around the easiest and hardest $$$5\\%$$$ of questions seems\nlike the right number experimentally for our solutions.\n</p><p>\nOther metrics are more accurate than inversions and also help solve the problem. We found two\ntechniques that work well enough: sort the players by estimated skill level (i.e., by total number\nof correct answers) and compare the number of corrects only in the \"extreme\" questions with\nthe number of corrects of other players with similar estimated skill level among those. Then,\nassume that the cheater will have the greatest difference with its neighbors. Another technique\ncould be to estimate the actual skill level (by computing the inverse sigmoid of the accuracy\nof each player) and the actual difficulty of questions (again, the inverse sigmoid of its\nproportion of corrects). Then, using those two, estimate the expected number of correct answers\nfor each player in the extreme questions. The player with the largest difference between that\nestimation and the real value is the cheater. Using this latest technique can get a solution above\n$$$90\\%$$$ accuracy.\n</p><p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0T-YNUqjExQVNOwiPBuMYsgBui_3tBRV0iHMtZUG_dXLlU36AnjvubV4eRpsWRzLIdYdOg8TmB/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000006d1155","statement":"<h3>Problem</h3>\n<p>\n  100 players are competing in a 10000-question trivia tournament; the players are numbered from\n  1 to 100. Player $$$i$$$ has a skill level of $$$S_i$$$ and question $$$j$$$ has a\n  difficulty level of $$$Q_j$$$. Each skill level and each question difficulty are chosen\n  uniformly at random from the range $$$[-3.00, 3.00]$$$, and independently of all other choices.\n  For example, a player can have a skill level of $$$2.47853$$$\n  and a question can have a difficulty level of $$$-1.4172$$$.\n</p><p>\n  When player $$$i$$$ tries to answer question $$$j$$$, the probability that they answer it\n  correctly is $$$f(S_i - Q_j)$$$, where $$$f$$$ is the\n  <a href=\"https://en.wikipedia.org/wiki/Sigmoid_function\">sigmoid function</a>:\n  $$$$f(x) = \\frac{1}{1 + e^{-x}}$$$$\n  where $$$e$$$ is <a href=\"https://en.wikipedia.org/wiki/E_(mathematical_constant)\">Euler's\n  number</a> (approximately 2.718...), the mathematical constant.\n  Notice that $$$0 \\lt f(x) \\lt 1$$$ for all $$$x$$$, so $$$f(S_i - Q_j)$$$ is always a\n  valid probability. Each of these answer attempts is chosen at random\n  independently of all other choices.\n</p><p>\n  There is one exception: exactly one of the players is a cheater! The cheater is chosen\n  uniformly at random from among all players, and independently of all other choices.\n  The cheater behaves as follows: before answering each question, they flip a fair coin.\n  If it comes up heads, they do not cheat and\n  the rules work as normal. If it comes up tails, they secretly look up the answer on the Internet\n  and answer the question correctly. Formally, they decide whether to cheat at random with\n  $$$0.5$$$ probability for each question, independently of all other choices.\n</p><p>\n  The results of a tournament consist of only the per-question results (correct or incorrect) for\n  each player. Apart from the general description above, you do not know anything about the skill\n  levels of the players or the difficulties of the questions.\n</p><p>\n  You must correctly identify the cheater in at least $$$\\mathbf{P}$$$ percent of the test cases. That is,\n  you must succeed in at least $$$\\mathbf{P} \\cdot \\mathbf{T} / 100$$$ out of $$$\\mathbf{T}$$$ cases.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. The second line of the input\n  gives the percentage of test cases, $$$\\mathbf{P}$$$, that you must answer correctly for your solution to be\n  considered correct. $$$\\mathbf{T}$$$ test cases follow.\n  Each case consists of 100 lines of 10000 characters each. The j-th character on the i-th line is\n  <code>1</code> if the i-th player answered the j-th question correctly, or <code>0</code> if they\n  answered it incorrectly.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is\n  the test case number (starting from 1) and $$$y$$$ is the number of the cheater (with\n  player numbers starting from 1).\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 60 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$\\mathbf{T} = 50$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n  $$$\\mathbf{P} = 10$$$.\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\n\n  $$$\\mathbf{P} = 86$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1O5Xhloufj0MGlkCjQ8O_E9X0PWe8lmHuSdwyp6GGNXFEovLcphllc48jZO2pdvWClUgJO-EPaOv-72oYRDt-_sVueWj2UbrDgi2k6uOSgS5c/cheating_detection_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button sample-header-copy-button-hidden\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">1\n0\n-------------------------------\n99 lines of input omitted.\nUse the download button above\nto view the full sample input.\n-------------------------------\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2tkFPEfO-I9V6DwBdnr5Og3wFAyTwjvqdVFXPP6EkLKKcpfLnn9hq45qphGQEg722JvHivogQGtl4no_Zm4bYKdW7vd0jBRYw2VGKkS-dqt2KK/cheating_detection_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 59\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\nNotice that the sample input uses $$$\\mathbf{T}=1$$$ and $$$\\mathbf{P}=0$$$ and therefore does not\nmeet the limits of any test set. The sample output for it is the actual cheater.\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":11},{"type":1,"type__str":"VISIBLE","value":20}],"title":"Cheating Detection","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\nThis problem is about <a href=\"https://en.wikipedia.org/wiki/Information_theory\" target=\"_blank\">\ninformation theory</a>. There are $$$\\mathbf{N}! / 2$$$ essentially different outputs, which\nmeans we need at least $$$\\log_2(\\mathbf{N}! / 2)$$$ bits of information. For $$$\\mathbf{N}=50$$$ that is\nslightly over $$$213$$$. That means that for Test Set 2, extracting less than a\nbit per query (on average) can work, but for Test Set 3 it will not. In Test Set 1,\non the other hand, this informational analysis is not necessary.\n</p>\n\n<h3>Test Set 1</h3>\n<p>\nIn this test set we have 300 queries per case, which is more than the number of different\ntriples $$${\\mathbf{N} \\choose 3} = 120$$$. This means that we can query every possible subset\nof $$$3$$$ elements and memoize the results. Freed from the limitations of the number of\nqueries, any solution to sort based on medians works. One simple way is to notice that the\nonly elements that are never the median are the first and last elements, so we can identify\nthose, and arbitrarily choose which one is the first and which one is the last.\nThen, we can eliminate those two and find the candidates for second and next-to-last\nas the ones that are never median in queries with only remaining elements. To know\nwhich one to assign second, we can check an additional query between the element we\nchose to go first and the two newfound elements: the one who is the median of that\nsubset should be second, and the other one should be next-to-last. We can iterate this\nto find and place pairs of elements moving inwards until we place them all.\n</p><p>\nSee below for other sorting algorithms that work on medians. While the other test sets\nhave the additional burden of having to make them work in an\n<a href=\"https://en.wikipedia.org/wiki/Online_algorithm\" target=\"_blank\">online</a> way,\nwe can use the pre-query tactic for this one to make our lives easier, even if we implement\nthe same basic algorithm. It also allows for simpler implementations of some of the algorithms\nthat use extra queries.\n</p>\n<h3>Test Set 2</h3>\n<p>\nSince just $$$1$$$ bit of information per query is enough for this test set, we can use one\nof our known comparison-based optimal\n<a href=\"https://en.wikipedia.org/wiki/Sorting_algorithm\" target=\"_blank\">sorting algorithms</a>\nlike Merge Sort or Heap Sort. Even\n<a href=\"https://en.wikipedia.org/wiki/Insertion_sort\" target=\"_blank\">Insertion Sort</a>\ncan work if we use\n<a href=\"https://en.wikipedia.org/wiki/Binary_search_algorithm\" target=\"_blank\">binary search</a>\nto look for the\ninsertion point. While Insertion Sort + Binary Search requires a suboptimal $$$O(\\mathbf{N}^2)$$$ number\nof operations, it uses an optimal $$$O(\\mathbf{N} \\log \\mathbf{N})$$$ number of comparisons.\n</p><p>\nFor any of these algorithms we need a way to simulate a binary \"less than\" operation\nbetween two arbitrary items $$$i$$$ and $$$j$$$. One way\nto do that is to ask for the median of $$$i$$$, $$$j$$$ and $$$k$$$ while knowing $$$k$$$ is\nnot the median. So, we could try to find an overall minimum or maximum and then use that\nas $$$k$$$ for every other query. Notice that there are $$$2$$$ elements that can be\nminimum and/or maximum and neither would\nbe the median of any query. So, we can do a query for the median of the first three elements.\nWe can discard the median of those and keep the other $$$2$$$ as candidates. We add any element\nwe have not checked and do another median query, discarding the median and keeping $$$2$$$\ncandidates again. After\n$$$\\mathbf{N}-2$$$ queries, we have discarded $$$\\mathbf{N}-2$$$ elements, and the $$$2$$$ that remain\nare the minimum and maximum.\n</p>\n<h3>Test Set 3</h3>\n<p>\nTo solve Test Set 3 we can observe that our implementation of Insertion Sort can actually extract\nmore than $$$1$$$ bit per query and have a smaller constant. Instead of looking for the\nminimum/maximum first, we simply use the minimum of our current range\nin the median query as $$$k$$$. This\nmeans it is not guaranteed to never be the median. However, if the \"current minimum\" is the median\nof our query, we know exactly where to insert and can stop searching.\nThis effectively makes our query a binary comparison with a little bit of extra information,\nand that little bit (plus being careful about never overspending) can be enough to pass Test Set 3.\nMore importantly, it enables us to not find for the minimum first, which is a significant\noverexpenditure.\n</p>\n<p>\nWe can also find solutions that have more wiggle room by extracting a lot more than\n$$$1$$$ bit per query. Specifically, we want to extract something closer to the optimal\n$$$\\log_2 3 \\approx 1.58$$$ bits per query.\nThat means considering all $$$3$$$ possible outcomes of the query, and have them\nhappen with approximately equal probability (see\n<a href=\"https://en.wikipedia.org/wiki/Information_theory\" target=\"_blank\">\nthe information theory article</a> for details on the\nlink between the probability distribution of outcomes and the information content of the query\nresponse).\n</p><p>\nWe can further refine the Insertion Sort implementation to use a ternary search (in this case,\nthis means a search similar to binary search that splits into three parts instead of two)\nto extract the full potential out of the median query. At each step, we query the two elements\nthat are $$$1/3$$$ and $$$2/3$$$ of the way into our current range, together with the element\nto be inserted. The result narrows down the search to one of three ranges (roughly\nfirst, middle or last third). Notice that any query that we do to handle border cases\n(like inserting at the very beginning or very end) does not get the optimal\n$$$1.58$$$ bits of information, so we want to be careful not to use those, or to use them\ninfrequently.\n</p><p>\nA different option is to do a\n<a href=\"https://en.wikipedia.org/wiki/Quicksort#Multi-pivot_quicksort\" target=\"_blank\">\ntwo-pivot randomized quicksort</a>.\nBy using two pivots, we make full use of each median query involving them and\neach other element, as there are three buckets where the other elements can fall, each\ncorresponding to a possible response to the query. The only\nissue with this approach (and any other approach based on a\n<a href=\"https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm\" target=\"_blank\">\ndivide and conquer</a>\nsorting algorithm) is that there are two ways to orient each recursive result if they have\nmore than one element. If we use a query to decide which way is consistent with our decision on\nhow to order the pivots, that query gives us only $$$1$$$ bit of information. Luckily,\nthis is rather infrequent as it only happens proportional to the number of branches\nin the recursion tree that contain more than one element, which is a small number.\n</p>\n","id":"00000000006d1284","statement":"<h3>Problem</h3>\n<p>\nYou want to sort $$$\\mathbf{N}$$$ distinct items, $$$x_1, x_2, \\dots, x_\\mathbf{N}$$$. Unfortunately, you do not have\na way of comparing two of these items. You only have a way to, given three of them, find\nout which one is the median, that is, which one is neither the minimum nor the maximum among\nthe three.\n</p><p>\nFor example, suppose $$$\\mathbf{N} = 5$$$ and you know that:\n<ul>\n<li>$$$x_1$$$ is the median of $$$\\{x_1, x_2, x_3\\}$$$</li>\n<li>$$$x_2$$$ is the median of $$$\\{x_2, x_3, x_4\\}$$$</li>\n<li>$$$x_3$$$ is the median of $$$\\{x_3, x_4, x_5\\}$$$</li>\n</ul>\n</p><p>\nThen, it is guaranteed that the sorted order of the elements is either\n$$$x_4, x_2, x_1, x_3, x_5$$$ or its reverse $$$x_5, x_3, x_1, x_2, x_4$$$.\nNotice that by knowing only medians, it is impossible to distinguish the order of any list\nfrom its reverse, since the median question has the same result for any three\nelements in both cases.\n</p><p>\nYour program will have to find the order of $$$\\mathbf{T}$$$ lists of $$$\\mathbf{N}$$$ elements using at most\n$$$\\mathbf{Q}$$$ median questions in total (or $$$\\mathbf{Q} / \\mathbf{T}$$$ queries per list on average).\nIn each case, finding either the right order or its reverse is considered correct.\nThe order for each case is generated uniformly at random from all possible orders,\nand independently of any other information.\n</p>\n\n<h3>Input and output</h3>\n<p>\n  This is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of our\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq\" target=\"_blank\">FAQ</a>.\n</p><p>\n  Initially, the judge will send you a single line containing three integers $$$\\mathbf{T}$$$, $$$\\mathbf{N}$$$, and\n  $$$\\mathbf{Q}$$$: the number of test cases, the number of elements to sort within each test case, and\n  the total number of questions you are allowed across all test cases, respectively.\n  Then, you must process $$$\\mathbf{T}$$$ test cases. Each test case consists of a series of question exchanges\n  plus an additional exchange to provide the answer.\n</p><p>\n  For a question exchange, your program must print a single line containing\n  three distinct integers $$$i, j, k$$$ all between $$$1$$$ and $$$\\mathbf{N}$$$, inclusive,\n  which corresponds to asking the judge <i>\"which element is the median of the set\n  $$$\\{x_i, x_j, x_k\\}$$$?\"</i>\n  The judge will respond with a single line containing a single integer $$$\\mathbf{L}$$$,\n  meaning that the median of that set is $$$x_\\mathbf{L}$$$ ($$$\\mathbf{L}$$$ is always equal to\n  one of $$$i$$$, $$$j$$$, or $$$k$$$).\n  If you try to perform a $$$(\\mathbf{Q}+1)$$$-th question exchange, the judge will simply output\n  <code>-1</code>.\n</p><p>\n  Once you are ready to state the result, print a line containing $$$\\mathbf{N}$$$ integers\n  representing the indices of the elements in sorted or reverse sorted order.\n  The judge will respond with a single integer <code>1</code> if your answer\n  is correct or <code>-1</code> if it is not. After receiving the judge's answer for the\n  $$$\\mathbf{T}$$$-th case, your program must finish in time in order to not receive a Time Limit Exceeded\n  error. In addition, if you print additional information after receiving the result\n  for the $$$\\mathbf{T}$$$-th case, you will get a Wrong Answer judgment.\n</p><p>\n  If the judge receives an invalidly formatted line or invalid values from your\n  program at any moment, the judge will print a single number <code>-1</code>.\n  After the judge prints <code>-1</code> for any of the reasons explained above,\n  it will not print any further output. If your program continues to wait for the judge after\n  receiving a <code>-1</code>, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 40 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$\\mathbf{T} = 100$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$\\mathbf{N} = 10$$$.<br/>\n$$$\\mathbf{Q} = 300 \\cdot \\mathbf{T}$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\n\n$$$\\mathbf{N} = 50$$$.<br/>\n$$$\\mathbf{Q} = 300 \\cdot \\mathbf{T}$$$.<br/>\n</p>\n\n<h4>Test Set 3 (Hidden Verdict)</h4>\n<p>\n\n$$$\\mathbf{N} = 50$$$.<br/>\n$$$\\mathbf{Q} = 170 \\cdot \\mathbf{T}$$$.<br/>\n</p>\n\n\n<h3>Testing Tool</h3>\n<p>\n  You can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use our <a href=\"https://storage.googleapis.com/coding-competitions.appspot.com/interactive_runner.py\">interactive runner</a>\n  for that. For more information, read the instructions in comments in that\n  file, and also check out the\n  <a href=\"/codejam/faq#interactive-problems\" target=\"_blank\">Interactive Problems section</a>\n  of the FAQ.\n</p><p>\n  Instructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it is <b>NOT</b>\n  the real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check the\n  <a href=\"/codejam/faq#coding\" target=\"_blank\">Coding section</a>\n  of the FAQ to make sure that you are using the same compiler as us.\n</p><p>\n<a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0nSTrkkj1iUlNoeDns9drQ3QU7XIq72mmuq0XhpNopleki0WngtkBP8KEf59qZICFqPmVRhAnKQLmxbVkXCjg/local_testing_tool.py?dl=1\" download=\"testing_tool.py\">Download testing tool</a>\n</p>\n\n\n  <div class=\"sample-interaction-wrapper\">\n    <div class=\"sample-interaction-header\">\n      <div class=\"sample-interaction-header-text\">Sample Interaction</div>\n    </div>\n    <div class=\"sample-interaction-content\">\n      <div class=\"sample-interaction-judge-solution-labels\">\n        <div class=\"sample-interaction-judge-label\">Judge</div>\n        <div class=\"sample-interaction-solution-label\">Solution</div>\n      </div>\n      \n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Constraints<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">2 5 600\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge provides $$$\\mathbf{T}$$$, $$$\\mathbf{N}$$$, $$$\\mathbf{Q}$$$<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 1<br>\n</div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">1 2 3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution asks for the median of $$$\\{x_1, x_2, x_3\\}$$$<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge responds that the median is $$$x_2$$$<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">4 2 3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution asks for the median of $$$\\{x_4, x_2, x_3\\}$$$<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge responds that the median is $$$x_3$$$<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">5 4 3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution asks for the median of $$$\\{x_5, x_4, x_3\\}$$$<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge responds that the median is $$$x_4$$$<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">5 4 3 2 1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution outputs the sorted list<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge confirms that the answer is correct<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 2<br>\n</div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">1 2 3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution asks for the median of $$$\\{x_1, x_2, x_3\\}$$$<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge responds that the median is $$$x_3$$$<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">2 3 4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution asks for the median of $$$\\{x_2, x_3, x_4\\}$$$<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge responds that the median is $$$x_4$$$<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">3 4 5\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution asks for the median of $$$\\{x_3, x_4, x_5\\}$$$<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">5\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge responds that the median is $$$x_5$$$<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">1 3 5 4 2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution outputs the sorted list<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge confirms that the answer is correct<br>\n</div>\n\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":7},{"type":1,"type__str":"VISIBLE","value":11},{"type":2,"type__str":"HIDDEN","value":10}],"title":"Median Sort","trial_input_type":2,"trial_input_type__str":"JUDGE_CODE"},{"analysis":"<h3>\n  Test Set 1\n</h3>\n\n<p>\n  The solution to the problem is a permutation of the numbers from 1 to $$$\\mathbf{N}$$$.\n  The cost of each permutation can be calculated by simulating the Reversort algorithm as\n  described in the\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/round/000000000043580a/00000000006d0a5c#analysis\"\n     target=\"_blank\">analysis of the Reversort problem</a> in $$$O(\\mathbf{N}^{2})$$$ time complexity.\n  There are $$$\\mathbf{N}!$$$ distinct\n  permutations of size $$$\\mathbf{N}$$$, containing the numbers from 1 to $$$\\mathbf{N}$$$ exactly once each.\n  The cost of\n  each permutation can be calculated and the answer is any permutation that\n  has a cost equal to $$$\\mathbf{C}$$$. If there is no such permutation, output\n  <code>IMPOSSIBLE</code>. The time complexity of the\n  overall solution is $$$O( \\mathbf{N}! \\cdot \\mathbf{N}^{2} )$$$.\n</p>\n\n<h3>\n  Test set 2\n</h3>\n\n<p>\n  As $$$\\mathbf{N}$$$ is large for Test Set 2, we cannot generate every possible permutation. The major\n  observation here is that the range of valid costs for\n  a given $$$\\mathbf{N}$$$ lies between\n  $$$\\mathbf{N} - 1$$$ (when the cost of each reverse operation is the minimum possible, which is $$$1$$$)\n  and $$$\\frac{\\mathbf{N} \\cdot (\\mathbf{N} + 1)} {2} - 1$$$ (when the cost of each reverse operation is\n  the maximum possible, which is $$$\\mathbf{N}-i$$$. Cost &equals;\n  $$$\\mathbf{N} - 1$$$ when the array is already sorted.\n</p><p>\n  All costs in between those two limits are possible, as we shall see.\n  Hence, if $$$\\mathbf{C}$$$ is not in the valid range for given $$$\\mathbf{N}$$$,\n  output <code>IMPOSSIBLE</code>. Otherwise, we perform the following construction by recursion,\n  which also serves as proof that the costs in range are indeed possible.\n  The first iteration costs between 1 and $$$\\mathbf{N}$$$, so we should choose a cost $$$x$$$ for it\n  such that $$$\\mathbf{C} - x$$$, fits in the possible range for a permutation of size $$$\\mathbf{N} - 1$$$.\n  You can check that this is always possible,\n  and even compute the full range of $$$x$$$ values that work by solving the system of\n  inequalities.\n</p><p>\n  Now, recursively\n  generate a permutation $$$P$$$ of size $$$\\mathbf{N} - 1$$$\n  and cost $$$\\mathbf{C}  - x$$$. Then, add $$$1$$$ to all integers in $$$P$$$ and insert $$$1$$$ at\n  its left end, getting a new permutation of integers between $$$1$$$ and $$$\\mathbf{N}$$$.\n  Then, reverse the prefix of $$$P$$$ of length $$$x$$$ as the cost\n  of the initial iteration should be $$$x$$$.\n  The non-recursive steps take $$$O(\\mathbf{N})$$$ to adjust $$$P$$$. Since we perform those\n  for each index, the overall complexity of the solution is $$$O(\\mathbf{N}^{2})$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0lPi-zpGx3VMFuLnBm2MPdL33UJvEqzXpRw3K0Pxm48Qm4Q7uFNY-X1YI-wkttfowUSm0jY0xy/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000006d12d7","statement":"<h3>Problem</h3>\n<p><i>\nNote: The main parts of the statements of the problems \"Reversort\" and \"Reversort Engineering\" are\nidentical, except for the last paragraph. The problems can otherwise be solved independently.\n</i></p><p>\nReversort is an algorithm to sort a list of distinct integers in increasing order.\nThe algorithm is based on the \"Reverse\" operation. Each application of this\noperation reverses the order of some contiguous part of the list.\n</p><p>\nThe pseudocode of the algorithm is the following:\n</p><pre>\nReversort(L):\n  for i := 1 to length(L) - 1\n    j := position with the minimum value in L between i and length(L), inclusive\n    Reverse(L[i..j])\n</pre><p>\nAfter $$$i-1$$$ iterations, the positions $$$1,\\;2,\\;\\dots,\\;i-1$$$ of the list\ncontain the $$$i-1$$$ smallest elements of L, in increasing order.\nDuring the $$$i$$$-th iteration, the process reverses the sublist going\nfrom the $$$i$$$-th position to the current position of the $$$i$$$-th minimum\nelement. That makes the $$$i$$$-th minimum element end up in the $$$i$$$-th position.\n</p><p>\nFor example, for a list with $$$4$$$ elements, the algorithm would perform $$$3$$$ iterations.\nHere is how it would process $$$L = [4, 2, 1, 3]$$$: <ol>\n<li>$$$i = 1,~ j = 3 \\longrightarrow L = [1, 2, 4, 3]$$$</li>\n<li>$$$i = 2,~ j = 2 \\longrightarrow L = [1, 2, 4, 3]$$$</li>\n<li>$$$i = 3,~ j = 4 \\longrightarrow L = [1, 2, 3, 4]$$$</li>\n</ol><p>\nThe most expensive part of executing the algorithm on our architecture is the Reverse operation.\nTherefore, our measure for the cost of each iteration is simply the length of the sublist passed\nto Reverse, that is, the value $$$j - i + 1$$$. The cost of the whole algorithm is the sum of the\ncosts of each iteration.\n</p><p>\nIn the example above, the iterations cost $$$3$$$, $$$1$$$, and $$$2$$$, in that order, for a total\nof $$$6$$$.\n</p><p>\nYou are given a size $$$\\mathbf{N}$$$ and a cost $$$\\mathbf{C}$$$. Find a list of $$$\\mathbf{N}$$$ distinct\nintegers between 1 and $$$\\mathbf{N}$$$ such that the cost of applying\nReversort to it is exactly $$$\\mathbf{C}$$$, or say that there is no such list.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ lines follow.\nEach line describes a test case with two integers $$$\\mathbf{N}$$$ and $$$\\mathbf{C}$$$, the size\nof the wanted list and the desired cost, respectively.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, if there\nis no list of size $$$\\mathbf{N}$$$ such that applying Reversort to it costs\nexactly $$$\\mathbf{C}$$$, output one line containing <code>Case #$$$x$$$: IMPOSSIBLE</code>, where $$$x$$$ is the\n test case number (starting from 1).\nOtherwise, output one line containing\n<code>Case #$$$x$$$: $$$y_1$$$ $$$y_2$$$ ... $$$y_\\mathbf{N}$$$</code>,\n where $$$x$$$ is the\n test case number (starting from 1) and each $$$y_i$$$ is a distinct integer between\n $$$1$$$ and $$$\\mathbf{N}$$$, representing the $$$i$$$-th element of one such possible list.\n</p><p>\nIf there are multiple solutions, you may output any one of them.\n(See \"What if a test case has multiple correct solutions?\"\nin the <a href=\"/codejam/faq#competing\" target=\"_blank\">Competing section of the FAQ</a>.)\nThis information about multiple solutions will not be explicitly stated in the remainder of the\n2021 contest.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 10 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{C} \\le 1000$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N} \\le 7$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N} \\le 100$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U21ec3hwfGgELoto07FxCEt0lhUTAXltLdooQ2e1tIAxU2xu0V4GF91UjnwWc88A63QAFqWJccKw1FToBnGYqU2mE2JESIX8gyg4fd79ja4Jhc_EQ8/reversort_engineering_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">5\n4 6\n2 1\n7 12\n7 2\n2 1000\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3gQVpMKzvPcaCc5cxEfsgxP1p-AYp_Y_VA5TO8FNsgHBuiX6-g1Eg6Ht5emR0k5loSklQjrwpd5879g7k28j1PojYHu1D8SofsRqj5n2jHtiglwoJG/reversort_engineering_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4 2 1 3\nCase #2: 1 2\nCase #3: 7 6 5 4 3 2 1\nCase #4: IMPOSSIBLE\nCase #5: IMPOSSIBLE\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  Sample Case #1 is described in the statement above.\n</p>\n<p>\n  In Sample Case #2, the algorithm runs for only one iteration on the proposed output.\n  In that iteration, reverse is applied to a sublist of size 1, therefore, its cost is 1.\n</p>\n<p>\n  In Sample Case #3, the first iteration reverses the full list, for a cost of 7. After that,\n  the list is already sorted, but there are 5 more iterations, each of which contributes a cost\n  of 1. Another valid output would be <code>7 5 4 3 2 1 6</code>. For that output, the first\n  iteration has a cost of 6, the last one has a cost of 2, and all others have a cost of 1.\n</p><p>\n  In Sample Case #4, Reversort will necessarily perform 6 iterations, each of which will have\n  a cost of at least 1, so there is no way the total cost can be as low as required.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":1,"type__str":"VISIBLE","value":11}],"title":"Reversort Engineering","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"000000000043580a","type":1,"type__str":"SPECTATOR"},"title":"Qualification Round 2021"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
