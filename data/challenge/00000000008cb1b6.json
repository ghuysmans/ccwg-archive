{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1668232800000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"00000000008cb1b6","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Thank you for participating in Kick Start 2022 Round H!</p>\n<hr>\n<p><b>Cast</b></p>\n<p>Running in Circles: Written by Shashwat Badoni and prepared by Shadman Protik.</p>\n<p>Magical Well Of Lilies: Written by Ravikant Vemparala and prepared by Laksh Nachiappan.</p>\n<p>Electricity: Written by Raunaq Singh and prepared by Chun-nien Chan.</p>\n<p>Level Design: Written by Bartosz Kostka and prepared by Yan Li.</p>\n<p>Solutions, other problem preparation, reviews and contest monitoring by\nAbhijeet Jha, Adilet Zhaxybay, Advitiya Brijesh, Akshay Mohan, Alan Lou, Amit Singh,\n  Aneesh Hiregange, Arjun Sanjeev, Bartosz Kostka, Bohdan Pryshchenko, Chu-ling Ko, Chun-nien Chan,\n  Cristhian Bonilha, Daksh Varshney, Diksha Saxena, Ekanshi Agrawal, Eric Dong, Gagan Kumar,\n  Hana Joo, Jackie Cheung, Jared Gillespie, Jimmy Dang, Kashish Bansal, Krists Boitmanis,\n  Kushagra Srivastava, Laksh Nachiappan, Lizzie Sapiro Santor, Lucas Maciel, Matt Kenison,\n  Nikita Rungta, Nitish Rai, Phil Sun, Raghul Rajasekar, Rahul Goswami, Rakesh Theegala,\n  Raunaq Singh, Ravikant Vemparala, Rohan Garg, Ruiqing Xiang, Sai Akhil Koditala,\n  Samriddhi Srivastava, Sarah Young, Sasha Fedorova, Satish Karri, Shadman Protik,\n  Shashwat Badoni, Swapnil Gupta, Swapnil Mahajan, Tarun Khullar, Teja Vardhan Reddy Dasannagari,\n  Umang Goel, Vakul Gupta, Vinay Khilwani, Vishal Som, Wei Zhou, Yan Li, Yash Ranka, Zhitao Li.</p>\n<p>Analysis authors:</p><ul>\n<li>Running in Circles: Ekanshi Agrawal</li>\n<li>Magical Well Of Lilies: Krists Boitmanis</li>\n<li>Electricity: Phil Sun</li>\n<li>Level Design: Advitiya Brijesh</li>\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1668222000000,"tasks":[{"analysis":"<h3>Test Set 1</h3>\n<p>\n  Since Ada only runs in the clockwise direction, we can ignore the direction\n  input altogether as Ada will always cross the starting line in the same\n  direction she had last crossed it. Now, we can calculate the total distance\n  run by Ada by calculating the sum:\n</p>\n<center>$$$ dist = (\\mathbf{D_1} + \\mathbf{D_2} + \\dots + \\mathbf{D_N})$$$</center>\n<p>\n  This sum can be calculated while reading the input line-by-line and adding to\n  $$$dist$$$, so we do not need to store the value of each $$$\\mathbf{D_i}$$$. Then, we can\n  calculate $$$\\lfloor\\frac{dist}{\\mathbf{L}}\\rfloor$$$, and obtain the number of laps\n  the machine has counted.\n</p>\n<center>$$$laps = \\lfloor\\frac{dist}{\\mathbf{L}}\\rfloor$$$</center>\n<p>\n  <i>Time and Space Complexity:</i>\n  This solution will run in $$$O(\\mathbf{N})$$$ time and take up $$$O(1)$$$ extra\n  space.\n</p>\n\n<h3>Test Set 2</h3>\n<p>\n  Going through the input line-by-line, we calculate how much Ada has to run to\n  be able to reach the starting line again (that is, the remaining distance to starting line,\n  $$$R$$$) from the Ada's current position $$$pos$$$ ($$$pos = 0$$$ initially) before a run and in\n  the current direction $$$\\mathbf{C_i}$$$. We also keep track of the previous direction\n  $$$prevdir$$$ she was running in when she last crossed the starting line.\n</p>\n<p>$$$R$$$ can be calculated as follows:</p>\n<ul>\n  <li>If $$$\\mathbf{C_i}$$$ is clockwise, $$$R = (\\mathbf{L} - pos) \\bmod \\mathbf{L}$$$</li>\n  <li>If $$$\\mathbf{C_i}$$$ is anticlockwise, $$$R = pos$$$</li>\n</ul>\n<p>During each run (that is, for each line of input):</p>\n<ul>\n  <li>\n    If $$$\\mathbf{D_i} \\lt R$$$, then we will just update her position\n    $$$pos$$$, as she can not reach the starting line.\n    <ul>\n      <li>If $$$\\mathbf{C_i}$$$ is clockwise, $$$pos = pos + \\mathbf{D_i}$$$</li>\n      <li>If $$$\\mathbf{C_i}$$$ is anticlockwise, $$$pos = pos - \\mathbf{D_i}$$$</li>\n    </ul>\n    <p>\n      After this update, we continue to the next run without updating\n      $$$prevdir$$$ as Ada has not crossed the line this time.\n    </p>\n  </li>\n  <li>\n    <p>\n      On the other hand if $$$\\mathbf{D_i} \\ge R$$$, and if $$$R \\gt 0$$$, we increase the number of laps by $$$1$$$ if $$$\\mathbf{C_i}$$$\n      is the same as $$$prevdir$$$. However, if $$$R = 0$$$ (that is, Ada is\n      exactly at the starting line), we do not perform this increment since Ada\n      had already reached the starting line in the previous run, where it was\n      counted as a lap by the machine (similarly for $$$R \\lt 0$$$). Thus, we do not treat starting a run at\n      the line as \"crossing\" the line, rather, we count a lap when Ada finishes\n      at the line. With this logic, the case where Ada changes her direction on the\n      line itself will also not be counted as a lap.\n    </p>\n    <p>\n      We then increase the number of laps by the value $$$\\lfloor\\frac{\\mathbf{D_i} -\n      R}{\\mathbf{L}}\\rfloor$$$ to take care of cases where multiple laps are made in a\n      single run (this will also handle the above case, where Ada just reaches\n      the starting line after a run). As these laps are counted from the\n      starting line, $$$prevdir$$$ does not matter in this calculation. Then, we\n      update Ada's current position:\n    </p>\n    <ul>\n      <li>If $$$\\mathbf{C_i}$$$ is clockwise, $$$pos = (\\mathbf{D_i} - R) \\bmod \\mathbf{L}$$$</li>\n      <li>\n        If $$$\\mathbf{C_i}$$$ is anticlockwise, $$$pos = \\mathbf{L} - ((\\mathbf{D_i} - R) \\bmod \\mathbf{L})$$$\n      </li>\n    </ul>\n    <p>\n      After the above process, we update $$$prevdir$$$ to $$$\\mathbf{C_i}$$$ and continue.\n    </p>\n  </li>\n</ul>\n<p>Finally, return the number of laps counted.</p>\n<p>\n  <i>Time and Space Complexity:</i>\n  This solution also runs in $$$O(\\mathbf{N})$$$ time, and takes up $$$O(1)$$$ extra\n  space.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0HZP4qbkMXvnRtngZf3jj2VEZk8U6fhuwv9U2lX160b1c-FnjkO7HsEQd0qZBdFghrUvXB-2-W/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000c4766e","statement":"<h3>Problem</h3>\n<p>\n  Ada has decided that this year, she will take part in the annual marathon that takes place in her\n  city. Since this is the first time she would be running such a long distance, she has decided to\n  start practising for it by running in the circular track of length $$$\\mathbf{L}$$$ units near her house.\n</p>\n<p>\n  Ada wants to focus only on running, so she decides to use a machine to count the number of laps\n  she has run. The machine is placed at the starting line of the circular track and starts the\n  count from $$$0$$$. Every time Ada arrives at\n  the starting line running in the same direction as the last time she departed from the\n  starting line, the\n  machine increases the number of laps that Ada has run by $$$1$$$. If she crosses the starting line\n  or changes\n  direction at the starting line, the machine considers the new direction as the direction she\n  last touched the starting line. The machine only remembers the last direction in which Ada touched\n  the starting line. During a lap, Ada can change directions any number of times, but as long as she\n  eventually touches the starting line in the same direction as she last touched it, the count of\n  laps in the machine increases by $$$1$$$.\n</p>\n<p>\n  This is the first time Ada has practised running long distances, so she cannot run continuously.\n  She runs some distance, then takes a break to regain her energy. However, when she starts running\n  again after taking a break, she cannot remember which direction she was running in previously.\n  So she picks one of the directions, clockwise or anticlockwise, and starts running from the same\n  position where she stopped.\n</p>\n<p>\n  Ada begins at the starting line and is initially facing in the direction of her first run. She\n  runs a total of $$$\\mathbf{N}$$$ times, taking breaks in between. Given\n  the information of the\n  distance $$$\\mathbf{D_i}$$$ units Ada has run, and the direction $$$\\mathbf{C_i}$$$ she has taken (clockwise or\n  anticlockwise) when she ran the $$$i$$$-th time, for all $$$i$$$ from\n  $$$1, \\dots, \\mathbf{N}$$$, can you tell the number\n  of laps that would be reported by the machine\n  at the end?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow. <br/>\n  The first line of each test case contains two positive integers $$$\\mathbf{L}$$$ and $$$\\mathbf{N}$$$, the length of the\n  circular track in units, and the number of times Ada has run respectively. <br/>\n  The next $$$\\mathbf{N}$$$ lines describe Ada's runs. The $$$i$$$-th line contains a positive integer $$$\\mathbf{D_i}$$$ and\n  a character $$$\\mathbf{C_i}$$$, the distance in units Ada has run\n  and the direction she has taken (clockwise or anticlockwise) respectively\n  during the $$$i$$$-th run. $$$\\mathbf{C_i}$$$ will always be either <code>'C'</code> (denoting clockwise\n  direction) or <code>'A'</code> (denoting anticlockwise direction).\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\n  where $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is a non negative integer\n  denoting the number of laps reported by the machine at the end.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$1 \\le \\mathbf{L} \\le 10^9$$$.<br/>\n  $$$1 \\le \\mathbf{N} \\le 10^4$$$.<br/>\n  $$$1 \\le \\mathbf{D_i} \\le 10^9$$$, for all $$$1 \\le i \\le \\mathbf{N}$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  $$$\\mathbf{C_i}$$$ is always <code>'C'</code>, for all $$$1 \\le i \\le \\mathbf{N}$$$.\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n  $$$\\mathbf{C_i}$$$ can be either <code>'C'</code> or <code>'A'</code>, for all $$$1 \\le i \\le \\mathbf{N}$$$.\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U12yYg0YDWCnO5fMRrNfLDdAyFUYQ9lSCWFIqtz6CTgLbkyao6G_c16JW7I4IEuYPQagU19PxlD22pckL68BpbwkkYBtf0WfpOKxhwskpLvVck/running_in_circles_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5 3\n8 C\n3 C\n6 C\n8 4\n5 C\n9 C\n8 C\n20 C\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2oxVMyTcJWfOwcuYrAc7M6eOvfYLueKfyP4IgjRjhYfLYaRR4ZOJpnpMXBVQChbbMxtW_bx8lwrfTXKhSTvb35Ne6B7LvVRigLu7vJBrLZ5Q7p/running_in_circles_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, the length of the circular track is $$$5$$$ units. Ada is facing the\n  clockwise direction in the beginning.\n  <ul>\n    <li>\n      First, Ada runs $$$8$$$ units in the\n      clockwise direction, touching\n      the starting line in the process, and the number of laps in the machine increases by $$$1$$$.\n      The machine now reports $$$1$$$ lap.\n      Ada is now $$$3$$$ units from the starting line in the clockwise direction.\n    </li>\n    <li>\n      Next, she runs $$$3$$$ units in the clockwise direction. This time, she touches the starting\n      line again and the number of laps in the machine increase by $$$1$$$. The machine now reports\n      $$$2$$$ laps.\n      After this, she is $$$1$$$ unit from the starting line in the clockwise direction.\n    </li>\n    <li>\n      Finally, she runs $$$6$$$ units in the clockwise direction, and she touches the starting line\n      again, increasing the number of laps in the\n      machine by $$$1$$$. At the end, the machine reports $$$3$$$ laps.\n    </li>\n  </ul>\n</p>\n<p>\n  In Sample Case #2, the length of the circular track is $$$8$$$ units. Ada is facing the\n  clockwise direction in the beginning.\n  <ul>\n    <li>\n      First, Ada runs $$$5$$$ units in the clockwise direction. Ada is now $$$5$$$ units from the\n      starting line in the clockwise direction.\n    </li>\n    <li>\n      Next, she runs $$$9$$$ units in the clockwise direction, touching the starting line. The\n      number of laps in the machine increases by $$$1$$$. The machine now reports $$$1$$$ lap.\n      After this, she is $$$6$$$ units from the starting line in the clockwise direction.\n    </li>\n    <li>\n      Next, she runs $$$8$$$ units in the clockwise direction. She touches the starting line again,\n      increasing the number of laps in the machine by $$$1$$$. The machine now reports\n      $$$2$$$ laps. After this, she is $$$6$$$ units from the starting line in the clockwise\n      direction.\n    </li>\n    <li>\n      Finally, she runs $$$20$$$ units in the clockwise direction. This time, she touches the\n      starting line a total of $$$3$$$ times, increasing the number of laps in the machine by\n      $$$3$$$. At the end, the machine reports $$$5$$$ laps.\n    </li>\n  </ul>\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0FSj-tnUbSTDEpj_7qESQL5QrNYApMwRlfPb2cFJBiml4FG-8bMNlXrgJ4PedxViudGIq4LYx4RPyhiZ_lcIq5V0Qq61reujcikjFCYXihZR0/running_in_circles_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">3\n5 3\n8 C\n4 A\n5 C\n4 5\n2 C\n8 A\n3 A\n5 C\n8 A\n4 3\n3 C\n2 A\n5 C\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0-fvHtUrI2HO1Caqk-eHTPZIHk0CI6jYXgG1Cyt0F9_NjrrHJcd5JhLvug8uc-qkvljlstVGxEikG9uPRcXe7oqI2tPYpjMiLTABSI-jNE0-BL/running_in_circles_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 1\nCase #2: 5\nCase #3: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, the length of the circular track is $$$5$$$ units. Ada is facing the\n  clockwise direction in the beginning.\n  <ul>\n    <li>\n      First, Ada runs $$$8$$$ units in the\n      clockwise direction, touching\n      the starting line in the process, and the number of laps in the machine increases by $$$1$$$.\n      The machine now reports $$$1$$$ lap.\n      Ada is now $$$3$$$ units from the starting line in the clockwise direction.\n    </li>\n    <li>\n      Next, she runs runs $$$4$$$ units in the anticlockwise direction. She touches the starting\n      line,\n      but since she touches it running in the opposite direction to what she was running previously,\n      this does not increase the number of laps in the machine. She is now $$$1$$$ unit\n      from the starting line in the anticlockwise direction.\n    </li>\n    <li>\n      Finally, she runs $$$5$$$ units in the clockwise direction. This time, again, she touches the\n      starting line, but since she last touched it in the anticlockwise direction, this is not\n      counted\n      by the machine. She does not touch the starting line again and at the end, the machine\n      reports $$$1$$$ lap.\n    </li>\n\n  </ul>\n</p>\n<p>\n  In Sample Case #2, the length of the circular track is $$$4$$$ units. Ada is facing the\n  clockwise direction in the beginning.\n  <ul>\n    <li>\n      First, Ada runs $$$2$$$ units in the clockwise direction. Ada is now $$$2$$$ units from the\n      starting line in the clockwise direction.\n    </li>\n    <li>\n      Next, she runs runs $$$8$$$ units in the anticlockwise direction. She touches the starting\n      line,\n      but since she touches it running in the opposite direction to what she was running previously,\n      this does not increase the number of laps in the machine. She then continues running\n      and ends up touching the starting line again. This time the number of laps reported by the\n      machine increases by $$$1$$$. The machine now reports $$$1$$$ lap.\n      After this run, she is $$$2$$$ units from the starting line in the anticlockwise direction.\n    </li>\n    <li>\n      Next, she runs $$$3$$$ units in the anticlockwise direction. She touches the\n      starting line, and the number of laps in the machine increases by $$$1$$$. The machine now\n      reports $$$2$$$ laps. After this run, she is $$$1$$$ unit from the starting line in the\n      anticlockwise direction.\n    </li>\n    <li>\n      Next, she runs $$$5$$$ units in the clockwise direction. She touches the starting line, but\n      this is not counted by the machine. She keeps running and then touches the starting line at\n      the end of her run, increasing the number of laps in the machine by $$$1$$$. The machine now\n      reports $$$3$$$ laps. After this run, she is at the starting line facing the clockwise\n      direction.\n    </li>\n    <li>\n      Finally, she runs $$$8$$$ units in the anticlockwise direction. At the beginning of this run,\n      she changes her\n      direction at the starting line, and the machine now considers the new direction,\n      anticlockwise, as the direction she last touched the starting line. She continues running\n      and touches the starting\n      line twice in the anticlockwise direction, increasing the number of laps in the machine by\n      $$$2$$$. At the end, the machine reports $$$5$$$ laps.\n    </li>\n  </ul>\n</p>\n<p>\n  In Sample Case #3, the length of the circular track is $$$4$$$ units. Ada is facing in the\n  clockwise direction in the beginning.\n  <ul>\n    <li>\n      First, Ada runs $$$3$$$ units in the clockwise direction. After this, she is $$$3$$$ units\n      from the starting line in the clockwise direction.\n    </li>\n    <li>\n      Next, she runs $$$2$$$ units in the anticlockwise direction. During this run, she does not\n      touch the starting line, so the machine still considers the clockwise direction as the last\n      direction. After this run, she is $$$1$$$ unit from the starting line in the clockwise\n      direction.\n    </li>\n    <li>\n      Finally, she runs $$$5$$$ units in the clockwise direction. She crosses the starting line\n      once, running in the same direction, clockwise, as the last time she departed from it \n      and the count of number of laps in the machine increases by $$$1$$$. At the end, the\n      machine reports $$$1$$$ lap.\n    </li>\n  </ul>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":6},{"type":1,"type__str":"VISIBLE","value":9}],"title":"Running in Circles","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\nWe have been given a permutation $$$\\mathbf{P}$$$ of length $$$\\mathbf{N}$$$ and are asked to find minimum swaps required to form at least\none permutation cycle of length $$$K$$$, for all $$$1 \\leq K \\leq \\mathbf{N}$$$. Here are a few steps required to solve this problem.\n\n<ul>\n  <li>Step 1: Find the existing permutation cycles.</li>\n  <p>\n  Considering <a href=\"https://mathworld.wolfram.com/PermutationCycle.html\" target=\"_blank\">permutation\n  cycle</a> as a graph, perform DFS from each unvisited node and keep traversing till we get a visited node. Maintain the cycle length for each DFS.\n  At the end of this we have an array representing cycle lengths of the permutation cycles. Alternative approach is to use <a href=\"https://en.wikipedia.org/wiki/Disjoint-set_data_structure\" target=\"_blank\">DSU</a> to find all cycles and respective lengths.\n  <br>\n  Let us name the cycle size array as $$$\\text{cycle_sizes}$$$.\n  </p>\n  <br>\n  <li>Step 2: Analyze the effect of a swap in the permutation.</li>\n  <p>\n    Two types of swaps are possible:\n    <ul>\n      <li>Type 1: Swap within the same cycle, the cycle will be broken into two smaller cycles.</li>\n      <li>Type 2: Swap two elements from different cycles, both the cycles will end up merging. The length of the new cycle will be the sum of lengths of two cycles merged.</li>\n    </ul>\n  </p>\n\n  <li>Step 3: Optimal merging for each cycle length.</li>\n  <p>\n  Now we know the existing cycle lengths and the effect of a swap, we need to find the optimal strategy to form a cycle of length $$$K$$$ in the minimum number of swaps.\n  <br>\n  Now the problem essentially boils down to optimally selecting the cycles to merge/break to form a cycle of length $$$K$$$.\n  There are two potential strategies:<br>\n  1) We can sort the cycle lengths in descending order by length and then merge the cycles starting from the maximum one till we get a final cycle of length\n  $$$ > K$$$ and then use one more swap to turn that into exactly $$$K$$$. The number of steps required here is an upper bound on the optimal number of swaps and the lower bound will be at least one less than the\n  upper bound (forming cycle of exact length $$$K$$$). Time complexity of greedy approach is $$$O(\\mathbf{N})$$$ since sorting the permutation cycles itself will take $$$O(\\mathbf{N})$$$ using <a href=\"https://en.wikipedia.org/wiki/Counting_sort\" target=\"_blank\">Counting sort</a>.\n  <br>\n  2) We can apply <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\" target=\"_blank\">dynamic programming</a> to optimally find minimum number of cycles required to form a cycle of size exactly $$$K$$$.\n  <br>\n  The optimal strategy is to choose the minimum of the two strategies.\n  </p>\n</ul>\n</p>\n<h3>\nTest Set 1\n</h3>\n<p>\n  For each of the cycles we do have the option either to include it in the optimal set of cycles to be merged or leave it. This problem is now very similar to the\n  <a href=\"https://en.wikipedia.org/wiki/Knapsack_problem\" target=\"_blank\">knapsack problem</a>.\n  <br>\n  Let $$$dp(i, j) $$$ be the minimum number of swaps required to form a cycle of length j using cycles from indices $$$(1, i)$$$.<br>\n  $$$dp(i, j) = \\min(dp(i - 1, j), 1 + dp(i - 1, j - \\text{cycle_sizes(i)})) $$$<br>\n  $$$ S = \\text{cycle_sizes.size()}$$$. <br>\n  We need to populate the $$$dp$$$ table with the above mentioned recurrence relation. $$$dp(S, K)$$$ is the answer from the knapsack approach and\n  $$$\\min(1 + dp(S, t)) $$$ for all $$$K+ 1 \\leq t \\leq \\mathbf{N}$$$ is the answer from greedy approach. Final answer will be minimum of both the\n  values.\n  <br>\n\n  Time complexity will be $$$O(\\mathbf{N}^2)$$$ to populate the $$$dp$$$ table.\n</p>\n\n\n<h3>\nTest Set 2\n</h3>\n\n<p>\n  Let $$$X$$$ be the number of length wise distinct cycles, minimum number of nodes required to form all the $$$X$$$ cycles\n  is $$$\\sum_{i = 1}^{X}i$$$. As per the constraints, $$$\\sum_{i = 1}^{X}i \\leq \\mathbf{N}$$$.\n  <br>\n  Hence there will be $$$O(\\sqrt{\\mathbf{N}})$$$ number of length wise distinct cycles. Using this fact we can speed up our knapsack-based solution from test set 1.\n  <br>\n  Let us name the distinct cycle size array as $$$\\text{distinct_cycle_sizes}$$$ and corresponding occurrences as $$$\\text{cnt}$$$.\n  Let $$$dp(i, j) $$$ be the minimum number of swaps required to form a cycle of length j using cycles from indices $$$ (1, i)$$$ where $$$1 \\leq i \\leq \\text{distinct_cycle_sizes.size()}$$$.<br>\n  <br>\n  Hence, in order to calculate $$$dp(i, j)$$$ (where i is the index of the current value $$$x$$$ being processed and $$$j$$$ is the cost), we only need these states\n  $$$dp(i - 1, j - x), dp(i - 1, j - 2 \\times x), \\dots, dp(i - 1, j - cnt(i) \\times x)$$$.\n\n  For each distinct cycle size, store its number of occurrences and then the idea to process\n  $$$v$$$(occurrences of each cycle) items of value $$$x$$$ is to treat the problem as a\n  <a href=\"https://wcipeg.com/wiki/Sliding_range_minimum_query\" target=\"_blank\">sliding window minimum</a> problem. <br>\n</p>\n<p>\n  Hence, the recurrence becomes $$$ dp(i, j) = \\min(v + dp(i - 1, j - v \\times \\text{distinct_cycle_sizes}[i]), v \\in [0, cnt(i)]$$$\n</p>\n<p>\n  Then, if we consider the values $$$j \\mod k$$$, you will notice that for a fixed remainder it just becomes a range min query on a 'sliding window' interval (namely, the left bound of the interval may only move to the right each query), which can be computed in amortized constant time using a monotonic deque.\n</p>\n<p>\nSo, now for each $$$i \\in [1, \\mathbf{N}]$$$, the optimal answer $$$= \\min(dp(\\text{items_count}, i), dp(\\text{items_count}, j) + 1)$$$ where $$$j > i$$$.\n</p>\n<p>\nComplexity will be $$$O(\\mathbf{N}\\sqrt{\\mathbf{N}})$$$ to populate the $$$dp$$$ table.\n</p>\n<h4>Sample Code (C++)</h4>\n<pre><code class=\"language-cpp\">\nconst <var>int</var> inf = 1e9;\nvoid knapsack(vector<<var>int</var>> distinct_cycle_sizes, <var>vector</var><<var>vector</var><<var>int</var>>> dp, vector<<var>int</var>> cnt, int n) {\n  dp[0][0] = 0;\n  for(<var>int</var> i = 1; i <= (int)distinct_cycle_sizes.size(); ++i) {\n    <var>int</var> cs = distinct_cycle_sizes[i - 1];\n    dp[i][0] = 0;\n    // Using standard sliding window approach.\n    for(<var>int</var> j = 0; j < cs; ++j) {\n      deque<<var>int</var>> dq;\n      for(<var>int</var> l = j; l <= n; l += cs) {\n        dp[i][l] = min(dp[i][l], dp[i - 1][l]);\n        <var>int</var> opt = inf, x = -1;\n        if(l and !dq.empty()) {\n          opt = dp[i - 1][dq.front()] + (l - dq.front()) / cs;\n          x = dq.front();\n        } else if(!l) {\n          opt = 0;\n        }\n        dp[i][l] = min(dp[i][l], opt);\n        while(!dq.empty() and dq.front() <= l - cnt[cs] * cs) {\n          dq.pop_front();\n        }\n        while(!dq.empty() and dp[i - 1][l] <= dp[i - 1][dq.back()]) {\n          dq.pop_back();\n        }\n        dq.push_back(l);\n      }\n    }\n  }\n  vector<<var>int</var>> fans(n + 1);\n  <var>int</var> best_right = inf, items_count = distinct_cycle_sizes.size();\n  for(<var>int</var> i = n; i >= 1; --i) {\n    // best_right + 1 accounts for greedy.\n    fans[i] = min(dp[items_count][i], best_right + 1);\n    best_right = min(best_right, fans[i]);\n  }\n  for(<var>int</var> i = 1; i <= n; ++i) {\n    cout << fans[i] - 1 << \" \";\n  }\n  return;\n}\n</code></pre>\n\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2LjB96jpxzAelzeTDScJBWRubX1Ijcgfm85CWB4B-dKB92HAHh0orwjj2-nMQwgD26K9uvUH-N/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000c47792","statement":"<h3>Problem</h3>\n<p>\n  A <a href=\"https://mathworld.wolfram.com/PermutationCycle.html\" target=\"_blank\">permutation\n  cycle</a> in a permutation $$$C$$$ is a sequence of integers $$$(a_1, a_2, \\dots, a_k)$$$ such that\n  the following hold:\n  <ul>\n    <li>$$$a_i \\in C$$$ for all $$$i$$$, and are distinct.</li>\n    <li>For each $$$i \\in \\{1, 2, \\ldots, k-1\\}$$$: $$$C[a_i] = a_{i+1}$$$, and $$$C[a_k] = a_1$$$.</li>\n</ul>\n</p>\n<p>\n  A permutation cycle of length $$$k$$$ is called a $$$k$$$-cycle.\n</p>\n<p>\n  For example, the permutation $$$C = [4, 2, 1, 3]$$$ has two cycles: the $$$3$$$-cycle\n  $$$(4, 3, 1)$$$, and the $$$1$$$-cycle $$$(2)$$$.  $$$(4, 3, 1)$$$ is a cycle because\n  $$$C[4] = 3$$$, $$$C[3] = 1$$$, and $$$C[1] = 4$$$.\n</p>\n<p align=\"center\">\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0FG6scO7z4-82BRpQVYjDUdX1RIliLmoUOYHMH0NQXiHpQoaQpMq5QCxEMhmQRKQm13b5z6JWq60JK6RvRaWkKO5D-EMAt/permutation_cycle.png\" alt=\"Sample case.\"/>\n</p>\n<p>\n  Grace loves permutation cycles, so Charles decides to design an $$$\\mathbf{N}$$$-level game to challenge her.\n</p>\n<p>\n  At the start of the game, the player is given an $$$\\mathbf{N}$$$-length permutation $$$\\mathbf{P}$$$ of integers from\n  $$$1$$$ through $$$\\mathbf{N}$$$.  The levels in the game are numbered from $$$1$$$ to $$$\\mathbf{N}$$$.  At each level, the\n  player starts with the <i>given</i> permutation, and is allowed to make modifications to it by\n  swapping any two elements in it (multiple swaps allowed).  To clear the $$$k$$$-th level in the\n  game, the player is required to find the <i>minimum</i> number of swaps using which a\n  $$$k$$$-cycle can be created in the permutation.  The player can progress to the $$$(k+1)$$$-th\n  level only after clearing the $$$k$$$-th level.\n</p>\n<p>\n  Grace finds the game a bit challenging, but wants to win at any cost.  She needs your help!\n  Formally, for each level $$$k$$$, you need to find the minimum number of swaps using which a\n  $$$k$$$-cycle can be created in the permutation.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.<br/>\n  The first line of each test case contains an integer $$$\\mathbf{N}$$$: the length of the permutation.<br/>\n  The next line contains $$$\\mathbf{N}$$$ integers $$$\\mathbf{P_1}$$$, $$$\\mathbf{P_2}$$$, $$$\\dots$$$, $$$\\mathbf{P_N}$$$, where the $$$i$$$-th\n  integer represents the $$$i$$$-th element in the permutation $$$\\mathbf{P}$$$.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$S_1, S_2, \\dots, S_N$$$</code>,\n  where $$$x$$$ is the test case number (starting from 1), and $$$S_i$$$ is the solution for the\n  $$$i$$$-th level in the game, that is, the minimum number of swaps needed to create an\n  $$$i$$$-cycle in the permutation.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$1 \\le \\mathbf{P_i} \\le \\mathbf{N}$$$, for all $$$i$$$.<br/>\n  All $$$\\mathbf{P_i}$$$ are distinct.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{N} \\le 10^3$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$1 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1zcbL9INJg0qz5s-c7crSg-H28LpExbmG-tr7L-WXbucU_hDmYrytHqM9ElYOOdw3CF7KG1i17O0IHGzpX9-ASOOyHbOh0uzB8q4w/level_design_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3\n1 2 3\n4\n4 2 1 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3WLlghvfKeLXHaBPPmUrTYxqPoO1a9elQRpblWSJuAfZM4_SeBGudQoKgkda_pFu6SFRNIKIwQTCFcY-M1ghK9r2a4uTt_dyaWyP4P/level_design_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0 1 2\nCase #2: 0 1 0 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, there are three $$$1$$$-cycles in the given permutation.  So, the first level\n  can be cleared with zero swaps.  To clear the second level, we can swap the first two elements to\n  get the permutation $$$[2, 1, 3]$$$, which contains the $$$2$$$-cycle $$$(2, 1)$$$.  To clear the\n  third level, we can swap the first two elements, followed by the second and third elements to get\n  the permutation $$$[2, 3, 1]$$$, which contains the $$$3$$$-cycle $$$(2, 3, 1)$$$.\n</p>\n\n<p>\n  In Sample Case #2, as explained earlier, the permutation has the $$$1$$$-cycle $$$(2)$$$.  So,\n  zero swaps are needed to clear the first level.  To clear the second level, we can swap the last\n  two elements to get the permutation $$$[4, 2, 3, 1]$$$, which contains the $$$2$$$-cycle\n  $$$(4, 1)$$$.   Since the permutation also has the $$$3$$$-cycle $$$(4, 3, 1)$$$, the third level\n  can also be cleared using zero swaps.  To clear the fourth level, we can swap the second and the\n  fourth elements to get the permutation $$$[4, 3, 1, 2]$$$, which contains the $$$4$$$-cycle\n  $$$(4, 2, 3, 1)$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":17},{"type":1,"type__str":"VISIBLE","value":22}],"title":"Level Design","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\nTest Set 1\n</h3>\n\n<p>\nFor this test set, we can simulate providing electricity to each junction, one junction at a time. For each of these $$$\\mathbf{N}$$$ simulations, we compute how many junctions will end up receiving electricity after the initial junction is powered, and our answer is the maximum of these $$$\\mathbf{N}$$$ simulation results. Each simulation can be accompolished with <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Depth-first_search\">depth-first search (DFS)</a>; we start our DFS at the junction we are directly providing power to. In each step of our DFS, we iterate over the current junction's neighbors, and recurse into the neighbor if its capacity is strictly less than the current junction's capacity. Because the capacity must be strictly decreasing, we are guaranteed to never go in a cycle or visit a junction more than once. The DFS time complexity is therefore bounded by the total number of edges, making it take $$$O(\\mathbf{N})$$$ time; with $$$\\mathbf{N}$$$ simulations, this gives us an $$$O(\\mathbf{N}^2)$$$ time solution, which is sufficient for this test set.\n</p>\n\n\n<h3>\nTest Set 2\n</h3>\n\n<p>\nWe can improve our DFS-based solution from test set 1 to be fast enough for this test set by removing the redundancy among the $$$\\mathbf{N}$$$ DFS invocations and consolidating the computation into an $$$O(\\mathbf{N})$$$ solution. To give an example of the computational redundancy from our test set 1 solution that we aim to remove, suppose $$$v_1$$$ and $$$v_2$$$ are directly connected junctions, with $$$v_1$$$ having the greater capacity. Simulating providing electricity to $$$v_1$$$ will also lead to simulating providing electricity to $$$v_2$$$ due to the edge between them, but we will also simulate directly providing electricity to $$$v_2$$$, duplicating our work. We can remove this duplication by treating this as a <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Dynamic_programming\">dynamic programming</a> problem and <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Memoization\">memoizing</a> our work.\n</p>\n\n<p>\nOur solution works similarly to before, where for each junction $$$v$$$ we perform a DFS to compute how many junctions would be powered if we provided electricity to $$$v$$$. However, we memoize this DFS; when the DFS is called on a junction $$$v$$$, we first check if $$$v$$$ is in our memoization table and return the result if it's present. Otherwise, we recurse and perform DFS as usual, but store the result in the memoization table before returning the result. This memoization implies that among our $$$\\mathbf{N}$$$ DFS calls, an edge will never be traversed twice, because after the first traversal, the result will be memoized, making further traversals unnecessary. This implies our $$$\\mathbf{N}$$$ DFS calls will take in total $$$O(\\mathbf{N})$$$ time, making this approach sufficiently fast for the large test set.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3i15WG8VuTMkreoCDsQfXpxtaXQjpJmJGl4ssd9MyGIkcQnsyjOGfwzXfCD_Z3uAnCJomg3SnL/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000c47c8e","statement":"<h3>Problem</h3>\n<p>\n  Ben works as an engineer in a city with $$$\\mathbf{N}$$$ electric junctions. These\n  junctions form a network and can be visualised as a connected graph with $$$\\mathbf{N}$$$\n  vertices and $$$\\mathbf{N}-1$$$ edges. The city is facing a power outage,\n  due to which none of the junctions are receiving electricity, and Ben is in\n  charge of handling the situation.\n</p>\n<p>\n  Each junction has a fixed electric capacity. $$$\\mathbf{A_i}$$$ is the electric capacity\n  of the $$$i$$$-th junction. Due to resource constraints, Ben can provide electricity\n  to <i>only one</i> junction, but other junctions can receive electricity depending on their\n  connections and capacities. If the $$$i$$$-th junction receives electricity,\n  then it will also get transmitted to all the junctions directly connected to the\n  $$$i$$$-th junction whose capacity is <i>strictly less</i> than $$$\\mathbf{A_i}$$$.\n  Transmission stops if no eligible junction is present. Help Ben determine the\n  maximum number of junctions that can receive electricity.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow.<br />\n  The first line of each test case contains an integer $$$\\mathbf{N}$$$ which represents the\n  number of junctions in the city.<br />\n  The next line contains $$$\\mathbf{N}$$$ integers. The $$$i$$$-th integer is $$$\\mathbf{A_i}$$$, which is\n  the electric capacity of the $$$i$$$-th junction.<br />\n  The next $$$\\mathbf{N}-1$$$ lines each contain two integers $$$\\mathbf{X_i}$$$ and $$$\\mathbf{Y_i}$$$, meaning that\n  the junctions $$$\\mathbf{X_i}$$$ and $$$\\mathbf{Y_i}$$$ are directly connected to each other.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the test case number\n  (starting from 1) and $$$y$$$ is the maximum number of junctions that can\n  receive electricity.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 40 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n  $$$1 \\le \\mathbf{A_i} \\le 10^9$$$, for all $$$i$$$.<br />\n  $$$1 \\le \\mathbf{X_i}, \\mathbf{Y_i} \\le \\mathbf{N}$$$, for all $$$i$$$.<br />\n  All the junctions are part of a single connected network.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{N} \\le 10^3$$$.<br />\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  For at most 15 cases:<br/>\n  $$$1 \\le \\mathbf{N} \\le 2 \\times 10^5$$$.<br/>\n  For the remaining cases:<br/>\n  $$$1 \\le \\mathbf{N} \\le 10^3$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0X1Fap6fgfVY_S51NMi9NVcb_1eaY_y7tnAP2KBZFiWWMLStKjJ1wePIo_CWLEeb5uU3lVbqR_P8ZCl6KwUb_ijipioEGDGU8k9g/electricity_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5\n1 2 3 4 3\n1 3\n2 3\n4 3\n4 5\n6\n1 2 3 3 1 4\n3 1\n3 2\n3 4\n4 5\n1 6\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1GrB9oyUbaSFbahPsYLaB4ntvqgzL5K4MIf3Aw8SxoTiaxzYrQGjPJjTKAE1cH6-n5tpwwAWJ7lFkN0FjsiT_PCDTievzJRekqeWU/electricity_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 5\nCase #2: 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p align=\"center\">\n    <img\n      src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2r0g1a49_UYFT5Zko5x2TXVbC5nDVEmq0isyH5M_IAko8cL2W9932sonrBH-XDbeEZbgMnPY1_st0B/case1.png\" width=\"90%\"\n      alt=\"Illustration for sample testcase 1\"\n    />\n  </p>\n<p>\n  In Sample Case #1, the optimal solution is to provide electricity to the fourth junction. This\n  will transmit electricity to all the junctions eventually.<br />\n  If the electricity is provided to the third junction, it\n  will transmit it to the first and second junction, but not to the fourth\n  junction. In that case, only three junctions can finally receive electricity.\n</p>\n<p align=\"center\">\n  <img\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3RIIxN79uFqAYygHZ3EHrqYgsTw6iXOKSW3oSgd1wgEVLdyW95zlubWQrEcOan9LL_0YbXAEwrUyZD/case2.png\" width=\"90%\"\n    alt=\"Illustration for sample testcase 2\"\n  />\n</p>\n<p>\n  In Sample Case #2, the optimal solution is to provide electricity to the third junction.\n  This will transmit it to the first and second junctions.\n  Note that electricity will not be transmitted to the fourth junction,\n  since its capacity is not <i>strictly less</i> than that of the third junction.<br />\n  If electricity is provided to the sixth junction, it will only be transmitted to\n  the first junction.<br />\n  If electricity is provided to the fourth junction, it will only be transmitted to\n  the fifth junction.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":10},{"type":1,"type__str":"VISIBLE","value":15}],"title":"Electricity","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\n  Test Set 1\n</h3>\n\n<p>\n  For the small test set, a simple backtracking algorithm is sufficiently fast. In each recursive\n  call, we need to keep track of the number of lilies remaining in the well, the current state\n  of well's memory, and the number of coins we have tossed so far. In each recursive step, we have at\n  most three choices:\n</p>\n<ul>\n  <li>Toss one coin for another lily;</li>\n  <li>Toss two coins for as many lilies as last noted by the well;</li>\n  <li>Toss six coins ($$$4+2$$$) for the well to remember the current state of the basket and then\n  toss as many lilies.</li>\n</ul>\n<p>\n  Of course, we would consider an operation only if the well has that many lilies,\n  for it would be a waste of coins otherwise. If the number of lilies left in the well becomes $$$0$$$ at\n  any time of the recursion, we update the minimum number of coins, if necessary, and return\n  immediately from the recursion.\n</p>\n\n<p>\n  Since we have at most three choices at each recursion level, the time complexity of this\n  exhaustive search might seem like a prohibitive $$$O(3^\\mathbf{L})$$$, however, the algorithm is much\n  faster in practice for two reasons. First, not all three choices are available at each\n  recursion level. And second, the maximal recursion depth of $$$\\mathbf{L}$$$ is possible only if we pick up\n  the lilies one by one. In other words, the average recursion depth is much smaller than $$$\\mathbf{L}$$$.\n  For example, the algorithm needs just $$$5060$$$ recursive calls for $$$\\mathbf{L}=20$$$.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  For the large test set, the exhaustive search is obviously too slow as the number of recursive\n  calls for $$$\\mathbf{L}=50$$$ is already $$$7,821,316,841$$$. Fortunately, dynamic programming comes to\n  rescue here.\n</p>\n\n<p>\n  But first, let us make one useful observation. Namely, we can always rearrange some operations\n  such that a two coin operation never follows a one coin operation. If it does, we can always swap\n  the two operations without affecting the net effect of the whole sequence of operations.\n</p>\n\n<p>\n  Now let us turn to our dynamic programming recurrence. Let $$$DP[i]$$$ be the minimum number of\n  coins needed to fetch $$$i$$$ lilies from the well. We have $$$DP[0]=0$$$ and $$$DP[1]=1$$$. For\n  $$$i > 1$$$, there are two possible ways of arriving at $$$i$$$ lilies &mdash; we either collect\n  $$$i - 1$$$ lilies first and then use a one coin operation to get another lily, or the last\n  operation must have been a two coin operation. The latter means that we had asked the well to\n  remember the state of our basket at $$$k$$$ lilies (where $$$k$$$ is a divisor of $$$i$$$) and\n  then applied $$$\\frac{i}{k}-1$$$ two coin operations. Formally,\n  $$$DP[i]=\\min(DP[i - 1] + 1, \\min\\limits_{k|i}\\{DP[k]+4+2(\\frac{i}{k}-1)\\})$$$.\n</p>\n\n<p>\n  In practice, instead of calculating each $$$DP[i]$$$ directly using the formula above and\n  iterating over the divisors of $$$i$$$, we inverse the process as follows:\n</p>\n\n<p>\n  At the beginning we can say that all values of $$$DP$$$\n  except for $$$0$$$ and $$$1$$$ are equal to infinity.\n  Now let us iterate through all $$$i$$$ from $$$2$$$ to $$$\\mathbf{N}$$$.\n  One option to use one coin and get from $$$i-1$$$ lilies to $$$i$$$ lilies,\n  so we can say that $$$DP[i] = min(DP[i], DP[i-1]+1)$$$.\n  Now when we already have $$$i$$$ lilies, we can also use four coins to remember the state of our basket\n  and then later get $$$j \\cdot i$$$ lilies from the well.\n  So we should update $$$DP$$$ for all multiples of $$$i$$$:\n  $$$ DP[j \\cdot i] = min(DP[j \\cdot i], DP[i] + 4 + 2 \\cdot (j-1)) $$$ for $$$i < j \\cdot i \\leq \\mathbf{N}$$$.\n</p>\n\n<p>\n  As for the time complexity of the algorithm, for each index $$$k$$$, there are\n  $$$O(\\frac{\\mathbf{L}}{k})$$$ multiples to be updated, which leads to\n  $$$O(\\mathbf{L}(1+\\frac{1}{2}+\\frac{1}{3}+\\ldots+\\frac{1}{\\mathbf{L}}))$$$ updates. The factor\n  $$$1+\\frac{1}{2}+\\frac{1}{3}+\\ldots+\\frac{1}{\\mathbf{L}}$$$ is the $$$\\mathbf{L}$$$-th\n  <a href=\"https://en.wikipedia.org/wiki/Harmonic_number\" target=\"_blank\">harmonic number</a>, which is\n  $$$O(\\log \\mathbf{L})$$$, therefore, the overall time complexity of the algorithm is\n  $$$O(\\mathbf{L} \\log \\mathbf{L})$$$.\n</p>\n\n<p>\n  As a final note, we can precompute the $$$DP$$$ table in advance, and then answer each test case\n  in constant time.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1PGGgPdUer2WE1690TffCaEvbVBNin5GwK4GwvHHCgEpvoWg6vx2WdYUcASykjTPXY78ux9SoA/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000c47e79","statement":"<h3>Problem</h3>\n<p>\nThere is a deep magical well in a forest that has some lilies on its waters.\nYou have a large empty basket and some coins, and are standing next to the well.\nYou have more coins than there are lilies in the well.\nThe well has taken note of the fact that your basket is empty.\n</p><p>\nIf you toss one coin into the well, the well will toss out one lily into your basket.\nIf you toss four coins at once into the well, the well will take note of how many lilies it has tossed out into your basket so far.\nIf you toss two coins at once into the well, the well will toss out as many lilies into your basket as it had last taken note of.\nIf you toss one coin, or two coins at once, into the well, and there are not enough lilies left in the well, the well will not toss out any lilies.\n</p><p>\nGiven the number of lilies $$$\\mathbf{L}$$$ in the well at the beginning, return the minimum number of coins\n  you will need to toss into the well to make it toss all of its lilies into your basket.\n</p><p>\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ lines follow.<br/>\nEach line contains a single integer $$$\\mathbf{L}$$$, representing the number of lilies in the well at the beginning.\n</p>\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the minimum number of coins you will need to toss into the well to make it toss out all of its $$$\\mathbf{L}$$$ lilies into your basket.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 15 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n$$$1 \\le \\mathbf{T} \\le 20$$$.<br/>\n$$$1 \\le \\mathbf{L} \\le 20$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{L} \\le 10^5$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2intZnjApbgZ9ThCIOD5Nq67hN2gVL0JJOzrgdpsgmttORp07QsvF2Q6K7jwTfGa19KfGPOnQG8PI_hXBj06-y1eScaAkIsGdHz2jjBZu2UAWVdTjJ/magical_well_of_lilies_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5\n20\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2XO4SvYs8ZHa9Po61JGp7AB1VsFsXezapatDuBkAY4pTdDTok9RzhWjRrZI59KqWgWGy0GIiZ2KqioRWTdt3BSIm-578o2b9IOlIkZ05edQrCkw9LM6w/magical_well_of_lilies_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 5\nCase #2: 15\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nFor test case #1, when there are $$$5$$$ lilies in the well, the least number of coins needed is $$$5$$$.\n We toss them, one at a time, into the well, and the well tosses out the $$$5$$$ lilies, one at a time, into our basket.\n No other sequence of moves results in a better solution, so $$$5$$$ is our answer.\n</p> <p>\nFor test case #2, first, we toss $$$5$$$ coins, one at a time, into the well, and the well tosses out $$$5$$$ lilies, one at a time, into our basket.\nNext, we toss $$$4$$$ coins at once into the well, and the well takes note that it has tossed out $$$5$$$ lilies into our basket so far.\nThen, we toss $$$2$$$ coins at once into the well, and the well tosses out $$$5$$$ lilies (that it took note of) into our basket.\nThen, we toss another $$$2$$$ coins at once into the well, and the well tosses out another $$$5$$$ lilies into our basket.\nFinally, we toss another $$$2$$$ coins at once into the well, and the well tosses out the final $$$5$$$ lilies into our basket.\nTotal coins needed is $$$15$$$. Getting $$$20$$$ lilies out of the well is not possible with any lesser number of coins, so $$$15$$$ is our answer.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":8},{"type":1,"type__str":"VISIBLE","value":13}],"title":"Magical Well Of Lilies","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000008cb1b6","type":1,"type__str":"SPECTATOR"},"title":"Round H 2022","ui_appearance":0,"ui_appearance__str":"APPEARANCE_TYPE_DEFAULT"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
