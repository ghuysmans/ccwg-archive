{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1472371200000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000201c0c","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1472360400000,"tasks":[{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1iDCLttXQ3byUZ0CKqBPSoebUq7aru_FhbppjiX4Ecb9CaVqHEAJY8UAaCcgjcV2oLKVlxWzkw/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201c0d","statement":"<h3>Problem</h3>\n<p>\nSherlock and Watson have already been introduced to sorting in their computer programming course. Now, Watson has always been curious about parallel computing and wants to sort a permutation of the integers 1 through <b>N</b> by breaking it into chunks, sorting the chunks individually, and then concatenating them.\n<br/>\n<br/>\nFor a permutation <code>p<sub>1</sub>, p<sub>2</sub>, ..., p<sub><b>N</b></sub></code>, a chunk is a contiguous subarray of the permutation: i.e., a sequence of elements <code>p<sub>i</sub>, p<sub>i + 1</sub>, ..., p<sub>j</sub></code>, for the elements at indexes i and j such that 1 &le; <code>i</code> &le; <code>j</code> &le; <b>N</b>.\n<br/>\n<br/>\n\nWatson wants to partition his permutation into an ordered list of one or more chunks, without changing the order that the elements are in, in such a way that each element of the permutation is in exactly one chunk, and all elements in a chunk are smaller than all elements in any later chunk.<br>\nFor example, for the permutation [2, 1, 3, 5, 4], these are the only four legal ways for Watson to break it into chunks: [[2, 1, 3], [5, 4]] or [[2, 1], [3, 5, 4]] or [[2, 1], [3], [5, 4]] or [[2, 1, 3, 5, 4]]. Watson is happiest when there are as many chunks as possible; we denote the maximum number of chunks for a permutation p as f(p). In this example, the maximum number of chunks is 3.<br/><br/>\n\nWatson wants to consider all permutations p of the numbers 1 through <b>N</b>, and find the <b>sum of squares</b> of f(p). Watson knows Sherlock might come in handy and comes to him for help, but Sherlock is as clueless as Watson and asks you for help. As the sum of squares can be large, please find it modulo <b>M</b>.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each test case consists of one line with two integers <b>N</b> and <b>M</b>.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is the sum of squares of <code>f(p)</code> for all permutations <code>p</code> of size <b>N</b>, modulo <b>M</b>.\n</p>\n\n<h3>Limits</h3>\nMemory limit: 1GB.<br/>\n<p>\n1 &le; <b>M</b> &le; 10<sup>9</sup>.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n1 &le; <b>T</b> &le; 100.<br/>\nTime limit: 20 seconds.<br/>\n1 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n1 &le; <b>T</b> &le; 20.<br/>\nTime limit: 60 seconds.<br/>\n1 &le; <b>N</b> &le; 5000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1wmUh5lxNpArHIRWWAHy0wjV_LgMNm_CsFoWarxRoi2lEa-4XKoONEeyl0EHoMZUNz1vx3XKTUJvxuG7kvKjEZ2bFSJM6jIPMk5skl72goFzSeQiQDcmdMj5iDtIrGxQ/sherlock_and_permutation_sorting_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n1 2\n2 4\n3 7\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U27HiERLzNV_XpjMGw0Zak5oolLF7LC2tT3_kHml93So0kmMd6JljEYbOZSkyin1pNiLCUchCAcQa4sVg77oidDONcTqzrjuv9a-uHnDSlEpCOoZELO37wB_g9KS8ZmIEk/sherlock_and_permutation_sorting_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 1\nCase #3: 6\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\nIn Case 1, there is only one permutation. <code>f([1]) * f([1]) % 2</code> = 1.\n<br/>\n<br/>\nIn Case 2, there are two permutations.<br/>\n<code>f([1, 2])</code> = 2.<br/>\n<code>f([2, 1])</code> = 1.<br/>\n<code>(2<sup>2</sup> + 1<sup>2</sup>) % 4</code> = 1.<br/>\n<br/>\nIn Case 3, there are six permutations.<br/>\n<code>f([1, 2, 3])</code> = 3.<br/>\n<code>f([1, 3, 2])</code> = 2.<br/>\n<code>f([2, 1, 3])</code> = 2.<br/>\n<code>f([2, 3, 1])</code> = 1.<br/>\n<code>f([3, 1, 2])</code> = 1.<br/>\n<code>f([3, 2, 1])</code> = 1.<br/>\n<code>(3<sup>2</sup> + 2<sup>2</sup> + 2<sup>2</sup> + 1<sup>2</sup> + 1<sup>2</sup> + 1<sup>2</sup>) % 7</code> = 6.<br/>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":19},{"type":2,"type__str":"HIDDEN","value":24}],"title":"Sherlock and Permutation Sorting","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3AuXjzMJ2xng8k6UMZ_YdyenxUDtUBPicB-oi846NXCh77gvCa0ZDbD9b_7ArFtBV-he_tFiOG/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201ca5","statement":"<h3>Problem</h3>\n<p>\nSherlock and Watson have recently enrolled in a computer programming course. Today, the tutor taught them about the balanced parentheses problem. A string <code>S</code> consisting only of characters <code>(</code> and/or <code>)</code> is <i>balanced</i> if:<br/>\n\n<ul>\n  <li>It is the empty string, or:</li>\n  <li>It has the form <code>(</code>S<code>)</code>, where S is a balanced string, or:</li>\n  <li>It has the form S<sub>1</sub>S<sub>2</sub>, where S<sub>1</sub> is a balanced string and S<sub>2</sub> is a balanced string.</li>\n</ul>\n\n<br/>\nSherlock coded up the solution very quickly and started bragging about how good he is, so Watson gave him a problem to test his knowledge. He asked Sherlock to generate a string S of <b>L + R</b> characters, in which there are a total of <b>L</b> left parentheses <code>(</code> and a total of <b>R</b> right parentheses <code>)</code>. Moreover, the string must have as many different balanced non-empty substrings as possible. (Two substrings are considered different as long as they start and end at different indexes of the string, even if their content happens to be the same). Note that S itself does not have to be balanced.<br/><br/>\n\nSherlock is sure that once he knows the maximum possible number of balanced non-empty substrings, he will be able to solve the problem. Can you help him find that maximum number?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each test case consists of one line with two integers: <b>L</b> and <b>R</b>.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is the answer, as described above.\n</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 100.<br/>\nTime limit: 20 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n0 &le; <b>L</b> &le; 20.<br/>\n0 &le; <b>R</b> &le; 20.<br/>\n1 &le; <b>L + R</b> &le; 20.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n0 &le; <b>L</b> &le; 10<sup>5</sup>.<br/>\n0 &le; <b>R</b> &le; 10<sup>5</sup>.<br/>\n1 &le; <b>L + R</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1aZTd-NTniirnI79qt6keBaeKOj9ogf7ZqexW8u5jUyTqO6X7OxFkTgopaRZlqKv1YyyXPwQ0Yav9fE30jQLVGD3CCVpUdZGqFDP6sj1eKZIWhNPBpABA/sherlock_and_parentheses_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n1 0\n1 1\n3 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0lGZdlzGdX6D7tYZ6RLQla6Tsj0rOJzpqDSgxHVkZqL5Qtg1iVLGzXe6xFoSM32ecB8YtAK5tIPg2i9AnmgVhoBfci7RCpE0dHEgeTaVsQX3NGqdbVDx7G/sherlock_and_parentheses_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0\nCase #2: 1\nCase #3: 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\nIn Case 1, the only possible string is <code>(</code>. There are no balanced non-empty substrings.<br/>\nIn Case 2, the optimal string is <code>()</code>. There is only one balanced non-empty substring: the entire string itself.<br/>\nIn Case 3, both strings <code>()()(</code> and <code>(()()</code> give the same optimal answer.<br/>\nFor the case <code>()()(</code>, for example, the three balanced substrings are <code>()</code> from indexes 1 to 2, <code>()</code> from indexes 3 to 4, and <code>()()</code> from indexes 1 to 4.\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":4},{"type":2,"type__str":"HIDDEN","value":7}],"title":"Sherlock and Parentheses","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0uHoFsj9Q3CWXVD11wAd3wTvxa6pEb7P_3qfRO5oXKbRjT9aNuZr43ATWZMu1Rd5qRKZP9niaG/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201d32","statement":"<h3>Problem</h3>\n<p>\nWatson and Sherlock are gym buddies.<br/><br/>\nTheir gym trainer has given them three numbers, <b>A</b>, <b>B</b>, and <b>N</b>, and has asked Watson and Sherlock to pick two different <b>positive integers</b> i and j, where i and j are both less than or equal to <b>N</b>. Watson is expected to eat exactly i<sup><b>A</b></sup> sprouts every day, and Sherlock is expected to eat exactly j<sup><b>B</b></sup> sprouts every day.<br/><br/> Watson and Sherlock have noticed that if the total number of sprouts eaten by them on a given day is divisible by a certain integer <b>K</b>, then they get along well that day.<br/><br/>\n\nSo, Watson and Sherlock need your help to determine how many such pairs of <b>(i, j)</b> exist, where i != j. As the number of pairs can be really high, please output it modulo <b>10<sup>9</sup>+7 (1000000007)</b>.<br>\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each test case consists of one line with 4 integers <b>A</b>, <b>B</b>, <b>N</b> and <b>K</b>, as described above.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is the required answer.\n</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 100.<br/>\nTime limit: 60 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n0 &le; <b>A</b> &le; 10<sup>6</sup>.<br/>\n0 &le; <b>B</b> &le; 10<sup>6</sup>.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n1 &le; <b>K</b> &le; 10000.<br/>\n1 &le; <b>N</b> &le; 1000.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n1 &le; <b>K</b> &le; 100000.<br/>\n1 &le; <b>N</b> &le; 10<sup>18</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1KdIn-8vIDIhbAcOQIvnvuuQOmZLEtcdayZ0zPphExcjHntOg4rgqrNPZzPRRj28iRYmCqbBbYFLRVR84S8uhl1TLvFnI66Onlkz9Oli84Wy98e5ub2G2Dza-O225u/sherlock_and_watson_gym_secrets_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n1 1 5 3\n1 2 4 5\n1 1 2 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2tAowLTOiRYF5fMAI8mKFUbDyags9RgNpQJNdMBCS2X5k08TaMz4IXCLDGIdvQalgrPHJhSFT260IWrvE9urzMqNMvuC7VSk7sHwyPjPySoiaxNAJ_oPmyBCOxblmK7g/sherlock_and_watson_gym_secrets_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 8\nCase #2: 3\nCase #3: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\nIn Case 1, the possible pairs are (1, 2), (1, 5), (2, 1), (2, 4), (4, 2), (4, 5), (5, 1), and (5, 4).\nIn Case 2, the possible pairs are (1, 2), (1, 3), and (4, 1).\nIn Case 3, No possible pairs are there, as i != j.\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":6},{"type":2,"type__str":"HIDDEN","value":15}],"title":"Sherlock and Watson Gym Secrets","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1qttqRkqnmcisN-EVTUcnUzExyUL2ELQO7mZs96CAG_SKYglOCYD27H4gdmRMVfZNt7Hg3wnKF/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201dbd","statement":"\n<h3>Problem</h3>\n<p>\nSherlock and Watson have mastered the intricacies of the language C++ in their programming course, so they have moved on to algorithmic problems. In today's class, the tutor introduced the problem of merging one-dimensional intervals. <b>N</b> intervals are given, and the <code>i</code>th interval is defined by the inclusive endpoints [<b>L<sub>i</sub>, R<sub>i</sub></b>], where <b>L<sub>i</sub> &le; R<sub>i</sub></b>.\n<br/>\n<br/>\nThe tutor defined the <i>covered area</i> of a set of intervals as the number of integers appearing in at least one of the intervals. (Formally, an integer p contributes to the covered area if there is some j such that <b>L<sub>j</sub></b> &le; <code>p</code> &le; <b>R<sub>j</sub></b>.)\n<br/>\n<br/>\nNow, Watson always likes to challenge Sherlock. He has asked Sherlock to remove exactly one interval such that the covered area of the remaining intervals is minimized. Help Sherlock find this minimum possible covered area, after removing exactly one of the <b>N</b> intervals.\n</p>\n\n<h3>Input</h3>\n<p>\nEach test case consists of one line with eight integers <b>N</b>, <b>L<sub>1</sub>, R<sub>1</sub></b>, <b>A</b>, <b>B</b>, <b>C<sub>1</sub></b>, <b>C<sub>2</sub></b>, and <b>M</b>. <b>N</b> is the number of intervals, and the other seven values are parameters that you should use to generate the other intervals, as follows:\n<br/>\n<br/>\nFirst define <code>x<sub>1</sub></code> = <b>L<sub>1</sub></b> and <code>y<sub>1</sub></code> = <b>R<sub>1</sub></b>. Then, use the recurrences below to generate <code>x<sub>i</sub>, y<sub>i</sub></code> for <code>i</code> = 2 to <b>N</b>:\n<ul>\n  <li><code>x<sub>i</sub></code> = ( <b>A</b>*<code>x<sub>i-1</sub></code> + <b>B</b>*<code>y<sub>i-1</sub></code> + <b>C<sub>1</sub></b> ) modulo <b>M</b>.</li>\n  <li>\n    <code>y<sub>i</sub></code> = ( <b>A</b>*<code>y<sub>i-1</sub></code> + <b>B</b>*<code>x<sub>i-1</sub></code> + <b>C<sub>2</sub></b> ) modulo <b>M</b>.\n</ul>\nWe define <b>L<sub>i</sub></b> = <code>min(x<sub>i</sub>, y<sub>i</sub>)</code> and <b>R<sub>i</sub></b> = <code>max(x<sub>i</sub>, y<sub>i</sub>)</code>, for all <code>i</code> = 2 to <b>N</b>.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is the minimum possible covered area of all of the intervals remaining after removing exactly one interval.\n</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 50.<br/>\nMemory limit: 1GB.<br/>\n0 &le; <b>L<sub>1</sub></b> &le; <b>R<sub>1</sub></b> &le; 10<sup>9</sup>.<br/>\n0 &le; <b>A</b> &le; 10<sup>9</sup>.<br/>\n0 &le; <b>B</b> &le; 10<sup>9</sup>.<br/>\n0 &le; <b>C<sub>1</sub></b> &le; 10<sup>9</sup>.<br/>\n0 &le; <b>C<sub>2</sub></b> &le; 10<sup>9</sup>.<br/>\n1 &le; <b>M</b> &le; 10<sup>9</sup>.\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\nTime limit: 30 seconds.<br/>\n1 &le; <b>N</b> &le; 1000.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\nTime limit: 200 seconds.<br/>\n1 &le; <b>N</b> &le; 5 * 10<sup>5</sup>(500000).<br/>\n</p>\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U282BIOAfetyoscrWCKu87nehnfyOJ2S2QjQlZgP4bz0uTFVIRPB9AoEc4EB9S_wDUMWG1bEOXL2UeQBYFNOnWCW-o3T0Wp6AzkqdV_QwyHvQ1xcg/watson_and_intervals_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n1 1 1 1 1 1 1 1\n3 2 5 1 2 3 4 10\n4 3 4 3 3 8 10 10\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0JgzWt8Hq5A7L4EYX7clW4D404PGEGXk5RT73x137t4QY-cBnWHwEB4xJD1911HXfvT_Kt_S1jwCpxwfL_sh0yG-Y0IE3rhyKesKNDCVkp2a5W_qU/watson_and_intervals_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0\nCase #2: 4\nCase #3: 9\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\nIn case 1, using the generation method, the set of intervals generated are: {[1, 1]}. Removing the only interval, the <i>covered area</i> is 0.<br/><br/>\nIn case 2, using the generation method, the set of intervals generated are: {[2, 5], [3, 5], [4, 7]}. Removing the first, second or third interval would cause the covered area of remaining intervals to be 5, 6 and 4, respectively.<br/><br/>\nIn case 3, using the generation method, the set of intervals generated are: {[3, 4], [1, 9], [0, 8], [2, 4]}. Removing the first, second, third or fourth interval would cause the covered area of remaining intervals to be 10, 9, 9 and 10, respectively.<br/><br/>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":8},{"type":2,"type__str":"HIDDEN","value":17}],"title":"Watson and Intervals","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000201c0c","type":1,"type__str":"SPECTATOR"},"title":"Round B 2016"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
