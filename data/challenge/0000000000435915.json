{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1621096200000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000435915","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\r\nCode Jam's 2021 Round 2 was a different kind of challenge, with no easy points on the table.\r\nThe first problem, <i>Minimum Sort</i>, was interactive, which is always tricky. However,\r\nit could be solved with one of the first algorithms most of us learned. <i>Matrygons</i>\r\nhad a geometry glazing but it was actually about arithmetic observations and\r\na recursion. As usual, the third problem is when things really heated up. Pancakes had a pretty\r\nshy year, waiting until Round 2 to show up, and even then, they were\r\n<i>Hidden Pancakes</i>. A classical problem of optimizing a dynamic programming\r\nthrough combinatorics. The round's last problem had a more classical flavor. <i>Retiling</i>\r\nwas all about properly modeling the problem with graphs and then applying the right algorithm.\r\n</p><p>\r\nThe scoreboard saw action pretty fast this time, with several successful submissions in the first\r\n10 minutes and a few contestants getting the first two problems done within 15 minutes.\r\n<b>Radewoosh</b> was the fastest to a perfect score at 36 minutes and 9 seconds, and with no\r\npenalty attempts, which assured them the top position. <b>ksun48</b> followed less than 30 seconds\r\nlater for second place. <b>maroon</b> was the only other coder that had a perfect score with\r\nunder 40 minutes of penalty, rounding out the top 3. At the end, 3862 contestants got a positive\r\nnumber of points and 284 of them finished with a perfect 100 points. The preliminary cutoff to\r\nadvance to Round 3 is 66 points and a low enough penalty.\r\n</p><p>\r\nThe results will be reviewed in the coming days. Those who are in the top 1000 after the round is\r\nmarked finalized advance to the last elimination round of the year! There are 3 weeks to get\r\nand/or stay in good shape until Round 3 (see the\r\n<a href=\"https://codingcompetitions.withgoogle.com/codejam/schedule\" target=\"_blank\">schedule</a>\r\nfor details). You can practice with any of our past problems from the\r\n<a href=\"https://codingcompetitions.withgoogle.com/codejam/archive\" target=\"_blank\">archive</a>.\r\n</p><p>\r\nFor those of you for whom this round is the end of the season, we hope you are very proud of making\r\nit this far. We are certainly amazed by how the problem solving skills of everyone keep getting\r\nbetter every year. You can see a certificate highlighting\r\nyour accomplishment in your\r\n<a href=\"https://codingcompetitions.withgoogle.com/profile\" target=\"_blank\">profile page</a>.\r\n</p>\r\n<hr>\r\n<p>\r\n  <b>Cast</b>\r\n</p>\r\n<p>\r\n  Minimum Sort: Written and prepared by Mohamed Yosri Ahmed.\r\n</p><p>\r\n  Matrygons: Written by Ian Tullis. Prepared by Artem Iglikov.\r\n</p><p>\r\n  Hidden Pancakes: Written and prepared by Ikumi Hide.\r\n</p><p>\r\n  Retiling: Written by Pablo Heiber. Prepared by Darcy Best.\r\n</p><p>\r\nSolutions and other problem preparation and review by Andy Huang, Artem Iglikov, Darcy Best,\r\nHannah Angara, Ikumi Hide, Liang Bai, Max Ward, Md Mahbubul Hasan, Mekhrubon Turaev,\r\nMohamed Yosri Ahmed, Nafis Sadique, Pablo Heiber, Pi-Hsun Shih, Shane Carr, Swapnil Gupta,\r\nTimothy Buzzelli, Vaibhav Tulsyan, and Yui Hosaka.\r\n</p><p>\r\nAnalysis authors:\r\n</p><ul>\r\n  <li>Minimum Sort: Pablo Heiber.</li>\r\n  <li>Matrygons: Pablo Heiber.</li>\r\n  <li>Hidden Pancakes: Darcy Best, Pablo Heiber and Timothy Buzzelli.</li>\r\n  <li>Retiling: Pablo Heiber.</li>\r\n</ul>\r\n\r\n","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1621087200000,"tasks":[{"analysis":"<h3>Test Set 1</h3>\n<p>\nThe statement of this problem requires calculating a function from integers to integers. After\nwe select a polygon to use, the remainder of the work is similar to the overall: select more\npolygons. This almost screams: write a recursive solution!\n</p><p>\nOne way of doing that is with a top-down approach: start by picking the largest polygon, and\nthen pick the rest. For all polygons except the largest, there is the additional restriction\nof \"fitting\" into the previous polygon. That is, the number of sides of the new polygon\nmust be a proper divisor of the number of sides of the last one.\n</p><p>\nWe can code that into a simple function that takes a number of sides left $$$t$$$ and the\nsize of the last polygon used $$$p$$$: $$$f(t, p) = 1 + \\max_{q : q | p} f(t - q, q)$$$\n(one plus the maximum $$$f(t - q, q)$$$ over all $$$q$$$s that are divisors of $$$p$$$)\nadding $$$f(0, p) = 0$$$ as base case, and appropriate conditions that $$$q$$$ is indeed\na polygon. The answer is then $$$\\max_p f(\\mathbf{N}, p)$$$.\nThis recursion is fast enough for the small bounds of Test Set 1 even if we iterate\nall possible $$$3 \\le q \\le \\min(p - 1, t)$$$. Of course, we can avoid that and find the\ndivisors faster by iterating only up to $$$\\sqrt{p}$$$ and checking both $$$q$$$ and $$$p / q$$$,\nbut the optimization is not necessary for Test Set 1, and not sufficient for Test Set 2.\n</p>\n<h3>Test Set 2</h3>\n<p>\nWhile <a href=\"https://en.wikipedia.org/wiki/Memoization\" target=\"_blank\">memoization</a> is\nthe first instinct to speed up a recursive function, the function described has too large of a\ndomain for that. A bottom-up approach, on the other hand, is much more suitable.\n</p><p>\nConsider starting from the smallest polygon. This can be done by using a function that\nis described by a similar expression, but swapping which of $$$p$$$ and $$$q$$$ is a parameter\nand which is iterated over:\n$$$f(t, q) = 1 + \\max_{p : q | p} f(t - p, p)$$$. This switch allows for a significant speed up:\nwhen checking all possible $$$p$$$ we can simply jump by $$$q$$$, dividing the total size of the\niteration by $$$q$$$. This is enough to pass Test Set 2 if implemented carefully, but it may be\nhard to be confident that it is.\n</p><p>\nWe can do better and improve our confidence with the following observation: once we\npick a polygon of size $$$q$$$, all future polygons will have sizes multiples of $$$q$$$.\nTherefore, we can divide the whole problem by $$$q$$$ (and allow pseudo-polygons of size $$$2$$$)\nby setting $$$f(t, q) = f(t / q, 1)$$$. If we are careful about not allowing size $$$2$$$ for the\nvery first polygon, this leaves us having to calculate only $$$g(t) = f(t, 1)$$$, which has a\ndomain of memoizable size. If we add memoization, we have a faster solution, and more importantly,\none for which we can pre-compute the entire recursive function and be sure about the running time\nirrespective of the input.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U30YlZZqXX9ybgSBVVjngGDTnOBxwE7Hg6_sLRs6nFPdzwrDb1NbzDo28UW31TXW7v6-ZXPS4dd/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000007dbf06","statement":"\n<h3>Problem</h3>\n<p>\nA <a href=\"https://en.wikipedia.org/wiki/Matryoshka_doll\" target=\"_blank\">matryoshka</a>\nis a type of doll that originated in Russia over a century ago. Their\ndefining characteristic is that they consist of a set of dolls, all of a different size, with\nsmaller dolls fitting nicely inside larger dolls.\n</p><p>\nIn this problem, we work with matrygons, which are sets of <a href=\"https://en.wikipedia.org/wiki/Regular_polygon#Regular_convex_polygons\" target=\"_blank\">regular convex polygons</a> that follow\na similar nesting pattern. A matrygon consists of a set of regular convex polygons with positive area\n$$$p_1, p_2, \\dots, p_k$$$ such that, for all $$$i$$$,\nthe vertices of $$$p_{i+1}$$$ overlap with a proper subset of the vertices of $$$p_i$$$\n($$$p_{i+1}$$$ has strictly less vertices than $$$p_i$$$).\n</p><p>\nFor example, the following pictures illustrates two matrygons.\nThe first one contains $$$3$$$ regular convex polygons:\na regular icositetragon ($$$24$$$ sides), a regular hexagon ($$$6$$$ sides), and an\nequilateral triangle ($$$3$$$ sides). The second one contains $$$2$$$ regular convex polygons:\na regular icosidigon ($$$22$$$ sides) and a regular hendecagon ($$$11$$$ sides).\nEach of these matrygons has $$$33$$$ total sides among all polygons in it.\n</p><p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U10YV7DutUsks9UuI995QKIP1nIHAhOb-BqXUvHNQHDJC-tvKkvFUXDLhD2Y1N3wKIhOJMlcRPn3BfMTw/matrygons.png\" style=\"max-width:550px;\" alt=\"A matrygon containing a regular icositetragon (24 sides), a regular hexagon (6 sides), and an equilateral triangle (3 sides)\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1TYmLuKVyCArXQSpMaIqoBz2W-pTGeJOPQIrEDE9gYpazzyKAifSiSScpRdgm1YsrIaeQob4qixKx_uAfK/matrygons_2.png\" style=\"max-width:550px;\" alt=\"A matrygon containing a regular icosidigon (22 sides) and a regular hendecagon (11 sides)\">\n</p><p>\nGiven a fixed total number of sides $$$\\mathbf{N}$$$, calculate the largest number\nof polygons that can be part of a matrygon such that the total number of sides among\nall polygons in it is exactly $$$\\mathbf{N}$$$.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ lines follow.\nEach line represents a test case and contains a single integer $$$\\mathbf{N}$$$, the target total\nnumber of sides.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the maximum\nnumber of polygons in a matrygon such that the total number of sides among\nall polygons in it is exactly $$$\\mathbf{N}$$$.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n$$$3 \\le \\mathbf{N} \\le 1000$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n$$$3 \\le \\mathbf{N} \\le 10^6$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3hlqFZBwz8k8ZOr5VQqR5xLCRfeaUgObliNm7jMdEcJOgZoWy8Wi1qOpVi2VHotRsf7F4GTmjGtO8KzQnlsxZoH_YAPhz8JjQ/matrygons_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n33\n15\n41\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U12eBfFL7m1QFHJU8gSI8_YLOhqqzJyzN1tzveOtZ7rSZEk_kVWjBjgdbecGEOQ0NGE3l25W64fdet7EV_W5NX9Xm7a-TWx4dPo/matrygons_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 2\nCase #3: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  The first matrygon pictured in the problem statement is an optimal solution for Sample Case #1.\n</p><p>\n  In Sample Case #2, we can get to two polygons by fitting a regular pentagon ($$$5$$$ sides)\n  inside a regular decagon ($$$10$$$ sides).\n</p><p>\n  In Sample Case #3, there is no way to create a matrygon with multiple regular polygons, so\n  our only option is to use a single regular tetracontahenagon ($$$41$$$ sides).\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":1,"type__str":"VISIBLE","value":13}],"title":"Matrygons","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\n  Test Set 1\n</h3>\n<p>\nFor Test Set 1, the number of pancakes is small enough to do something exponential. One possible\nway would be to go through every possible order of pancakes. That would be too slow, but we can\nidentify some repetition: any hidden pancakes at any point could be hidden in multiple ways,\nand that does not affect how we continue the process. Removing the cost of calculating these\noverlapping cases leads to a\n<a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\" target=\"_blank\">dynamic programming</a>\nsolution.\n</p><p>\nWe can formalize the idea above as follows: instead of remembering exactly the current\nstack of pancakes as the current state, we can store one of $$$3$$$ states for each pancake:\nunused, visible, or hidden. The visible pancakes are always stacked in decreasing order of radius,\nand the position in the stack of hidden pancakes, as argued above, does not affect the process.\nThus, we can define a function $$$f$$$ recursively that takes a state description and returns\nthe number of valid ways to finish a pancake stack from that state. Applying $$$f$$$ to the state\nin which all pancakes are visible gives the answer of the problem.\n</p><p>\nLet's define $$$f(s)$$$ recursively, where $$$s$$$ is a state. If no pancakes are unused in\n$$$s$$$, then the number of ways to finish it is simply $$$1$$$. This is our base case.\nIf there are unused pancakes, we can go through all of them to choose which is the next pancake\nthat should be cooked. If $$$s_i$$$ is the state that results from cooking the pancake of radius\n$$$i$$$ centimeters when the state was $$$s$$$, then $$$f(s) = \\sum_i f(s_i)$$$ where\nthe summation is over pancakes that are unused in $$$s$$$.\n</p><p>\nSince each pancake can independently be in one of $$$3$$$ states, the domain of $$$f$$$ has\n$$$3^{\\mathbf{N}}$$$ overall states. The non-recursive cost of\ncomputing $$$f$$$ is a low-degree polynomial on $$$\\mathbf{N}$$$. The exact degree depends on the\nimplementation, but it is not too hard to do it in linear time, yielding an overall algorithm\nthat runs in $$$O(3^{\\mathbf{N}} \\cdot \\mathbf{N})$$$.\n</p><p>\n  We can also use backtracking to solve the problem. We start building the permutations one\n  element at a time, checking that the $$$\\mathbf{V_i}$$$s for this partitial permutation match the ones\n  needed for this test case.\n  It can be proven that the complexity of such a solution is bounded by $$$O(2^\\mathbf{N} \\mathbf{N}^3)$$$,\n  which is significantly better than $$$O(\\mathbf{N}!)$$$ of the simplest brute force algorithm,\n  and is enough to solve this test set.\n</p>\n<h3>\n  Test Set 2\n</h3>\n<p>\n  From the input, we can keep track of the current list of visible\n  pancakes. To make things easier, when a pancake gets covered up in the stack,\n  we will view this as the pancake being \"removed\" from the list of visible pancakes.\n  We can create a list of inequalities relating the sizes\n  of the pancakes. Let $$$P_i$$$ be the radius of the $$$i$$$-th pancake\n  added.\n</p>\n<p>\n  First, it's worth noting that each time we add a pancake to the stack,\n  the size of the list of visible pancakes will either increase by $$$1$$$, stay the same,\n  or decrease. If the size of the list ever increases by more than one,\n  then this case is impossible so our answer is $$$0$$$.\n</p>\n<p>\n  Let's consider the possible scenarios when we are adding the\n  $$$i$$$-th When the size of the list increases by $$$1$$$\n  ($$$\\mathbf{V_i} = \\mathbf{V_{i-1}} + 1$$$), we know that the new pancake is smaller\n  than all of the pancakes in our list. We can add the inequality\n  $$$P_x \\gt P_i$$$ where $$$x$$$ is the pancake that was previously at the end of the list.\n</p>\n<p>\n  If the size of the list stays the same or decreases\n  ($$$\\mathbf{V_i} \\le \\mathbf{V_{i-1}}$$$), then we know that the new pancake is larger\n  than the last $$$\\mathbf{V_i} - \\mathbf{V_{i-1}} + 1$$$ pancakes on the list\n  and each of these pancakes gets removed from our list. We can add\n  the inequality $$$P_i \\gt P_x$$$ where $$$x$$$ is the last pancake we\n  removed from the list. Also, if $$$\\mathbf{V_i} \\gt 1$$$, then the new pancake\n  is strictly smaller than the rest of the pancakes in the list. In this\n  case, we can add the inequality $$$P_y \\gt P_i$$$ where $$$y$$$ is the\n  first pancake we did not \"remove\".\n</p>\n<p>\n  Note that in the latter case, we would already have added an inequality\n  saying that $$$P_y \\gt P_x$$$. But, this inequality is redundant now that\n  we have the extra inequalities $$$P_y \\gt P_i$$$ and $$$P_i \\gt P_x$$$.\n  Therefore, we can remove the inequality $$$P_y \\gt P_x$$$ to prevent us\n  from having any redundant inequalities that can cause us issues later.\n</p>\n<p>\n  After removing the redundant edges, each pancake is on the right side\n  of at most one inequality in the form of $$$A \\gt B$$$. Because of this,\n  the inequalities can be modeled as a tree\n  where we have an edge from $$$A$$$ to $$$B$$$ if $$$A \\gt B$$$.\n  We can then solve for the number of valid cooking orders of $$$\\mathbf{N}$$$ pancakes\n  recursively starting at the root of the tree which is the largest pancake.\n  Note: the largest pancake is whichever pancake was at the beginning of our list\n  at the end.\n</p>\n<p>\n  Let $$$s(i)$$$ be the number of pancakes in the subtree rooted at $$$i$$$.\n  Also, let $$$f(i)$$$ be equal to the number of valid permutations of the pancake\n  sizes (ranging from $$$1$$$ to $$$s(i)$$$) in the subtree starting at $$$i$$$.\n</p>\n<p>\n  To solve for $$$f(i)$$$ we need to count the number of ways we can assign\n  pancake sizes to the subtrees belonging to our direct children. Then, each\n  child subtree can permute itself in $$$f(j)$$$ ways (where $$$j$$$ is a\n  direct child of $$$i$$$). So, $$$f(i)$$$ is the product of all $$$f(j)$$$'s\n  and the number of ways we can assign pancake sizes to our subtrees.\n</p>\n<p>\n  Since $$$i$$$ is the largest pancake in our subtree, it must be given the\n  largest size. The other $$$s(i) - 1$$$ pancake sizes for our subtree can be\n  assigned to any subtree. The number of ways to do this can be counted using\n  <a href=\"https://en.wikipedia.org/wiki/Multinomial_theorem\" target=\"_blank\">Multinomial Coefficients</a>.\n</p>\n<p>\n  If we precompute the factorials and inverse factorials (to allow for\n  division under mod), we can count the number of valid cooking orders\n  in $$$O(\\mathbf{N})$$$. Building the tree of inequalities also can be done in\n  linear time. This gives us a final time complexity of $$$O(\\mathbf{N})$$$\n  (assuming we precompute factorials and inverse factorials in linear time).\n</p>\n<h4>\n  An alternate solution\n</h4>\n<p>\n  There is a different solution to the problem that requires two observations: (1) the largest\n  pancake (the one with a radius of $$$\\mathbf{N}$$$ cm) can only be placed at position $$$k$$$, where\n  $$$k$$$ is the largest integer such that $$$\\mathbf{V_k} = 1$$$ and (2) since the pancake with\n  a radius of $$$\\mathbf{N}$$$ covers all other pancakes, the order of the pancakes before the largest pancake\n  does not impact the $$$\\mathbf{V_i}$$$s for the pancakes after the largest pancake. This allows us to split\n  the problem into two independent parts. We solve the left part and the right part separately.\n  For the right part, the largest pancake will always be visible, so we subtract $$$1$$$\n  from all $$$\\mathbf{V_i}$$$ in the right part to account for it (note we do not actually do the\n  subtraction, because that would be too slow, but we just implicitly do it). We must also\n  choose which pancakes were in the left and right parts (there are $$$\\binom{\\mathbf{N}-1}{k-1}$$$\n  ways of doing this where the largest pancake was at index $$$k$$$).\n  As base cases: If the range is empty, then there is $$$1$$$ valid ordering, and if there\n  is no $$$\\mathbf{V_i} = 1$$$, then there are $$$0$$$ valid orderings. Otherwise,\n  the product of the left part's answer, the right part's answer, and the binomial\n  coefficient is the total number of orderings.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0PGs5xSwCPJ02U3mfjOMo3EWo77Z7JVIQRTaCVHuuxQcCaZQ4GDoh3-IkDgOLSDGNgivPm7VXS/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000007dc20c","statement":"<h3>Problem</h3>\n<p>\nWe are cooking $$$\\mathbf{N}$$$ pancakes in total. We cook one pancake with a $$$1$$$ centimeter (cm) radius,\none with a $$$2$$$ cm radius, one with a $$$3$$$ cm radius, ..., and one with an $$$\\mathbf{N}$$$ cm radius,\nnot necessarily in that order. After we cook the first pancake, we just lay\nit on a plate. After we cook each subsequent pancake, we lay it on top of the previously made\npancake, with their centers coinciding. In this way, a pancake is visible from the top\nof the stack when we first add it. A pancake only becomes hidden if we later cook another pancake with\na larger radius.\n</p><p>\nFor example, say we cook $$$4$$$ pancakes. We first cook the pancake with\nradius $$$3$$$ cm, and it is visible. Then, we cook the pancake with radius $$$1$$$ cm, lay it\non top of the first one and both are visible. Third, we cook the pancake with radius $$$2$$$ cm,\nand now that covers the previous pancake, but not the first one, so $$$2$$$\npancakes remain visible in total. Finally, we cook the pancake with radius $$$4$$$ cm\nwhich covers the other pancakes leaving only $$$1$$$ visible pancake. The picture below illustrates\nthe state of the stack after each pancake is cooked. Within each stack, the fully\ncolored pancakes are visible and the semi-transparent pancakes are not visible.\n</p><p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2PnUvUeCV3f84H0LpLqsnvXaSZeD3-GJ23KRga_OdYUIVEfzm5nj9qeqY5cHXCmKtFfE2XXwnB3zI/sample1.png\" style=\"max-width:550px;\" alt=\"Four stacks with pancakes of radii 3, 3 and 1, 3, 1 and 2, and 3, 1, 2 and 4.\">\n</p><p>\nLet $$$\\mathbf{V_i}$$$ be the number of visible pancakes when the stack contains exactly $$$i$$$ pancakes.\nIn the example above,\n$$$\\mathbf{V_1} = 1$$$, $$$\\mathbf{V_2} = 2$$$, $$$\\mathbf{V_3} = 2$$$, and $$$\\mathbf{V_4} = 1$$$.\n</p><p>\nGiven the list $$$\\mathbf{V_1}, \\mathbf{V_2}, \\dots, \\mathbf{V_N}$$$, how many of the $$$\\mathbf{N}!$$$ possible cooking orders\nyield those values? Since the output can be a really big number, we only ask you to output the\nremainder of dividing the result by the prime $$$10^9+7$$$ ($$$1000000007$$$).\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow,\neach described with two lines. The first line of a test case contains a single integer $$$\\mathbf{N}$$$,\nthe number of pancakes we cook. The second line of a test case contains $$$\\mathbf{N}$$$ integers\n$$$\\mathbf{V_1}$$$, $$$\\mathbf{V_2}$$$, ..., $$$\\mathbf{V_N}$$$, representing the number of visible pancakes after we cook\n$$$1$$$, $$$2$$$, ..., $$$\\mathbf{N}$$$ pancakes, respectively.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere <code>$$$x$$$</code> is the test case number (starting from 1) and <code>$$$y$$$</code>\nis the number of cooking orders of $$$\\mathbf{N}$$$ pancakes that yield the given numbers of visible pancakes\nafter each step, modulo the prime $$$10^9+7$$$ ($$$1000000007$$$).\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{V_i} \\le i$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\nTime limit: 30 seconds.<br/>\n\n$$$2 \\le \\mathbf{N} \\le 13$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n$$$2 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2EnS0L9Xy-p1RPDzhu9ICz46Bu6-3oejVku7GNEN3JboqNmEtrnqWzegdw2T1-YeALaUwwp7ElJihLw8D00n3r61XsE0pl44JrG1hNNH8/hidden_pancakes_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n4\n1 2 2 1\n3\n1 1 2\n3\n1 1 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1fYlKhsvCX3HJtZCk8DgFlPLSntvQoL9FIYWy-EnMGvqUoaIN-eTcASgxNUx7P_M9_f4wv5tBRit-ymuIEDPttvOiloyGilsvksMUvYmX_/hidden_pancakes_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 2\nCase #3: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  Sample Case #1 is explained in the problem statement. The order $$$3, 1, 2, 4$$$ is the only\n  one that yields the given $$$\\mathbf{V_i}$$$s.\n</p><p>\n  In Sample Case #2, both the order $$$1, 3, 2$$$ and the order $$$2, 3, 1$$$ yield the intended\n  $$$\\mathbf{V_i}$$$s. The pictures below illustrate both options.\n</p><p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0ADHi4t6CzKVz76Cs9jleygbx-CTQDIeM5ugAwTeg2L66jOWnIMeBSgRMT7ZMOL7njoyOR1zG-A6C5/sample2a.png\" style=\"max-width:550px;\" alt=\"Three stacks with pancakes of radii 1, 1 and 3, and 1, 3 and 2.\">\n</p><p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3S1NCiOKCwb9KOfWh1Wz4m_BE2wWf7nN2dlQGl3NcGmZMVT_PqVr4jQMmjTjAkXMojt83qv4UNFSf9/sample2b.png\" style=\"max-width:550px;\" alt=\"Three stacks with pancakes of radii 2, 2 and 3, and 2, 3 and 1.\">\n</p><p>\n  In Sample Case #3, only $$$1$$$ pancake is visible after the second is made, so there is no way\n  to have more than $$$2$$$ visible pancakes by only adding a third.\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0YWGCYRdXYUI4fvAGCU1aEhazwnjNSvf9PuqVbl9CtHYzBiMbnh7Wt_Y_o_vrK2Az_w-8b7bhLfhOnkdT5xJvSgCtpHF-P7IoJwljXDtA/hidden_pancakes_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">1\n24\n1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2 1 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U04Tw3eNjx4TGmG8BejB0QOKFhqv9g44Xn2FqlK0uez1wj7K9JDWb3fuNhhAuMztdrxZDSrFNVYwRU01mtOU2MHE0TsqyMXxULYiVSbRP4T/hidden_pancakes_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 234141013\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In the Sample Case for Test Set 2, there are $$$316234143225$$$ cooking orders that yield the\n  given $$$\\mathbf{V_i}$$$s. Modulo $$$10^9+7$$$, this value is $$$234141013$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":21}],"title":"Hidden Pancakes","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\nThe first simple observation we need to solve this problem is that we never swap two tiles\nthat are showing the same color.\n</p><p>\nThe main not-that-simple observation is that any given tile should either be\nflipped or swapped (or neither), but never both, regardless of costs. This can be proved\nby considering all operations that affect tile $$$a$$$: if there is a swap of $$$a$$$\nand $$$b$$$ followed by a flip of $$$a$$$ or vice versa, the same effect can be achieved for less\ncost by simply flipping $$$b$$$ (which may have moved by its own swaps in between).\n</p><p>\nA small addition to the above is that we never want to flip the same tile more than once.\nSince each tile is only affected by one type of operation, we can assume that all swaps happen\nbefore all flips. Thus, after all swaps are done, the flips are fixed: any tile that has a different\ncolor than the target state must be flipped, and the other tiles must not.\n</p>\n<h3>Test Set 1</h3>\n<p>\nIn Test Set 1, we can make the additional observation that no tile is to be swapped twice.\nSince we should not swap tiles when they are showing the same color,\nswapping $$$a$$$ and $$$b$$$ and then $$$b$$$ and $$$c$$$ is equivalent\nto flipping $$$a$$$ and $$$c$$$, which costs the same. Because we swap each tile only once,\nwe must only swap two tiles if the swap fixes both of their colors (the samples already hint\nat this fact). Since swaps fix colors for two tiles and flips for one tile, we want to do\nas many swaps as we can within this restrictions, and then flip the rest.\n</p><p>\nAt this point, the problem becomes a classic one: some cells of the matrix need to be changed, and\nwe want to match as many of those as possible with an adjacent cell that also needs to be changed,\nbut to the other color. Since the graph of cells and adjacencies is\n<a href=\"https://en.wikipedia.org/wiki/Bipartite_graph\" target=\"_blank\">bipartite</a>,\nthis can be solved with a\n<a href=\"https://en.wikipedia.org/wiki/Matching_(graph_theory)\" target=\"_blank\">maximum\nmatching</a> algorithm on a bipartite graph. The solution is then the number of cells that\nneed to change minus the size of such a maximum matching.\n</p>\n<h3>Test Set 2</h3>\n<p>\nAs the additional sample shows, in Test Set 2 it is very possible that we need to swap the same\ntile multiple times. Luckily, we can generalize the solution explained for Test Set 1 for this\nscenario.\n</p><p>\nWhen a tile participates in multiple swaps, it effectively executes a swap with another\ntile that is not necessarily adjacent.\nWhile the other tiles are displaced by these operations, they are all of the same color,\nso that displacement has no effect. To put it in a different way, we can look at a swap as moving\nan <code>M</code> to an adjacent cell, and consecutive swaps are just consecutive moves.\n</p><p>\nAssume without loss of generality that the number of <code>M</code>s increases between the\nstarting state and the target state (otherwise, use <code>G</code>s instead).\nSince we said we do all swaps first, that means that we move some of the <code>M</code>s\nthat need to switch to <code>G</code>s to positions that have <code>G</code>s that need to be\n<code>M</code>s. We can do that by matching those two types of cell (regardless of adjacency).\nAny unmatched <code>G</code> into <code>M</code> position needs to be flipped (the number of these\nis fixed by the input).\n</p><p>\nFor each matched pair, the cost of fixing both positions is either the minimum orthogonal distance\nbetween the two positions multiplied by $$$\\mathbf{S}$$$ or $$$2 \\mathbf{F}$$$, since we can also do two flips.\n</p><p>\nThe reasoning above basically built a weighted bipartite matching between cells that start\nat <code>M</code> and need to be turned into <code>G</code> and cells that start at <code>G</code>\nand need to be turned into <code>M</code>. The total cost is the cost of the maximum matching\nof minimum weight plus $$$\\mathbf{F}$$$ times the number of unmatched cells. We can apply any\nminimum cost maximum matching algorithm for bipartite graphs like the\n<a href=\"https://en.wikipedia.org/wiki/Hungarian_algorithm\" target=\"_blank\">Hungarian algorithm</a>.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U06yuHkvjWx9vaAwzvaSFPty4tVBSMpyRvlJbIIYbynF1a7KHYS6cC9T024ifLqGmy6wRAGzQEP/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000007dc2de","statement":"<h3>Problem</h3>\n<p>\nCody-Jamal's latest artistic installment is a tiled kitchen floor that can be retiled to different\npatterns. The floor consists of a matrix of $$$\\mathbf{R}$$$ rows and $$$\\mathbf{C}$$$ columns of square tiles. Each tile is\nreversible, one side is magenta and the other one is green.\n</p><p>\nTo retile the kitchen, there are two allowed operations:\n<ul>\n<li>flip a tile, changing its visible color from magenta to green, or vice versa, and</li>\n<li>swap two adjacent tiles (horizontally or vertically, but not diagonally),\n  without flipping either.</li>\n</ul>\n</p><p>\nViewing Cody-Jamal's artistic floor is free, but interacting with it is not.\nPerforming a single flip operation costs $$$\\mathbf{F}$$$ coins, and performing a single\nswap operation costs $$$\\mathbf{S}$$$ coins.\n</p><p>\nYou can see the current state of the floor and want to turn it into a particular pattern.\nWhat is the minimum amount of coins you need to spend to achieve your goal?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nThe first line of a test case contains 4 integers: $$$\\mathbf{R}$$$, $$$\\mathbf{C}$$$, $$$\\mathbf{F}$$$ and $$$\\mathbf{S}$$$, the number of rows\nand columns of the floor, the cost in coins of flipping and the cost in coins of swapping,\nrespectively. Then, $$$2 \\cdot \\mathbf{R}$$$ lines follow. The first $$$\\mathbf{R}$$$ lines contain $$$\\mathbf{C}$$$ characters\neach. The $$$j$$$&NoBreak;-th character of the $$$i$$$&NoBreak;-th of these lines represents the current state\nof the tile in the $$$i$$$&NoBreak;-th row and $$$j$$$&NoBreak;-th column. The character is <code>M</code>\nif the currently visible side is magenta and <code>G</code> otherwise.\nThe last $$$\\mathbf{R}$$$ lines also contain $$$\\mathbf{C}$$$ characters each.\nThe $$$j$$$&NoBreak;-th character of the $$$i$$$&NoBreak;-th of these lines represents the color you want\nfor the tile in the $$$i$$$&NoBreak;-th row and $$$j$$$&NoBreak;-th column, using the same character code\nas for the current state.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$\nis the minimum amount of coins you need to spend to perform operations that allow you to\nchange the tile colors from their current state to your intended one.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 40 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{R} \\le 10$$$.<br/>\n$$$1 \\le \\mathbf{C} \\le 10$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$\\mathbf{F} = 1$$$.<br/>\n$$$\\mathbf{S} = 1$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{F} \\le 10^6$$$.<br/>\n$$$1 \\le \\mathbf{S} \\le 10^6$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1J7A4-E4cXqP4Tqi54kr8eFtU0CF8D6P8QHsN5qyRfDTSSsZFYchCYdfH7j7ipsLlXjtZhiolhqMlZE_lESphseMBijNhh-g/retiling_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2 4 1 1\nMGMG\nMMMG\nGMGM\nMMMM\n3 3 1 1\nMGG\nGMG\nMMM\nMMM\nMGM\nMMG\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0TC5duAnza05OxSgOvNfpV8VlF1Qgex6TLZQavIQkOobnGAYeWmR8QX90rmuYeDlqFC2KAmt0M823pr4sY5Xsanw9aRr7mDv0/retiling_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 4\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn Sample Case #1, there are $$$5$$$ tiles that have a different color between the current\nand the desired states of the floor. Since each operation can change at most $$$2$$$ tiles,\nat least $$$3$$$ operations, costing $$$3$$$ coins, are needed. One way to do it with\nexactly $$$3$$$ coins is:\n</p>\n<ol>\n<li>Swap the leftmost two tiles in the top row.</li>\n<li>Swap the rightmost two tiles in the top row.</li>\n<li>Flip the bottom right corner tile.</li>\n</ol>\n<p>\nThe picture below illustrates the states the floor goes through. The highlighted tile or tiles\nin each state are the ones being changed by the operation.\n</p><p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0-Iuy33uD3Z_T6iaerIou7uSY7dggdFyJHHP0cy9gVhjxMbyUHJSbnhy2hYvVSog_zOvaD6A9dYZs/sample1.png\" style=\"max-width:550px;\" alt=\"Four floor states depicting the changes described above.\">\n</p><p>\nIn Sample Case #2, there are $$$6$$$ tiles that need changing. However, since only swaps\ncan change two tiles at a time, solving it with $$$3$$$ operations would require all\nof them to be swaps. There is no way to involve all $$$6$$$ tiles in a single swap each,\nso we need at least $$$4$$$ operations. One way to use exactly $$$4$$$ operations is:\n</p>\n<ol>\n<li>Swap the topmost two tiles in the middle column.</li>\n<li>Flip the top right corner tile.</li>\n<li>Swap the bottommost two tiles in the rightmost column.</li>\n<li>Flip the middle tile of the leftmost column.</li>\n</ol>\n<p>\nThe picture below illustrates the states the floor goes through.\n</p><p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U29CBsLMsVYV1cgeFqKZOvN8fDmAUYU45sHW_S-P0YUVDnTB1xSQQLgSDCNruJ5TGMC7BpPTatEHZw/sample2.png\" style=\"max-width:550px;\" alt=\"Five floor states depicting the changes described above.\">\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0sxISfeRidNc7O7COBvORldhPg5uNDSYKuSp_atDsNa3ryYo-Aaa7k0gpt5TUo2tDuoeI54aSjz49PInFqWCBnky7Wj2M85w/retiling_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">1\n1 5 1000 1\nMGGGG\nGGGMM\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0mabPpIBsjzU562-4OqLTMs4xnGTje6Mtsov1DNAfFsngUboUWMNgRaAznslaGtv4INSSuL294kVtSsWT2r6WF4XDoHPLru6k/retiling_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 1003\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn the Sample Case for Test Set 2, flips are so expensive that we want to avoid them at\nall costs. We need at least one since our desired floor state has more magenta tiles than\nthe current one, and swaps do not change that amount. We can do it optimally with just\none flip like this:\n</p>\n<ol>\n<li>Swap the leftmost two tiles.</li>\n<li>Flip the rightmost tile.</li>\n<li>Swap the second and third tiles from the left.</li>\n<li>Swap the third and fourth tiles from the left.</li>\n</ol>\n<p>\nThe picture below illustrates all the states the floor goes through.\n</p><p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0gEboJTsIAFfvCCJzOMCKihSCYSw7XzGwDjh8XycV5fSqNeHUqyz6o0FYEvSAVAfOj2nQxKyrGvtL_XDQ/sample_ts2.png\" style=\"max-width:550px;\" alt=\"Five floor states depicting the changes described above.\">\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":11},{"type":2,"type__str":"HIDDEN","value":23}],"title":"Retiling","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\nIn this problem, we are given only one tool to get information about our input: the minimum query.\nMoreover, the query becomes cheaper when done over long distances. This means a sorting algorithm\nthat normally spends running time finding minimums would align well with our needs.\nOne well known such algorithm is\n<a href=\"https://en.wikipedia.org/wiki/Selection_sort\" target=\"_blank\">Selection sort</a>.\n</p><p>\nIn Selection sort, we search for the minimum of the full list, put that in its correct position\n(the beginning), and continue solving recursively searching for the minimum of a suffix of the\nlist, and moving that minimum to the beginning. This can be implemented with $$$N-1$$$ pairs\nof the minimum query and (possibly) a swap operation as follows:\n</p><pre>\nfor i := 1 to N-1\n  j = minimum_index_of(i, i+1, ..., N)\n  if i != j:\n    swap(i, j)\n</pre><p>\nThe minimum queries above are over ranges of sizes $$$N, N-1, ..., 2$$$. This means the\ntotal cost is exactly\n$$$$\\sum_{i=2}^{\\mathbf{N}} \\left\\lceil \\frac{10^8}{i} \\right\\rceil.$$$$\nFor $$$\\mathbf{N}=100$$$, this is\n$$$418737795$$$, which is less than the limit of $$$6 \\times 10^8$$$.\n</p>\n","id":"00000000007dc51c","statement":"<h3>Problem</h3>\n<p>\nIn this problem, you need to sort a list of $$$\\mathbf{N} = 100$$$ distinct integers in strictly\nincreasing order. You can rearrange the list by swapping the contents of any two positions\n(they do not need to be adjacent). Unfortunately, you cannot read those contents directly.\nYou can access information about the list contents by querying the minimum of a range.\nThe minimum query gives you\nthe <i>position</i> of the minimum value over a range of consecutive positions.\nFor example, in the list $$$[51, 33, 100, 11]$$$, the minimum over the range between\npositions $$$2$$$ and $$$4$$$, inclusive ($$$1$$$-based), is at position\n$$$4$$$ and the minimum between positions $$$1$$$ and $$$3$$$ is at position $$$2$$$.\n</p><p>\nQueries about the minimum within a range are limited by a coin budget per test case.\nLarger ranges are cheaper: asking about the position of the minimum\nbetween positions $$$i$$$ and $$$j$$$ (for $$$i \\lt j$$$)\ncosts $$$\\lceil 10^8 / (j - i + 1) \\rceil$$$ coins, where $$$\\lceil x \\rceil$$$ is\nthe smallest integer greater than or equal to $$$x$$$ (that is, $$$x$$$ rounded up).\nSwap operations, on the other hand, do not cost any coins.\n</p><p>\nWrite a program that sorts lists of integers using any number of swaps and at most\n$$$6 \\times 10^8$$$ coins per test case distributed among any number of minimum queries.\n</p>\n\n\n<h3>Input and output</h3>\n<p>\n  This is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of our\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq\" target=\"_blank\">FAQ</a>.\n</p><p>\n  Initially, the judge will send you a single line containing two integers $$$\\mathbf{T}$$$ and $$$\\mathbf{N}$$$:\n  the number of test cases and the number of elements to sort within each test case,\n  respectively. The judge has the initial lists preset before it gets any input\n  from your program, and the only changes done to them during the exchanges with\n  your program are the swaps that you request.\n</p><p>\n  Then, you must process $$$\\mathbf{T}$$$ test cases. Each test case consists of a series of exchanges\n  plus an additional line indicating you are done. Each exchange consists of you printing\n  one line and the judge printing one line in response.\n  Your program must print a single line containing one of these options:\n</p>\n  <ul>\n  <li>An uppercase <code>M</code> and two integers $$$i$$$ and $$$j$$$ with $$$i \\lt j$$$\n  representing a minimum query.\n  The judge responds with a single integer representing the position of\n  the minimum value in the list within 1-based positions $$$i$$$ and $$$j$$$, inclusive.</li>\n  <li>An uppercase <code>S</code> and two integers $$$i$$$ and $$$j$$$ with $$$i \\lt j$$$\n  representing a swap operation.\n  The judge swaps the two elements at 1-based positions $$$i$$$ and $$$j$$$\n  and responds with <code>1</code>.</li>\n  <li>An uppercase <code>D</code> representing that you are done sorting the list. The judge checks\n  the list. It responds with <code>1</code> if the list is sorted in strictly increasing\n  order and <code>-1</code> if it is not.</li>\n</ul><p>\n  After the judge responds <code>1</code> to a <code>D</code>, it will finish\n  if it was the last test case or it will immediately start waiting for your first\n  command for the next test case. After receiving the judge's response for the\n  $$$\\mathbf{T}$$$-th case, your program must finish in order to not receive a Time Limit Exceeded\n  error.\n</p><p>\n  If the judge receives an invalidly formatted line or invalid values from your\n  program at any moment, including a minimum operation whose cost would exceed\n  your remaining budget for the test case, the judge will print a single number <code>-1</code>.\n  After the judge prints <code>-1</code> for any of the reasons explained above,\n  it will not print any further output. If your program continues to wait for the judge after\n  receiving a <code>-1</code>, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 60 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$\\mathbf{T} = 100$$$.<br/>\n$$$\\mathbf{N} = 100$$$.<br/>\n</p>\n\n\n  <div class=\"sample-interaction-wrapper\">\n    <div class=\"sample-interaction-header\">\n      <div class=\"sample-interaction-header-text\">Sample Interaction</div>\n    </div>\n    <div class=\"sample-interaction-content\">\n      <div class=\"sample-interaction-judge-solution-labels\">\n        <div class=\"sample-interaction-judge-label\">Judge</div>\n        <div class=\"sample-interaction-solution-label\">Solution</div>\n      </div>\n      \n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Constraints<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">2 4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge provides $$$\\mathbf{T}$$$, $$$\\mathbf{N}$$$<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 1<br>\nList: $$$[51, 33, 100, 11]$$$<br>\n</div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">M 2 4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution queries for the minimum in the range $$$[2, 4]$$$<br>\nThis operation cost $$$\\lceil 10^8 / 3 \\rceil = 33333334$$$ coins<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge provides the position of the minimum in the range<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">M 1 3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution queries for the minimum in the range $$$[1, 3]$$$<br>\nThis operation cost $$$\\lceil 10^8 / 3 \\rceil = 33333334$$$ coins<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge provides the position of the minimum in the range<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">S 1 4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution asks to swap the elements at positions 1 and 4<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge responds 1 to a swap operation<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">The list is now $$$[11, 33, 100, 51]$$$<br>\n</div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">M 3 4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution queries for the minimum in the range $$$[3, 4]$$$<br>\nThis operation cost $$$\\lceil 10^8 / 2 \\rceil = 50000000$$$ coins<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge provides the position of the minimum in the range<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">S 3 4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution asks to swap the elements at positions 3 and 4<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge responds 1 to a swap operation<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">The list is now $$$[11, 33, 51, 100]$$$<br>\n</div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">D\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution tells the judge it is done sorting<br>\nThe solution spent a total of $$$116666668$$$ coins<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge responds with 1 saying the list is properly sorted<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 2<br>\nList: $$$[30, 20, 10, 40]$$$<br>\n</div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">M 1 4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution queries for the minimum in the range $$$[1, 4]$$$<br>\nThis operation cost $$$\\lceil 10^8 / 4 \\rceil = 25000000$$$ coins<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge provides the position of the minimum in the range<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">S 1 3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution asks to swap the elements at positions 1 and 3<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge responds 1 to a swap operation<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">The list is now $$$[10, 20, 30, 40]$$$<br>\n</div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">M 3 4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution queries for the minimum in the range $$$[3, 4]$$$<br>\nThis operation cost $$$\\lceil 10^8 / 2 \\rceil = 50000000$$$ coins<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge provides the position of the minimum in the range<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">M 2 4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution queries for the minimum in the range $$$[2, 4]$$$<br>\nThis operation cost $$$\\lceil 10^8 / 3 \\rceil = 33333334$$$ coins<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge provides the position of the minimum in the range<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">D\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution tells the judge it is done sorting<br>\nThe solution spent a total of $$$108333334$$$ coins<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge responds with 1 saying the list is properly sorted<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Both Cases Finished<br>\n</div>\n\n    </div>\n  </div>\n\n\n\n<h3>Testing Tool</h3>\n<p>\n  You can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use our <a href=\"https://storage.googleapis.com/coding-competitions.appspot.com/interactive_runner.py\">interactive runner</a>\n  for that. For more information, read the instructions in comments in that\n  file, and also check out the\n  <a href=\"/codejam/faq#interactive-problems\" target=\"_blank\">Interactive Problems section</a>\n  of the FAQ.\n</p><p>\n  Instructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it is <b>NOT</b>\n  the real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check the\n  <a href=\"/codejam/faq#coding\" target=\"_blank\">Coding section</a>\n  of the FAQ to make sure that you are using the same compiler as us.\n</p><p>\n<a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2Rf4DxLNfo-ZH-qOWZE10ivCTY0pAGlI83_ZzWVuQQkNcvgTn4qpi3Xkp-01OfyhRt-PSVua9BVLt__--d4H8/local_testing_tool.py?dl=1\" download=\"testing_tool.py\">Download testing tool</a>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":15}],"title":"Minimum Sort","trial_input_type":2,"trial_input_type__str":"JUDGE_CODE"}],"ticket":{"challenge_id":"0000000000435915","type":1,"type__str":"SPECTATOR"},"title":"Round 2 2021"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
