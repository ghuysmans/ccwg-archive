{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1589724000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"000000000019ff43","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  Thank you for participating in Kick Start 2020 Round C.\n</p>\n<p>\n</p>\n<hr>\n<p>\n<b>Cast</b>\n</p><p>\n  Countdown: Written by Kevin Tran and prepared by Jonathan Irvin Gunawan.\n</p><p>\n  Stable Wall: Written by Chan Min Kim and prepared by Seunghyun Jo.\n</p><p>\n  Perfect Subarray: Written by Himanshu Jaju and prepared by Sherry Wu.\n</p><p>\n  Candies: Written by Bartosz Kostka and prepared by Jonathan Irvin Gunawan.\n</p><p>\n  Solutions, other problem preparation, reviews and contest monitoring by\n  Akul Siddalingaswamy,\n  Anson Ho,\n  Bohdan Pryshchenko,\n  Cristhian Bonilha,\n  Diksha Saxena,\nGiovanni Pezzino,\n  Jared Gillespie,\n  Jonathan Irvin Gunawan,\n  Kashish Bansal,\n  Kevin Tran,\n  Krists Boitmanis,\n  Lalit Kundu,\n  Lizzie Sapiro,\n  Michał Łowicki,\nNaranbayar Uuganbayar,\n  Nikhil Hassija,\n  Mohamed Yosri Ahmed,\n  Ruoyu Zhang,\n  Sadia Atique,\nSadlil Rhythom,\n  Sanyam Garg,\n  Saurabh Joshi,\n  Seunghyun Jo,\n  Sherry Wu,\n\n\n\nRaihat Zaman Neloy,\n  Sudarsan Srinivasan,\n  Swante Scholz,\n  Swapnil Gupta,\n  Vikash Dubey, and\n  Vipin Singh.\n</p>\n<p>\nAnalysis authors:\n</p>\n<ul>\n  <li>Countdown: Jonathan Irvin Gunawan</li>\n  <li>Stable Wall: Sadia Atique</li>\n  <li>Perfect Subarray: Akul Siddalingaswamy</li>\n  <li>Candies: Krists Boitmanis</li>\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1589713200000,"tasks":[{"analysis":"<h3>Test set 1</h3>\n<p>\n  Each of the polyominos contains only one letter. We can take each of the\n  <a href=\"https://en.wikipedia.org/wiki/Permutation\">permutations</a> of the distinct letters,\n  and check if the resulting wall is stable by following the order of the letters in the permutation\n  to place the polyominos, one by one.\n  There are <b>N</b> distinct letters in the input, so we will have <b>N</b>!\n  permutations.\n</p>\n<p>\n  Let's say W is the given input wall letters. There are various ways to check if a wall is\n  stable for a given permutation. One way is to create a new 2D array of integers, I. I[i][j]\n  will contain the index of the letter W[i][j] in the permutation.\n  Each of the letters at(i, j) in the wall must be placed after the letter below them, i.e. at(i+1, j),\n  if they are not part of the same polyomino. We can check if it's true by checking\n  if I[i][j] &ge; I[i+1][j], for all positions (i, j). Since I contains relative indexing of the\n  order of the polyominos that were placed, this check works as intended.\n  We can check this in O(<b>R</b> &times; <b>C</b>) time, so the runtime complexity of this approach for each\n  test case is O(<b>N</b>! &times; <b>R</b> &times; <b>C</b>). This is sufficient for test set 1.\n</p>\n<h3>Test set 2</h3>\n<p>\n  Given the picture of the wall, if two polyominos are positioned one above another, and they touch\n  each other, then to make a stable wall, the bottom one must be placed before the top one.\n  This gives us a set of orderings of pairs of letters which must be followed while placing\n  the polyominos.\n</p>\n<p>\n  We can make a graph with the set of orderings just mentioned. Each polyomino/letter\n  can be considered as a vertex, and each of the orderings can be considered as a directed\n  edge of the graph. If the resulting graph contains any cycle, it is not possible to have a stable wall.\n  Otherwise, we can use <a href=\"https://en.wikipedia.org/wiki/Topological_sorting\">topological sort</a>\n  to find a suitable order that fulfills all the orderings.\n  We can find all the orderings in O(<b>R</b> &times; <b>C</b>) time. We can find a topological sorting\n  of the vertices of\n  a directed acyclic graph by using <a href=\"https://en.wikipedia.org/wiki/Depth-first_search\">depth first search</a>.\n  Depth first search gives us a runtime complexity of O(number of edges + number of vertices).\n  The number of edges in the graph is at most (<b>R-1</b>) &times; <b>C</b>, as each cell of the grid\n  adds at most one edge, to the cell right above it.\n  So the total runtime complexity of this approach for each test case is\n  O(<b>R</b> &times; <b>C</b>) + O(<b>N</b> + <b>R</b> &times; <b>C</b>) &#61; O(<b>R</b> &times; <b>C</b>),\n  since <b>N</b> can be at most <b>R</b> &times; <b>C</b>.\n  This is sufficient for test set 2.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U15Org-VVjPclsdrPu2Y2LC7zT4k1e810Sk7_ASMeCJqzNVCamSzH2rrJsjxAteNd211dz1YeA/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000003379bb","statement":"<h3>Problem</h3>\n<p>\n  Apollo is playing a game involving <href a=\"https://en.wikipedia.org/wiki/Polyomino\">polyominos</href>.\n  A polyomino is a shape made by joining together one or more squares edge to edge to form a single\n  connected shape. The game involves combining <b>N</b> polyominos into a single rectangular shape\n  without any holes. Each polyomino is labeled with a unique character from <code>A</code> to <code>Z</code>.\n</p><p>\n  Apollo has finished the game and created a rectangular wall containing <b>R</b> rows and <b>C</b> columns.\n  He took a picture and sent it to his friend Selene. Selene likes pictures of walls, but she likes\n  them even more if they are <i>stable</i> walls. A wall is stable if it can be created by adding\n  polyominos one at a time to the wall so that each polyomino is always <i>supported</i>.\n  A polyomino is supported if each of its squares is either on the ground, or has another square\n  below it.\n</p><p>\n  Apollo would like to check if his wall is stable and if it is, prove that fact to Selene by\n  telling her the order in which he added the polyominos.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the two integers <b>R</b> and <b>C</b>.\n  Then, <b>R</b> lines follow, describing the wall from top to bottom.\n  Each line contains a string of <b>C</b> uppercase characters from <code>A</code> to <code>Z</code>, describing\n  that row of the wall.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  a string of <b>N</b> uppercase characters, describing the order in which he built them.\n  If there is more than one such order, output any of them.\n  If the wall is not stable, output <code>-1</code> instead.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>R</b> &le; 30.<br/>\n  1 &le; <b>C</b> &le; 30.<br/>\n  No two polyominos will be labeled with the same letter.<br/>\n  The input is guaranteed to be valid according to the rules described in the statement.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  1 &le; <b>N</b> &le; 5.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  1 &le; <b>N</b> &le; 26.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0eQtyaM4CzXfe5eFNv0D6lgOyiKMUDLirYKofJGZql2ZHPiY5Cmmp1T8CpyVH2nub0U2Rbxdb3YZUovRCZKlPvwyNFIdkBpTxC/stable_wall_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n4 6\nZOAAMM\nZOAOMM\nZOOOOM\nZZZZOM\n4 4\nXXOO\nXFFO\nXFXO\nXXXO\n5 3\nXXX\nXPX\nXXX\nXJX\nXXX\n3 10\nAAABBCCDDE\nAABBCCDDEE\nAABBCCDDEE\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3U6dqKFDgHOlveuVEdozDiQrmDK90Ik-TyA9r0Gb9MSSlhYcTCEVUljZKcdheuiu_OAZtOvrwk2cQ6dQK92Jh5u74XTxLBnBakig/stable_wall_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: ZOAM\nCase #2: -1\nCase #3: -1\nCase #4: EDCBA\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In sample case #1, note that <code>ZOMA</code> is another possible answer.\n</p><p>\n  In sample case #2 and sample case #3, the wall is not stable, so the answer is <code>-1</code>.\n</p><p>\n  In sample case #4, the only possible answer is <code>EDCBA</code>.\n  </p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":8},{"type":1,"type__str":"VISIBLE","value":13}],"title":"Stable Wall","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Let us ignore the update operations for now and look at how we can answer the queries efficiently.\n  Take the array <b>A</b> = [5, 2, 7, 4, 6, 3, 9, 1, 8] as an example. The sweetness score for the query\n  (1, 9) from l = 1 to r = 9 is intuitively visualized in the following diagram.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0SlxJt0mUC9ynxEQgFhoFOak0ASaZO4MQbJp3_zax3hy85sLxdZ-hlYZx9h7HcqGvZZDcOQvSMCXkgv-Q8/query_1_9.png\" height=\"100%\" />\n<p>\n  The i-th element (-1)<sup>i-1</sup><b>A<sub>i</sub></b> &times; i of the sweetness score sum is\n  represented as a stack of i blocks\n  in the i-th column of the diagram. The values in every other column are negated to account for the\n  sign in the sweetness score sum. Obviously, the sum of all squares in the diagram is the sweetness score\n  of the query (1, 9).\n</p>\n<p>\n  A crucial observation is that the sweetness scores for all other queries are embedded in the diagram\n  as well. For example, the query (5, 8) corresponds to the blue shaded blocks in the diagram below,\n  and the sweetness score of (5, 8) can be conveniently computed as the sum of all blocks inside the\n  area with the bold outline minus the sum of orange and gray blocks. Note, however, that for\n  queries (l, r) with even left endpoint l, we should take the additive inverse of the value\n  computed this way to obtain the correct sweetness score.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2-FL1Uophw5ng2_Myd3s631H_uVz8XpI9_axkRfFJPLycUczlxrqzyjvKySuwLflxYdXyLrKlPmVgncpm_/query_5_8.png\" height=\"100%\" />\n\n<h3>\nTest Set 1\n</h3>\n\n<p>\n  The above observations suggest a solution using prefix sums. Let us define the\n  <i>regular prefix sums</i> S(i) as S(0) = 0 and\n  S(i) = (-1)<sup>i-1</sup><b>A<sub>i</sub></b> + S(i - 1) for i &ge; 1. Similarly, let us define\n  the <i>multiple prefix sums</i> MS(i) as MS(0) = 0 and\n  MS(i) = (-1)<sup>i-1</sup><b>A<sub>i</sub></b> &times; i + MS(i - 1) for i &ge; 1. Then the sweetness\n  score of a query (l, r) is<br/>\n  (-1)<sup>l-1</sup>(MS(r) - MS(l - 1) - (l - 1) &times; (S(r) - S(l - 1))).\n</p>\n<p>\n  Computing the prefix sums takes O(<b>N</b>) time, and once we have them, each query can be\n  answered in constant time. Therefore, the overall time complexity of the algorithm is\n  O(<b>N</b> + <b>Q</b>).\n</p>\n<p>\n  So far we have disregarded the update operations, however, since there are no more than 5 of them,\n  we can recompute the prefix sums after each update operation without increasing the time\n  complexity.\n</p>\n\n<h3>\nTest Set 2\n</h3>\n\n<p>\n  Here the number of update operations is unlimited, and the time complexity of the previous\n  algorithm becomes O(<b>NQ</b>), which is inefficient. However, we can still use very much the same\n  idea by maintaining two <a href=\"https://codeforces.com/blog/entry/18051\">segment trees</a>\n  &ndash; a tree T for storing the values (-1)<sup>i-1</sup><b>A<sub>i</sub></b> and another tree\n  MT for storing the values (-1)<sup>i-1</sup><b>A<sub>i</sub></b> &times; i. Then the answer to\n  a query (l, r) becomes (-1)<sup>l-1</sup>(MT.<i>rangeSum</i>(l, r) - (l - 1) &times;\n  T.<i>rangeSum</i>(l, r)).\n</p>\n\n<p>\n  Since updates and range queries in a segment tree take O(log <b>N</b>) time, the overall time\n  complexity of the algorithm is O(<b>N</b> + <b>Q</b> log <b>N</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2RIcXff71fuKAw2LVxXtyG0thwENp23EaXCuO8b_ZX4rkzElGHOOk8cFFvlmZ6Hyc5iG6Tj-c/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000337b4d","statement":"<h3>Problem</h3>\n<p>\n  Carl has an array of <b>N</b> candies. The i-th element of the array (indexed starting from 1) is <b>A<sub>i</sub></b> representing <i>sweetness value</i> of the i-th candy.\n  He would like to perform a series of <b>Q</b> operations. There are two types of operation:\n  <ul>\n    <li>Update the sweetness value of a candy in the array.</li>\n    <li>Query the <i>sweetness score</i> of a subarray.</li>\n  </ul>\n</p><p>\n  The sweetness score of a subarray from index l to r is:\n    <b>A<sub>l</sub></b> &times; 1\n    - <b>A<sub>l+1</sub></b> &times; 2\n    + <b>A<sub>l+2</sub></b> &times; 3\n    - <b>A<sub>l+3</sub></b> &times; 4\n    + <b>A<sub>l+4</sub></b> &times; 5 ...\n</p><p>\n  More formally, the sweetness score is the sum of (-1)<sup>i-l</sup><b>A<sub>i</sub></b> &times; (i - l + 1), for all i from l to r inclusive.\n</p><p>\n  For example, the sweetness score of:\n  <ul>\n    <li>[3, 1, 6] is 3 &times; 1 - 1 &times; 2 + 6 &times; 3 = 19</li>\n    <li>[40, 30, 20, 10] is 40 &times; 1 - 30 &times; 2 + 20 &times; 3 - 10 &times; 4 = 0</li>\n    <li>[2, 100] is 2 &times; 1 - 100 &times; 2 = -198</li>\n  </ul>\n</p><p>\n  Carl is interested in finding out the total sum of sweetness scores of all queries. If there is no query operation, the sum is considered to be 0. Can you help Carl find the sum?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing <b>N</b> and <b>Q</b>.\n  The second line contains <b>N</b> integers describing the array. The i-th integer is <b>A<sub>i</sub></b>.\n  The j-th of the following <b>Q</b> lines describe the j-th operation.\n  Each line begins with a single character describing the type of operation (<code>U</code> for update, <code>Q</code> for query).\n  <ul>\n    <li>For an update operation, two integers <b>X<sub>j</sub></b> and <b>V<sub>j</sub></b> follow, indicating that the <b>X<sub>j</sub></b>-th element of the array is changed to <b>V<sub>j</sub></b>.</li>\n    <li>For a query operation, two integers <b>L<sub>j</sub></b> and <b>R<sub>j</sub></b> follow, querying the sweetness score of the subarray from the <b>L<sub>j</sub></b>-th element to the <b>R<sub>j</sub></b>-th element (inclusive).</li>\n  </ul>\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the total sum of sweetness scores of all the queries.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>A<sub>i</sub></b> &le; 100, for all i.<br/>\n  1 &le; <b>N</b> &le; 2 &times; 10<sup>5</sup> and\n  1 &le; <b>Q</b> &le; 10<sup>5</sup> for at most 6 test cases.<br/>\n  For the remaining cases, 1 &le; <b>N</b> &le; 300 and\n  1 &le; <b>Q</b> &le; 300.<br/>\n  If the j-th operation is an update operation, 1 &le; <b>X<sub>j</sub></b> &le; <b>N</b> and 1 &le; <b>V<sub>j</sub></b> &le; 100.<br/>\n  If the j-th operation is a query operation, 1 &le; <b>L<sub>j</sub></b> &le; <b>R<sub>j</sub></b> &le; <b>N</b>.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  There will be at most 5 update operations.\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  There are no special constraints.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1baV_C2R7JOsYdAPhCWkXou8-_umUTisXkhZTcQ2OpgXL-1YvCwn1JMbypvQInmvTNH8tJOyeLYmXx0AVsK8XJhtNOo1w/candies_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5 4\n1 3 9 8 2\nQ 2 4\nQ 5 5\nU 2 10\nQ 1 2\n3 3\n4 5 5\nU 1 2\nU 1 7\nQ 1 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2voQkSAGipDnzW0WH1nOm-qA93iUdMiX9dAO-lIbremNl0ZuRpZ8L4td-NRAYpOTMIx29gz94WAM0vbE6VcMXFNlryfK0O/candies_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: -8\nCase #2: -3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In sample case #1:\n  <ul>\n    <li>The first query asks for the sweetness score of [3, 9, 8] which is 3 &times; 1 - 9 &times; 2 + 8 &times; 3 = 9.</li>\n    <li>The second query asks for the sweetness score of [2] which is 2 &times; 1 = 2.</li>\n    <li>The third query asks for the sweetness score of [1, 10] which is 1 &times; 1 - 10 &times; 2 = -19.</li>\n  </ul>\n  Thus, the final output should be 9 + 2 - 19 = -8.\n</p>\n<p>\n  In sample case #2:\n  <ul>\n    <li>The first and only query asks for the sweetness score of [7, 5] which is 7 &times; 1 - 5 &times; 2 = -3.</li>\n  </ul>\n  Thus, the final output should be -3.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":14},{"type":1,"type__str":"VISIBLE","value":24}],"title":"Candies","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n<p>\n  For each element <b>A<sub>i</sub></b>, we can check whether it is a start of a <b>K</b>-countdown.\n  In other words, we check whether <b>A<sub>i + j</sub></b> = <b>K</b> - j for all\n  0 &le; j &le; <b>K</b>. If the element <b>A<sub>i</sub></b> satisfies the condition, we can\n  can increment our answer counter by 1. This solution runs in O(<b>N</b> &times; <b>K</b>).\n</p>\n<h3>Test Set 2</h3>\n<p>\n  To solve this test set, we can loop through the elements and keep track of the number of\n  consecutive elements such that the next element is one less than the previous element. We can do\n  this by keeping a counter. If the current element is one less than the previous element, we\n  increment this counter by 1. Otherwise, we reset the counter to 0. If the current element is 1 and\n  our counter is at least <b>K</b> - 1, we know that the current element is the end of a\n  <b>K</b>-countdown. We can increment our answer counter by 1 in this case.\n</p><p>\n  This approach works since any pair of <b>K</b>-countdown subarrays does not overlap. This solution\n  runs in O(<b>N</b>).\n</p>\n<h3>Pseudocode</h3>\n<pre>\n  answer_counter = 0\n  decreasing_counter = 0\n  for (i = 1 to N - 1) {\n    if (A[i] == A[i - 1] - 1) {\n      decreasing_counter = decreasing_counter + 1\n    } else {\n      decreasing_counter = 0\n    }\n    if (A[i] == 1 and decreasing_counter >= K - 1) {\n      answer_counter = answer_counter + 1\n    }\n  }\n  print answer_counter\n</pre>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1nhBWXMUAHAfb6uW9w3fd57FqKkMROYAAU4-6gH4caVdBKYNZAHn-f5uV1f8Pitsn0Uwzm7eU/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000003380d2","statement":"<h3>Problem</h3>\n<p>\n  Avery has an array of <b>N</b> positive integers.\n  The i-th integer of the array is <b>A<sub>i</sub></b>.\n</p><p>\n  A contiguous subarray is an <i>m-countdown</i> if it is of\n  length m and contains the integers m, m-1, m-2, ..., 2, 1 in that order.\n  For example, <code>[3, 2, 1]</code> is a 3-countdown.\n</p><p>\n  Can you help Avery count the number of <b>K</b>-countdowns in her array?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the integers <b>N</b> and <b>K</b>.\n  The second line contains <b>N</b> integers. The i-th integer is <b>A<sub>i</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the number of <b>K</b>-countdowns in her array.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  2 &le; <b>K</b> &le; <b>N</b>.<br/>\n  1 &le; <b>A<sub>i</sub></b> &le; 2 &times; 10<sup>5</sup>, for all i.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  2 &le; <b>N</b> &le; 1000.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  2 &le; <b>N</b> &le; 2 &times; 10<sup>5</sup> for at most 10 test cases.<br/>\n  For the remaining cases, 2 &le; <b>N</b> &le; 1000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3kF5KQf3AAjTC46AoMXxxh_yYaIUFMBDjKHulnZfU3XmLKxYVuOY34KrLncehiy7aUMAKOT1zjYUIv-Lkuh5X4EmSVKsqMng/countdown_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n12 3\n1 2 3 7 9 3 2 1 8 3 2 1\n4 2\n101 100 99 98\n9 6\n100 7 6 5 4 3 2 1 100\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2x0UrWUO_V3nWevPO4iMsxk4VuTYwOBL_q2n6RS6tnxhmwpwplaNpAZtxUoiiFHKK2NRRpSgJc7TFURgYIUo133a7C1KGU5j8/countdown_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 0\nCase #3: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In sample case #1, there are two 3-countdowns as highlighted below.\n  <ul>\n  <li>1 2 3 7 9 <b>3 2 1</b> 8 3 2 1</li>\n  <li>1 2 3 7 9 3 2 1 8 <b>3 2 1</b></li>\n  </ul>\n</p><p>\n  In sample case #2, there are no 2-countdowns.\n</p><p>\n  In sample case #3, there is one 6-countdown as highlighted below.\n  <ul>\n  <li>100 7 <b>6 5 4 3 2 1</b> 100</li>\n  </ul>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":1,"type__str":"VISIBLE","value":7}],"title":"Countdown","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  For test set 1, we can use the brute force approach to generate all subarray sums, check\n  if each one is a square and return the total count. This would be enough to pass all the test\n  cases under the time complexity.\n</p>\n\n<p>\n  For test set 2, looking at the problem constraints, we can estabilish that the largest subarray sum possible\n  across all testcases would be <b>N</b>*MAX_A where MAX_A is the largest element in <b>A</b>.\n  Therefore, we can precompute all squares &le; <b>N</b>*MAX_A. This amounts to &radic;(<b>N</b>*MAX_A) squares.\n  Let's call this S[].\n</p>\n\n<p>\n  First, let's define Res[] where Res<sub>i</sub> stores the number of subarrays ending at index i\n  with  subarray sum that is a perfect square.\n\n  <br/><i>Note</i>: sum(<b>A</b>[L....R]) = sum(<b>A</b>[0.....R]) - sum(<b>A</b>[0....L-1]) for\n  0 &lt; L &le; R &le; <b>N</b>..\n\n  <br/>\n  Next, define an array P[] that keeps count of the number of indices i such that <b>A</b>[0...i]\n  amount to a specific prefix_sum. i.e., P[prefix_sum] should give us the number of indices i such that\n  sum(<b>A</b>[0...i])=prefix_sum. However, we could have negative prefix_sum values and hence\n  P[prefix_sum] could be an invalid lookup. To resolve this, instead of mapping a prefix_sum to\n  P[prefix_sum], we map it to P[prefix_sum + offset], where offset = min(sum(A[0.....i]), 0)*-1\n  for 0 &le; i &lt; <b>N</b>. i.e., The minimum among the <b>N</b>+1 (+1 for the empty prefix)\n  prefix_sum values possible which can be computed with a single pass over <b>A</b>.\n  Note that the offset is at least 0.\n</p>\n\n<p>\n  Next, we iterate the <b>A</b> left to right, while maintaining the sum of elements seen so\n  far - let's call that prefix_sum. Now, at every i-th index, we ask the question,\n  <i>How many subarrays end at i and have the subarray sum which is also a square</i>?\n\n  <br/>To answer this, we iterate S[] and for each square S<sub>k</sub>, we add\n  P[(prefix_sum-S<sub>k</sub>) + offset] to Res[i]. Why so? - P is built as we iterate\n  <b>A</b> and hence, at a certain index i, P holds the mapping of {prefix_sum, count}\n  where count is the number of indices j (&lt; i) such that sum(A[0....j])=prefix_sum. Therefore,\n  P[(prefix_sum-S<sub>k</sub>) + offset] holds the number of indices such that sum(A[j...i])=S<sub>k</sub>.\n\n  <br/>We also increment the count of P[prefix_sum+offset] by 1 to record that\n  sum(<b>A</b>[0....i])=prefix_sum. Finally, summing up all values Res[] would give us our answer.\n</p>\n\n<p>\n  Since we traverse <b>A</b> once, iterate S[] for every index i and lookup in P[] is O(1),\n  the total time complexity for this solution is O(<b>N</b>*&radic;(<b>N</b>*MAX_A)).\n</p>\n\n<h4>\n    Appendix\n</h4>\n\n<p>\n  A subtle observation and a potential improvement is to early exit on iteration of S[] at every stage.\n  As mentioned earlier, we check P[(prefix_sum-S<sub>k</sub>) + offset] and notice that at some point\n  (prefix_sum-S<sub>k</sub>) + offset could become &lt; 0 which indicates not only that accessing P\n  would be invalid, but also that S<sub>k</sub> is too large to be obtained from all elements\n  upto the current index i. We can use this criteria as a way to early exit the iteration on S[].\n  The asymptotic time complexity would remain the same, but would be slightly faster in run-time.\n</p>\n\n<p>\n  Next, instead of using an array with an offset for lookup of prefix sums , we could use a normal map, which\n  would remove the need of an offset, but adds the cost of lookup that would take logarithmic time instead\n  of the O(1). This solution may also be accepted if written efficiently and the time comoplexity would be\n  O(<b>N</b>*log(<b>N</b>)*&radic;(<b>N</b>*MAX_A)).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3hHdqMIjvB8HaGk0xL8Ei8qiDtZufMXG9MsIzZc5qSSVrvywIigS0gtfDEUluUgqOLH18tG8g/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000003381cb","statement":"<h3>Problem</h3>\n<p>\n  Cristobal has an array of <b>N</b> (possibly negative) integers. The i-th integer in his array is <b>A<sub>i</sub></b>.\n  A contiguous non-empty subarray of Cristobal's array is <i>perfect</i> if its total sum is a <a href=\"https://en.wikipedia.org/wiki/Square_number\">perfect square</a>.\n  A perfect square is a number that is the product of a non-negative integer with itself.\n  For example, the first five perfect squares are 0, 1, 4, 9 and 16.\n</p><p>\n  How many subarrays are <i>perfect</i>? Two subarrays are different if they start or end at\n  different indices in the array, even if the subarrays contain the same values in the same order.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  The first line of each test case contains the integer <b>N</b>.\n  The second line contains <b>N</b> integers describing Cristobal's array. The i-th integer is <b>A<sub>i</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the number of perfect subarrays.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  -100 &le; <b>A<sub>i</sub></b> &le; 100, for all i.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  1 &le; <b>N</b> &le; 1000.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 30 seconds.<br/>\n\n  For up to 5 cases, 1 &le; <b>N</b> &le; 10<sup>5</sup>.<br/>\n  For the remaining cases, 1 &le; <b>N</b> &le; 1000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2qemIxw2wntFaWdhbEIflYguxvRDJBodhA5qLY_0A8ShrsUXs-MiVp1SgTb75bN7S_MyDenuYGIJinY5DmnJw7gNzgkHK9AsIfVSTZL04/perfect_subarray_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3\n2 2 6\n5\n30 30 9 1 30\n4\n4 0 0 16\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1KJ364iwVAlwC36ysrAtW5TX9qWz2bYDgaoKW0t9fqxwYp2gZCq9S_6gQeA7_dFZweUJs44v1HVX5ua9jtOFecI2MJLed9wr8KmgjUmIGj/perfect_subarray_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 3\nCase #3: 9\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n</sampleio>\n<p>\n  In sample case #1, there is one perfect subarray: <code>[2 2]</code> whose sum is 2<sup>2</sup>.\n</p>\n<p>\n  In sample case #2, there are three perfect subarrays:\n  <ul>\n    <li><code>[9]</code>, whose total sum is 3<sup>2</sup>.</li>\n    <li><code>[1]</code>, whose total sum is 1<sup>2</sup>.</li>\n    <li><code>[30 30 9 1 30]</code>, whose total sum is 10<sup>2</sup>.</li>\n  </ul>\n</p>\n<p>\n  In sample case #3, there are nine perfect subarrays:\n  <ul>\n    <li><code>[4]</code>, whose total sum is 2<sup>2</sup>.</li>\n    <li><code>[4 0]</code>, whose total sum is 2<sup>2</sup>.</li>\n    <li><code>[4 0 0]</code>, whose total sum is 2<sup>2</sup>.</li>\n    <li><code>[0]</code>, whose total sum is 0<sup>2</sup>.</li>\n    <li><code>[0 0]</code>, whose total sum is 0<sup>2</sup>.</li>\n    <li><code>[0 0 16]</code>, whose total sum is 4<sup>2</sup>.</li>\n    <li><code>[0]</code>, whose total sum is 0<sup>2</sup>.</li>\n    <li><code>[0 16]</code>, whose total sum is 4<sup>2</sup>.</li>\n    <li><code>[16]</code>, whose total sum is 4<sup>2</sup>.</li>\n  </ul>\n</p>\n<p>\n  <b>Note</b>: We do not recommend using interpreted/slower languages for the test set 2 of this problem.\n</p>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":10},{"type":1,"type__str":"VISIBLE","value":19}],"title":"Perfect Subarray","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"000000000019ff43","type":1,"type__str":"SPECTATOR"},"title":"Round C 2020"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
