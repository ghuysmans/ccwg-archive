{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1555812000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000050eda","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  Thank you for participating in our second round for 2019. The first problem, <i>Building Palindromes</i>,\n  required an ad-hoc reasoning around optimal decisions and optimizing the implementation via precomputation.\n  The second problem, <i>Energy Stones</i>'s solution was based on dynamic programming. The last problem, <i>Diverse Subarray</i>\n  was a data structures problem requiring some nice observations.\n</p>\n<p>\n</p>\n<hr>\n<p>\n<b>Cast</b>\n</p><p>\n  Building Palindromes: Written by Bartosz Kostka and prepared by Sadia Atique.\n</p><p>\n  Energy Stones: Written by Asim Krishna Prasad and prepared by Kunal Jain.\n</p><p>\n  Diverse Subarray: Written by Himanshu Jaju and prepared by Sadia Nahreen.\n</p><p>\n  Solutions, other problem preparation, reviews and contest monitoring by\n  Akashdeep Nain,\n  Anushi Maheshwari,\n  Bir Bahadur Khatri,\n  Darcy Best,\n  Himanshu Jaju,\n  Ian Tullis,\n  Kevin Tran,\n  Kunal Jain,\n  Lalit Kundu,\n  Lizzie Esapiro,\n  Raihat Zaman Neloy,\n  Sadia Atique,\n  Sandeep Mohanty,\n  Xinxing Jiang, and\n  Yang Xiao.\n</p>\n<p>\nAnalysis authors:\n</p>\n<ul>\n  <li>Building Palindromes: Sadia Atique</li>\n  <li>Energy Stones: Max Ward</li>\n  <li>Diverse Subarray: Max Ward</li>\n</ul>\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1555801200000,"tasks":[{"analysis":"<p>\n  For each query[<b>L</b>, <b>R</b>], we have to figure out if it is possible to make a palindrome\n  from substring[<b>L</b>, <b>R</b>] of the original block string.\n  <br>\n  For any substring, we can create all possible permutations of it and check if any of those\n  is a palindrome. For a substring of length <i>l</i>, in the worst case, there\n  would be <a href=\"https://en.wikipedia.org/wiki/Factorial\">Factorial(<i>l</i>)</a> permutations, and\n  to check if a string of length <i>l</i> is palindrome is O(<i>l</i>). So the cost of each query\n  would be O(<b>N</b>*Factorial(<b>N</b>)) and thus wouldn't fit within the time limit.\n  <br>\n  One important observation is that in a palindrome, at most one character can appear odd number of\n  times. If more than one character appears odd number of times in a string, it is impossible to\n  rearrange that string to form a palindrome.\n  <br>\n  If all characters in a string are present even times, we can just divide the characters into two\n  identical sets. Then we can make two strings with those two sets such that one string is the reverse\n  of the other one. Finally concatenate them to get a palindrome.\n  <br>\n  If we have only one character let's say <i>x</i>, which is present odd number of times,\n  we can set aside one <i>x</i>. Then we get a set of character where all characters are present\n  even number of times, and we can construct a palindrome in somewhat similar way as described above,\n  this time we can just put the <i>x</i> in between those two strings.\n</p>\n<h3>Test set 1 (Visible)</h3>\n<p>\n  For each query, we can count the frequencies of all characters in the substring and decide\n  if it is possible to make a palindrome or not. The complexity of solving each query in this\n  approach is the length of the substring, which is O(<b>N</b>). Total complexity of this approach is\n  O(<b>N</b> &times; <b>Q</b>), which will be sufficient for test set 1.\n</p>\n<h3>Test set 2 (Hidden)</h3>\n<p>\n  We need to count the frequencies of each characters in a query substring, but can we make the counting\n  of frequencies faster?\n  <br>\n  Notice that, if we calculate prefix sum of frequencies for each character on the whole input string,\n  we can get the frequency of any character in any given substring in O(1) time.\n  <br>\n  In this approach, the time required to compute the prefix sum of the frequencies for each character\n  is O(<b>N</b>) and hence O(<b>N</b> &times; |character set|) for all. And for each query substring,\n  we can check parity of the frequency for each of the characters in O(|character set|) time.\n  So for <b>Q</b> queries, the overall complexity of this approach is\n  O((<b>N</b> + <b>Q</b>) &times; |character set|), which is sufficient for test set 2.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2_DiCJMd1QKo8LzNopauWLIyxUGh1prvoF0am6MD49JqhL18ptHoTcaZpOpDDMEK9M2PL5_w/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000119866","statement":"<h3>Problem</h3>\n<p>\n  Anna has a row of <b>N</b> blocks, each with exactly one letter from <code>A</code> to <code>Z</code> written on it.\n  The blocks are numbered 1, 2, ..., <b>N</b> from left to right.\n</p><p>\n  Today, she is learning about palindromes.\n  A palindrome is a string that is the same written forwards and backwards.\n  For example, <code>ANNA</code>, <code>RACECAR</code>, <code>AAA</code> and <code>X</code> are all palindromes, while\n  <code>AB</code>, <code>FROG</code> and <code>YOYO</code> are not.\n</p><p>\n  Bob wants to test how well Anna understands palindromes, and will ask her <b>Q</b> questions.\n  The i-th question is: can Anna use all of the blocks numbered from <b>L<sub>i</sub></b> to <b>R<sub>i</sub></b>,\n  inclusive, rearranging them if necessary, to form a palindrome? After each question, Anna puts\n  the blocks back in their original positions.\n</p><p>\n  Please help Anna by finding out how many of Bob's questions she can answer \"yes\" to.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case starts with a line containing the two integers <b>N</b> and <b>Q</b>, the number of blocks and the number of questions, respectively.\n  Then, another line follows, containing a string of <b>N</b> uppercase characters (<code>A</code> to <code>Z</code>).\n  Then, <b>Q</b> lines follow. The i-th line contains the two integers <b>L<sub>i</sub></b> to <b>R<sub>i</sub></b>, describing the i-th question.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the\n  test case number (starting from 1) and <code>y</code> is\n  the number of questions Anna can answer \"yes\" to.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 30 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  1 &le; <b>T</b> &le; 100.\n  1 &le; <b>L<sub>i</sub></b> &le; <b>R<sub>i</sub></b> &le; <b>N</b>.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  1 &le; <b>N</b> &le; 20.<br/>\n  1 &le; <b>Q</b> &le; 20.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  1 &le; <b>N</b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>Q</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2jzXacq6J0WVWvoWfnAroB2eqAxdcmOp792ceEuQ6feceaL00lk9W9vfoFe7SuRt-tdhFYJaSQJnRhUhTxW9n2eoahyxT22D_odYq35wVmUJM/building_palindromes_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n7 5\nABAACCA\n3 6\n4 4\n2 5\n6 7\n3 7\n3 5\nXYZ\n1 3\n1 3\n1 3\n1 3\n1 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1jVb2dXIWHvn7si5sVwlu5UupMfcBG8HSr9Z0CSGm-2NK2uzcOMZW8D8NtvE0x-IcZH0iF9AoyH2in-49zsLDhypM4nqfO6Xo8aeFvoCti_ICW/building_palindromes_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 0\n\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, <b>N</b> = 7 and <b>Q</b> = 5.\n  <ul>\n    <li>For the first question, Anna must use the blocks <code>AACC</code>. She can rearrange these blocks into the palindrome <code>ACCA</code> (or <code>CAAC</code>). </li>\n    <li>For the second question, Anna must use the blocks <code>A</code>. This is already a palindrome, so she does not need to rearrange them. </li>\n    <li>For the third question, Anna must use the blocks <code>BAAC</code>. These blocks cannot be rearranged into a palindrome. </li>\n    <li>For the fourth question, Anna must use the blocks <code>CA</code>. These blocks cannot be rearranged into a palindrome. </li>\n    <li>For the fifth question, Anna must use the blocks <code>AACCA</code>. She can rearrange these blocks to form the palindrome <code>ACACA</code> (or <code>CAAAC</code>). </li>\n  </ul>\n  In total, she is able to answer \"yes\" to 3 of Bob's questions, so the answer is 3.\n</p><p>\n  In Sample Case #2, <b>N</b> = 3 and <b>Q</b> = 5. For the first question, Anna must use the blocks <code>XYZ</code> to create a palindrome.\n  This is impossible, and since the rest of Bob's questions are the same as the first one, the answer is 0.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":2,"type__str":"HIDDEN","value":12}],"title":"Building Palindromes","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Consider finding the optimal solution that is a prefix of the input. That is, let us only consider\n  taking ranges of trinkets [1,r] for any r. This reduces the problem to finding\n  prefix sum maximums. For example, consider this sequence of trinkets: <br>\n  <i>1, 1, 2, 1, 3, 2, 3, 2, 2 </i> <br>\n  Assume that <b>S</b>=2. <br>\n  The first and second occurrence of a type can be modeled as a +1 event since we can take the\n  trinkets. The <b>S</b>+1th occurrence can be a -<b>S</b> event, since now we cannot take any\n  trinkets of that type. Finally, any further occurrence of that type can be a +0 since we\n  still cannot take them.\n  Thus, we have the following events: <br>\n  <i>+1, +1, +1, -2, +1, +1, +1, -2, +0 </i> <br>\n  A prefix sum ending at index r in our events corresponds to the score for taking the\n  subarray [1,r]. This idea can be generalized to any value of <b>S</b>, since all events\n  until the <b>S</b>+1th can be +1 events.\n</p>\n<h3>Test set 1 (Visible)</h3>\n<p>\n  A naive algorithm can be realized using the above strategy.\n  It can be applied to each potential left point (instead of always starting at 1).\n  This explicitly considers every possible range [l,r] and computes the number of\n  trinkets. The events can be calculated by keeping track of how many times each type has occurred\n  while sweeping across the trinkets and keeping a running sum of events. The count of types can be\n  handled with a frequency table. Any map from type to count can implement this, for example, an\n  array or hashtable. The strategy uses O(<b>N</b>) time to process the solution starting at a\n  particular left point. There are O(<b>N</b>) left points. Thus, the time complexity is\n  O(<b>N</b><sup>2</sup>). This is sufficient for Test set 1.\n</p>\n<h3>Test set 2 (Hidden)</h3>\n<p>\n  The previous algorithm will not be fast enough for the Test set 2. Observe that the events for\n  the lth left point are closely related to those for the l+1th left point. In\n  particular, only events corresponding to the type of the trinket at index l change. In\n  fact, only the -<b>S</b> for that type changes. It moves over to the next +0 event for that type\n  if it exists. The previous -<b>S</b> event becomes a +1. This means that the events only change at\n  a constant number of places.\n</p>\n<p>\n  Using this observation, we can think about this as a data structure problem. We require a data\n  structure that supports two operations:\n  <ol><li>Change the value at an index.</li><li>What is the maximum prefix sum?</li></ol>\n  This can be used to maintain our events and find the best solution for each left point\n  respectively. These operations can be achieved using a modified segment tree.\n  Each node in the segment tree can be modified to store the sum of the elements covered by that\n  node. Also, each node should store the maximum sum of any prefix of elements that are covered by\n  that node. Such a tree can support both operations in O(log(<b>N</b>)) time. We can achieve a\n  final complexity of O(<b>N</b> log(<b>N</b>)).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U06CItAjvg-KB4ZcdUvyckEuRWY3RryhD5Bw6yB-ZYS3VvZNfEIxXrAFQ-8s5Z-TOCw8SZyHA/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000001198c1","statement":"<h3>Problem</h3>\n<p>\n  Vanity has <b>N</b> trinkets on her shelf, numbered 1, 2, ..., <b>N</b> from left to right.\n  Trinkets come in different types, which are denoted by positive integers.\n  The i-th trinket on her shelf is of type <b>A<sub>i</sub></b>.\n</p><p>\n  She is going to see her family overseas today and would like to bring as many trinkets as she can.\n  However, since she is in a hurry, Vanity must take a consecutive interval of trinkets.\n  Formally, Vanity selects two indices, <i>l</i> and <i>r</i>, and takes all of the trinkets numbered <i>l</i>, <i>l</i>+1, ..., <i>r</i>-1, <i>r</i>.\n  Also, due to tax rules, airport security will throw away <i>all</i> trinkets of a type if Vanity has more than <b>S</b> of that type in the chosen interval.\n</p><p>\n  For example, suppose that <b>S</b> = 2, and Vanity brings six trinkets:\n  one of type 0, two of type 1, and three of type 2. She will be allowed to\n  keep the trinket of type 0 and both trinkets of type 1, but she will lose\n  <i>all</i> of the trinkets of type 2!\n</p><p>\n  Vanity needs to choose <i>l</i> and <i>r</i> such that she can take the maximum number of trinkets for her\n  family. What is the maximum number of trinkets she can bring?\n</p>\n\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  The first line of each test case contains the two integers <b>N</b> and <b>S</b>, the number of\n  trinkets, and the maximum number of trinkets allowed of a single type, respectively.\n  The second line contains <b>N</b> integers. The i-th integer gives <b>A<sub>i</sub></b>, the\n  type of the i-th trinket.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the maximum number of trinkets that Vanity can bring to her family.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 30 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>A<sub>i</sub></b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>S</b> &le; <b>N</b>.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  1 &le; <b>N</b> &le; 1000.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  1 &le; <b>N</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3OLl5Ailoq_0lT0WBS-notzgD58nAnXiC0OKfo5QaYQWo_ljCfHhvXKPDvos6QMDV8QNYY4X-Q3uBqeS6zlKx2p0VTy3fiooJIRZfrOw/diverse_subarray_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n6 2\n1 1 4 1 4 4\n8 1\n1 2 500 3 4 500 6 7\n10 1\n100 200 8 8 8 8 8 300 400 100\n12 2\n40 50 1 1 1 60 70 2 2 2 80 90\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1418VtHLAIr65DPxb2cUzZxInqrfFq_gQEXyFgthci0gwdBw2_DqFqbzM1lBrzQ8TzhpFoxgQcIMMg9R5gdGk0hYVd8KLa8Coymssrt68/diverse_subarray_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4\nCase #2: 6\nCase #3: 4\nCase #4: 6</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, Vanity should choose <i>l</i> = 2 and <i>r</i> = 5. This allows her to take 4 trinkets to the airport of types 1, 4, 1 and 4.\n  None of them are thrown away by airport security, so she is able to bring 4 trinkets to her family.\n</p><p>\n  In Sample Case #2, Vanity should choose <i>l</i> = 1 and <i>r</i> = 8. This allows her to take all 8 trinkets to the airport.\n  Her trinkets of type 500 are thrown away since she has more than <b>S</b> = 1 of them, so she is able to bring a total of 6 trinkets to her family.\n</p><p>\n  In Sample Case #3, Vanity should choose <i>l</i> = 1 and <i>r</i> = 9. This allows her to take 9 trinkets to the airport of types 100, 200, 8, 8, 8, 8, 8, 300 and 400.\n  Her trinkets of type 8 are thrown away since she has more than <b>S</b> = 1 of them, so she is able to bring a total of 4 trinkets to her family.\n</p><p>\n  In Sample Case #4, Vanity should choose <i>l</i> = 1 and <i>r</i> = 12. This allows her to take all 12 trinkets to the airport.\n  Her trinkets of type 1 and 2 are thrown away since she has more than <b>S</b> = 2 of each of them, so she is able to bring a total of 6 trinkets to her family.\n<p>\n\n<p>\n  <b>Note</b>: We do not recommend using interpreted/slower languages for this problem.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":14},{"type":2,"type__str":"HIDDEN","value":28}],"title":"Diverse Subarray","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test set 1 (Visible)</h3>\n<p>\n  For this test set, it is guaranteed that <b>S</b><sub>i</sub> = <b>S</b><sub>j</sub> for all i, j.\n  For simplicity, we will assume that we never eat a stone with zero energy.\n  Consider two energy stones i and j that will be eaten back-to-back.\n  If <b>L</b><sub>i</sub> &gt; <b>L</b><sub>j</sub> then we should eat i before j.\n  This is because stone i loses energy faster than j, so taking it first will result in a smaller\n  overall loss of energy.\n</p>\n<p>\n  Thus, no matter which set of energy stones are eaten, that set should be eaten in non-increasing\n  value of <b>L</b><sub>i</sub>. So we should first sort the stones by <b>L</b><sub>i</sub> and then\n  the only decision to be made is which stones should be eaten and which should not be eaten.\n  This reduces the problem to a\n  <a href=\"https://en.wikipedia.org/wiki/Knapsack_problem\">0/1 Knapsack</a> problem. This can be\n  solved with <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\">dynamic programming</a>.\n</p>\n<p>\n  Define <code>max_energy(time, i)</code> as the maximum total energy that can be achieved given\n  the current time and considering only the suffix of energy stones sorted in decreasing\n  <b>L</b><sub>i</sub> from i to <b>N</b>. The\n  recurrence relation for this function considers two cases. Either take the i-th energy stone\n  (with its energy adjusted by the time), or do not take it. So, <code>max_energy(time, i)</code>\n  is the maximum of:\n  <ul>\n    <li>max_energy(time+<b>S</b><sub>i</sub>, i+1)\n      +max(0,<b>E</b><sub>i</sub>-<b>L</b><sub>i</sub>time)</li>\n    <li>max_energy(time,i+1)</li>\n  </ul>\n\n  The maximum possible time is the sum of all <b>S</b><sub>i</sub> because an optimal strategy might\n  eat all the stones and will not use any time waiting. Call this sum(<b>S</b>). The\n  time complexity of this approach can be described as O(<b>N</b> &times; sum(<b>S</b>)). This is fast\n  enough for both test sets. However, sorting energy stones by <b>L</b><sub>i</sub> is incorrect for\n  Test set 2.\n</p>\n<h3>Test set 2 (Hidden)</h3>\n<p>\n  We will need to find a different way to order the energy stones to solve Test set 2. As before,\n  consider two energy stones i and j assuming that we can take both i and j without either going to\n  zero energy. We know that <b>S</b><sub>i</sub> might not equal <b>S</b><sub>j</sub>. However,\n  there is an ordering for taking both i and j that is always optimal. Observe that\n  <b>S</b><sub>i</sub><b>L</b><sub>j</sub> is the total loss of energy if i is used first.\n  Likewise, <b>S</b><sub>j</sub><b>L</b><sub>i</sub> is the loss if j is used first. Thus, if\n  <b>S</b><sub>i</sub><b>L</b><sub>j</sub> &lt; <b>S</b><sub>j</sub><b>L</b><sub>i</sub> then\n  taking i first leads to a smaller overall loss of energy.\n  It may not be obvious that we should always take i before j even if it leads to a smaller loss of\n  energy. This is because there may be other stones between i and j in some potential ordering.\n  However, if i and j are adjacent in some ordering, then we will achieve more energy by\n  swapping them if\n  <b>S</b><sub>i</sub><b>L</b><sub>j</sub> &gt; <b>S</b><sub>j</sub><b>L</b><sub>i</sub>.\n  Applying this rule iteratively will eventually sort the stones.\n  Therefore, this rule defines an ordering on our energy stones.\n</p>\n<p>\n  Formally, suppose for a contradiction, we have an optimal solution that eats X stones in the order\n  P<sub>1</sub>, P<sub>2</sub>, ..., P<sub>X</sub>, where each stone gives Duda a positive amount of energy,\n  but there exists an i such that\n  <b>S</b><sub>P<sub>i</sub></sub><b>L</b><sub>P<sub>i+1</sub></sub> &gt; <b>S</b><sub>P<sub>i+1</sub></sub><b>L</b><sub>P<sub>i</sub></sub>.\n  If we swap the order we eat these two stones, we gain exactly <b>S</b><sub>P<sub>i</sub></sub><b>L</b><sub>P<sub>i+1</sub></sub> more energy\n  and lose at most <b>S</b><sub>P<sub>i+1</sub></sub><b>L</b><sub>P<sub>i</sub></sub> (we may lose less than that, if the stone's energy drops to zero).\n</p><p>\n  Since we assumed that <b>S</b><sub>P<sub>i</sub></sub><b>L</b><sub>P<sub>i+1</sub></sub> &gt; <b>S</b><sub>P<sub>i+1</sub></sub><b>L</b><sub>P<sub>i</sub></sub>,\n  this would increase the amount of energy Duda gains, which contradicts the assumption that\n  this is an optimal solution.\n</p><p>\n  Thus, we can use the dynamic programming solution from Test set 1 to solve Test set 2 with the\n  same time complexity.\n</p>\n<p>\n  The reader may have noticed that this sort order is equivalent to comparing fractions; it is\n  the same as sorting by <b>S</b><sub>i</sub>/<b>L</b><sub>i</sub>. However, one must be careful\n  when <b>L</b><sub>i</sub>=0.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U03p63zci5Nb-CB9Lo3LsEGwchPs_0AwVVhOVPoexMdvpGF_5xnXQeSLN8xU9kb9_gAKg-LPw/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000001198c3","statement":"<h3>Problem</h3>\n<p>\n  Duda the rock monster lives in the enchanted forest and has collected <b>N</b> <i>energy stones</i> for lunch.\n  Since he has a small mouth, he eats energy stones one at a time.\n  Some stones are tougher than others! The i-th stone takes him <b>S<sub>i</sub></b> seconds to eat.\n</p><p>\n  Duda eats energy stones to get <i>energy</i>.\n  Different stones give him different amounts of energy. Furthermore, the stones lose energy over time.\n  The i-th stone initially contains <b>E<sub>i</sub></b> units of energy and will lose <b>L<sub>i</sub></b> units of energy each second.\n  When Duda starts to eat a stone, he will receive all the energy the stone contains immediately (no matter how much time it takes to actually finish eating the stone).\n  The stone's energy stops decreasing once it hits zero.\n</p><p>\n  What is the largest amount of energy Duda could receive from eating his stones?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case starts with a line containing the integer <b>N</b>, the number of energy stones Duda has.\n  Then, there are <b>N</b> more lines, the i-th of which contains the three integers <b>S<sub>i</sub></b>, <b>E<sub>i</sub></b> and <b>L<sub>i</sub></b>, as described above.\n</p>\n\n<h3>Output</h3>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is the maximum amount of energy Duda could\n  receive from eating stones.\n<p>\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 30 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>N</b> &le; 100.<br/>\n  1 &le; <b>S<sub>i</sub></b> &le; 100.<br/>\n  1 &le; <b>E<sub>i</sub></b> &le; 10<sup>5</sup>.<br/>\n  0 &le; <b>L<sub>i</sub></b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  All stones take the same amount of time to eat. That is: <b>S<sub>i</sub></b> = <b>S<sub>j</sub></b> for all i and j.\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  There are no additional constraints beyond the general Limits.\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2TeO9PM2BdkoNCGlkEXq4kZvuWg20xjle7vcpJtmVjxqhOlkZJbAhlpiNSdmlTHmd03SiWq027BySmIjDMAPongUriKF6UJm5utQ/energy_stones_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3\n10 4 1000\n10 3 1000\n10 8 1000\n2\n10 2 0\n10 3 0\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0gsGQSoBGykQXfAIkRUMc2G-FCP5fAr1nFJ3C3t-UF4H6Uh0n19xoaCIEnOmB5PUw3CZLzksvktEFCzcZAPpLGxBihHsu6IIRH8SI/energy_stones_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 8\nCase #2: 5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, there are <b>N</b> = 3 stones. No matter which stone Duda eats, the other two will have no energy left once he is done eating. So he should eat the third stone, giving him 8 units of energy.\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U068GtXKnUPiEykGWyPuksipe1PQdLsBltc0JArp03KMNwVFA4EHn8peXTEU0DnHITZdoWuGyfMRCVAvs0-2skRBpR4dpP1xFoJCw/energy_stones_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">2\n4\n20 10 1\n5 30 5\n100 30 1\n5 80 60\n2\n12 300 50\n5 200 0\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1bxlHCFVt0VkjW5KXP4ztoyAm0lmyHWX_8Ih-jBG-DgMP79LhSUPFlcJUJfGy3nqFeBpDkAnCStLqwoCvMNIgZyReXTV_mjzLkTIg/energy_stones_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 105\nCase #2: 500\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, there are <b>N</b> = 4 stones. One possible order Duda can eat stones is:\n  <ul>\n    <li> Eat the fourth stone. This takes 5 seconds and gives him 80 units of energy.</li>\n    <li> Eat the second stone. This takes 5 more seconds and gives him 5 units of energy (the second stone started with 30 energy, and over 5 seconds, has lost 25 units of energy).</li>\n    <li> Eat the third stone. This takes 100 more seconds and gives him 20 units of energy (the third stone started with 30 energy, and over 10 seconds, has lost 10 units of energy).</li>\n    <li> Eat the first stone. This takes 20 more seconds and gives him 0 units of energy (the first stone started with 10 units of energy, and over 110 seconds, has lost all of its energy).</li>\n  </ul>\n  This gives him 105 units of energy, which is the best he can do. So the answer is 105.\n</p><p>\n  In Sample Case #2, there are <b>N</b> = 2 stones. Duda can:\n  <ul>\n    <li> Eat the first stone. This takes 12 seconds and gives him 300 units of energy.</li>\n    <li> Eat the second stone. This takes 5 seconds and gives him 200 units of energy (the second stone does not lose any energy over time!).</li>\n  </ul>\n  So the answer is 500.\n</p>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":17},{"type":2,"type__str":"HIDDEN","value":24}],"title":"Energy Stones","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000050eda","type":1,"type__str":"SPECTATOR"},"title":"Round B 2019"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
