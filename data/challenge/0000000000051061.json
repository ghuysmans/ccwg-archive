{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1564300800000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000051061","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  Thank you for participating in Kick Start 2019 Round D.\n</p>\n<p>\n</p>\n<hr>\n<p>\n<b>Cast</b>\n</p><p>\n  X or What: Written by Max Ward, and prepared by Shang-En Huang and Kevin Tran.\n</p><p>\n  Latest Guests: Written by Kevin Tran and prepared by Shang-En Huang.\n</p><p>\n  Food Stalls: Written by Kevin Tran and prepared by Raihat Zaman Neloy.\n</p><p>\n  Solutions, other problem preparation, reviews and contest monitoring by\n  Anushi Maheshwari,\n  Bir Bahadur Khatri,\n  Darcy Best,\n  Gagan Madan,\n  Himanshu Jaju,\n  Kevin Tran,\n  Lalit Kundu,\n  Raihat Zaman Neloy,\n  Sadia Atique,\n  Teja Vardhan Reddy Dasannagari,\n  Vivek Dhiman, and\n  Yang Xiao.\n</p>\n<p>\nAnalyses were authored by Sandeep Mohanty.\n</p>\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1564290000000,"tasks":[{"analysis":"<h3>\n  Test set 1 (Visible)\n</h3>\n<p>\n    Let's define a new array S. We set S<sub>0</sub> = 0, S<sub>1</sub> = <b>A</b><sub>1</sub> and S<sub>i</sub> = S<sub>i - 1</sub> xor <b>A</b><sub>i</sub> for i = 2 to <b>N</b> (Note that S is zero-indexed while <b>A</b> is one-indexed). We can see that once we've calculated this, <b>A</b><sub>l</sub> xor <b>A</b><sub>l + 1</sub> ... xor <b>A</b><sub>r</sub> is simply given by S<sub>r</sub> xor S<sub>l - 1</sub>.\n</p>\n<p>\n    With this, Test set 1 can be solved just by calculating the xor sum of every sub-interval of <b>A</b> and checking if it's <i>xor-even</i>. After each update, we need to recompute S which only takes O(<b>N</b>) time. So each query can be handled in O(<b>N</b><sup>2</sup>) time with an overall complexity of O(<b>QN</b><sup>2</sup>).\n</p>\n\n<h3>\n  Test set 2 (Hidden)\n</h3>\n<p>\n    Let's extend the definition of <i>xor-even</i> to mean any number having even number of 1s in it's binary representation, similarly for <i>xor-odd</i>. Now, notice that if we xor two <i>xor-even</i> numbers or two <i>xor-odd</i> numbers (numbers having an odd number of 1s in their binary representations), we get a <i>xor-even</i> number and, similarly, if we xor a <i>xor-even</i> number with a <i>xor-odd</i> number, we get a <i>xor-odd</i> number. Hence, if there are a even number of <i>xor-odd</i> numbers in an interval then that interval is going to be <i>xor-even</i> and vice versa.\n</p>\n<p>\n    This means that if there are even number of <i>xor-odd</i> numbers in our array, the whole array is <i>xor-even</i>. Otherwise, we consider the subarray starting just after the first <i>xor-odd</i> number and going till the end and the subarray starting from the first element in our array and ending just before the last <i>xor-odd</i> number. Both are <i>xor-even</i> intervals and the larger of them should be the largest <i>xor-even</i> interval in our array.\n</p>\n<p>\n    We can do this by keeping a set of all positions of <i>xor-odd</i> numbers. Every time we update a number, we simply do an insertion or a deletion or leave the set unchanged. If the size of the set is even, then the whole array is <i>xor-even</i>, otherwise we get the left most and the right most positions from this set and output the answer as discussed above.\n</p>\n<p>\n    Since we will have an O(<b>N</b>) elements in the set and there will be <b>Q</b> queries, each of O(log(<b>N</b>)) time, this solution has a complexity of O((<b>N</b>+<b>Q</b>)log(<b>N</b>)).\n</p>\n<p>\n    We can also solve this problem using <a href=\"https://en.wikipedia.org/wiki/Van_Emde_Boas_tree\">van Emde Boas trees</a> in O(<b>Q</b>log(log (<b>N</b>))). Or we can use offline algorithms as well to achieve even better asymptotic solutions. Figuring out the details of these approaches is left as exercises to the reader.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2uBg6XCehnbGCzUK31fqK8aYkBDSEWy42zYKCwtczOScy9278In65oU1o-vYIs_wvP9M8jog/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000161426","statement":"<h3>Problem</h3>\n<p>\n  Steven has an array of <b>N</b> non-negative integers.\n  The i-th integer (indexed starting from 0) in the array is <b>A<sub>i</sub></b>.\n</p><p>\n  Steven really likes subintervals of <b>A</b> that are <i>xor-even</i>.\n  Formally, a subinterval of <b>A</b> is a pair of\n  indices (L, R), denoting the elements\n  <b>A<sub>L</sub></b>,\n  <b>A<sub>L+1</sub></b>,\n  ...,\n  <b>A<sub>R-1</sub></b>,\n  <b>A<sub>R</sub></b>.\n  The xor-sum of this subinterval is\n  <b>A<sub>L</sub></b> xor\n  <b>A<sub>L+1</sub></b> xor\n  ... xor\n  <b>A<sub>R-1</sub></b> xor\n  <b>A<sub>R</sub></b>, where xor is the <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#XOR\">bitwise exclusive or</a>.\n</p><p>\n  A subinterval is <i>xor-even</i> if its xor-sum has an even number of set bits in its binary representation.\n</p><p>\n  Steven would like to make <b>Q</b> modifications to the array.\n  The i-th modification changes the <b>P<sub>i</sub></b>-th (indexed from 0) element to <b>V<sub>i</sub></b>.\n  Steven would like to know, what is the size of the xor-even subinterval of <b>A</b> with the most elements after each modification?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n</p><p>\n  Each test case starts with a line containing two integers <b>N</b> and <b>Q</b>, denoting the number of\n  elements in Steven's array and the number of modifications, respectively.\n</p><p>\n  The second line contains <b>N</b> integers. The i-th of them gives <b>A<sub>i</sub></b> indicating the i-th integer in Steven's array.\n</p><p>\n  Then, <b>Q</b> lines follow, describing the modifications. The i-th line contains <b>P<sub>i</sub></b> and <b>V<sub>i</sub></b>,\n  The i-th modification changes the <b>P<sub>i</sub></b>-th element to <b>V<sub>i</sub></b>.\n  indicating that the i-th modification changes the <b>P<sub>i</sub></b>-th (indexed from 0) element to <b>V<sub>i</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y_1 y_2 ... y_Q</code>, where <code>x</code> is the test case number (starting from 1) and <code>y_i</code> is\n  the number of elements in the largest xor-even subinterval of <b>A</b> after the i-th modification.\n  If there are no xor-even subintervals, then output 0.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 40 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n1 &le; <b>T</b> &le; 100.<br/>\n0 &le; <b>A<sub>i</sub></b> &lt; 1024.<br/>\n0 &le; <b>P<sub>i</sub></b> &lt; <b>N</b>.<br/>\n0 &le; <b>V<sub>i</sub></b> &lt; 1024.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  1 &le; <b>N</b> &le; 100.<br/>\n  1 &le; <b>Q</b> &le; 100.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  1 &le; <b>N</b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>Q</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1PFdN1zjg4-kYWhpb1oNlGb2lBML2h9_Gkh2TkehFc7x4cSU7LCF29GtFGQB19cFRvdp1qpF19DaK63LfvgW-p-SuLmEca/x_or_what_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n4 3\n10 21 3 7\n1 13\n0 32\n2 22\n5 1\n14 1 15 20 26\n4 26\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1TRGXxRQKHieK-mylBo203afHBF5md2qWbUmAGIr_Oe653GWTzpdDhf6dZY3tlkBVwmC3_rC9-asp5F55uwZnNXGkWQYWm_g/x_or_what_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4 3 4\nCase #2: 4</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\nIn Sample Case 1, <b>N</b> = 4 and <b>Q</b> = 3.\n<ul>\n  <li>\n    After the 1st modification, <b>A</b> is [10, 13, 3, 7]. The subinterval (0, 3) has xor-sum\n    10 xor 13 xor 3 xor 7 = 3. In binary, the xor-sum is 11<sub>2</sub>, which has an even number of 1 bits, so the subinterval is xor-even.\n    This is the largest subinterval possible, so the answer is 4.\n  </li>\n  <li>\n    After the 2nd modification, <b>A</b> is [32, 13, 3, 7]. The largest xor-even subinterval is (0, 2), which has xor-sum 32 xor 13 xor 3 = 46. In binary, this is 101110<sub>2</sub>.\n  </li>\n  <li>\n    After the 3rd modification, <b>A</b> is [32, 13, 22, 7]. The largest xor-even subinterval is (0, 3) again, which has xor-sum 32 xor 13 xor 22 xor 7 = 60. In binary, this is 111100<sub>2</sub>.\n  </li>\n</ul>\n\nIn Sample Case 2, <b>N</b> = 5 and <b>Q</b> = 1. After the 1st modification, <b>A</b> is [14, 1, 15, 20, 26].\nThe largest xor-even subinterval is (1, 4), which has xor sum 1 xor 15 xor 20 xor 26 = 0. In binary, this is 0<sub>2</sub>.\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":8},{"type":2,"type__str":"HIDDEN","value":19}],"title":"X or What?","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\n  Test set 1 (Visible)\n</h3>\n<p>\n    For this test set, we simply simulate the entire affair. For each second, we update the positions of all the guests and will add them to the list of latest guests list of the consulate that they visit. We also keep track of the minute when the list for each consulate was updated so that if a guest comes at a later time, we discard the old list and put this guest (and possibly others) to a new list. Finally after the <b>M</b>th minute, we iterate through all these lists and find for each guest, how many lists they were a part of and output the answer.\n        This takes a total of O(<b>G</b>x(<b>M</b>+<b>N</b>)) time which is sufficient for this test set.\n</p>\n<h3>\n  Test set 2 (Hidden)\n</h3>\n<p>\n    Let's simplify the problem by assuming all the guests travel clockwise. We can get the final position of each guest after <b>M</b> minutes by simply taking their current position, adding <b>M</b> to it and finding the modulo of the result with <b>N</b>. We categorise the guests into groups based upon their final positions. All guests having the same final positions are in the same group and guests having different final positions are in different groups. We maintain a mapping from guests to groups. We are going to find for each group, how many consulates remember it.\n</p>\n<p>\n    Now notice that for any consulate only the group whose final position is on or just after it in a clockwise order can be the last visiting group. We can get this by doing a binary search on the sorted list of final positions of the groups or using a sliding window. Note that there can be at most one group which will be remembered by a consulate.\n</p>\n<p>\n    If this group did not visit this consulate then no one has visited it. To find this we find the time when the group would have visited this consulate last. So we take the difference of their final positions and the position of the consulate and subtract this number from <b>M</b>. If the resultant is negative that means no one visited this consulate. Otherwise, for this consulate, we make a note of this group and the time when they visited.\n</p>\n<p>\n    We handle anti-clockwise guests similarly and get for each consulate the last anti-clockwise guest group to visit it and the time when the group visited.\n</p>\n<p>\n    Now we iterate through the consulates and see which was the last group to visit it (we include both the clockwise and the anti-clockwise groups). We then increment the number of consulates that remembers this group. Finally, we iterate through the guests and see which group they belong to and output the number of consulates that remember this group. This solution has a run-time of O(<b>N+G</b>) if implemented using the sliding window technique or a run-time of O(<b>G</b> + <b>N</b>log(<b>N</b>)) if we use binary-search instead.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U12k8R0vxYJ8PUxw4WNlhrUganlHqhpidgJEYUr9LNXe3W7vvLtxbNFad-fRzSSwUFo_foejg/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000161427","statement":"<h3>Problem</h3>\n<p>\n  The city of Circleburg has a large circular street with <b>N</b> consulates along it.\n  The consulates are numbered 1, 2, ..., <b>N</b> in clockwise order.\n</p><p>\n  Today <b>G</b> guests, numbered 1, 2, ..., <b>G</b> will drive along the circular street for <b>M</b> minutes.\n  Each guest is either\n  a <i>clockwise</i> guest (denoted by the character <code>C</code>) or\n  an <i>anti-clockwise</i> guest (denoted by the character <code>A</code>).\n</p><p>\n  The i-th guest starts at the consulate numbered <b>H<sub>i</sub></b> and at the end of each minute will drive to an adjacent consulate.\n  The i-th guest starts at the j-th consulate. If that guest is:\n  <ul>\n    <li>a clockwise guest, they will drive to the (j+1)-th consulate (unless they are at the <b>N</b>-th consulate, then they will drive to the 1st consulate).</li>\n    <li>an anti-clockwise guest, they will drive to the (j-1)-th consulate (unless they are at the 1st consulate, then they will drive to the <b>N</b>-th consulate).</li>\n</ul>\n</p><p>\n  Each consulate will only remember the guest that visited them last.\n  If there are multiple guests who visited last, then the consulate will remember all of those guests.\n</p><p>\n  For each guest, determine how many consulates will remember them.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each testcase begins with a line containing the three integers <b>N</b>, <b>G</b> and <b>M</b>,\n  which are the number of consulates, the number of guests and the number of minutes respectively.\n  Then, <b>G</b> lines follow. The i-th line contains the integer <b>H<sub>i</sub></b> followed by\n  a single character; <code>C</code> if the i-th guest is a clockwise guest  or <code>A</code> if\n  the i-th guest is an anti-clockwise guest.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y<sub>1</sub> y<sub>2</sub> ... y<sub>G</sub></code>, where <code>x</code> is the test case number (starting from 1) and\n  <code>y<sub>i</sub></code> is the number of consulates that remember the i-th guest.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 15 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>H<sub>i</sub></b> &le; <b>N</b>, for all i.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  2 &le; <b>N</b> &le; 100.<br/>\n  1 &le; <b>G</b> &le; 100.<br/>\n  0 &le; <b>M</b> &le; 100.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  2 &le; <b>N</b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>G</b> &le; 10<sup>5</sup>.<br/>\n  0 &le; <b>M</b> &le; 10<sup>9</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U28hx6rbRb8j8dVvRmmSpzVM9kx1-bJZxku1NBW9bYFY2PieTZtaN4Llj8ToBiQjk9IiVgcpzL6kBtaJRgl5izlwE8thqRu4Yp9qg/latest_guests_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n5 3 2\n5 C\n2 A\n1 A\n2 4 0\n1 A\n1 C\n1 A\n1 C\n3 2 10\n3 C\n2 A\n6 1 6\n4 A\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U18Y7JXWN7ZrgZoJVBZwhgeCx33ibAeBMurIQoi90FDRGb1Kr3D4_ovwn1fkG9_I5C7wWdo8YDsyo0_4MI0RlEa7euz_9dAQwXt4CQ/latest_guests_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2 2 1\nCase #2: 1 1 1 1\nCase #3: 2 2\nCase #4: 6\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In the first sample case, there are <b>N</b> = 5 consulates, <b>G</b> = 3 guests, who will drive for <b>M</b> = 2 minutes.\n  <ul>\n    <li>For the 1st consulate, it is last visited by guests 1 and 2 (at the end of the 1st minute).</li>\n    <li>For the 2nd consulate, it is last visited by guest 1 (at the end of the 2nd minute).</li>\n    <li>The 3rd consulate, is never visited.</li>\n    <li>For the 4th consulate, it is last visited by guest 3 (at the end of the 2nd minute).</li>\n    <li>For the 5th consulate, it is last visited by guest 2 (at the end of the 2nd minute).</li>\n  </ul>\n  Thus the answer should be 2, 2, 1 for the 1st, 2nd and 3rd guests respectively.\n</p>\n<p>\n  In the second sample case, there are <b>N</b> = 2 consulates, <b>G</b> = 4 guests, who will drive for <b>M</b> = 0 minutes.\n  <ul>\n    <li>For the 1st consulate, it is last visited by guests 1, 2, 3 and 4 (all the guests start at this consulate).</li>\n    <li>The 2nd consulate, is never visited.</li>\n  </ul>\n  Thus the answer should be 1, 1, 1, 1 for the 1st, 2nd, 3rd and 4th guests respectively.\n</p>\n<p>\n  In the third sample case, there are <b>N</b> = 3 consulates, <b>G</b> = 2 guests, who will drive for <b>M</b> = 10 minutes.\n  <ul>\n    <li>For the 1st consulate, it is last visited by guests 1, and 2 (at the end of the 10th minute).</li>\n    <li>For the 2nd consulate, it is last visited by guest 2 (at the end of the 9th minute).</li>\n    <li>For the 3rd consulate, it is last visited by guest 1 (at the end of the 9th minute).</li>\n  </ul>\n  Thus the answer should be 2, 2 for the 1st and 2nd guests respectively.\n</p>\n<p>\n  In the fourth sample case, there is only one guest. This guest visits all the consulates eventually,\n  so is remembered by all of them. Thus the answer is 6.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":12},{"type":2,"type__str":"HIDDEN","value":23}],"title":"Latest Guests","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\n  Test set 1 (Visible)\n</h3>\n\n<p>\n    We will start by fixing the position of the warehouse. Once that is done, we know the cost of putting up a stall at any spot. This allows for a dynamic programming approach where we let dp[i][j] represent the cost of putting j stalls in the first i spots. dp[i][j] is minimum of dp[i - 1][j] and (dp[i-1][j-1] + distance of ith spot from warehouse + <b>C</b><sub>i</sub>) (we skip i if we have chosen to place the warehouse at i). dp[<b>N</b>][<b>K</b>] + cost of building the warehouse represents our solution for the chosen location of the warehouse.\n</p>\n<p>\n    By doing this for all possible positions for the warehouse, we will get the minimum cost for placing all <b>K</b> stalls. So this approach has a complexity of O(<b>N</b><sup>2</sup><b>K</b>).\n</p>\n\n<h3>\n  Test set 2 (Hidden)\n</h3>\n\n<p>\n    Now suppose we decided on the <b>K</b> + 1 spots where we will place our stalls and warehouse but are yet to decide where to place our warehouse, let's say the co-ordinates of these spots are Y<sub>1</sub>, Y<sub>2</sub>, ..., Y<sub>K + 1</sub> in increasing order. Obviously, it'll be the spot Y<sub>j</sub> such that |Y<sub>j</sub> - Y<sub>1</sub>| + |Y<sub>j</sub> - Y<sub>2</sub>| + ... |Y<sub>j</sub> - Y<sub>K + 1</sub>| is minimum. This is the classic post office location problem and is solved by putting the warehouse in the median point of our chosen points (in case of even number of points with two medians, any one will yield an optimal answer).\n</p>\n<p>\n    Once we have this observation, we know that we must put floor(<b>K</b>/2) stalls on the left of our warehouse and <b>K</b>-floor(<b>K</b>/2) stalls on the right. If we can calculate, for every position of the warehouse, the minimum cost to place these points, we will be done. Here we will show how to calculate the minimum cost to place floor(<b>K</b>/2) stalls to the left of every position of the warehouse.\n</p>\n<p>\n    For simplicity, we assume the given points <b>X</b><sub>1</sub>, <b>X</b><sub>2</sub>, ..., <b>X<sub>N</sub></b> to be sorted. Now, we will maintain a max-heap of size floor(<b>K</b>/2). For position i, we define V<sub>i</sub> = <b>X<sub>N</sub></b> - <b>X</b><sub>i</sub> + <b>C</b><sub>i</sub>. Initially, we will store V<sub>1</sub>, V<sub>2</sub>, ..., V<sub>floor(<b>K</b>/2)</sub> in our heap. We'll also maintain the sum of all the elements in our heap.\n</p>\n<p>\n    If we consider that we are placing the warehouse at <b>X</b><sub>floor(<b>K</b>/2)+1</sub>, then the minimum cost of placing all floor(<b>K</b>/2) stalls to the left of it is given by sum of all the elements in our heap - floor(<b>K</b>/2) * (<b>X<sub>N</sub></b> - <b>X</b><sub>floor(<b>K</b>/2)+1</sub>). We try to get this cost for all other valid placements of the warehouse.\n</p>\n<p>\n    So, for i = floor(<b>K</b>/2) + 1 to <b>N</b> - (<b>K</b>-floor(<b>K</b>/2)) - 1, we check if V<sub>i</sub> is less than the maximum element of our heap. If it is then we remove the maximum and insert V<sub>i</sub> and update the sum of all our heap elements by subtracting the difference of the removed element and the inserted element. We subtract floor(<b>K</b>/2) * (<b>X<sub>N</sub></b> - <b>X</b><sub>i+1</sub>) from the sum and compare it with the minimum cost obtained thus far, updating it with the current cost if current cost is lower.\n</p>\n<p>\n    We can use a similar approach to get the cost of all elements to the right, there V<sub>i</sub> will just be <b>X</b><sub>i</sub> and we should iterate from right to left and in each iteration, subtract (<b>K</b>-floor(<b>K</b>/2)) * <b>X</b><sub>i</sub> from the sum of the elements in the heap and update the minimum cost with that.\n</p>\n<p>\n    Finally we see for which point i, the sum of cost of placing floor(<b>K</b>/2) stalls on the left of it, <b>K</b>-floor(<b>K</b>/2) stalls on the right and <b>C</b><sub>i</sub> is minimised and output this value.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0kNmZcR1GHFDhnf_86ZMdZ5itfqiYLLjoZq4PZFEP1p9ge593oWMdPygU10gKC1kY7mZnk8w/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000161476","statement":"<h3>Problem</h3>\n<p>\n  Everybody loves street food, especially the local residents of Bitetown! For this reason, you\n  have decided to build exactly <b>K</b> food stalls and one warehouse on the main street of Bitetown.\n</p><p>\n  The main street is a long horizontal line that is 10<sup>9</sup> metres long.\n  There are <b>N</b> <i>spots</i> that you are allowed to build stalls or a warehouse on.\n  You may not build anywhere else on the street.\n  The i-th spot is <b>X<sub>i</sub></b> meters from the left end of the street.\n</p><p>\n  You can build at most one stall or warehouse at the i-th spot (but not both), which costs <b>C<sub>i</sub></b> dollars.\n  Additionally, if the warehouse is in the j-th spot, then building a stall in the i-th spot costs an extra\n  |<b>X<sub>j</sub></b> - <b>X<sub>i</sub></b>| dollars.\n</p><p>\n  Please find the minimum cost to build exactly <b>K</b> food stalls and one warehouse.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case starts with a line containing two integers <b>K</b> and <b>N</b>,\n  the number of stalls you must build and the number of spots on the street, respectively.\n</p><p>\n  The second line contains\n  <b>N</b> integers <b>X<sub>i</sub></b>; the i-th of these is the distance of the i-th spot from the left end of the street, in meters.\n</p><p>\n  The third line contains\n  <b>N</b> integers <b>C<sub>i</sub></b>; the i-th of these is the cost of building a stall or warehouse at the i-th spot.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the minimum cost to build <b>K</b> stalls.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 30 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n\n  1 &le; <b>K</b> &lt; <b>N</b><br/>\n\n  1 &le; <b>C<sub>i</sub></b> &le; 10<sup>9</sup>, for all i.<br/>\n  1 &le; <b>X<sub>i</sub></b> &le; 10<sup>9</sup>, for all i.<br/>\n  <b>X<sub>i</sub></b> &ne; <b>X<sub>j</sub></b> for all i &ne; j.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  2 &le; <b>N</b> &le; 100<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  There will be at most 5 cases with 500 &lt; <b>N</b> &le; 10<sup>5</sup>.<br/>\n  The remaining cases will have 2 &le; <b>N</b> &le; 500.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2jWB-LG08SIppycOL0CAMRNTwVWmU7udZCOFkj66ppbgUAjdq_Fh18u0oRygCqZ0KA_4tiGt7Q8tORGUGyhN6t7MrJaqFhzCA/food_stalls_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n2 4\n1 2 3 10\n100 70 80 20\n1 5\n150 300 301 400 700\n8 35 26 5 2\n6 7\n22 21 20 23 26 25 24\n10 10 10 10 10 10 10\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U274dN9tBgJihKOJtmIEUpauF1kL-96hlzl9D6NeAXs2QRP97iiHjjY16eij0ha99Iobmsx33GBFK8o_A6qonfMsXEsJ1aEO8Kv/food_stalls_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 178\nCase #2: 62\nCase #3: 82\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case 1, you must build <b>K</b> = 2 stalls and one warehouse, and there are\n  <b>N</b> = 4 spots to build on.\n  One possible solution is to build the warehouse on the 3rd spot with cost 80 dollars,\n  and build the two stalls on the 2nd and 4th spot.\n  <ul>\n    <li>The stall on the 2nd spot costs 70 + |3 - 2| = 71 dollars.</li>\n    <li>The stall on the 4nd spot costs 20 + |3 - 10| = 27 dollars.</li>\n  </ul>\n  This costs 178 dollars in total, which is the minimum possible, so the answer is 178.\n</p><p>\n  In Sample Case 2, you must build <b>K</b> = 1 stalls and one warehouse, and there are\n  <b>N</b> = 5 spots to build on.\n  One possible solution is to build the warehouse on the 2nd spot with cost 35 dollars,\n  and build the stall on the 3rd spot, which costs 26 + |301-300| = 27 dollars.\n  This costs 62 dollars in total, which is the minimum possible.\n</p><p>\n  In Sample Case 3, you must build <b>K</b> = 6 stalls and one warehouse, and there are\n  <b>N</b> = 7 spots to build on.\n  One possible solution is to build the warehouse on the 4th spot and build the 6 stalls on\n  the 6 remaining spots.\n  It is left as an exercise to the contestant to verify that this costs 82 dollars in total\n  and is the minimum possible.\n  Note that in this example, the spots are not in ascending order of their distance from the\n  left end of the street.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":2,"type__str":"HIDDEN","value":31}],"title":"Food Stalls","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000051061","type":1,"type__str":"SPECTATOR"},"title":"Round D 2019"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
