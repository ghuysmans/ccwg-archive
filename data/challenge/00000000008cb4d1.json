{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1653228000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"00000000008cb4d1","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Thank you for participating in Kick Start 2022 Round C!</p>\n<hr>\n<p><b>Cast</b></p>\n<p>New Password: Written by Bartosz Kostka and prepared by Shadman Protik.</p>\n<p>Range Partition: Written by Eidan Cohen and prepared by Vijay Krishan Pandey.</p>\n<p>Ants on a stick: Written by Ziv Farjun and prepared by Pranav Gavvaji.</p>\n<p>Palindromic Deletions: Written by Timothy Buzzelli and prepared by Krists Boitmanis.</p>\n<p>Solutions, other problem preparation, reviews and contest monitoring by\nAdilet Zhaxybay, Aditya Ghosh, Akshay Mohan, Alan Lou, Arjun Sanjeev, Bartosz Kostka, Bohdan Pryshchenko, Chun-nien Chan, Cristhian Bonilha, Darpan Shah, Eidan Cohen, Fahim Ferdous Neerjhor, Gagan Kumar, Hana Joo, Harshil Shah, Hsin-Yi Wang, Indrajit Sinha, Ishank Bhardwaj, Jackie Cheung, Jared Gillespie, Jimmy Dang, Jingyuan Liang, Kai Hsien Boo, Kashish Bansal, Krists Boitmanis, Kunal Verma, Lauren Minchin, Lizzie Sapiro Santor, Maneeshita Sharma, Nitish Rai, Piyush, Pranav Gavvaji, Pratibha Jagnere, Prince Kumar, Rahul Goswami, Rohan Garg, Ruiqing Xiang, Ruoyu Zhang, Shadman Protik, Surya Upadrasta, Swapnil Gupta, Swapnil Mahajan, Tarun Khullar, Teja Vardhan Reddy Dasannagari, Timothy Buzzelli, Tushar Jape, Vakul Gupta, Vijay Krishan Pandey, Vinay Khilwani, Yash Ranka, Zhitao Li, Ziv Farjun.</p>\n<p>Analysis authors:</p><ul>\n<li>New Password: Surya Upadrasta</li>\n<li>Range Partition: Ishank Bhardwaj</li>\n<li>Ants on a stick: Kai Hsien Boo</li>\n<li>Palindromic Deletions: Kunal Verma</li>\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1653217200000,"tasks":[{"analysis":"<h3>Background</h3>\n\n<p>\n  The original \"Ants on a Stick\" is a\n  <a target=\"_blank\" href=\"https://math.hmc.edu/funfacts/ants-on-a-stick/\">well-known</a> math\n  question. The insight is that two identical ants bouncing off each other can\n  be thought simply as the ants passing through each other.\n</p>\n\n<h3>Test Set 1</h3>\n\n<p>\n  Limits are small in Test Set 1 so we can perform a simulation. First, we\n  create an array of length $$$2\\mathbf{L}$$$ as the stick - each unit is 0.5 cm. The\n  reason we split into 0.5 cm instead of 1 cm is to simplify collision that\n  happens on half a cm. Also note that one position may have 2 ants when the\n  collision happens, so take that into account for your array data structure.\n</p>\n\n<p>\n  Then, place the ants on their respective starting positions. Now, we start to\n  simulate with each iteration being half a second.\n</p>\n\n<p>\n  Look at each position starting from the left, if there exists some ants, there\n  are 3 cases to handle.\n</p>\n\n<ol>\n  <li>\n    If the ant is going to fall off (facing left on leftmost position or facing\n    right on rightmost position), note down its ID and current time (iteration\n    count), then remove it.\n  </li>\n  <li>\n    If there is only one ant in that position, move it one unit according to its\n    direction.\n  </li>\n  <li>\n    If there are two ants in that position, reverse their direction and move it\n    one unit according to its new direction.\n  </li>\n</ol>\n\n<p>\n  Implementation tip:\n  <em>\n    Use a new array to simulate the next iteration instead of modifying\n    in-place. This makes it easier to understand and debug.\n  </em>\n</p>\n\n<p>\n  When there are no ants left on the stick, we sort the ants first by the time\n  they fall, and then their ID.\n</p>\n\n<p>\n  The time complexity for this solution is $$$O(\\mathbf{L}^2)$$$, as we need\n  $$$O(\\mathbf{L})$$$ time for each iteration and there are at most $$$O(\\mathbf{L})$$$\n  iterations.\n</p>\n\n<p>\n  The space complexity for this solution is also $$$O(\\mathbf{L}^2)$$$ if you use a new\n  array for each iteration, but can reduce to $$$O(\\mathbf{L})$$$ by reusing the\n  arrays. We keep just two arrays - $$$A_{current}$$$ for the current iteration\n  and $$$A_{next}$$$ for the next iteration. Once an iteration is completed, we\n  copy $$$A_{next}$$$ into $$$A_{current}$$$ and clear the content of\n  $$$A_{next}$$$.\n</p>\n\n<h3>Test Set 2</h3>\n\n<p>\n  For Test Set 2, $$$\\mathbf{L}$$$ gets too large so our previous solution will not\n  work. We will now make use of the \"pass-through\" property discussed in the\n  background section. Think of each ant initially having their own ID card.\n  Instead of bouncing off and changing direction, they actually just exchange ID\n  cards and politely pass through each other. With this observation, the problem\n  becomes finding the order of ants falling and reporting the ID card they\n  possess at that time.\n</p>\n\n<p align=\"center\">\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U14MmqJpOuOG_E5PyY_Vuxgxz3wdYC46w3iGqNMj3Dekt3sX87rM5uvZf37KOb1RTNf0kNfc49LVgtjI_93KUoKHkjjZ8g/exchanging_id_v2.png\" alt=\"Image showing how the ants exchange IDs\" width=\"80%\"/>\n</p>\n\n<p>\n  Now we want to find all events of exchanging ID cards. An event is defined by\n  $$$(x_1, x_2, t)$$$, meaning $$$x_1$$$ and $$$x_2$$$ exchange ID cards at time\n  $$$t$$$. For an ant $$$x$$$ facing right, the ants which $$$x$$$ will exchange\n  ID cards with are all those on the right of $$$x$$$ and are facing left.\n</p>\n\n<p>\n  Once we have all the events of exchanging ID cards, we will sort them\n  according to the time it happens. Suppose there are 2 ants that will exchange\n  ID cards - $$$x_1$$$ with starting position $$$\\mathbf{P_1}$$$ facing right, and\n  $$$x_2$$$ with starting position $$$\\mathbf{P_2}$$$ facing left. The time of the\n  exchange is $$$(\\mathbf{P_2}-\\mathbf{P_1}) / 2$$$ seconds. Once we have the order of events,\n  we will process each of them, by using an appropriate data structure (hash map\n  or array with index as key) to keep track of the ID card possessed by each\n  ant. Finally, we will have the ID cards of each ant of the time they fall off\n  the stick.\n</p>\n\n<p>\n  Our last piece is to figure out the order of ants falling. This is relatively\n  straightforward. For an ant facing left with starting position $$$\\mathbf{P_1}$$$,\n  the time of falling is $$$\\mathbf{P_1}$$$. For an ant facing right with position\n  $$$\\mathbf{P_2}$$$, the time of falling is $$$\\mathbf{L}-\\mathbf{P_2}$$$. Finally, print out the ID\n  cards of the ants in this order.\n</p>\n\n<p>\n  The time complexity for this solution is $$$O(\\mathbf{N}^2\\log \\mathbf{N})$$$ to find all\n  the events of exchanging cards and sorting them.\n</p>\n\n<h3>Test Set 3</h3>\n\n<p>\n  For Test Set 3, the additional observation is that just by the fact that there\n  is an ant falling off the left end of the stick, we know it must be the\n  current leftmost ant that is still on the stick. No exchanges of ID cards.\n</p>\n\n<p>\n  For each ant, using the pass-through property, find the time it falls off the\n  stick and in which direction. In the end we should have an array of length\n  $$$\\mathbf{N}$$$ of $$$(t,d)$$$, meaning the time and the direction an ant falls off.\n</p>\n\n<p>\n  Finally, sort the ants by their starting position, and the fall off events by\n  their time. For each fall off event, if it is on the left end, we print the ID\n  of the leftmost ant and remove it, and vice versa for fall off event on the\n  right end.\n</p>\n\n<p>The time complexity for this solution is $$$O(\\mathbf{N}\\log \\mathbf{N})$$$.</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U14-vfwVW5wPn7a1X-_OM-Juk47ZMzQzP_w4Zhpy6Vt56OWGJIREE4jYY10hYo99F1moe_q_dCs/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000b209bc","statement":"<h3>Problem</h3>\n<p>\n  Ada has $$$\\mathbf{N}$$$ ants labelled from $$$1$$$ to $$$\\mathbf{N}$$$.  She decides to test John's concentration skills.\n  She takes a stick $$$\\mathbf{L}$$$ cm long, and drops the ants on it.\n</p>\n<p>\n  The positions on the stick at which the ants are dropped are represented by an integer array $$$\\mathbf{P}$$$,\n  where ant $$$i$$$ is dropped at the position $$$\\mathbf{P_i}$$$ (that is, $$$\\mathbf{P_i}$$$ cm away from the left end) on\n  the stick.  Each ant travels either to the left or right with a constant speed of $$$1$$$ cm per\n  second.  The initial directions of the ants is represented by an array $$$\\mathbf{D}$$$, where the direction of\n  ant $$$i$$$ is $$$\\mathbf{D_i}$$$: $$$0$$$ if left, and $$$1$$$ if right.  When two ants meet, they bounce off\n  each other and reverse their directions.  The ants fall off the stick when they reach either end\n  of it.\n</p>\n<p>\n  Ada challenges John to find the exact order in which the ants fall off the stick.  John needs your\n  help!\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.<br/>\n  The first line of each test case contains two integers, $$$\\mathbf{N}$$$ and $$$\\mathbf{L}$$$: the number of ants, and the\n  length of the stick, respectively.<br/>\n  The next $$$\\mathbf{N}$$$ lines describe the positions and directions of the ants.\n  The $$$i$$$-th line contains two integers, $$$\\mathbf{P_i}$$$ and $$$\\mathbf{D_i}$$$: the position and direction of ant\n  $$$i$$$, respectively.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$A_1 A_2 \\dots A_N$$$</code>,\n  where $$$x$$$ is the test case number (starting from 1), and $$$A_i$$$ is the label of the\n  $$$i$$$-th ant that falls off the stick.  In other words, the first ant to fall off the stick is\n  the ant labelled $$$A_1$$$, the second is the ant labelled $$$A_2$$$, and so on.  If multiple ants\n  fall off at the same time, output their labels in the <i>increasing</i> order.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$\\mathbf{N} \\lt \\mathbf{L}$$$.<br/>\n  $$$\\mathbf{D_i} \\in \\{0, 1\\}$$$, for all $$$i$$$.<br/>\n  $$$0 \\lt \\mathbf{P_i} \\lt \\mathbf{L}$$$, for all $$$i$$$.<br/>\n  All $$$\\mathbf{P_i}$$$ are distinct.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  $$$1 \\le \\mathbf{N} \\le 10$$$.<br/>\n  $$$1 \\le \\mathbf{L} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n  $$$1 \\le \\mathbf{N} \\le 10^3$$$.<br/>\n  $$$1 \\le \\mathbf{L} \\le 10^9$$$.<br/>\n</p>\n\n<h4>Test Set 3</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n  $$$1 \\le \\mathbf{L} \\le 10^9$$$.<br/>\n  For at most 15 cases:<br/>\n  $$$1 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n  For the remaining cases:<br/>\n  $$$1 \\le \\mathbf{N} \\le 10^3$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2kn3pwEZgzQja6mCjAyzjzRhxGxLEqD4V-rU_vfzWPg52HlZ2Da1MNdpmXs4JKNI78ZlnUpcwTMYSBW20BcTPtpLcqVdki-Tl0AadWlis/ants_on_a_stick_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n1 5\n1 1\n2 7\n4 1\n5 0\n4 10\n8 0\n2 1\n6 1\n4 0\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1Yh6vbq2lb7BtG3W1WkjzosEKdhLQR46ZJnqkmYJs4Wj_rWrtLrntlGhiSGNOX40liOD_nmoj1yNoD72y_eby0l5XEkeuChQhU52AJLtxb/ants_on_a_stick_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 2 1\nCase #3: 1 2 3 4\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, as there is only a single ant (labelled $$$1$$$), it is the only one to fall\n  off.  The time at which it falls off is $$$4$$$ seconds.\n</p>\n\n<p>\n  In Sample Case #2, the two ants move towards each other, meet at $$$0.5$$$ seconds and reverse\n  their directions.  Ant $$$2$$$ then reaches the right end of the stick at $$$3$$$ seconds, whereas\n  ant $$$1$$$ reaches the left end at $$$5$$$ seconds.  Thus, ant $$$2$$$ falls off the stick,\n  followed by ant $$$1$$$.\n</p>\n\n<p>\n  In Sample Case #3, ants $$$2$$$ and $$$4$$$ move towards each other and meet at $$$1$$$ second.\n  Similarly, ants $$$1$$$ and $$$3$$$ also move towards each other and meet at $$$1$$$ second.\n  All $$$4$$$ ants then change directions.\n  <ul>\n    <li>Ants $$$1$$$ and $$$2$$$ move towards either ends of the stick and fall off at $$$4$$$\n      seconds.</li>\n    <li>Ants $$$3$$$ and $$$4$$$ move towards each other and meet at $$$3$$$ seconds.  They change\n      directions and move towards either ends of the stick, and fall off at $$$8$$$ seconds.</li>\n  </ul>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":11},{"type":1,"type__str":"VISIBLE","value":10},{"type":1,"type__str":"VISIBLE","value":12}],"title":"Ants on a Stick","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  The expected value of a discrete random variable is defined as the weighted average over all\n  possible values of the variable. That is, for a discrete random variable $$$X$$$ with probability\n  function $$$P(X)$$$, its expected value $$$E[X] = $$$ the sum of $$$X \\times P(X)$$$ over all\n  possible values of $$$X$$$.\n</p>\n<p>\n  Keeping the above definition in mind, we can define a random variable $$$X$$$ as the number of\n  palindromes encountered in a particular game of Palindromic Deletions on a string of length $$$\\mathbf{N}$$$,\n  with $$$P(X)$$$ being the probability function. We can write $$$P(X) = \\frac{A(X)}{B}$$$, where\n  $$$A(X)$$$ is the number of distinct games which generate $$$X$$$ palindromes and $$$B$$$ is the\n  total number of distinct games. Notice that the number of distinct games can be defined as the\n  total number of orders of picking indexes $$$1$$$ to $$$\\mathbf{N}$$$, which is equivalent to to the number of\n  permutations of an array of size $$$\\mathbf{N}$$$. Therefore, $$$B = \\mathbf{N}!$$$.\n</p>\n<p>\n  With the above simplification, we can write the expected value $$$E[X] = $$$ the sum of\n  $$$\\frac{X \\times A(X)}{\\mathbf{N}!}$$$ over all possible integer values of $$$X$$$ between $$$1$$$ and\n  $$$\\mathbf{N}$$$. Note that the game counts an empty string as a palindrome, hence it is not possible for\n  $$$X$$$ to be $$$0$$$. The problem translates into calculating the sum of $$$X \\times A(X)$$$ over\n  all $$$X$$$ under modulo $$$10^{9} + 7$$$ (let us call this value $$$Y$$$). We can then multiply\n  $$$Y$$$ by the\n  <a href=\"https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\" target=\"_blank\">modular\n  inverse</a> of $$$\\mathbf{N}!$$$ under modulo $$$10^{9} + 7$$$ to get $$$E[X]$$$. Note that we are able to\n  simply multiply by the modular inverse of $$$\\mathbf{N}!$$$ modulo $$$10^{9} + 7$$$ without reducing the\n  fraction to an irreducible form since $$$10^{9} + 7$$$ is prime and $$$\\mathbf{N} \\le 400$$$, which gives\n  us $$$\\gcd (\\mathbf{N}!, 10^{9} + 7) = 1$$$ (as the denominator will not contain any prime factors\n  $$$ \\gt 400 $$$).\n</p>\n<h3>\n  Test Set 1\n</h3>\n<p>\n  For $$$\\mathbf{N} \\le 8$$$, we can simply recursively generate all possible games to calculate $$$Y$$$.\n  One way to do this is by starting with the input string and a count of palindromes encountered\n  $$$cnt = 0$$$. In each recursion level, we delete a character from the string and check if the\n  new string is a palindrome. If the new string is a palindrome, we increase $$$cnt$$$ by $$$1$$$.\n  We recursively do this operation again with the new string and $$$cnt$$$. This is done for each\n  character in the string at a particular recursion level. We return when we reach an empty string,\n  at which point we add $$$cnt$$$ to an outer $$$sum$$$ variable. After the top level recursive\n  function returns, $$$sum$$$ will store the value $$$Y$$$. All operations are done under modulo\n  $$$10^9 + 7$$$.\n</p>\n<p>\n  For example, let us visualize this with the sample string $$$aba$$$.\n</p>\n<ol>\n  <li>\n    <code>\"<u>a</u>ba\"</code>, $$$0 \\rightarrow $$$ \"<code><u>b</u>a\"</code>,\n    $$$0 \\rightarrow $$$ <code>\"<u>a</u>\"</code>, $$$1 \\rightarrow $$$ <code>\"\"</code>,\n    $$$2$$$\n  </li>\n  <li>\n    <code>\"<u>a</u>ba\"</code>, $$$0 \\rightarrow $$$ \"<code>b<u>a</u>\"</code>,\n    $$$0 \\rightarrow $$$ <code>\"<u>b</u>\"</code>, $$$1 \\rightarrow $$$ <code>\"\"</code>,\n    $$$2$$$\n  </li>\n  <li>\n    <code>\"a<u>b</u>a\"</code>, $$$0 \\rightarrow $$$ \"<code><u>a</u>a\"</code>,\n    $$$1 \\rightarrow $$$ <code>\"<u>a</u>\"</code>, $$$2 \\rightarrow $$$ <code>\"\"</code>,\n    $$$3$$$\n  </li>\n  <li>\n    <code>\"a<u>b</u>a\"</code>, $$$0 \\rightarrow $$$ \"<code>a<u>a</u>\"</code>,\n    $$$1 \\rightarrow $$$ <code>\"<u>a</u>\"</code>, $$$2 \\rightarrow $$$ <code>\"\"</code>,\n    $$$3$$$\n  </li>\n  <li>\n    <code>\"ab<u>a</u>\"</code>, $$$0 \\rightarrow $$$ \"<code><u>a</u>b\"</code>,\n    $$$0 \\rightarrow $$$ <code>\"<u>b</u>\"</code>, $$$1 \\rightarrow $$$ <code>\"\"</code>,\n    $$$2$$$\n  </li>\n  <li>\n    <code>\"ab<u>a</u>\"</code>, $$$0 \\rightarrow $$$ \"<code>a<u>b</u>\"</code>,\n    $$$0 \\rightarrow $$$ <code>\"<u>a</u>\"</code>, $$$1 \\rightarrow $$$ <code>\"\"</code>,\n    $$$2$$$\n  </li>\n</ol>\n<p>\n  Adding all $$$cnt$$$ at the end of each simulation, we get $$$sum = 2 + 2 + 3 + 3 + 2 + 2 =\n  14$$$. Hence, we get an expected value of $$$\\frac{14}{3!} = \\frac{14}{6}$$$. Dividing 14 and 6\n  by their GCD (greatest common divisor) i.e. $$$2$$$, we get the irreducible fraction\n  $$$\\frac{7}{3}$$$.\n</p>\n<p>\n  The number of orders generated is $$$\\mathbf{N}!$$$, while it takes $$$O(\\mathbf{N})$$$ to check if a string is\n  a palindrome. The time and space complexity comes out to be $$$O(\\mathbf{N} \\times \\mathbf{N}!)$$$, which is\n  approximately $$$3 \\times 10^5$$$ operations.\n</p>\n<h3>\n  Test Set 2\n</h3>\n<p>\n  Instead of thinking about $$$Y$$$ as the sum of $$$X \\times A(X)$$$, where $$$A(X)$$$ is the number\n  of games that generate $$$X$$$ palindromes, we can conversely think about it as the sum of $$$Q(K)$$$\n  over all $$$K = 0$$$ to $$$\\mathbf{N} - 1$$$, where $$$Q(K)$$$ is the number of games in which a\n  palindrome of length $$$K$$$ is encountered.\n</p>\n<p>\n  Another observation to make here is that any palindrome that we encounter in a game will be a\n  subsequence of the input string $$$\\mathbf{S}$$$. Consider a palindrome of length $$$K$$$ that exists as\n  a subsequence of the input string $$$\\mathbf{S}$$$. The number of games in which we will encounter this\n  palindrome is $$$K! \\times (\\mathbf{N} - K)!$$$. This is because to encounter a particular palindrome\n  of length $$$K$$$ in a game, we must first remove the $$$\\mathbf{N} - K$$$ characters that are not part\n  of the palindrome in any order, then remove the remaining $$$K$$$ characters in any order. With\n  this, we get $$$Q(K) = K! \\times (\\mathbf{N} - K)! \\times F(K)$$$, where $$$F(K)$$$ is the number of\n  palindromes of length $$$K$$$ that occur as a subsequence of $$$\\mathbf{S}$$$.\n</p>\n<p>\n  All that remains is to find the number of palindromes of length $$$K$$$ that occur as a\n  subsequence of $$$\\mathbf{S}$$$. We can use dynamic programming to do this. We define our state as\n  $$$(L, R, len)$$$, where the value of this state $$$DP(L, R, len)$$$ equals the number of\n  palindromes of length $$$len$$$ that can be found as a subsequence of the substring\n  $$$\\mathbf{S}[L, R]$$$ (indices $$$L$$$ and $$$R$$$ inclusive). We have three base cases:\n  <li>\n    Any state with $$$len = 0$$$ would have a value of $$$1$$$.\n  </li>\n  <li>\n    Any state with $$$len \\lt 0$$$ would have a value of $$$0$$$.\n  </li>\n  <li>\n    Any state with $$$L \\gt R$$$ that does not satisfy any of the above two cases\n    would have a value of $$$0$$$.\n  </li>\n</p>\n<p>\n  Now to calculate $$$DP(L, R, len)$$$, notice that if $$$\\mathbf{S}[L] = \\mathbf{S}[R]$$$, then we\n  have $$$DP(L + 1, R - 1, len - 2)$$$ palindromes that have $$$\\mathbf{S}[L]$$$ and $$$\\mathbf{S}[R]$$$ as the\n  first and last character respectively (or $$$DP(L + 1, R - 1, len - 1)$$$ palindromes if\n  $$$L = R$$$). All remaining palindromes can be found as a union of the palindromes of length\n  $$$len$$$ found in substrings $$$\\mathbf{S}[L, R - 1]$$$ and $$$\\mathbf{S}[L + 1, R]$$$. By the\n  <a href=\"https://en.wikipedia.org/wiki/Inclusion%E2%80%93exclusion_principle\" target=\"_blank\">\n  inclusion-exclusion principle</a>, the value of this union comes out to be\n  $$$DP(L, R - 1, len) + DP(L + 1, R, len) - DP(L + 1, R - 1, len)$$$. We subtract the palindromes\n  found in $$$DP(L + 1, R - 1, len)$$$ as we would be double counting them in\n  $$$DP(L, R - 1, len)$$$ and $$$DP(L + 1, R, len)$$$. The figure below helps visualize\n  $$$DP(1, 4, 2)$$$ for string $$$abccbd$$$. Strings are zero indexed.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2x-qr_lFuJmWQN_w0ZkeJbYhfMKue-tplV1N8N80vn9VDnLsI9iP__E7QLDvA9lwPH_vHN3Rr6HyDixhNMQX9bHM31V9_12Ls/inclusion_exclusion.png\" width=\"50%\"\n     alt=\"Visualizing inclusion exclusion on DP(1, 4, 2)\" />\n<p>\n  With the above defined state and DP calculation in mind, we get $$$F(K) = DP(0, \\mathbf{N} - 1, K)$$$ and\n  $$$Q(K) = DP(0, \\mathbf{N} - 1, K) \\times K! \\times (\\mathbf{N} - K)!$$$. Finally, we get $$$Y$$$ by summing all\n  $$$Q(K)$$$ for $$$K = 0$$$ to $$$\\mathbf{N} - 1$$$.\n</p>\n<p>\n  We can precompute factorials upto $$$400$$$ linearly, then subsequently retrieve the precomputed\n  factorial values in constant time. The time to compute all states of the DP is $$$O(\\mathbf{N}^3)$$$.\n  Similarly, we have $$$\\mathbf{N}^3$$$ integer DP states, giving us an overall time and space complexity\n  of $$$O(\\mathbf{N}^3)$$$.\n</p>\n<h3>\n  Bonus Solution\n</h3>\n<p>\n  While the above approach is good enough to pass the constraints if the DP array uses 32-bit\n  integers, we can further optimize on space by optimizing the calculation for $$$F(K)$$$ for\n  each $$$K$$$. Instead of creating an $$$\\mathbf{N} \\times \\mathbf{N} \\times \\mathbf{N}$$$ DP array, we can create three\n  $$$\\mathbf{N} \\times \\mathbf{N}$$$ DP arrays, where the first corresponds to some palindrome length $$$len$$$,\n  the second corresponds to length $$$len - 1$$$ and the third corresponds to length $$$len - 2$$$.\n  As the transitions described in the previous approach for the DP values of a given length\n  $$$len$$$ just need DP values from $$$len - 1$$$ and $$$len - 2$$$, we can construct\n  the DP array for $$$len$$$ using DP values of $$$len - 1$$$ and $$$len - 2$$$, then construct the\n  DP array for $$$len + 1$$$ using values from $$$len$$$ and $$$len - 1$$$, then for $$$len + 2$$$\n  using values from $$$len + 1$$$ and $$$len$$$, and so on. In this way, we can start with DP arrays\n  for $$$len = 0$$$ and $$$1$$$ as base cases and iteratively construct for each $$$len = 2$$$ to\n  $$$\\mathbf{N} - 1$$$. The rest of the idea is similar to the previous solution. With this approach, even\n  though the time complexity is still $$$O(\\mathbf{N}^3)$$$, the space complexity comes down to\n  $$$O(\\mathbf{N}^2)$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3rPvgx1ZULh8rIoJiuz0CAmPxSZcES9LDkV8jX0xagsZ_awf9hIiiOqXLcDo6Oin-9soJ2tjds/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000b20d16","statement":"<h3>Problem</h3>\n<p>\n  Games with words and strings are very popular lately. Now Edsger tries to\n  create a similar new game of his own. Here is what he came up with so far.\n</p>\n<p>\n  Edsger's new game is called <i>Palindromic Deletions</i>. As a player of this\n  game, you are given a string of length $$$\\mathbf{N}$$$. Then you will perform the\n  following process $$$\\mathbf{N}$$$ times:\n</p>\n\n<ol>\n  <li>Pick an index in the current string uniformly at random.</li>\n  <li>\n    Delete the character at that index. You will then end up with a new string\n    with one fewer character.\n  </li>\n  <li>\n    If the new string is a\n    <a href=\"https://en.wikipedia.org/wiki/Palindrome\" target=\"_blank\">palindrome</a>, you eat a\n    piece of candy in celebration.\n  </li>\n</ol>\n<p>\n  Now Edsger wonders: given a starting string, what is the\n  <a href=\"https://en.wikipedia.org/wiki/Expected_value\" target=\"_blank\">expected number</a> of\n  candies you will eat during the game?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow. Each test case consists of two lines.\n</p>\n<p>\n  The first line of each test case contains an integer $$$\\mathbf{N}$$$, representing the length of the string.\n</p>\n<p>\n  The second line of each test case contains a string $$$\\mathbf{S}$$$ of length $$$\\mathbf{N}$$$, consisting of lowercase\n  English characters.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$E$$$</code>, where $$$x$$$ is the test case number\n  (starting from 1) and $$$E$$$ is the expected number of candies you will eat during the game.\n</p>\n<p>\n  $$$E$$$ should be computed <i>modulo</i> the prime $$$10^9+7$$$ ($$$1000000007$$$) as follows. Represent\n  the answer of a test case as an irreducible fraction $$$\\frac{p}{q}$$$. The\n  number $$$E$$$ then must satisfy the modular equation $$$E \\times q \\equiv p\n  \\pmod{(10^{9} + 7)}$$$, and be between $$$0$$$ and $$$10^9+6$$$, inclusive. It\n  can be shown that under the constraints of this problem, such a number $$$E$$$\n  always exists and can be uniquely determined.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 20$$$.<br />\nString $$$\\mathbf{S}$$$ consists of only lowercase letters of the English alphabet.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n $$$2 \\le \\mathbf{N} \\le 8$$$.<br /> </p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$2 \\le \\mathbf{N} \\le 400$$$.<br />\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U31TI3iOIqzCtXj71pmx-dQjdrjw62JYFeyzwikzXzd62VDjBUNp9SE44vXSu0BmKD1KNahtZewIu6lM_x_O3MQ9o5aNxAkR7VezAgxPqp9SbMupzc/palindromic_deletions_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2\nab\n3\naba\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1BMQeUGffwzgkuxtjhOdia06n8kDR5kgqq1hM9eFrGaSPBbqVx90LaVwX4pyhqiscCvShqnG0wkv4CuoOIUJAvTKZ-dX6Avf6Mwwi8fJnCvUWC1VOj/palindromic_deletions_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 333333338\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    In the first test case the game can go in one of two ways (character removed at each step\n    is underlined):\n  </p>\n  <ol>\n    <li>\n      <code>\"a<u>b</u>\"</code> $$$ \\rightarrow $$$ <code>\"<u>a</u>\"</code> $$$ \\rightarrow $$$\n      <code>\"\"</code> (where <code>\"\"</code> denotes empty string). Both $$$a$$$ and <code>\"\"</code>\n      are palindromes, so you will eat two candies.\n    </li>\n    <li>\n      <code>\"<u>a</u>b\"</code> $$$ \\rightarrow $$$ <code>\"<u>b</u>\"</code> $$$ \\rightarrow $$$\n      <code>\"\"</code>. Both $$$b$$$ and <code>\"\"</code> are palindromes, so you will eat two candies.\n    </li>\n  </ol>\n  <p>\n    Overall, the expected number of candies you will eat is $$$\\frac{2 + 2}{2} =\n    2$$$ candies.\n  </p>\n  <p>\n    In the second test case, the game can go in one of six ways (character removed at each step is\n    underlined):\n  </p>\n  <ol>\n    <li>\n      <code>\"<u>a</u>ba\"</code> $$$ \\rightarrow $$$ <code>\"<u>b</u>a\"</code> $$$ \\rightarrow $$$\n      <code>\"<u>a</u>\"</code> $$$ \\rightarrow $$$ <code>\"\"</code>\n    </li>\n    <li>\n      <code>\"<u>a</u>ba\"</code> $$$ \\rightarrow $$$ <code>\"b<u>a</u>\"</code> $$$ \\rightarrow $$$\n      <code>\"<u>b</u>\"</code> $$$ \\rightarrow $$$ <code>\"\"</code>\n    </li>\n    <li>\n      <code>\"a<u>b</u>a\"</code> $$$ \\rightarrow $$$ <code>\"<u>a</u>a\"</code> $$$ \\rightarrow $$$\n      <code>\"<u>a</u>\"</code> $$$ \\rightarrow $$$ <code>\"\"</code>\n    </li>\n    <li>\n      <code>\"a<u>b</u>a\"</code> $$$ \\rightarrow $$$ <code>\"a<u>a</u>\"</code> $$$ \\rightarrow $$$\n      <code>\"<u>a</u>\"</code> $$$ \\rightarrow $$$ <code>\"\"</code>\n    </li>\n    <li>\n      <code>\"ab<u>a</u>\"</code> $$$ \\rightarrow $$$ <code>\"<u>a</u>b\"</code> $$$ \\rightarrow $$$\n      <code>\"<u>b</u>\"</code> $$$ \\rightarrow $$$ <code>\"\"</code>\n    </li>\n    <li>\n      <code>\"ab<u>a</u>\"</code> $$$ \\rightarrow $$$ <code>\"a<u>b</u>\"</code> $$$ \\rightarrow $$$\n      <code>\"<u>a</u>\"</code> $$$ \\rightarrow $$$ <code>\"\"</code>\n    </li>\n  </ol>\n  <p>\n    Overall, the expected number of candies you will eat is $$$\\frac{2 + 2 + 3 + 3 +\n    2 + 2}{6} = \\frac{14}{6} = \\frac{7}{3}$$$ candies. $$$333333338$$$ is a uniquely\n    determined number that satisfies the conditions mentioned in the output section as\n    $$$333333338 \\times 3 \\equiv 7 \\pmod{(10^{9} + 7)}$$$, therefore $$$333333338$$$ is the answer\n    to this test.\n  </p>\n</sampleio>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":14},{"type":1,"type__str":"VISIBLE","value":27}],"title":"Palindromic Deletions","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Let us simplify the problem statement. The problem is to partition '$$$\\mathbf{N}$$$', the set of first $$$\\mathbf{N}$$$\n  positive integers ($$$1, 2, \\dots, \\mathbf{N}$$$) into two subsets, $$$S_{Alan}$$$ and $$$S_{Barbara}$$$\n  (for Alan and Barbara), with $$$A$$$ and $$$B$$$ as their sums respectively, such that\n  $$$\\frac{A}{B}=\\frac{\\mathbf{X}}{\\mathbf{Y}}$$$ and $$$A+B=\\frac{\\mathbf{N}(\\mathbf{N}+1)}{2}$$$ (where $$$\\frac{\\mathbf{N}(\\mathbf{N}+1)}{2}$$$\n  is the <a href=https://en.wikipedia.org/wiki/1_%2B_2_%2B_3_%2B_4_%2B_%E2%8B%AF target=\"_blank\">sum of first $$$\\mathbf{N}$$$ positive integers</a>\n  , let us call it $$$Sum_N$$$).\n</p>\n\n<h3>\n  Test Set 1\n</h3>\n\n<p>\n  We can check all the possible partitions of '$$$\\mathbf{N}$$$' into two subsets $$$S_{Alan}$$$ and $$$S_{Barbara}$$$\n  (where $$$S_{Alan}$$$ is non-empty), to see if we encounter a partition where $$$\\frac{A}{B}=\\frac{\\mathbf{X}}{\\mathbf{Y}}$$$.\n  If we encounter such a partition, we can conclude that it is <code>POSSSIBLE</code> to partition\n  '$$$\\mathbf{N}$$$' as it is asked in the problem statement, and return this partition as the answer. If no such\n  partition is encountered, we can conclude that the answer is <code>IMPOSSIBLE</code>.\n</p>\n\n<p>\n Since there are $$$2^\\mathbf{N}-1$$$ ways we can partition '$$$\\mathbf{N}$$$' this way, and each partition takes $$$O(N)$$$\n time to check for the conditions mentioned in the problem statement. The time complexity of this\n solution is $$$O(2^\\mathbf{N} \\times N)$$$.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  Since $$$A=Sum_N \\times (\\frac{\\mathbf{X}}{\\mathbf{X}+\\mathbf{Y}})$$$ and $$$B=Sum_N \\times (\\frac{\\mathbf{Y}}{\\mathbf{X}+\\mathbf{Y}})$$$. For\n  $$$A$$$ and $$$B$$$ to be integers, $$$Sum_N\\pmod{(\\mathbf{X}+\\mathbf{Y})}\\equiv\\mathbf{0}$$$. If $$$Sum_N\\pmod{(\\mathbf{X}+\\mathbf{Y})}\\not\\equiv\\mathbf{0}$$$\n  then it is <code>IMPOSSIBLE</code> to partition '$$$\\mathbf{N}$$$' into $$$S_{Alan}$$$ and $$$S_{Barbara}$$$.\n</p>\n\n<p>\n  In what follows we will use a Greedy algorithm to form $$$S_{Alan}$$$. The proof that such a\n  partition is always <code>POSSIBLE</code> if $$$Sum_N\\pmod{(\\mathbf{X}+\\mathbf{Y})}\\equiv\\mathbf{0}$$$, can be given by\n  <a href=https://en.wikipedia.org/wiki/Mathematical_induction target=\"_blank\">mathematical induction</a>.\n</p>\n\n<h4>\n  Algorithm\n</h4>\n<p>\n  Let us define a function <code>def partition(N, PartitionSum)</code> which returns a partition\n  from the set of first $$$\\mathbf{N}$$$ positive integers which sums up to the <code>PartitionSum</code>.\n</p>\n<pre><code class=\"language-py\">\n  def partition(N, PartitionSum):\n    assert(N >= 0 and PartitionSum >= 0)\n    if (PartitionSum == 0 or N == 0):\n      return []\n    // Greedily pick that largest available number to form the PartitionSum.\n    if(N > PartitionSum):\n      return partition(N-1, PartitionSum)\n    else\n      return [N] + partition(N-1, PartitionSum-N)\n</code></pre>\n\n<h4>\n  Proof by Induction\n</h4>\n<h5>\n  Base case\n</h5>\n<p>\n  Given '$$$\\mathbf{N}$$$', the set of first $$$\\mathbf{N}$$$ positive integers. For $$$\\mathbf{N}=1$$$, the possible values of\n  $$$PartitionSum = [0,1]$$$. We can see that the algorithm works correctly, as it returns an empty\n  set for $$$PartitionSum=0$$$, and greedily chooses $$$[1]$$$ from the set for $$$PartitionSum=1$$$.\n</p>\n<h5>\n  Inductive Step\n</h5>\n<p>\n  We want to show that if partitions can be formed greedily for $$$\\mathbf{N}=K-1$$$ and\n  $$$PartitionSum=[0,1,2,\\dots,Sum_{K-1}]$$$ using the algorithm mentioned above, then the partitions\n  can also be formed in the same way for $$$\\mathbf{N}=K$$$ and $$$PartitionSum=[0,1,2,\\dots,Sum_K]$$$.\n</p>\n<p>\n  Assume the induction hypothesis that we can form partitions greedily for $$$\\mathbf{N}=K-1$$$ and\n  $$$PartitionSum=[0,1,2,\\dots,Sum_{K-1}]$$$ using the above algorithm, and a partition is denoted\n  by <code>partition(K-1,PartitionSum)</code>.\n</p>\n<p>\n  For $$$\\mathbf{N}=K$$$, possible values of $$$PartitionSum$$$ are $$$PartitionSum=[0,1,2,\\dots,Sum_K]$$$.\n</p>\n<p>\n  Now say, for the case when $$$K \\le PartitionSum \\le Sum_K$$$, to form the partition, we can\n  greedily select $$$[K]$$$ and merge it with <code>partition(K-1,PartitionSum-K)</code>. This is\n  possible because $$$PartitionSum - K \\le Sum_{K-1}$$$, so we know <code>partition(K-1,PartitionSum-K)</code>\n  exists (our assumption from the inductive step).\n</p>\n<p>\n  Now for the other case when, $$$0 \\le PartitionSum \\lt K$$$, we can choose <code>partition(K-1,PartitionSum)</code>\n  to form this partition as $$$K-1 \\le Sum_{K-1}$$$, hence <code>partition(K-1,PartitionSum)</code>\n  exists (our assumption from the inductive step).\n</p>\n<p>\n  Since, both the Base case and Inductive Step have been proven as true, by mathematical induction\n  the greedy algorithm mentioned above works for every $$$\\mathbf{N}$$$ and $$$PartitionSum=[0,1,2,\\dots,Sum_N]$$$.\n</p>\n\n<p>\n  We can use the above algorithm to form $$$S_{Alan}$$$ by calling <code>partition(N, A)</code>,\n  what remains after picking elements for $$$S_{Alan}$$$, would be $$$S_{Barbara}$$$, as $$$A+B=Sum_N$$$.\n  The time complexity of this algorithm is $$$O(N)$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2_28ov3uMPU71HKIquSdTEcQTuI-4bfvh2guLTFA_J89yNfJJcA6DOOccN97hrD_zHuyLAxTZO/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000b20deb","statement":"<h3>Problem</h3>\n<p>\n  Alan and Barbara suddenly felt like playing with numbers. Alan chooses a non-empty subset from the\n  set of first $$$\\mathbf{N}$$$ positive integers ($$$1, 2, \\dots, \\mathbf{N}$$$). Barbara takes the rest of the numbers\n  (if any) from the set. And then they both calculate the sum of the elements in their respective\n  sets.\n</p>\n\n<p>\n  Alan believes in a magic ratio, which is $$$\\mathbf{X}:\\mathbf{Y}$$$. Hence, Alan wants to choose the subset\n  in such a way that the ratio between the sum of Alan's subset and the sum of Barbara's subset is\n  exactly $$$\\mathbf{X}:\\mathbf{Y}$$$.\n</p>\n\n<p>\n  Can you help Alan to choose a subset that can achieve the desired ratio?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.<br/>\n  Each test case has a single line containing three integers, $$$\\mathbf{N}$$$, $$$\\mathbf{X}$$$ and $$$\\mathbf{Y}$$$, as described above.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output the first line containing <code>Case #$$$x$$$: $$$y$$$</code>, where\n  $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is <code>POSSIBLE</code>, if Alan\n  can choose such a non-empty subset, and <code>IMPOSSIBLE</code> otherwise.<br/>\n  If you print <code>POSSIBLE</code>, then output two more lines for that test case.<br/>\n  In the second line, print a single integer, which denotes the size of Alan's subset.<br/>\n  In the third line, print the integers present in Alan's subset.<br/>\n  If there are multiple solutions, you can print any of them.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 5 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$1 \\le \\mathbf{X} \\le 10^8$$$.<br/>\n  $$$1 \\le \\mathbf{Y} \\le 10^8$$$.<br/>\n  $$$\\gcd(\\mathbf{X}, \\mathbf{Y}) = 1$$$, where gcd is\n  <a href=\"https://en.wikipedia.org/wiki/Greatest_common_divisor\" target=\"_blank\"> Greatest common\n  divisor</a>.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{N} \\le 15$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$1 \\le \\mathbf{N} \\le 5000$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1SPthZtA4rpiXH-QZBVLjwUxCrezVsnawjCxH9W2S12Zz8QaJxfGH3-lBz7vzSmT_5kjF3lrmem0BaSyGHcutgoNWrYPUtlVLHX57iRJo/range_partition_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3 1 2\n3 1 1\n3 1 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2AdtkIhXtSZp8FfLOYmsLDOHESybzHt-QKYI4qC_rRI6y6w2WjSgpbmqjlW_VvD2GSTXGwbZ9YU0YH7KWQCPfNayS3DdYcHV46VQT06tsf/range_partition_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: POSSIBLE\n1\n2\nCase #2: POSSIBLE\n2\n1 2\nCase #3: IMPOSSIBLE\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In the first test case, Alan chooses $$$\\{2\\}$$$. Then Barbara gets $$$\\{1, 3\\}$$$, which sums up to\n  $$$1+3=4$$$.\n  So the ratio is $$$2:4$$$, which is equivalent to $$$1:2$$$.\n</p>\n\n<p>\n  In the second test case, Alan chooses $$$\\{1, 2\\}$$$, which sums up to $$$1+2=3$$$.\n  And Barbara gets $$$\\{3\\}$$$. So the ratio is $$$3:3$$$, which is equivalent to $$$1:1$$$.\n</p>\n\n<p>\n  In the third test case, it is not possible for Alan to choose a subset that satisfies the\n  condition.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":1,"type__str":"VISIBLE","value":9}],"title":"Range Partition","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n<p>\n    For this test set, the old password only satisfies requirements $$$1$$$ and $$$4$$$. To satisfy\n    other requirements, append a lowercase and an uppercase English alphabet letter and any special\n    character at the end of the old password. These operations can be performed in any order. We can\n    prove that this is the new password with minimum length satisfying all the requirements. The\n    overall complexity of this solution is $$$O(N)$$$.\n</p>\n<h4>Sample Code (C++)</h4>\n<pre><code class=\"language-cpp\">\n<var>string</var> createNewPassword(<var>string</var> oldPassword) {\n    <var>string</var> newPassword = oldPassword;\n    newPassword.append(\"a\"); // Append any lowercase English alphabet letter.\n    newPassword.append(\"B\"); // Append any uppercase English alphabet letter.\n    newPassword.append(\"&\"); // Append any special character.\n\n    return newPassword;\n}\n</code></pre>\n<h3>Test Set 2</h3>\n<p>\n    To solve this test set, we can loop through the old password and check which of the given\n    requirements are unsatisfied. For each unsatisfied requirements between $$$2$$$ and $$$5$$$ (both\n    inclusive), we can just insert respective character and make it satisfied. After performing these\n    operations, if the length of the new password is less than $$$7$$$, then we can append digits,\n    letters, or special characters until the new password's length becomes $$$7$$$. We can prove\n    that this is the new password with minimum length satisfing all the requirements. The time\n    complexity of this solution is $$$O(N)$$$.\n</p>\n<h4>Sample Code (C++)</h4>\n<pre><code class=\"language-cpp\">\n<var>string</var> createNewPassword(<var>string</var> oldPassword) {\n    <var>bool</var> condition2 = false;\n    <var>bool</var> condition3 = false;\n    <var>bool</var> condition4 = false;\n    <var>bool</var> condition5 = false;\n    <var>string</var> newPassword = oldPassword;\n    for (<var>int</var> i = 0; i < oldPassword.size(); i++) {\n        if (oldPassword[i] >= 'A' && oldPassword[i] <= 'Z')\n          condition2 = true;\n        else if (oldPassword[i] >= 'a' && oldPassword[i] <= 'z')\n          condition3 = true;\n        else if (oldPassword[i] >= '0' && oldPassword[i] <= '9')\n          condition4 = true;\n        else if (oldPassword[i] == '@' || oldPassword[i] == '#' || oldPassword[i] == '&' || oldPassword[i] == '*')\n          condition5 = true;\n    }\n\n    if (!condition2) newPassword.append(\"A\"); // Append any uppercase English alphabet letter.\n    if (!condition3) newPassword.append(\"a\"); // Append any lowercase English alphabet letter.\n    if (!condition4) newPassword.append(\"1\"); // Append any digit.\n    if (!condition5) newPassword.append(\"#\"); // Append any special character.\n\n    // Append any digit, letter, or a special character.\n    while (newPassword.size() < 7) newPassword.append(\"1\");\n\n    return newPassword;\n}\n</code></pre>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3QWNVTqadONLl0QIr0xmNDWhO7NQR2XygclG6la8-bq8blkwvrhCMnhnSSwnbMOgOOMrHjCLtw/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000b20f15","statement":"<h3>Problem</h3>\n<p>\n    A company named Gooli has issued a new policy that their employees account passwords must\n    contain:\n</p>\n\n<ol>\n  <li>At least $$$7$$$ characters.</li>\n  <li>At least one uppercase English alphabet letter.</li>\n  <li>At least one lowercase English alphabet letter.</li>\n  <li>At least one digit.</li>\n  <li>At least one special character. There are four special characters: <code>#</code>,\n      <code>@</code>, <code>*</code>, and <code>&</code>.</li>\n</ol>\n\n<p>\n    The company has asked all the employees to change their passwords if the above requirements are\n    not satisfied. Charles, an employee at Gooli, really likes his old password. In case his old password\n    does not satisfy the above requirements, Charles will fix it by appending letters, digits, and\n    special characters. Can you help Charles to find the shortest possible new password that satisfies\n    his company's requirements?\n</p>\n\n<h3>Input</h3>\n<p>\n    The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n    Each test case consists of two lines. The first line of each test case contains an integer $$$\\mathbf{N}$$$,\n    denoting the length of the old password. The second line of each test case contains the old\n    password of length $$$\\mathbf{N}$$$. Old password contains only digits, letters, and special\n    characters.\n</p>\n\n<h3>Output</h3>\n<p>\n    For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\n    where $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is a valid new password,\n    obtained by possibly fixing the old password in the way that Charles wants and satisfying\n    the company's requirements.\n</p>\n<p>\n    It is guaranteed that at least one solution exists. If there are multiple solutions, you may\n    output any one of them.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n$$$7 \\le \\mathbf{N} \\le 10^4$$$.<br/>\nThe old password contains only digits.\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n$$$1 \\le \\mathbf{N} \\le 10^4$$$.<br/>\nThe old password contains only digits, letters, and special characters.\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1kLnO8bPH7C6YXh9M64hL4YGrZyJ46VuNbS5ArFjlBdm1pwqXtR3xe61HTmDYyoA7G8Exg1ki9U_PVlzmLyc7D9fETI5j1AdagSvA/new_password_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n7\n1234567\n10\n1111234567\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2epGblq2Gz5gONm6Ry7Mr21vL5nchgvF7ZusQBFYyXsopv-7QMthJxF9afbmvRxL-4DcQFEwjACNrW-P-teVmNmBkQKJXSXBkE3tUN/new_password_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1234567aA&amp;\nCase #2: 1111234567@Rc\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n    <p>\n        In Sample Case #1, the old password does not satisfy requirements $$$2$$$, $$$3$$$, and\n        $$$5$$$. One possible shortest new password is <code>1234567aA&</code>.\n    </p>\n    <p>\n        In Sample Case #2, the old password does not satisfy requirements $$$2$$$, $$$3$$$, and\n        $$$5$$$. One possible shortest new password is\n        <code>1111234567@Rc</code>.\n    </p>\n</sampleio>\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0PQhSHVO0MzEBdKojtuZHQ6QEOIWxBhsJWYmRJaH7kKwcG54L6KJhhGeTr4yDOgT5VP0QmjPWUTeWovoXVjhbqCR-emIfagubj6ls/new_password_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">3\n1\nA\n2\n1*\n7\n1234aB&amp;\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0-VZHHk8_or8OuKw2__smEfsl_digB7DO02sQ-gUZYwwOcDGyg9XbFeCx4siiy3BH8rxtBoryp7svJyAJbkKuFJ3U2PccBTIWNCQz1/new_password_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: Aa1*111\nCase #2: 1*abAA*\nCase #3: 1234aB&amp;\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n    <p>\n        In Sample Case #1, the old password does not satisfy requirements $$$1$$$, $$$3$$$, $$$4$$$,\n        and $$$5$$$. One possible shortest new password is <code>Aa1*111</code>.\n    </p>\n    <p>\n        In Sample Case #2, the old password does not satisfy requirements $$$1$$$, $$$2$$$, and\n        $$$3$$$. One possible shortest new password is <code>1*abAA*</code>.\n    </p>\n    <p>\n        In Sample Case #3, the old password already meets all the requirements so Charles does not\n        have to change his password.\n    </p>\n</sampleio>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":4},{"type":1,"type__str":"VISIBLE","value":6}],"title":"New Password","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000008cb4d1","type":1,"type__str":"SPECTATOR"},"title":"Round C 2022","ui_appearance":0,"ui_appearance__str":"APPEARANCE_TYPE_DEFAULT"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
