{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1500192000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000201b77","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  This Kickstart Round consists of a classic Dynamic Programming problem, a \n  Binary Search problem with a lot to code and a \"geometry\" problem. \n</p><p>\n  Thanks to everyone who participated! Kickstart Round E will take place next\n  month; check the Kickstart\n  schedule\n  for more details.\n</p>\n<hr>\n<p>\n  <b>Cast</b>\n</p><p>\n  Problem A (Go Sightseeing): Written and prepared by Celestine Lau.\n</p><p>\n  Problem B (Sherlock and The Matrix Game): Written and prepared by Lalit Kundu.\n</p><p>\n  Problem C (Trash Throwing): Written and prepared by Chao Li.\n</p><p>\n  Solutions and other problem preparation and review by Ian Tullis, Yiming Li,\n  Xuanang Zhao, Yan Li, Trung Thanh Nguyen and Sunny Aggarwal. Thanks for their\n  help!\n</p>\n</p><p>\nAnalysis authors:\n</p>\n<ul>\n  <li>Go Sightseeing: Celestine Lau</li>\n  <li>Sherlock and The Matrix Game: Lalit Kundu</li>\n  <li>Trash Throwing: Chao Li</li>\n</ul>\n","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1500181200000,"tasks":[{"analysis":"<h2>Go Sightseeing: Analysis\n<h3>Small dataset</h3>\n<p>\n  There are at most 15 cities in which you can go sightseeing, and in each\n  of those cities, we can either go sightseeing or not, so there are only\n  2<sup>15</sup> possibilities to consider. A brute force approach that tries\n  each of those 2<sup>15</sup> possibilities is fast enough. For each\n  possibility, we can compute the earliest possible time of arrival in city\n  <b>N</b> and then find the possibility with the greatest number of sightseeing\n  trips that arrives at city <b>N</b> on time.\n</p>\n<p>\n  It can be observed that the time of arrival in any city i + 1 is\n  only dependent on T<sub>w</sub>, the time at which we start waiting for the\n  bus in city i. This can be expressed as <i>Arrival</i>(i + 1, T<sub>w</sub>) =\n  T' + <b>D<sub>i</sub></b> - ((T' - <b>S<sub>i</sub></b>) mod\n  <b>F<sub>i</sub></b>), where T' is max(T<sub>w</sub>, <b>S<sub>i</sub></b>).\n  The arrival time at the final city can thus be computed by iteratively\n  applying the <i>Arrival</i>() function to each city in succession.\n  T<sub>w</sub> for city i will equal <i>Arrival</i>(i) if we do not go\n  sightseeing in city i, and <i>Arrival</i>(i) + <b>T<sub>s</sub></b> if we do.\n</p>\n<h3>Large dataset</h3>\n<p>\n  A brute force approach will not work for the large dataset as there are now\n  2000 cities. However, as noted above, the time of arrival in any city is\n  only dependent on the time that we start waiting at the previous city. This\n  allows us to use <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\">\n  dynamic programming</a> to solve this problem.\n</p>\n<p>\n  One option that might come to mind is to compute m(i, j), the maximum number\n  of cities that you can go sightseeing in if you have reached city i by time j.\n  This can easily be expressed as a recurrence relation on smaller values of\n  i and j. However, since the times can be as large as 10<sup>9</sup>, this\n  approach is not possible. Instead, we should try to compute f(i, j), the\n  earliest time we can arrive at city i, after having gone sightseeing at\n  exactly j different cities. For the base case of f(2, 0), this is equal to\n  <i>Arrival</i>(2, 0) as defined above, while f(2, 1) =\n  <i>Arrival</i>(2, <b>T<sub>s</sub></b>).\n</p>\n<p>\n  To obtain the recurrence relation, consider a particular city i, where i > 1.\n  You can either choose to go sightseeing there, or not. If you do, then that\n  delays your departure time by <b>T<sub>s</sub></b> but adds 1 to the total\n  number of cities in which you have gone sightseeing. This relationship can be\n  captured as the following equation:\n</p>\n<p>\n  f(i, j) = min(<i>Arrival</i>(i, f(i - 1, j)), <i>Arrival</i>(i, f(i - 1, j - 1) + <b>T<sub>s</sub></b>))\n</p>\n<p>\n  Once we have computed all possible f, the answer can be obtained by finding\n  the maximum value of x such that f(<b>N</b>, x) &le; <b>T<sub>f</sub></b>.\n  This solution runs in O(<b>N<sup>2</sup></b>) time.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1jxSbEEk7katRVzxVGKC0-tq6SDpEJpAMxvl11NtG5gkjtjqtby4wwrxg7DjhNAdg2CaCAezav/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201bfd","statement":"<h2>Problem</h2>\n\n<p>\n  When you travel, you like to spend time sightseeing in as many cities as\n  possible, but sometimes you might not be able to because you need to catch the\n  bus to the next city. To maximize your travel enjoyment, you decide to write a\n  program to optimize your schedule.\n</p>\n\n<p>\n  You begin at city 1 at time 0 and plan to travel to cities 2 to <b>N</b> in\n  ascending order, visiting every city. There is a bus service from every city i\n  to the next city i + 1. The i-th bus service runs on a schedule that is\n  specified by 3 integers: <b>S<sub>i</sub></b>, <b>F<sub>i</sub></b> and\n  <b>D<sub>i</sub></b>, the start time, frequency and ride duration. Formally,\n  this means that there is a bus leaving from city i at all times\n  <b>S<sub>i</sub></b> + x<b>F<sub>i</sub></b>, where x is an integer and x &ge;\n  0, and the bus takes <b>D<sub>i</sub></b> time to reach city i + 1.\n</p>\n\n<p>\n  At each city between 1 and <b>N</b> - 1, inclusive, you can decide to spend\n  <b>T<sub>s</sub></b> time sightseeing before waiting for the next bus, or you\n  can immediately wait for the next bus. You cannot go sightseeing multiple\n  times in the same city. You may assume that boarding and leaving buses takes\n  no time. You must arrive at city <b>N</b> by time <b>T<sub>f</sub></b> at the\n  latest. (Note that you cannot go sightseeing in city <b>N</b>, even if you\n  arrive early. There's nothing to see there!)\n</p>\n\n<p>\n  What is the maximum number of cities you can go sightseeing in?\n</p>\n\n<h3>Input</h3>\n\n<p>\n  The input starts with one line containing one integer <b>T</b>, which is the\n  number of test cases. <b>T</b> test cases follow.\n</p>\n\n<p>\n  Each test case begins with a line containing 3 integers, <b>N</b>,\n  <b>T<sub>s</sub></b> and <b>T<sub>f</sub></b>, representing the number of\n  cities, the time taken for sightseeing in any city, and the latest time you\n  can arrive in city <b>N</b>.\n</p>\n<p>\n  This is followed by <b>N</b> - 1 lines. On the i-th line, there are 3\n  integers, <b>S<sub>i</sub></b>, <b>F<sub>i</sub></b> and <b>D<sub>i</sub></b>,\n  indicating the start time, frequency, and duration of buses travelling from\n  city i to city i + 1.\n</p>\n\n<h3>Output</h3>\n\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the maximum number of cities you can go sightseeing in such that you can still\n  arrive at city <b>N</b> by time <b>T<sub>f</sub></b> at the latest. If it is\n  impossible to arrive at city <b>N</b> by time <b>T<sub>f</sub></b>, output\n  <code>Case #x: IMPOSSIBLE</code>.\n</p>\n\n<h3>Limits</h3>\n1 &le; <b>T</b> &le; 100.<br>\nTime limit: 20 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n2 &le; <b>N</b> &le; 16.<br>\n1 &le; <b>S<sub>i</sub></b> &le; 5000.<br>\n1 &le; <b>F<sub>i</sub></b> &le; 5000.<br>\n1 &le; <b>D<sub>i</sub></b> &le; 5000.<br>\n1 &le; <b>T<sub>s</sub></b> &le; 5000.<br>\n1 &le; <b>T<sub>f</sub></b> &le; 5000.<br>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n2 &le; <b>N</b> &le; 2000.<br>\n1 &le; <b>S<sub>i</sub></b> &le; 10<sup>9</sup>.<br>\n1 &le; <b>F<sub>i</sub></b> &le; 10<sup>9</sup>.<br>\n1 &le; <b>D<sub>i</sub></b> &le; 10<sup>9</sup>.<br>\n1 &le; <b>T<sub>s</sub></b> &le; 10<sup>9</sup>.<br>\n1 &le; <b>T<sub>f</sub></b> &le; 10<sup>9</sup>.<br>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3ouYkd7Qo22-c7GUNPXcSz8S48MPgTdY7-Sa5G1O5TWA41PMFAm24ONNbnAr6jWxfoqXDxrpwCpUF9HUSDyHbO8VJ8TzScm2OJYw/sightseeing_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n4 3 12\n3 2 1\n6 2 2\n1 3 2\n3 2 30\n1 2 27\n3 2 1\n4 1 11\n2 1 2\n4 1 5\n8 2 2\n5 10 5000\n14 27 31\n27 11 44\n30 8 20\n2000 4000 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2asUd0sF-bgq9pWfzQdw8alhM1jsHOGJ36uAMeuwJhGrASRNl3vJaN8l0UYoqNiDte8SCXzHI5gEwFcL3Pc1Isj9fOnBkcrsBSNJI/sightseeing_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 0\nCase #3: IMPOSSIBLE\nCase #4: 4\n\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In the first test case, you can go sightseeing in city 1, catching the bus\n  leaving at time 3 and arriving at time 4. You can go sightseeing in city 2,\n  leaving on the bus at time 8. When you arrive in city 3 at time 10 you\n  immediately board the next bus and arrive in city 4 just in time at time 12.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":14}],"title":"Sightseeing","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Sherlock and The Matrix Game : Analysis</h2>\n\n<h3>Brute force approaches</h3>\n<p>\n  In the Small dataset, <b>N</b> (which is the size of arrays <b>A</b> and <b>B</b>) doesn't exceed 200. A naive\n  bruteforce strategy is to actually create the matrix and then iterate over all possible\n  submatrices and calculate the sum for each submatrix. Since the number of submatrices is\n  O(N<sup>4</sup>) (observe that for every pair of cells, there exists a unique submatrix), naively\n  iterating over each submatrix in O(<i>submatrix size</i>) is bound to run for years(it's a\n  whopping 1.2 * 10<sup>15</sup> operations for 20 test cases in the worst case). However, if we can\n  calculate sum of each submatrix in constant time, the number of operations will reduce to\n  3 * 10<sup>10</sup>, which is feasible for a modern machine in minutes.\n</p>\n\n<h4> Inclusion-exclusion to the rescue</h4>\n<p>\n  Quickly calculating submatrix sums of a matrix M can be done by maintaining another\n  matrix P such that P(i, j) = sum of all cells M(a, b),\n  such that 1 &le; a &le; i and 1 &le; b &le; j. Matrix P can be built in\n  O(<i>size of</i> M) time by using the recurrence P(i, j) = M(i, j) + P(i-1, j) + P(i, j-1) -\n  P(i-1, j-1). Note that the first three terms on the right hand side count some of the cells twice,\n  which is why we subtract off the fourth term.\n  Further, the sum of a submatrix defined by top-left and bottom-right cells (a, b) and (c, d) can be\n  calculated as P(c, d) - P(a-1, d) - P(c, b-1) + P(a-1, b-1). Again, we add the last term on right\n  hand side to accomodate the double subtraction of some cells.\n</p>\n\n<h3> A binary search large approach </h3>\n<p>\n  For the Large dataset, <b>N</b> could be up to 10<sup>5</sup>, which implies that creating the\n  matrix in-memory is not possible, let alone iterating over all possible submatrices. We can,\n  however, use the fact that M(i, j) = <b>A</b><sub>i</sub> *\n  <b>B</b><sub>j</sub> to our advantage by expressing sum of cells in the submatrix defined\n  by top-left and bottom-right cells (a, b) and (c, d), respectively, as\n  (<b>A</b><sub>a</sub> + <b>A</b><sub>a+1</sub> + ... + <b>A</b><sub>c</sub>) *\n  (<b>B</b><sub>b</sub> + <b>B</b><sub>b+1</sub> + ... + <b>B</b><sub>d</sub>),\n  i.e., product of sum of contiguous subarrays of <b>A</b> and <b>B</b>.\n</p>\n<p>\n  If we create two sorted lists U and V consisting of all possible subarray sums of <b>A</b> and\n  <b>B</b>, respectively, we're trying to find the <b>K<sup>th</sup></b> largest value among\n  U<sub>i</sub> * V<sub>j</sub> for all i, j.\n  At this moment, we can exploit the fact that <b>K</b> doesn't exceed 10<sup>5</sup> by observing\n  that we don't need to consider all possible values in U and V. We can work with the <b>K</b> largest\n  and smallest values from both arrays(why the smallest? don't forget we also have negative values?)\n  and be guaranteed that answer will be present in product of these values. At this point,\n  we face two subproblems to finally solve this problem.\n</p>\n<h4> Subproblem 1</h4>\n<p>\n  Given an array <b>A</b> of size <b>N</b>, find the <b>K</b> largest subarray sums of <b>A</b>.\n  Note that the value of <b>K</b> is approximately O(<b>N</b>). If we can do this, finding the <b>K</b>\n  smallest subarray sums is easy by reversing the signs of values in A and running the same algorithm.\n</p>\n<h4> Solution</h4>\n<p>\n  We use binary search! The idea is to first find the <b>K<sup>th</sup></b> largest subarray sum\n  by binary searching for it, and then build the actual subarray sums. To apply binary search for\n  the <b>K<sup>th</sup></b> largest subarray sum, we need a function which can quickly count:\n  how many subarray sums are less than X, for a given X?<br/>\n  Let us define P<sub>i</sub> as sum of the first i\n  elements of array <b>A</b>. Now, a simple idea is to iterate over i and\n  fix the subarray start at position i. Now, we're trying to count\n  possible j(&ge; i) such that\n  P<sub>j</sub> &ge; P<sub>i</sub> + X.\n  Note that the right size of the inequality is a constant for a fixed i.\n  Things would've been easier if prefix sum array P had been an increasing sequence.\n  However, that is not the case, since there are also negative values in array <b>A</b>.\n  Suppose that we iterate over i from <b>N</b> to 1. At each step, we'll try to calculate\n  the answer for i(which depends on all values <b>A</b><sub>j</sub> such\n  that j &ge; i). Imagine we have a data structure DS\n  which supports two operations:<br/>\n  <ol>\n    <li>Insert y : inserts y in the data structure.</li>\n    <li>Query y : returns the count of values present in data structure that are less than\n      or equal to y.</li>\n  </ol>\n  Using this DS, our job can be done(we can do DS.Insert(<b>A</b><sub>i</sub>),\n  add DS.Query(P<sub>i</sub> + X) to our answer, and then decrement i and\n  so on).\n  Such a data structure can be implemented efficiently using any balanced binary search trees such\n  as splay trees. Such trees can handle both operations in O(log(<i>size of DS</i>)).\n  If the same data structure can support iterating over all values present in it in increasing order,\n  we can get all subarray sums less than the <b>K<sup>th</sup></b> smallest subarray sum in a similar way.\n  Note that we don't need the \"Query\" operation for doing this. So, the complexity of solving this\n  subproblem turns out to be O(log(<i>range of answer</i>) * <b>N</b> * log(<b>N</b>) + <b>K</b>).\n</p>\n<h4> Subproblem 2</h4>\n<p>\n  Given two arrays <b>A</b> and <b>B</b> of size O(<b>N</b>), find the <b>K<sup>th</sup></b>\n  largest among all possible values <b>A</b><sub>i</sub> *\n  <b>B</b><sub>j</sub>, for all i, j.\n</p>\n<h4> Solution</h4>\n<p>\n  Again, we can use binary search on our answer if we, given X, can count how many pairs\n  i, j exist such that <b>A</b><sub>i</sub> *\n  <b>B</b><sub>j</sub> &ge; X.<br/>\n  Just as in to subproblem 1, the idea is to iterate over i, and then count all\n  possible j such that\n  <b>B</b><sub>j</sub> &ge; X /  <b>A</b><sub>i</sub>,\n  which is easily doable using binary search if array <b>B</b> is kept in a sorted fashion.\n  However, note that it is a little trickier because of negative values. The complexity of solving this\n  subproblem turns out to be (log(<i>range of answer</i>) * <b>N</b> * log(<b>N</b>)).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U28wP5Yo5yiTAS0xNyPm4CymXfajhLUHfmhl9Efx4LleBWqWEFbdOFmEUxFd4BpH3gHTGRKHDoz/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201c95","statement":"<h3>Problem</h3>\n<p>\nToday, Sherlock and Watson attended a lecture in which they were introduced to matrices. Sherlock is one of those programmers who is not really interested in linear algebra, but he did come up with a problem involving matrices for Watson to solve.\n</p>\n<p>\nSherlock has given Watson two one-dimensional arrays A and B; both have length <b>N</b>. He has asked Watson to form a matrix with <b>N</b> rows and <b>N</b> columns, in which the <code>j</code><sup>th</sup> element in the <code>i</code><sup>th</sup> row is the product of the i-th element of A and the j-th element of B.\n</p>\n<p>\nLet (x, y) denote the cell of the matrix in the x-th row (numbered starting from 0, starting from the top row) and the y-th column (numbered starting from 0, starting from the left column). Then a submatrix is defined by bottom-left and top-right cells <code>(a, b)</code> and <code>(c, d)</code> respectively, with a &ge; c and d &ge; b, and the submatrix consists of all cells (i, j) such that c &le; i &le; a and b &le; j &le; d. The sum of a submatrix is defined as sum of all of the cells of the submatrix.\n</p>\n<p>\nTo challenge Watson, Sherlock has given him an integer <b>K</b> and asked him to output the <b>K</b><sup>th</sup> largest sum among all submatrices in Watson's matrix, with <b>K</b> counting starting from 1 for the largest sum. (It is possible that different values of <b>K</b> may correspond to the same sum; that is, there may be multiple submatrices with the same sum.) Can you help Watson?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each test case consists of one line with nine integers <b>N</b>, <b>K</b>, <b>A<sub>1</sub>, B<sub>1</sub></b>, <b>C</b>, <b>D</b>, <b>E<sub>1</sub></b>, <b>E<sub>2</sub></b> and <b>F</b>. <b>N</b> is the length of arrays A and B; <b>K</b> is the rank of the submatrix sum Watson has to output, <b>A<sub>1</sub></b> and <b>B<sub>1</sub></b> are the first elements of arrays A and B, respectively; and the other five values are parameters that you should use to generate the elements of the arrays, as follows:\n<br/>\n<br/>\nFirst define x<sub>1</sub> = <b>A<sub>1</sub></b>, y<sub>1</sub> = <b>B<sub>1</sub></b>, r<sub>1</sub> = 0, s<sub>1</sub> = 0. Then, use the recurrences below to generate x<sub>i</sub> and y<sub>i</sub> for i = 2 to <b>N</b>:\n<ul>\n  <li>x<sub>i</sub> = ( <b>C</b>*x<sub>i-1</sub> + <b>D</b>*y<sub>i-1</sub> + <b>E<sub>1</sub></b> ) modulo <b>F</b>.</li>\n  <li>y<sub>i</sub> = ( <b>D</b>*x<sub>i-1</sub> + <b>C</b>*y<sub>i-1</sub> + <b>E<sub>2</sub></b> ) modulo <b>F</b>.</li>\n</ul>\nFurther, generate r<sub>i</sub> and s<sub>i</sub> for i = 2 to <b>N</b> using following recurrences:\n<ul>\n  <li>r<sub>i</sub> = ( <b>C</b>*r<sub>i-1</sub> + <b>D</b>*s<sub>i-1</sub> + <b>E<sub>1</sub></b> ) modulo 2.</li>\n  <li>s<sub>i</sub> = ( <b>D</b>*r<sub>i-1</sub> + <b>C</b>*s<sub>i-1</sub> + <b>E<sub>2</sub></b> ) modulo 2.</li>\n</ul>\nWe define <b>A<sub>i</sub></b> = (-1)<sup>r<sub>i</sub></sup> * x<sub>i</sub> and <b>B<sub>i</sub></b> = (-1)<sup>s<sub>i</sub></sup> * y<sub>i</sub>, for all i = 2 to <b>N</b>.\n\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is the <b>K<sup>th</sup></b> largest submatrix sum in the matrix defined in the statement.\n</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 20.<br/>\nMemory limit: 1GB.<br/>\n1 &le; <b>K</b> &le; min(10<sup>5</sup>, total number of submatrices possible).<br/>\n0 &le; <b>A<sub>1</sub></b> &le; 10<sup>3</sup>.<br/>\n0 &le; <b>B<sub>1</sub></b> &le; 10<sup>3</sup>.<br/>\n0 &le; <b>C</b> &le; 10<sup>3</sup>.<br/>\n0 &le; <b>D</b> &le; 10<sup>3</sup>.<br/>\n0 &le; <b>E<sub>1</sub></b> &le; 10<sup>3</sup>.<br/>\n0 &le; <b>E<sub>2</sub></b> &le; 10<sup>3</sup>.<br/>\n1 &le; <b>F</b> &le; 10<sup>3</sup>.\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\nTime limit: 40 seconds.<br/>\n1 &le; <b>N</b> &le; 200.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\nTime limit: 200 seconds.<br/>\n1 &le; <b>N</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0YiMX5fYJ4ZfPwHIIy8uhw2a58lNMBPut53NNBos9qe3Bo0Q9ppLjkcoElLH78WbYV9ufN_4qHoCc1Vuztq40DmI1O99o1p68YtrDWT0Kcdg3HG-J8NRc/sherlock_and_matrix_game_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n2 3 1 1 1 1 1 1 5\n1 1 2 2 2 2 2 2 5\n2 3 1 2 2 1 1 1 5\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1NVUNJjljBOEKdEWRv9W5AOSiNbQZvX7Y2jb0pSPH0i-4zbsB2L4ECsi3JWkEb6dSEOjWNcz9j8hq174Q57DizaXVzSBoIrQmv4Y_VRx0mOxALyE_xbsvd/sherlock_and_matrix_game_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 6\nCase #2: 4\nCase #3: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\nIn case 1, using the generation method, the generated arrays A and B are [1, -3] and [1, -3], respectively. So, the matrix formed is<br/>\n[1, -3]<br/>\n[-3, 9]\n<br/>\nAll possible submatrix sums in decreasing order are [9, 6, 6, 4, 1, -2, -2, -3, -3]. As <b>K = 3</b>, answer is 6.\n<br/>\n<br/>\n\nIn case 2, using the generation method, the generated arrays A and B are [2] and [2], respectively. So, the matrix formed is<br/>\n[4]\n<br/>\nAs <b>K = 1</b>, answer is 4.\n<br/>\n<br/>\n\nIn case 3, using the generation method, the generated arrays A and B are [1, 0] and [2, -1] respectively. So, the matrix formed is<br/>\n[2, -1]<br/>\n[0, 0]\n<br/>\nAll possible submatrix sums in decreasing order are [2, 2, 1, 1, 0, 0, 0, -1, -1]. As <b>K = 3</b>, answer is 1.\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":13},{"type":2,"type__str":"HIDDEN","value":19}],"title":"Sherlock and Matrix Game","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Trash Throwing: Analysis</h2>\n<p>\n  In this problem, we will use binary search multiple times to transform an\n  optimization problem into a decision problem.\n\n  The problem asks us to find the maximal radius for a thrown circle with a\n  center position satisfying f(x)=<i>a</i>x(x-<b>P</b>), without touching the\n  ceiling or any obstacles.\n</p>\n<p>\n  First of all, if there is an <i>a</i> so that a circle with radius <b>R</b>\n  could pass, then for all <b>R'</b> &le; <b>R</b>, <b>R'</b> is also a valid\n  solution, as we can choose the same <i>a</i>.\n\n  In other words, we can binary search on <b>R</b>, and for each <b>R</b>,\n  check whether there is a valid <i>a</i>.\n\n  If there is, <b>R</b> is an acceptable answer.\n</p>\n<p>\n  How can we determine whether there is a valid parabola for a given <b>R</b>?\n</p>\n<p>\n  Let's convert the problem into a simpler form.\n\n  Bob wants to throw a circle without touching any obstacles.\n\n  That is, for any point on the parabola (x, f(x)), the distance from that\n  point to the obstacle (<b>X<sub>i</sub></b>, <b>Y<sub>i</sub></b>) must be\n  larger than <b>R</b>.\n\n  We can reframe the problem as follows: given some obstacle circles, with the\n  i-th circle centered at (<b>X<sub>i</sub></b>, <b>Y<sub>i</sub></b>) with\n  radius <b>R</b>, Bob will throw a point such that the point does not\n  touch/enter any circles. (We must also lower the ceiling by exactly\n  <b>R</b> units.)\n\n  This conversion does not change the final answer.\n</p>\n<p>\n  In the Small dataset, there is only one obstacle, as shown in example, and\n  there are two ways to throw it into the trash can.\n\n  One way is to throw the point over the obstacle, and the other one is to\n  throw the point under the obstacle.\n\n  Let's consider the former situation. If there is an <i>a</i> for which the\n  parabola does not touch the obstacle circle, then for all\n  <i>a'</i> &le; <i>a</i>, the parabola with parameter <i>a'</i> is a valid\n  solution.\n\n  Therefore, we can binary search again (this time on <i>a</i>) and get an\n  interval of real numbers that are valid value of <i>a</i>.\n\n  The latter situation is similar.\n\n  After we have considered both situations, we will have two (or maybe one, in\n  a corner case) intervals of possible values for <i>a</i>.\n</p>\n<p>\n  After we binary search to find <b>R</b> and <i>a</i>, the problem becomes,\n  given the parabola parameter <i>a</i> and an obstacle circle with radius\n  <b>R</b>, determine whether the parabola will intersect the circle.\n\n  We can list the equations:<br/>\n\n  y = <i>a</i>x(x-<b>P</b>)<br/>\n\n  (x - <b>X<sub>i</sub></b>)<sup>2</sup> + (y - <b>Y<sub>i</sub></b>)<sup>2</sup> =\n  <b>R<sup>2</sup></b><br/>\n\n  Since <i>a</i>, <b>P</b>, <b>X<sub>i</sub></b>, <b>Y<sub>i</sub></b> and\n  <b>R</b> are all known variables, we can solve the equations by\n  <a href=\"https://en.wikipedia.org/wiki/Newton%27s_method\">Newton's method</a>\n  or\n  <a href=\"https://en.wikipedia.org/wiki/Quartic_function\">Ferrari's algorithm</a>.\n\n  Each real root represents an intersection point of the parabola and the\n  circle, so an <i>a</i> is acceptable if the equations do not have real roots.\n\n  As for the ceiling case, since the parabola gets the maximal f(x) when\n  x=<b>P</b>/2, if the maximal f(x) is lower than\n  <b>H</b>-<b>R</b>, the trash will not touch the ceiling.\n\n  This is enough to solve the Small dataset.\n</p>\n<p>\n  Finally, let us handle the case of multiple obstacles.\n\n  We can use the same binary search mechanism.\n\n  Note that in the previous solution for one obstacle, after binary search for\n  <b>R</b>, we used another binary search to find the valid intervals for\n  <i>a</i>.\n\n  What we need to do is to find a value of <i>a</i> that is valid for all the\n  obstacles.\n\n  We can do this by masking all invalid intervals, and seeing what remains.\n\n  If the invalid intervals cover all real numbers, then the value of <b>R</b>\n  that we are considering is not acceptable.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1LS7F3yerGqUG6T_d_vzLkkUfLjlnI25SLtKvrBgOjOVEvfp4UxsoSe7vaE9pNgOWp4vp6PrMr/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201d23","statement":"<h2>Problem</h2>\n\n<p>\n  Bob is an outstanding Googler. He loves efficiency, so he does everything\n  well and quickly. Today, Bob has discovered that the trash can near his desk has disappeared!\n  Sadly, this means that he has to use another nearby trash can instead. Since\n  getting out of his seat to use the trash can would lower his productivity,\n  Bob has decided to <i>throw</i> his trash into that trash can!\n</p>\n<p>\n  But there are many obstacles in the Google office. For example, it is rude if\n  the thrown trash hits somebody, or the wall, or anything else. Bob hopes to\n  throw the trash without touching any existing obstacles.\n</p>\n<p>\n  To simplify this problem, we will only consider the vertical plane that includes\n  Bob and the trash can. Bob is at point (0, 0); the trash can is at point\n  (<b>P</b>, 0). Moreover, there are <b>N</b> obstacles in the office; each of them\n  is a single point, and the i-th one has coordinates\n  (<b>X<sub>i</sub></b>, <b>Y<sub>i</sub></b>).\n\n  The ceiling of the office is a line with the expression\n  <b>y</b>=<b>H</b> in the plane. Since Bob is in one of the new high-tech\n  floating offices, we do not consider the office floor in this problem; you\n  do not need to worry about collisions with it.\n\n  Bob will throw a piece of trash that is a circle with radius <i>R</i>.\n  The center of the piece of trash starts off at (0, 0). When\n  the piece of trash is thrown, the center of the piece of trash must follow\n  the path of a parabola with the expression f(x)=<i>a</i>x(x-<b>P</b>),\n  where 0 &le; x &le; <b>P</b>, and <i>a</i> can be any real number less than\n  or equal to 0. The piece of trash is only considered thrown away when its\n  center reaches the trash can's point, and it is not enough for some part of\n  the piece of trash to just touch that point.\n</p>\n<p>\n  Bob is wondering: what is the largest piece of trash he can throw without\n  hitting the ceiling or any obstacles? That is, we must find the maximum value\n  of <i>R</i> for which there is at least one value <i>a</i> that satisfies the\n  following: for any 0 &le; x &le; <b>P</b>, the Euclidean distance between\n  (x, f(x)) and (x, H) is greater than <i>R</i>, and for each i, the\n  Euclidean distance between the point (x, f(x)) and\n  (<b>X<sub>i</sub></b>, <b>Y<sub>i</sub></b>) is greater than or equal to <i>R</i>.\n</p>\n\n<h3>Input</h3>\n<p>\n  The input starts with one line containing one integer <b>T</b>, the\n  number of test cases. <b>T</b> test cases follow. The first line of each\n  test case contains three integers <b>N</b>, <b>P</b>, and <b>H</b>: the\n  number of obstacles, the x-coordinate of the trash can, and the height of\n  the ceiling. Then, there are <b>N</b> more lines; the i-th of those lines\n  represents the i-th obstacle, and has two integers <b>X<sub>i</sub></b> and\n  <b>Y<sub>i</sub></b>, representing that obstacle's coordinates.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  a double representing the maximum radius <b>R</b>. Your answer will be\n  considered correct if it is within an absolute or relative error of\n  10<sup>-4</sup> of the correct answer. See the\n  <a href=\"https://codingcompetitions.withgoogle.com/kickstart/faq\" target=\"_blank\">FAQ</a> for an explanation\n  of what that means, and what formats of real numbers we accept.\n</p>\n\n<h3>Limits</h3>\n\n1 &le; <b>T</b> &le; 50.<br>\nTime limit: 120 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n2 &le; <b>P</b> &le; 1000.<br>\n2 &le; <b>H</b> &le; 1000.<br>\n0 &lt; <b>X<sub>i</sub></b> &lt; <b>P</b>.<br>\n0 &lt; <b>Y<sub>i</sub></b> &lt; <b>H</b>.<br>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<b>N</b> = 1.<br>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n1 &le; <b>N</b> &le; 10.<br>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Fuge8HgBzs8zhJM-S-f5coJ6t_aFkUdC_YyVC3e_hL0K0OgnVd_qpnxCmTeGaWKVi-0upDupdrczmrOl-Lyz147GHGw/trash_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n1 10 10\n5 3\n1 10 10\n5 4\n1 100 10\n50 3\n2 10 10\n4 2\n6 7\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2LVYbix-r-Chy0qkELSZsWKKv_RiPD2ZUy4uQcB8f5yhvSoQeEE1TdiNVrfTnF2OI7ArLL4Yoqn_0nehs250Z9QXXnb_A/trash_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3.23874149472\nCase #2: 4.0\nCase #3: 3.5\nCase #4: 2.23145912401\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    Note that the last sample case would not appear in the Small dataset.\n  </p>\n  <p>\n    The following picture illustrates Sample Case #1. Bob is at (0, 0), and\n    the trash can is at (10, 0). There is a obstacle at point (5, 3), marked\n    with a star. If Bob throws trash over the top of the obstacle, the maximal\n    <i>R</i> is 3.2387, which requires an <i>a</i> of about -0.2705. If Bob\n    throws trash under the obstacle, the maximal <i>R</i> is 3, which requires\n    an <i>a</i> of 0. So the maximum <i>R</i> for this case is about 3.2387.\n  </p>\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2pkIcv8L6v9pQY88OZWcrtP_XLsd2ZSMtqTMj53zZwuhKAy7RU7S_DahJvcv81R8SDhIKFVLk/figure_1.png\"/>\n  <p>\n    Sample Case #2 is like Sample Case #1, but the obstacle is one unit higher.\n    Now, if Bob throws the trash under the obstacle, the maximal <i>R</i> is 4\n    (for <i>a</i> = 0). If he throws the trash over the obstacle, he can only\n    use trash with a radius up to about 2.8306 (with <i>a</i> = -0.4). So the\n    maximum <i>R</i> for this case is 4.\n  </p>\n</sampleio>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":17},{"type":2,"type__str":"HIDDEN","value":27}],"title":"Trash","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000201b77","type":1,"type__str":"SPECTATOR"},"title":"Round D 2017"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
