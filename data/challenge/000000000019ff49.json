{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1605420000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"000000000019ff49","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\r\n  Thank you for participating in Kick Start 2020 Round H.\r\n</p>\r\n<p>\r\n</p>\r\n<hr>\r\n<p>\r\n<b>Cast</b>\r\n</p><p>Retype: Written by Sudarsan Srinivasan and prepared by Swapnil Gupta.</p>\r\n<p>Boring Numbers: Written by Saurabh Joshi and prepared by Shantam Agarwal.</p>\r\n<p>Rugby: Written by Krists Boitmanis and prepared by Swapnil Gupta.</p>\r\n<p>Friends: Written by Ian Tullis and prepared by Mohamed Yosri Ahmed.</p>\r\n<p>Solutions, other problem preparation, reviews and contest monitoring by\r\nAnson Ho, Anushi Maheshwari, Bartosz Kostka, Bohdan Pryshchenko, Cristhian Bonilha,\r\nDevanshu Agarwal, Diksha Saxena, Ian Tullis, Jared Gillespie, Kashish Bansal, Krists Boitmanis,\r\nLalit Kundu, Lizzie Sapiro, Marcin Wawerka, Michał Łowicki, Mohamed Yosri Ahmed, Muntakim Sadik,\r\nRuoyu Zhang, Sadia Atique, Sai Surya Upadrasta, Saurabh Joshi, Saurabh Nijhara, Shantam Agarwal,\r\nSherry Wu, Shweta Karwa, Sudarsan Srinivasan, Swapnil Gupta, Teja Vardhan Reddy Dasannagari,\r\nVikash Dubey, and Vipin Singh.</p>\r\n<p>Analysis authors:</p><ul>\r\n<li>Retype: Swapnil Gupta</li>\r\n<li>Boring Numbers: Devanshu Agarwal</li>\r\n<li>Rugby: Cristhian Bonilha</li>\r\n<li>Friends: Krists Boitmanis</li>\r\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1605409200000,"tasks":[{"analysis":"There are 2 possible options to complete all the <b>N</b> levels. Let answer1 and answer2 be the time taken to complete all levels for each of the options respectively. Initialize answer1\nand answer2 as 0.\n\n<h3>\n   Test set 1\n</h3>\n\n<p>\n  We have already reached the level <b>K</b>. In order to calculate time taken to reach level <b>K</b>, start iterating from level 1 till level <b>K</b>\n  and increment answer1 and answer2 on each step as we take 1 unit time to complete each level.\n  <li>One of the options to complete all levels is to restart the game and complete all the levels again, starting from level 1.\n  We can calculate the time taken for this option by iterating from level 1 till level <b>N</b> and incrementing answer1.\n    </li>\n  <li>The second possible option is to go back to level <b>S</b> and then complete remaining levels after picking up the sword at level <b>S</b>. We can calculate the\n  time taken for this option by iterating from level <b>K</b> to level <b>S</b> and incrementing answer2 at each step. Now, start iterating from\n  level <b>S</b> till level <b>N</b> and increment answer2 at each step.\n    </li>\n  The minimum time taken to complete all of the levels is the minimum value among answer1\n  and answer2. As we iterate each level at most twice in each possible option, the complexity of the solution is O(<b>N</b>).\n</p>\n\n<h3>\n   Test set 2\n</h3>\n\n<p>\n   An observation here is that instead of simulating the levels and calculating the time taken, we can compute it in O(1) time. Initially, we are at level\n  <b>K</b>. This means that we took <b>K</b> time units to reach level <b>K</b> as completing each level takes 1 unit of time. Hence, we can\n  increment answer1 and answer2 by <b>K</b> directly.\n  <li>For the first option, we restart the game and complete all levels again. It would take <b>N</b> time units to complete all the levels again as\n    total number of levels are <b>N</b>. Hence, answer1 &equals; <b>N</b> + <b>K</b>.\n    </li>\n  <li>For the second option, we go back to level <b>S</b>. This would take <b>K</b> - <b>S</b> time units as there are <b>K</b> - <b>S</b> levels\n    between level <b>K</b> and level <b>S</b>. Then we complete remaining levels after picking up sword at level <b>S</b>. This would take\n    <b>N</b> - <b>S</b> time units. Hence answer2 &equals; <b>K</b> + <b>K</b> - <b>S</b> + <b>N</b> - <b>S</b>.\n    </li>\n  The minimum time required to complete all levels is the minimum value among answer1\n  and answer2. Note that answer2 can overflow the range of range of 32-bit signed integers. For example, in C++ answer2 may overflow the\n  range of INT datatype. Although the minimum answer would fit in the range of INT but overflowing of\n  answer2 can cause unexpected output. Computing both answer1 and answer2 can be done in constant time. Hence, time complexity of the solution is O(1).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2MdB3WS8W2xkHdHU6pKtPux8LeMuz3LYnfe8LaluFtplh6YN9OuG3tun8suJxtAWh_SmOFl94/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000043adc7","statement":"<h3>Problem</h3>\n<p>\n  After spending many hours studying for programming competitions, you decided to take a rest and\n  play video games. You are currently playing an adventure game called Quick Start.\n</p>\n<p>\n  This game has <b>N</b> levels, and you are currently on the <b>K</b>-th level.\n  Unfortunately, you just realized that to beat the boss at the final level, you will need a\n  special sword, which can be picked up at level <b>S</b>.\n  You have already completed that level, but you forgot to pick up the sword at that level.\n</p>\n<p>\n  Now you want to pick up the sword and finish the game in the least amount of time possible,\n  and for that you have two options:\n</p>\n<ol>\n  <li>Restart the game and complete all levels again, starting from level 1.</li>\n  <li>\n    Move to previous levels until you reach level <b>S</b>, pick up the sword and complete all the\n    remaining levels, starting from level <b>S</b>.\n  </li>\n</ol>\n<p>\n  Every time you enter a level you have to exit it, either by completing it and going to the next\n  level or by moving to a previous level or by finishing / exiting the game. Exiting any level takes\n  1 minute. That means, for example, that it took you L minutes to complete the first L levels.\n</p>\n<p>\n  Your task is to discover which option would result in the least amount of total time to\n  finish the game (including the time you have already spent).\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow.\n</p>\n<p>\n  The first (and only) line of each test case contains three integers <b>N</b>, <b>K</b> and\n  <b>S</b>: the number of levels in the game, the current level you are in, and the level where you\n  have to pick up the sword, respectively.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code>\n  is the test case number (starting from 1) and <code>y</code> is the least amount of total\n  time to finish the game.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>S</b> &lt; <b>K</b> &lt; <b>N</b>.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  <b>N</b> &le; 1000.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  <b>N</b> &le; 10<sup>9</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1DsDzcc9zz21lMhnGCeMHZ0yxCrUYQ4utz-K4pVtLatt4T4VcoFtBzYf3kd3Tp9fowIrw5YUg5XJ1yjOcIhGJwpHZIYA/retype_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n10 5 2\n10 7 6\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1OsK1eghVsY5Jweyrs063dleJLojMU7nQI1ECe90VsRF8VLQzVfUF_bcisQuSeJDMntdMRhWcFz8mQ7eLzq7A6WsnLQGQ/retype_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 15\nCase #2: 12\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, it took you 4 minutes to complete the first 4 levels and enter 5-th\n  level. Restarting the game and completing all levels again would take 11 more minutes (1 minute to\n  restart and 10 to complete 10 levels), which adds up to 15 minutes.\n  The other option would be to move backwards until you reach level 2 (which would take 3 minutes),\n  and then complete all the remaining levels (taking 9 more minutes), which would result in a total\n  of 16 minutes.\n</p>\n<p>\n  In Sample Case #2, it took you 6 minutes to complete the first 6 levels and enter 7-th\n  level. Moving backwards until reaching level 6 (one minute), and then completing all the remaining\n  levels (5 minutes), would take a total of 12 minutes to finish the game.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":4},{"type":1,"type__str":"VISIBLE","value":7}],"title":"Retype","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\nTest Set 1\n</h3>\n\n<p>\n  For this test set, we can build an undirected graph, where the nodes represent people and\n  there is an edge between two nodes if and only if the names of the respective people have a common\n  letter. Then each query can be answered by finding a shortest path between two nodes in the graph.\n</p>\n\n<p>\n  Assuming that L is the length of the longest name (recall that L &le; 20), it is straightforward\n  to build the graph in O(L<sup>2</sup><b>N</b><sup>2</sup>) time by considering each pair of nodes\n  and using a nested pair of loops to look for a common letter in the names. The time complexity\n  can be reduced to O(L<b>N</b><sup>2</sup>) if we mark the letters of one of the names, and then\n  iterate over the letters of the other name to see if any of those letters has been marked. A\n  better yet approach is to represent the letters of a name as a 32-bit integer, where the i-th bit\n  is 1 if the i-th letter of the alphabet is present in the name, and 0 otherwise. Then testing for\n  common letters in two names boils down to checking if the logical AND of the respective bitmasks\n  is non-zero, and thus the graph can be built in O(L<b>N</b>+<b>N</b><sup>2</sup>) time.\n</p>\n\n<p>\n  The graph may have up to <b>N</b> &times; (<b>N</b>-1) / 2 edges, therefore, if we answer each\n  query independently, say, using the\n  <a href=\"https://en.wikipedia.org/wiki/Breadth-first_search\">breadth-first search</a>, the overall\n  time complexity of answering all <b>Q</b> queries is\n  O(<b>Q</b><b>N</b><sup>2</sup>), which might be too slow for large values of <b>Q</b>. Even if we\n  never compute the answer for the same query twice by memoizing the results in a two-dimensional\n  array, the time complexity is still O(<b>N</b><sup>4</sup>).\n</p>\n\n<p>\n  A better alternative is to pre-compute the whole distance array in O(<b>N</b><sup>3</sup>) time\n  using the <a href=\"https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm\">\n  Floyd-Warshall</a> algorithm or running breadth-first seach <b>N</b> times, once from\n  each node. Then the individual queries can be answered in constant time and the overall\n  time complexity becomes O(L<b>N</b> + <b>N</b><sup>3</sup> + <b>Q</b>).\n</p>\n\n<h3>\nTest Set 2\n</h3>\n\n<p>\n  Here <b>N</b> can be large, so we really need an algorithm that is subquadratic in <b>N</b>. Let\n  us look at the problem from a different angle. Using the first sample test case, consider the\n  friendship graph below, and suppose that we need to find the length of the shortest friendship\n  chain between LIZZIE and RUOYU.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0yMNRaWhNULIr-hzgAjFjncsQDqaRCcCQUHv_DitqmaZGXBIMOA_CVkmPhe9sEk9CNo3ZDgpMvRO8eGw/friends.png\" width=\"70%\" />\n<p>\n  We start out with the set of letters L<sub>0</sub> = {L,I,Z,E}. Since the names KEVIN and LALIT\n  have at least one letter in L<sub>0</sub>, we know that the shortest friendship chain to these\n  names has length 2. By extending our search to the names KEVIN and LALIT, we have reached the\n  letters L<sub>1</sub> = {K,V,N,A,T}. Since BOHDAN has some letters in L<sub>1</sub> (N and A), the\n  length of the shortest friendship chain from LIZZIE to BOHDAN is 3, and adding BOHDAN leads to a\n  new set of letters L<sub>2</sub> = {B,O,H,D}. The name RUOYU has the letter O in L<sub>2</sub>,\n  therefore, the shortest friendship chain to RUOYU has length 4.\n</p>\n<p>\n  The crucial observation here is that we are essentially doing a breadth-first search in a very\n  small graph G on the set of nodes {A,B,C,...,X,Y,Z}, where there is an edge between a pair of\n  letters {u,v} if and only if the letters occur in the same name. The graph for our example is\n  illustrated below.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2cNz2ivdJQ1QnJrT57FIV4NHFBmJEu6rIpEcdzdssU8qqt8MqSYGeU7VfVbVKsogt2nXwD-kr3DUQ/graph.png\" width=\"70%\" />\n<p>\n  The goal of the breadth-first search was to find the shortest path connecting the sets of letters\n  {L,I,Z,E} and {R,U,O,Y}. One of such paths is highlighted in red in the picture below. Instead of\n  doing the breadth-first search, we could also pre-compute all-pairs shortest paths in G in\n  constant time (yes, O(26<sup>3</sup>) is still O(1)), and then answer each query in\n  O(L<sup>2</sup>) time by taking the minimum distance over all pairs of letters\n  {<i>a</i>,<i>b</i>}, where the letter <i>a</i> occurs in the first name, and the letter <i>b</i>\n  occurs in the other name.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0wIP4e6wLqZP9_pzP4JUJv8tOvAInujkC2B5plDrsPzuLe5QolxVYG4TVzd-IFRKLGd2yHthGz7Q/path.png\" width=\"70%\" />\n<p>\n  We can build the graph G in O(L<sup>2</sup><b>N</b>) time by considering each of the input names\n  and creating an edge between each pair of letters in the name. Consequently, the overall time\n  complexity of the algorithm is O(L<sup>2</sup>(<b>N</b>+<b>Q</b>)).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0jpuORr0VdFU0ZTj2fbpAAy8Ds6Flgg-ggLg1SKuHLkcbF7M5Hg2N0Mr2_sm2l6OhgVF_-8wU/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000043aee7","statement":"<h3>Problem</h3>\n<p>\nThere are <b>N</b> people in the world numbered 1 to <b>N</b>. The i-th person has a distinct name <b>S<sub>i</sub></b>\nthat is a string of uppercase English letters.\n</p>\n<p>\nTwo people are friends if and only if there is some letter that appears at least once in each of\n  their names. Any such letter does not need to be at the same position in both names.\n  After all, friendship requires having something in common!\n</p>\n<p>A friendship chain of length n\n   between person A and person B is a sequence of people X<sub>1</sub>, X<sub>2</sub>, ..., X<sub>n</sub>\n  such that X<sub>1</sub> = A, X<sub>n</sub> = B, and X<sub>i</sub> and X<sub>i+1</sub> are friends, for i=1 to n-1.\n  Note that any two people can have zero or more friendship chains between them.\n</p>\n<p>\n  For each of the given <b>Q</b> pairs of people, can you find the length of the shortest friendship\n  chain between them? If there is no friendship chain between a pair, output <code>-1</code>.\n</p>\n\n<h3>Input</h3>\n<p>\n\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  The first line of each test case contains the two integers <b>N</b> and <b>Q</b>.\n  The second line contains <b>N</b> strings, which are people's names.\n  The i-th string (starting from 1) is <b>S<sub>i</sub></b>.\n  Then, <b>Q</b> lines follow, describing the queries.\n  The i-th of these lines contains the two integers <b>X<sub>i</sub></b> and <b>Y<sub>i</sub></b>, which are the indexes (counting starting from 1) of a pair of people in the list of names.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code>\n  is a list of the answers for the <b>Q</b> queries in order, separated by spaces.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 40 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n1 &le; <b>T</b> &le; 100.<br/>\n1 &le; <b>Q</b> &le; 5 &times; 10<sup>4</sup>.<br/>\n<b>S<sub>i</sub></b> consists of uppercase English letters, for all i.<br/>\n1 &le; length of <b>S<sub>i</sub></b>  &le; 20, for all i.<br/>\nAll <b>S<sub>i</sub></b> are distinct.<br/>\n1 &le; <b>X<sub>i</sub></b> &lt;<b>Y<sub>i</sub></b> &le; <b>N</b>, for all i.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n2 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n10<sup>3</sup>  &lt; <b>N</b> &le; 5 &times; 10<sup>4</sup> in at most 10 cases.<br/>\n2 &le; <b>N</b> &le; 10<sup>3</sup> in all other cases.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1MOIwfUUo6g_lmGazM5OHr_ju1xq0-NFIXvYQGApLHZI-38OTnGwEIIkdrHw9nEubm53XK1lCGThtpO6UM338fr9Eujys/friends_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5 2\nLIZZIE KEVIN BOHDAN LALIT RUOYU\n1 2\n1 3\n2 2\nKICK START\n1 2\n1 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U03A_tBpVV4ObvBgQAyaWgcAjAwnWbIrx0B98S7BmoyRG5YTPd_C-MFRHTbxsM8oO2a-33PlEKieDAaG_uN8zVvG4B73_tk/friends_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2 3\nCase #2: -1 -1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, there are two queries:\n  <ul>\n    <li>In the first query, <code>LIZZIE</code> and <code>KEVIN</code> are friends (because they share the letter E in their names). So, the shortest friendship chain length is 2.</li>\n    <li>In the second query, <code>LIZZIE</code> and <code>BOHDAN</code> are not friends, but have two possible shortest friendship chains (either via <code>KEVIN</code> or <code>LALIT</code>). So, the shortest friendship chain length is 3. Note that there are other friendship chains as well, but they are longer.</li>\n  </ul>\n</p>\n<p>\n  In Sample Case #2, there are two queries:\n  <ul>\n    <li>In the first query, <code>KICK</code> and <code>START</code> are not connected by a chain of friends.</li>\n    <li>The second query is the same as the first query. Note that queries are not guaranteed to be distinct.</li>\n  </ul>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":15},{"type":1,"type__str":"VISIBLE","value":23}],"title":"Friends","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  We can divide this problem into two parts:\n  choosing where to place the line, and choosing the permutation of players on the line\n  (in other words, which players should be on which points on the line).\n</p>\n<p>\n  Regarding the permutation of players,\n  the first observation that we can make is that preserving the initial\n  X-ordering of the players is an optimal strategy. That means we should place the player\n  with the lowest <b>X</b> coordinate value as the first player on the line, the player with the\n  second lowest <b>X</b> coordinate value as the second player on the line, and so on. If there are\n  ties, we can break them arbitrarily.\n</p>\n<p>\n  We can prove that this greedy strategy is optimal.\n  First let us assume that there\n  are two players with X-coordinates <b>X</b><sub>1</sub> and <b>X</b><sub>2</sub>,\n  and let us denote the X-coordinate of the start of line as startX,\n  whereas <b>X</b><sub>1</sub> &le; startX &lt; <b>X</b><sub>2</sub>. If we do not preserve\n  the players' relative position on the final solution,\n  we have that the first player will move for (startX + 1) - <b>X</b><sub>1</sub> steps,\n  and the second player will move for <b>X</b><sub>2</sub> - startX steps,\n  so the final solution equals -<b>X</b><sub>1</sub> + <b>X</b><sub>2</sub> + 1 steps.\n\n  However, if we preserved the players' relative positions,\n  the first player would move for startX - <b>X</b><sub>1</sub> steps,\n  and the second player would move for <b>X</b><sub>2</sub> - (startX + 1) steps,\n  so the final solution would equal -<b>X</b><sub>1</sub> + <b>X</b><sub>2</sub> - 1 steps,\n  which is lower than the above strategy.\n\n  For the other possible values of startX,\n  which are startX &lt; <b>X</b><sub>1</sub> or <b>X</b><sub>2</sub> &le; startX,\n  both permutations for the players result on the same amount of steps.\n\n  Therefore, we can reach the conclusion that, for any solution, by swapping two players'\n  order in order to preserve the players' initial relative positions, the total number of steps\n  remains the same or decreases.\n</p>\n<p>\n  Now imagine that we have an arbitrary optimal solution S\n  (not necessarily sorted on the players' X-coordinates).\n  If we perform a swap, as described\n  above, the solution does not get any worse, so it is still optimal. If we perform such a swap\n  enough times we will reach a point in which the players are in non-descending order of\n  their X coordinate,\n  which is what our greedy solution looks like, and the solution is still optimal.\n  Therefore, our greedy solution is optimal.\n</p>\n<p>\n  Regarding where to place the line,\n  let <i>solutionFirstX</i> be the <b>X</b> position of the first point on the line,\n  and let <i>solutionRow</i> be the <b>Y</b> position of the line.\n</p>\n\n<h3>\n  Test Set 1\n</h3>\n<p>\n  Given the constraints of the Test Set 1, we can iterate through all possible values for\n  <i>solutionFirstX</i> and <i>solutionRow</i> and check which combination results on\n  the minimum total number of steps.\n\n  The grid is unbounded, however we can bound the possible values for <i>solutionFirstX</i>\n  based on the initial <b>X</b> positions\n  of the players, because placing the line entirely to the left of the player with the\n  lowest <b>X</b> coordinate would make them all take an extra step to get there, which intuitively\n  leads to a worse solution. The same applies on the right side.\n\n  Let <i>minPlayerX</i> represent the <b>X</b> value of the player the most to the left,\n  and <i>maxPlayerX</i> represent the <b>X</b> value of the player the most to the right.\n\n  The number of possible values for <i>solutionFirstX</i>\n  range between <i>minPlayerX</i>-(<b>N</b>-1) and <i>maxPlayerX</i>.\n\n  Given similar definitions for <i>minPlayerY</i> and <i>maxPlayerY</i>,\n  the same logic applies for <i>solutionRow</i>,\n  which ranges between <i>minPlayerY</i> and <i>maxPlayerY</i>.\n</p>\n<p>\n  To calculate what is the total number of steps for the players to reach the line at\n  <i>candidateFirstX</i> and <i>candidateRow</i>,\n  iterate through all players in non-descending X-coordinate order and add their\n  <a href=\"https://xlinux.nist.gov/dads/HTML/manhattanDistance.html\">Manhattan distances</a>\n  to their relative locations on the line.\n  In other words, the total number of steps equals the sum of\n  |<b>X</b><sub>i</sub> - (candidateFirstX + (i - 1))| + |<b>Y</b><sub>i</sub> - candidateRow|,\n  for every player i in non-descending order of <b>X</b><sub>i</sub>.\n</p>\n<p>\n  The complexity of given solution is\n  O(<b>N</b> &times; log <b>N</b> +\n  (<i>maxPlayerX</i> - <i>minPlayerX</i> + <b>N</b>) &times;\n  (<i>maxPlayerY</i> - <i>minPlayerY</i> + 1) &times;\n  <b>N</b>).\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n<p>\n  Given that the limits for <b>N</b> and the players initial positions are much greater in\n  Test Set 2, the above mentioned solution would not be fast enough.\n</p>\n<p>\n  To divide our solution into smaller steps, we should notice that horizontal and vertical\n  movement can be solved independently.\n  In other words, the value <i>solutionRow</i> does not affect how many\n  horizontal steps the players will take,\n  as well as <i>solutionFirstX</i> does not affect how many\n  vertical steps the players will take.\n</p>\n<p>\n  Let us start by finding the value for <i>solutionRow</i>.\n  We can observe that most players will have to move vertically\n  to reach <i>solutionRow</i>, either by moving up or moving down (and some will not have\n  to move because they are initially on <i>solutionRow</i>).\n\n  We want the total number of steps to be as small as possible, so a good candidate is the\n  Y-position of the player that is positioned as the median among all players, regarding\n  their initial Y-position.\n</p>\n<p>\n  We can prove that this is optimal as follows:\n  first, let us start with the assumption that <b>N</b> is odd.\n  If we set <i>solutionRow</i> to be equal to <b>Y</b><sub>&lceil;<b>N</b>/2&rceil;</sub>\n  (the Y-position of the player in the middle),\n  then we can see that there will be at least &lfloor;<b>N</b>/2&rfloor; players\n  who are initially below or at the same line as the one in the middle,\n  and at least &lfloor;<b>N</b>/2&rfloor; players who are initially above or at\n  the same line as the one in the middle.\n\n  Let us call <i>totalStepsBelow</i> the total number of steps taken by the\n  &lfloor;<b>N</b>/2&rfloor; players who are initially below or at the same\n  line as the one in the middle,\n  and let us call <i>totalStepsAbove</i> the total number of steps taken by the\n  &lfloor;<b>N</b>/2&rfloor; players who are initially above or at the same\n  line as the one in the middle.\n\n  As is, the total number of steps equals <i>totalStepsBelow</i> + <i>totalStepsAbove</i>.\n\n  If we move <i>solutionRow</i> one position up,\n  then the player in the middle and all the players that were initially below\n  or at the same line as the one in the middle will have to take one extra step to reach\n  <i>solutionRow</i>,\n  and, in the best scenario, all the players that were initially above as the one in the\n  middle will have to take one less step to reach <i>solutionRow</i>.\n  Therefore, the total number of steps would equal\n  (<i>totalStepsBelow</i> + &lfloor;<b>N</b>/2&rfloor; + 1)\n  + (<i>totalStepsAbove</i> - &lfloor;<b>N</b>/2&rfloor;), which equals\n  <i>totalStepsBelow</i> + <i>totalStepsAbove</i> + 1, which is worse than our first guess.\n  The same applies for moving <i>solutionRow</i> one position down.\n\n  A similar logic can be used for when <b>N</b> is even.\n</p>\n<p>\n  Now we can use a similar approach for finding the value for <i>solutionFirstX</i>.\n  Taking into account the fact that we want\n  to preserve the players initial X-ordering, we can observe that for each player i, who has\n  <i>k<sub>i</sub></i> players to his left, the optimal value for <i>solutionFirstX</i> would be\n  <b>X</b><sub>i</sub> - <i>k<sub>i</sub></i>, because this way he would not have to move\n  horizontally at all.\n\n  Using the same logic described for finding <i>solutionRow</i>, we can find the optimal\n  value for <i>solutionFirstX</i> by picking the median of all players optimal values\n  for <i>solutionFirstX</i>.\n</p>\n<p>\n  Using these strategies we can find the value for <i>solutionRow</i> in\n  O(<b>N</b> &times; log <b>N</b>) time by sorting the players by their initial\n  Y-coordinate and picking the median value.\n  Similarly, we can find the value for <i>solutionFirstX</i> in\n  O(<b>N</b> &times; log <b>N</b>) time by sorting the players by their initial\n  X-coordinate and picking the median optimal value.\n  Finally we can calculate the total number of steps in O(<b>N</b>) time,\n  by using the strategy mentioned on Test Set 1 analysis. Therefore, the\n  time complexity of the solution is O(<b>N</b> &times; log <b>N</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U05Vxba2VDI2GHP-5kqh9qz9dALCF8yeLeu2wAK6ER2ZIdINfW-JONx97zRTsss1HpEM_OAVS8/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000043b027","statement":"<h3>Problem</h3>\n<p>\n  On a far away planet, rugby is played in the two dimensional Cartesian coordinate system without\n  bounds. The players can occupy integer grid points only and they can move to the neighboring\n  grid points in any of the four cardinal directions. Specifically, if a player is currently at the\n  point (X, Y), then they can move to either of the points (X+1, Y), (X-1, Y), (X, Y+1), or (X, Y-1)\n  in a single step.\n</p>\n<p>\n  After the game, <b>N</b> players are scattered throughout the coordinate system such\n  that any grid point is empty or occupied by one or more players. They want to gather for a\n  picture and form a perfect horizontal line of <b>N</b> grid points, one player per point, all\n  occupied points next to each other. Formally, the players have to move so as to occupy the grid\n  points (X, Y), (X+1, Y), (X+2, Y), ..., (X+<b>N</b>-1, Y) for some coordinates X and Y. What is\n  the minimum total number of steps the players should make to form a perfect line if they are\n  free to choose the position of the line in the coordinate system and the ordering of players\n  is not important?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases <b>T</b>. <b>T</b> test cases follow.\n  The first line of each test case gives the number of players <b>N</b>. The subsequent <b>N</b>\n  lines give the initial coordinates of the players. The i-th of these lines contains two integers\n  <b>X<sub>i</sub></b> and <b>Y<sub>i</sub></b>, which describe the initial position of\n  i-th player (1 &le; i &le; <b>N</b>).\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is the minimum total number of steps\n  that the players need to make in order to form a perfect horizontal line.\n</p>\n\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n1 &le; <b>T</b> &le; 100.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  1 &le; <b>N</b> &le; 10.<br/>\n  -500 &le; <b>X<sub>i</sub></b> &le; 500.<br/>\n  -500 &le; <b>Y<sub>i</sub></b> &le; 500.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n  1 &le; <b>N</b> &le; 10<sup>5</sup> for at most 10 cases.<br/>\n1 &le; <b>N</b> &le; 10<sup>4</sup> for the remaining cases.<br/>\n  -10<sup>9</sup> &le; <b>X<sub>i</sub></b> &le; 10<sup>9</sup>.<br/>\n  -10<sup>9</sup> &le; <b>Y<sub>i</sub></b> &le; 10<sup>9</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2KYwPdXoVyqWUnDfbf0OkzSJddHT_x2CtBmWsz5YAEgQYEMRcMl6TRMosVr7DGnndYPckrnA4ztE5uM26iQOiV2Bo7/rugby_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2\n1 1\n4 4\n3\n1 1\n1 2\n1 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1F30n86MGjsq5k-i6aWjstP-rWfanTKDX8tN-KB86Gt8pvrClNEoL9XkICSDFZvIXjUlyjOyvXgKWZ2VsNSD38guhyow/rugby_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 5\nCase #2: 4\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In the first test case, one of many optimal solutions is obtained by the second player moving\n  two steps to the left and three steps down to the point (2, 1).\n</p>\n<p>\n  In the second test case, a perfect line can be formed with a total of four steps if the first\n  player moves to the point (0, 2) and the third player moves to the point (2, 2).\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":12},{"type":1,"type__str":"VISIBLE","value":20}],"title":"Rugby","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\nTest Set 1\n</h3>\n<p>\n  Simply check all the numbers from <b>L</b> to <b>R</b>. Complexity = O((<b>R</b>-<b>L</b>) &times;\n  log<sub>10</sub>(<b>R</b>)).\n</p>\n<h3>\nTest Set 2\n</h3>\n<p>\n  We cannot follow the same approach as in Test Set 1 because the limits are too high. Let us\n  calculate the number of boring numbers having exactly X digits first.\n</p>\n<p>\n  <b>Lemma 1</b>: There are 5 choices for digits at odd positions: {1,3,5,7,9}, and 5 choices for\n  digits at even positions: {0,2,4,6,8}. Thus, the total number of boring numbers having exactly X\n  digits is 5<sup>X</sup>.\n</p>\n<p>\n  Let us calculate the number of boring numbers less than or equal to <b>R</b>. The general idea is\n  to split [1, <b>R</b>] into minimum number of intervals such that, all the numbers in an interval,\n</p>\n<ul>\n  <li>Are of the same length.</li>\n  <li>Have some(possibly none) prefix digits fixed.</li>\n  <li>Positions following the fixed prefix can take any values from [0,9].</li>\n</ul>\n<p> Let length<sub>interval</sub> be the length of numbers in an interval. The intervals can thus be\n  broken into two cases:\n</p>\n<ul>\n  <li>1. length<sub>interval</sub> &lt; length of R</li>\n  <li>2. length<sub>interval</sub> = length of R</li>\n</ul>\n<p>\n  For example, let <b>R</b> = 3422.\n  Number of boring numbers in [1, <b>R</b>] equals the number of boring numbers in [1,9] + [10, 99]\n  + [100, 999] + [1000, 1999] + [2000, 2999] + [3000, 3099] + [3100, 3199] + [3200, 3299] +\n  [3300, 3399] + [3400, 3409] + [3410, 3419] + [3420, 3422].\n</p>\n<p>\n  Case 1: This can be calculated using the fact that the total number of boring numbers having\n  exactly X digits is 5<sup>X</sup>.\n</p>\n<p>\n  Case 2: Suppose <b>R</b> = d<sub>1</sub>,d<sub>2</sub>,d<sub>3</sub>,...,d<sub>len</sub>.\n  Intervals can be calculated by fixing some prefix of digits such that all numbers in the interval\n  are less than <b>R</b>. For example, all numbers of the form, d<sub>1</sub>,...,\n  d<sub>i-1</sub>,a<sub>i</sub>,x<sub>i+1</sub>,x<sub>i+2</sub>,...,x<sub>len</sub>, where\n  a<sub>i</sub> &lt; d<sub>i</sub> and 0 &le; x<sub>i+1,...,len</sub> &le; 9.\n</p>\n<p>\n  If the fixed prefix does not obey the boring number's criteria, the number of boring number in the\n  interval is 0. If it does, then, similar to Lemma 1, the number of boring numbers equals\n  5<sup>length of suffix</sup>.\n</p>\n<p>\n  Final answer = (number of boring numbers less than or equal to <b>R</b>) - (number of boring\n  numbers less than or equal to <b>L</b> - 1).\n</p>\n<p>\n  Complexity =  O(log<sub>10</sub>(<b>R</b>)).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1uAZh0dp3XqiYi0CCNyvKTWIC3RU3FceMNp-Ga9ulAMWV7l158S41yxXcW51wTKUgXV1Wx_bo/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000043b0c6","statement":"<h3>Problem</h3>\n<p>\n  Ron read a book about boring numbers. According to the book, a positive number is called boring if all of the digits at even positions in the number are even and all of the digits at odd positions are odd. The digits are enumerated from\n  left to right starting from 1. For example, the number 1478 is boring as the odd positions include the digits {1, 7} which are odd and even positions include the digits {4, 8} which are even. <p></p>\n  Given two numbers <b>L</b> and <b>R</b>, Ron wants to count how many numbers in the range [<b>L</b>, <b>R</b>] (<b>L</b> and <b>R</b> inclusive) are boring.\n  Ron is unable to solve the problem, hence he needs your help.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each test case consists of a single line with two numbers <b>L</b> and <b>R</b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is the count of boring numbers.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  1 &le; <b>L</b> &le; <b>R</b> &le; 10<sup>3</sup>.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  1 &le; <b>L</b> &le; <b>R</b> &le; 10<sup>18</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2tjmQGYwYJp7ytZIhxcis9rfI9Tmmjd8aq2gDaa7vxdvax2C6h0BN5KXZpialFLOBy9mOWJKbvMMJNHlKVL_7J29Vrn9qgFL4MMcIV/boring_numbers_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n5 15\n120 125\n779 783\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3BA6vyQ0CtIc6ye4WoaVH7npnr8fL-59pZTPDfuACVUBHZ8wAXtbK9jkSoawvsJ2OizGPHTjWFBsFfNz24XuNrvv1oHKaey39dyaxNLA/boring_numbers_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 6\nCase #2: 3\nCase #3: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the numbers in the range are {5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15} out of which {5, 7, 9, 10, 12, 14} are boring, hence the answer is 6.\n</p>\n<p>\n  In Sample Case #2, the numbers in the range are {120, 121, 122, 123, 124, 125} out of which {121, 123, 125} are boring, hence the answer is 3.\n</p>\n<p>\n  In Sample Case #3, the numbers in the range are {779, 780, 781, 782, 783} out of which {781, 783} are boring, hence the answer is 2.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":1,"type__str":"VISIBLE","value":12}],"title":"Boring Numbers","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"000000000019ff49","type":1,"type__str":"SPECTATOR"},"title":"Round H 2020"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
