{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1657440000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"00000000008caea6","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Thank you for participating in Kick Start 2022 Round D!</p>\n<hr>\n<p><b>Cast</b></p>\n<p>Image Labeler: Written by Venkat and prepared by Bryan (Seunghyun) Jo.</p>\n<p>Maximum Gain: Written by Anuj Singh and prepared by Bryan (Seunghyun) Jo.</p>\n<p>Touchbar Typing: Written by Jiahui Feng and prepared by Jared Gillespie.</p>\n<p>Suspects and Witnesses: Written by Kai Hsien Boo and prepared by Adilet Zhaxybay.</p>\n<p>Solutions, other problem preparation, reviews and contest monitoring by\nAbhilash Tayade, Adilet Zhaxybay, Advitiya Brijesh, Alejandro Rivera, Anuj Singh, Bartosz Kostka, Bohdan Pryshchenko, Brijesh Panara, Bryan (Seunghyun) Jo, Chinmaya Kar, Chu-ling Ko, Chun-nien Chan, Cristhian Bonilha, Daksh Varshney, Duong Hoang, Ekanshi Agrawal, Jared Gillespie, Jiahui Feng, Jimmy Dang, Kai Hsien Boo, Kunal Verma, Kushagra Srivastava, Laksh Nachiappan, Liam Healy, Lucas Maciel, Luis Santiago Re, Madhurima Maji, Matt Kenison, Nga Tran, Nomaan Shaikh, Piyush, Pratibha Jagnere, Priyam Khandelwal, Rahul Goswami, Rakesh Theegala, Rayan Dasoriya, Ruiqing Xiang, Sachin Yadav, Sadia Atique, Samah Abu Shamma, Sanyam Garg, Saptarshi Mukherjee, Satish Karri, Shipra Choudhary, Shivam Dubey, Surya Upadrasta, Suryansh Gupta, Swapnil Gupta, Tarun Khullar, Teja Vardhan Reddy Dasannagari, Tushar Jape, Uday Patel, Umang Goel, Venkat, Vijay Krishan Pandey, Vinay Khilwani, Vishal Som, Yash Ranka, Zongxin Wu.</p>\n<p>Analysis authors:</p><ul>\n<li>Image Labeler: Matt Kenison</li>\n<li>Maximum Gain: Chun-nien Chan</li>\n<li>Touchbar Typing: Sadia Atique</li>\n<li>Suspects and Witnesses: Uday Patel</li>\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1657429200000,"tasks":[{"analysis":"<p>\n  Let each suspect be a node in a graph $$$G$$$. If $$$A$$$ is a witness to $$$B$$$, then form a\n  directed edge from $$$A$$$ to $$$B$$$.\n</p>\n<p>\n  It can be proven that a\n  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Strongly_connected_component\">\n    strongly connected component (SCC)\n  </a> $$$C$$$ in $$$G$$$ has the property\n  that either:\n  <ol>\n    <li>Everyone is innocent.</li>\n    <li>Or everyone is a cookie stealer.</li>\n  </ol>\n</p>\n<p>\n  As a proof, if an arbitrary node $$$u$$$ is innocent, then, for every edge $$$e$$$ that goes from\n  $$$u$$$ to $$$v$$$, node $$$v$$$ is also innocent. By induction, every node in $$$C$$$ is innocent.\n  Similarly, if an arbitrary node $$$u$$$ is a cookie stealer, then every node $$$v$$$, where\n  $$$(u,v)$$$ is an edge in $$$G$$$, is also a cookie stealer. By induction, every node in $$$C$$$\n  is a cookie stealer.\n</p>\n<p>\n  Given our graph $$$G$$$, we find all the SCC in $$$G$$$ and form a new graph $$$G'$$$ where:\n  <ol>\n    <li>Each SCC in $$$G$$$ corresponds to a node in $$$G'$$$.</li>\n    <li>Each node in $$$G'$$$ has a value $$$w$$$ which corresponds to the size of the SCC.</li>\n    <li>\n      If there exists an edge $$$(u,v)$$$ in $$$G$$$ and the two nodes do not share a SCC, there is\n      an edge $$$(u', v')$$$ in $$$G'$$$ where $$$u'$$$ is the corresponding node for $$$u$$$ and\n      $$$v'$$$ is the corresponding node for $$$v$$$.\n    </li>\n  </ol>\n</p>\n<p>\n  You can form $$$G'$$$ in $$$O(|V| + |E|)$$$ using\n  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm\">\n    Tarjan's strongly connected components algorithm\n  </a>.\n</p>\n<p>\n  If there are at least $$$\\mathbf{K}$$$ suspects that can reach node $$$u$$$ in $$$G$$$, then $$$u$$$ must be\n  innocent.\n</p>\n<p>\n  To prove this, we use contradiction. If $$$u$$$ is a cookie stealer, then every node that can\n  reach $$$u$$$ is a cookie stealer. Since there are at least $$$\\mathbf{K}$$$ of them, this implies at least\n  $$$\\mathbf{K}+1$$$ cookie stealers which is a contradiction.\n</p>\n<p>\n  Hence, if a node $$$u$$$ in $$$G$$$ belongs to a SCC ($$$C_1$$$) of size larger than $$$\\mathbf{K}$$$, that\n  node must be an innocent person. Therefore, we can iterate over all nodes and check this. However,\n  since a node can belong to a different component ($$$C_2$$$) from which $$$C_1$$$ is reachable,\n  then we have to check the reachability of each node to other nodes.\n</p>\n<p>\n  We can go through all the nodes of $$$G'$$$ in topologically sorted order. We can go through all\n  the neighbour nodes, i.e., nodes $$$v$$$ that have a directed edge from the current node $$$u$$$ to\n  $$$v$$$ and, since $$$u$$$ is reachable to $$$v$$$, we can add $$$u$$$ to the set that belongs to\n  $$$v$$$. Whenever a set reaches the size of $$$\\mathbf{K}+1$$$, we can stop adding items to it. We will\n  continue this process according to the topologically sorted order. Since we are going through all\n  nodes (topologically), checking every edge at most once at the worst case and performing at most\n  $$$\\mathbf{K}+1$$$ insertions into the set, the overall time complexity for the method would be\n  $$$O((\\mathbf{N} + \\mathbf{M})\\mathbf{K}\\log\\mathbf{K})$$$. Once all nodes have been visited, we can go through all the\n  nodes and count the number of nodes that have a reachability set of size is more than $$$\\mathbf{K}$$$ which\n  should take $$$O(\\mathbf{N})$$$.\n</p>\n<p>\n  Therefore, the overall time complexity of this solution would be $$$O((\\mathbf{N} + \\mathbf{M})\\mathbf{K}\\log\\mathbf{K})$$$.\n  In terms of space complexity, we would require $$$O(\\mathbf{N})$$$ for SCC construction and SCC graph\n  construction. The space complexity of finding reachability sets will be\n  $$$O(\\mathbf{NK})$$$ since for every node we can have at most $$$\\mathbf{K}+1$$$ nodes that we store.\n  Therefore, the overall space complexity should be $$$O(\\mathbf{NK})$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0f9OZHypYFHqYV9iYqU8pOBnl5ES-Nxg0vwMKlDKPFuA6X9KIrEsb9mwgfSb66VV1qP4n1qs0N/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000b76db9","statement":"<h3>Problem</h3>\n<p>\n  Ada baked some cookies for her birthday party where she invited $$$\\mathbf{N}$$$ guests,\n  labeled $$$1$$$ to $$$\\mathbf{N}$$$. When all the guests have arrived and the party is\n  about to start, something terrible has happened &mdash; someone stole the cookies!\n</p>\n\n<p>\n  Ada puts on her detective hat and starts questioning her guests. She gathered\n  $$$\\mathbf{M}$$$ witness statements of the form:\n  <em>Guest x: \"Guest y did not steal the cookies.\"</em>\n</p>\n\n<p>\n  Ada knows that, if a guest is innocent (did not steal a cookie), then all\n  their witness statements must be true. Note that Ada does not know whether any\n  statement made by a cookie stealer is correct.\n</p>\n\n<p>\n  Lastly, Ada has an informant who told her there can be at most $$$\\mathbf{K}$$$ cookie\n  stealers. With this information, can you help Ada find out the number of guests who can\n  be proved to be innocent?\n</p>\n\n<p>\n  Note that it is possible that no guest actually stole the cookies, and Ada\n  simply forgot how many cookies she baked.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow.<br />\n  The first line of each test case contains three integers $$$\\mathbf{N}$$$, $$$\\mathbf{M}$$$, and $$$\\mathbf{K}$$$:\n  the number of guests, the number of witness statements, and the maximum number\n  of cookie stealers, respectively.<br />\n  The next $$$\\mathbf{M}$$$ lines describe the witness statements. The $$$i$$$-th line\n  contains two integers $$$\\mathbf{A_i}$$$ and $$$\\mathbf{B_i}$$$, which means the witness statement\n  <em>Guest $$$\\mathbf{A_i}$$$: \"Guest $$$\\mathbf{B_i}$$$ did not steal the cookies.\"</em>\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the test case number\n  (starting from 1) and $$$y$$$ is the number of guests that can be proved to be\n  innocent.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 40 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n  $$$2 \\le \\mathbf{N} \\le 10^5$$$.<br />\n  $$$1 \\le \\mathbf{M} \\le 10^5$$$.<br />\n  $$$1 \\le \\mathbf{A_i} \\le \\mathbf{N}$$$, for all $$$i$$$.<br />\n  $$$1 \\le \\mathbf{B_i} \\le \\mathbf{N}$$$, for all $$$i$$$.<br />\n  $$$\\mathbf{A_i} \\neq \\mathbf{B_i}$$$, for all $$$i$$$.<br />\n  $$$(\\mathbf{A_i}, \\mathbf{B_i}) \\neq (\\mathbf{A_j}, \\mathbf{B_j})$$$, for all $$$i \\neq j$$$.<br />\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$\\mathbf{K} = 1$$$.<br />\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$1 \\le \\mathbf{K} \\le 20$$$.<br />\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0NaXYntJ6gUBNDLsRXesT66logSQ6dJ1Qu2_rP_ccR9CiLxH8x5sOZqYS4z2jrJL_HnQEnLOwOot7EYoZG00PLTLWcusL2gG0ZJLCYb9eTH27Ux4BN/suspects_and_witnesses_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3 2 1\n1 2\n2 3\n3 3 1\n1 2\n2 3\n3 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1PANOtdvPJ_t23dDn4LMaj6kKUxE_6C5ttJhOwre1f5TzunY9cG5ujJUoH_NfBmwHlTgiWpM_86dckO9blCDfSzhvhygjtyRR1wDNGTUaCjziJhL207Q/suspects_and_witnesses_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, there are $$$\\mathbf{N}=3$$$ guests, $$$\\mathbf{M}=2$$$ witness\n  statements and at most $$$\\mathbf{K}=1$$$ cookie stealer.<br />\n  The witness statements are:\n</p>\n<ul>\n  <li>Guest $$$1$$$: Guest $$$2$$$ did not steal the cookies.</li>\n  <li>Guest $$$2$$$: Guest $$$3$$$ did not steal the cookies.</li>\n</ul>\n<p>\n  Now we consider all possible arrangements on whether each guest is a cookie\n  stealer.\n</p>\n<table>\n  <thead>\n    <tr>\n      <th></th>\n      <th>Guest 1</th>\n      <th>Guest 2</th>\n      <th>Guest 3</th>\n      <th>Possible?</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>Scenario #1</td>\n      <td>Innocent</td>\n      <td>Innocent</td>\n      <td>Innocent</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <td>Scenario #2</td>\n      <td>CS</td>\n      <td>Innocent</td>\n      <td>Innocent</td>\n      <td>YES</td>\n    </tr>\n    <tr>\n      <td>Scenario #3</td>\n      <td>Innocent</td>\n      <td>CS</td>\n      <td>Innocent</td>\n      <td>NO</td>\n    </tr>\n    <tr>\n      <td>Scenario #4</td>\n      <td>Innocent</td>\n      <td>Innocent</td>\n      <td>CS</td>\n      <td>NO</td>\n    </tr>\n  </tbody>\n</table>\n<p>\n  These are all the scenarios where there is at most $$$\\mathbf{K}=1$$$ cookie\n  stealer (CS). Scenario #3 is impossible because Guest 1 is innocent and\n  states that Guest 2 is innocent, but Guest 2 turns out to be the cookie\n  stealer. Same reasoning for scenario #4.\n</p>\n<p>\n  For the remaining scenarios, we see that Guest 2 and 3 are always innocent,\n  so the answer is $$$2$$$.\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2YeacyKQKidJW3b94kVLI8_pKh9LxBqZGLYsrN_AS-tmhcvKXedyGC9olRGJYXQH4FofhTH7Fg8fM1BcMfEFBEvXJCKWMiyg532zghEDXVpdBDFJem/suspects_and_witnesses_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">2\n3 2 2\n1 2\n2 3\n3 3 2\n1 2\n2 3\n3 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2suWOwMAw5VvaX5wQJjjx-P04TPEFY14bYhW5NG-9OXLvOiLrdsnXpJ8yCoXgu-R3kqqP4gs68Q1RkeV0G313m8sfpVlSvfvK112m_vhF5WCZ39la9eA/suspects_and_witnesses_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 1\nCase #2: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":15},{"type":1,"type__str":"VISIBLE","value":27}],"title":"Suspects and Witnesses","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  First, we need to understand how to obtain the median of a set. A\n  <a href=\"https://en.wikipedia.org/wiki/Median\" target=\"_blank\"\n    >median is the value separating the higher and lower halves</a\n  >\n  of a set, so a set of length $$$k$$$ will have its median at element\n  $$$k/2$$$. For sets with an even number of elements, the median is the average\n  of the two middle elements.\n</p>\n\n<p>\n  A brute force approach to this problem is described in the example case, where\n  we try each possible combination of assigning regions to categories, and\n  taking the combination with the largest sum of medians.\n</p>\n<p>\n  Time complexity: $$$O(2^\\mathbf{M})$$$ since we need to test each combination of\n  either assigning a region or not to each category. We can reduce the time\n  complexity even further through dynamic programming to avoid recalculating\n  assignmented categories, but there is an even better approach.\n</p>\n<p>\n  A more efficient approach is to maximize the sum by ensuring that the largest\n  regions each form their separate category. One way to do this is with a greedy\n  approach, where we remove the single largest region (say $$$\\mathbf{A_k}$$$) and assign it to a\n  new category. Then the median of this category is equal to the size of that region.\n  Note that this is the largest median that we can obtain, because all\n  other regions $$$\\mathbf{A_1},\\cdots,\\mathbf{A_N} \\le \\mathbf{A_k}$$$. If we continue this process\n  for the next $$$\\mathbf{N}-1$$$ categories, we will have the largest possible medians\n  for all $$$\\mathbf{N}$$$ regions. The largest regions can be identified by sorting $$$\\mathbf{A}$$$ in\n  descending order.\n</p>\n<p>\n  The problem is that we may run out of categories. Precisely, we still have $$$\\mathbf{N}-\\mathbf{M}$$$\n  regions that we need to assign to some categories. Since we know that for\n  each of these remaining regions that they are smaller or equal to the ones already assigned\n  to categories, then assigning a new region to an existing category may reduce the median\n  of that category. We can decide to decrease the median of only one category &mdash;\n  the one that already has the smallest median. Our result (the sum of medians)\n  is then the sum of the largest $$$\\mathbf{M}-1$$$ regions plus the median of all\n  other regions.\n</p>\n<p>\n  Time complexity: $$$O(\\mathbf{N} \\log \\mathbf{N}+\\mathbf{M})$$$ since we need to sort $$$\\mathbf{N}$$$ regions\n  and sum up the top $$$\\mathbf{M}-1$$$. Calculating the median of the final category\n  is only $$$O(1)$$$ because the regions are already in sorted order. We can even\n  solve this problem in linear time, but it was not required for this problem.\n  We only need to find top $$$\\mathbf{M}$$$-1 regions (and we can do it in $$$O(\\mathbf{N} + \\mathbf{M})$$$ time),\n  and then we can find the median of the remaining regions\n  <a href=\"https://en.wikipedia.org/wiki/Median_of_medians\" target=\"_blank\">in linear time</a>\n  as well.\n</p>\n<h4>Proof</h4>\n<p>\n  We can formally prove that the greedy algorithm produces an optimal result.\n</p>\n<p>\n  We will prove that given any two arbitrary categories, the sum of medians does not decrease if we\n  reassign the regions within these categories so that\n  the largest region forms one category, and all the other regions forms the other category.\n  Let $$$\\{O_1, O_2\\}$$$ denote these two arbitrary categories.\n  Let $$$S$$$ denotes the number of participants in the region with the largest number of participants\n  within these categories and $$$T = O_1 \\cup O_2 \\setminus \\{S\\}$$$\n  ($$${S}$$$ and $$$T$$$ are two categories produced by the greedy algorithm).\n  We want to show that $$$median(O_1) + median(O_2) \\leq S + median(T)$$$. Without loss of generality,\n  let us assume that $$$median(O_1) \\leq median(O_2)$$$. In the pictures below, let us assume that the regions\n  within a category are sorted in the non-decreasing order.\n</p>\n<center>\n<image src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3MU2N5Waw9OIJpv25CNSGFOEF_7kQX3beoBpdMVSnFYOZDDpwf7JJ5inRdgDUEn39lpupNR6infWtZPnNE/proof1.png\">\n</center>\n<p>\n  In $$$T$$$, there are at least $$$\\left\\lceil\\frac{|O_1|}{2}\\right\\rceil\n  + \\left\\lceil\\frac{|O_2|}{2}\\right\\rceil - 1$$$ regions larger than or equal to\n  $$$median(O_1)$$$ &mdash; the regions larger than or equal to the medians of $$$O_1$$$ and $$$O_2$$$,\n  but we need to remove $$$S$$$ (hence $$$-1$$$).\n\n  Now we have to consider two cases:\n  <ol>\n    <li> Either in $$$T$$$ there are at least $$$\\left\\lceil\\frac{|O_1|}{2}\\right\\rceil\n      + \\left\\lceil\\frac{|O_2|}{2}\\right\\rceil$$$ regions larger than or equal to $$$median(O_1)$$$,\n      which implies $$$median(T) \\geq median(O_1)$$$, so we can say that\n      $$$median(O_1) + median(O_2) \\leq S + median(T)$$$, what we wanted to prove.</li>\n      <li>There are exactly $$$\\left\\lceil\\frac{|O_1|}{2}\\right\\rceil + \\left\\lceil\\frac{|O_2|}{2}\\right\\rceil - 1$$$\n        regions larger than or equal to $$$median(O_1)$$$. Now we will once\n        again consider various cases depending on the parity of $$$|O_1|$$$ and $$$|O_2|$$$:\n        <ol>\n          <li>$$$|O_1|$$$ and $$$|O_2|$$$ are even. Let us denote $$$L_1$$$ and $$$R_1$$$ as two \"middle\" regions of $$$O_1$$$ and\n            $$$L_2$$$ and $$$R_2$$$ as two \"middle\" regions of $$$O_2$$$.\n\n            <center>\n              <image src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2ylfOuwzccUBNENjUV8hqrFvcmEUTljiGjrw8XquEYeOoT5xOFL_4MJdvEG3l0__StbQ3QcP2z4HRpB4BB/proof2.png\">\n              </center>\n\n            Then we can use the similar argument as before and say that in $$$T$$$\n            there are at least $$$\\left\\lceil\\frac{|O_1|}{2}\\right\\rceil + \\left\\lceil\\frac{|O_2|}{2}\\right\\rceil$$$ regions larger than or equal to $$$\\max(L_1, L_2)$$$,\n            so $$$median(T) \\geq \\min(\\max(L_1, L_2), \\min(R_1, R_2))$$$, so $$$S + median(T) \\geq \\frac{L_1+R_1}{2} + \\frac{L_2+R_2}{2} = median(O_1) + median(O_2)$$$,\n            since $$$S \\geq \\max(R_1, R_2)$$$.\n            </li>\n            <li>$$$|O_1|$$$ and $$$|O_2|$$$ are odd. Then we can see that there are  $$$\\left\\lceil\\frac{|O_1|}{2}\\right\\rceil + \\left\\lceil\\frac{|O_2|}{2}\\right\\rceil$$$\n              regions with more participants than $$$median(O_1)$$$, which is the case that we already described above.\n            </li>\n            <li>One of $$$|O_1|$$$ and $$$|O_2|$$$ is even and the other one is odd.\n              The argument here is similar to the arguments above, so we will leave it as an exercise to a reader.</li>\n        </ol>\n      </li>\n  </ol>\n</p>\n\n\n<p style=\"border-style: groove; border: 2px solid #34a853; padding: 5px;\">\n  If you would like to explore more tasks like Image Label Verification on the\n  Crowdsource app and directly train Google’s artificial intelligence systems to\n  make Google products work\n  <a href=\"https://www.youtube.com/watch?v=oLTNtvIHJ7M\" target=\"_blank\">equally well for\n  <i>everyone, everywhere</i></a>, you can\n  <a href=\"http://goo.gle/cs-kick-start-2022\" target=\"_blank\">download it here</a>.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0KNk-LLRPlAXXU7PYrrzkoBEWDYJXq7HU09m_S2A4u_byMxDqW1mnL43lPXF0AWJDTaSs-gTSP/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n","id":"0000000000b76e11","statement":"<h3>Problem</h3>\n<p>\n  Crowdsource is organizing a campaign for\n  <a\n    href=\"https://goo.gle/crowdsource-ks-imagelabeler\"\n    target=\"_blank\"\n  >\n    Image Labeler task\n  </a>\n  with participants across $$$\\mathbf{N}$$$ regions. The number of participants from each of\n  these regions are represented by $$$\\mathbf{A_1}, \\mathbf{A_2}, \\dots, \\mathbf{A_N}$$$.\n</p>\n\n<p>\n  In the Image Labeler task, there are $$$\\mathbf{M}$$$ categories. Crowdsource assigns\n  participants to these categories in such a way that all participants from a\n  region are assigned to the same category, and each category has\n  <i>at least</i> one region assigned to it. The success metric of the campaign\n  is measured by the sum of\n  <a href=\"https://en.wikipedia.org/wiki/Median\" target=\"_blank\"> medians </a>\n  of the number of participants in each category. (Let us remind you here that the median\n  of a list of integers is the \"middle\" number when those numbers are sorted from smallest\n  to largest. When the number of integers in a list is even, we have two \"middle\" numbers,\n  therefore the median is defined as the arithmetic mean (average) of the two middle values.)\n</p>\n<p>\n  For example, imagine that we have $$$\\mathbf{N}=3$$$ regions with $$$\\mathbf{A_1}=5$$$, $$$\\mathbf{A_2}=8$$$, and $$$\\mathbf{A_3}=9$$$\n  participants respectively and we want to assign them to $$$\\mathbf{M}=2$$$ categories.\n  If we assign regions $$$2$$$ and $$$3$$$ to category $$$1$$$ and region $$$1$$$ to category $$$2$$$, then\n  the success metric would be median of $$$\\{A_2=8, A_3=9\\}\\ + $$$ median of $$$\\{A_1=5\\} =\n  \\frac{8 + 9}{2} + 5 = 8.5 + 5 = 13.5$$$. We can also assign regions $$$1$$$ and $$$2$$$ to category $$$1$$$ and\n  region $$$3$$$ to category $$$2$$$. Then the success metric would be equal to the sum of the median of $$$\\{A_1=5, A_2=8\\}$$$\n  and the median of $$$\\{A_3=9\\}$$$, which is $$$\\frac{5+8}{2} + 9 = 6.5 + 9 = 15.5$$$.\n</p>\n\n<p>\n  Your task is to find the maximum possible value of the success metric that can be\n  obtained by assigning participants in regions to the categories.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow.<br />\n  The first line of each test case contains two integers $$$\\mathbf{N}$$$ and $$$\\mathbf{M}$$$: the number\n  of regions, and the number of categories respectively.<br />\n  The next line contains $$$\\mathbf{N}$$$ integers $$$\\mathbf{A_1}, \\mathbf{A_2}, \\dots, \\mathbf{A_N}$$$.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the test case number\n  (starting from 1) and $$$y$$$ is the maximum possible value of the success\n  metric.\n  <p><code>$$$y$$$</code> will be considered correct if it is within an\nabsolute or relative error of $$$10^{-6}$$$ of the correct answer. See the\n<a href=\"/kickstart/faq#competing\">FAQ</a>\nfor an explanation of what that means, and what formats of real numbers\nwe accept.</p>\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n  $$$1 \\le \\mathbf{N} \\le 10^4$$$.<br />\n  $$$1 \\le \\mathbf{M} \\le 10^4$$$.<br />\n  $$$1 \\le \\mathbf{M} \\le \\mathbf{N}$$$.<br />\n  $$$1 \\le \\mathbf{A_i} \\le 10^5$$$, for all $$$i$$$.<br />\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n $$$0 \\le \\mathbf{N} - \\mathbf{M} \\le 1$$$. </p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n No additional constraints. </p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1fm6StnZo_ke9qvryklZK_32YQGGnIwzBE4k7OFVkknsNl_idJWUI0JyAdOOYEd044_13oldu-gWVwMTOq3ekskPSi_BRnxVgmyPAR/image_labeler_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">1\n3 2\n11 24 10\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3KR-fpy5chk-ppzDzPFjI44Q5vxhazxKX-GNy5yGFMKf-7rAv36AZahf_qlgMFNnZNZhrk2UYfORg0EqpYyP_BKAJFnv1baltoqOqmow/image_labeler_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 34.5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n    In this test, we can assign participants in regions to categories in\n    $$$6$$$ possible ways:\n    <ul>\n      <li>Assign $$$\\{11, 24\\}$$$ to category $$$1$$$ and $$$\\{10\\}$$$ to category\n      $$$2$$$, in which case the success metric is $$$\\frac{11 + 24}{2} + 10 =\n      17.5 + 10 = 27.5$$$.</li>\n      <li>Assign $$$\\{24, 10\\}$$$ to category $$$1$$$ and $$$\\{11\\}$$$ to category\n      $$$2$$$, in which case the success metric is $$$\\frac{24 + 10}{2} + 11 =\n      17 + 11 = 28$$$.</li>\n      <li>Assign $$$\\{11, 10\\}$$$ to category $$$1$$$ and $$$\\{24\\}$$$ to category\n      $$$2$$$, in which case the success metric is $$$\\frac{11 + 10}{2} + 24 =\n      10.5 + 24 = 34.5$$$.</li>\n      <li>$$$3$$$ other ways, where assignments to category $$$1$$$ and $$$2$$$ are\n      swapped, which does not alter the value of success metric.</li> <br />\n    </ul>\n    So, the maximum possible value of the success metric is $$$34.5$$$.\n  </p>\n</sampleio>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3oudYt7yJ3Ah0MridB3LPjk8Zpbww89uXbBBpsDv7ctGdIL-oEG16aoXfWmukmhqtKbJyHP9tjJFMe7f-6RhLaqiXmuR2ENcRvnFz1/image_labeler_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">1\n5 1\n6 2 5 1 9\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1Bm10bg1e3tB5Duu7PDimHp2NGx-ShADcuE4z0xTTBshy_3ea8sklHvZkyUJK6lb4NKeEsmZFVZMPYEUSVvTXfgDmIpBStuRgUztw_Tg/image_labeler_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 5.0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    In this test, there is only one category, so participants in all\n    regions will be assigned to it. The only possible value of the success\n    metric is the median of $$$\\{6, 2, 5, 1, 9\\}$$$ which is $$$5$$$.\n  </p>\n</sampleio>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":4},{"type":1,"type__str":"VISIBLE","value":6}],"title":"Image Labeler","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h4>\n  Test Set 1\n</h4>\n<p>\n  When there is no duplicate key in the keyboard, there is only one way to type any given string. It\n  would suffice to simulate typing the given string and count the cost, for test set 1.\n</p>\n<p>\n  We can build a mapping from each character in the keyboard to its position in the keyboard. Let us\n  denote the position of $$$i$$$-th character of $$$\\mathbf{S}$$$ on the keyboard as $$$p_i$$$.\n</p>\n<p>\n  Let us denote the current position of the finger on the keyboard with $$$y$$$.\n  We should start with the finger on the keyboard on $$$p_1$$$ position.\n</p>\n<p>\n  Then in each step, we need to add $$$\\lvert y - p_i \\lvert$$$ to the answer, and update the\n  current keyboard position to $$$p_i$$$.\n<p>\n  The time complexity of creating the mapping from each character to a position on the keyboard is\n  $$$O(\\mathbf{M})$$$ . With help of the mapping previously mentioned, the time\n  complexity of calculating the answer is $$$O(\\mathbf{N})$$$. The total time complexity of this approach is\n  $$$O(\\mathbf{N}+\\mathbf{M})$$$, which is sufficient for test set 1.\n</p>\n<h4>\n  Test Set 2\n</h4>\n<p>\n  In test set 2, keys on the keyboard are not unique. At each step of typing, there might be multiple\n  possible positions on the keyboards to move to next, and making optimal choice at every step will\n  lead to the minimum number of moves.\n</p>\n  Let us denote the set of positions of $$$i$$$-th character of $$$\\mathbf{S}$$$ on the keyboard as $$$P_i$$$.\n<p>\n  We can consider a dynamic programming approach, where for each position $$$x$$$ on the given string,\n  and each position $$$y$$$ on the keyboard, we need to find the optimal solution based on\n  possible options for that instance. Then we have the recurrent function $$$F$$$,<br>\n  &emsp;$$$F(x, y) = min(F(x-1, j) + \\lvert(y-j)\\lvert), j \\in P_{x-1}$$$.\n</p>\n<p>\n  This approach gives us a time complexity of $$$O(\\mathbf{N}\\times\\mathbf{M}\\times\\mathbf{M})$$$, as there are total $$$\\mathbf{N}\\times\\mathbf{M}$$$\n  possible states, and on each state, there are at most $$$\\mathbf{M}$$$ options in the worst case. This is\n  sufficient for test set 2.\n</p>\n<h4>\n  Test Set 3\n</h4>\n<p>\n  For test set 3, $$$O(\\mathbf{N}\\times\\mathbf{M}\\times\\mathbf{M})$$$ is not sufficient. We need to make the choices more\n  carefully to reduce the complexity. Try to think a little on how to optimise this step before\n  looking into the solution :)\n</p>\n<p>\n  One interesting observation is that every time when there are multiple possible keyboard positions\n  to jump to type the next character, it is always optimal to pick either the one with the minimal\n  distance on the left direction, or the one with the minimal distance on the right direction.\n  Let us consider the current position on the keyboard is $$$x$$$, and\n  there are multiple possibilities on the right, denoted by $$$y_1$$$, $$$y_2$$$, $$$y_3$$$ and so on,\n  sorted by in the order of\n  increasing distance from $$$x$$$. Now, jumping to $$$y_2$$$ or $$$y_3$$$ cannot be a better choice than\n  jumping to $$$y_1$$$. Let us consider two cases,\n</p>\n<ol>\n  <li>The next optimal move lies in the opposite direction, aka left. Then it is better to jump\n  to the closest option $$$y_1$$$, to minimise the total distance.\n  <img\n  src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3abRr1w8TrbfmcSupqXaBlMxq79YHvyuuJ2Eq8cPUE-HHB8T5U8wsOHOzEDZ7j-1_eedFOJx34WW4-l-NrP3gFNsHoe7Fn8KVKfFlUPHppmVYGiQ/optimal_position_on_other_side.png\"\n  width=\"100%\"\n  alt=\"Optimal position on opposite side.\"\n/></li>\n  <li>The next optimal move lies in the same direction, aka right. Then jumping to $$$y_1$$$ is at\n  least not worse than jumping to $$$y_2$$$, $$$y_3$$$. It can even be a better option,\n  if the next optimal position lies between $$$y_1$$$ and $$$y_2$$$. <img\n  src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U03h68U-4akZ6tWzsZCK8sIBx1ZXQ18IeOQ-0qsLIzwDTDBiOR_4HZTeICn9IziFRY4eCGqb2cmGUlM_zFVxOlfxQ8yqHhoiIDS5Ku1BCVKecAK/optimal_position_on_same_side.png\"\n  width=\"100%\"\n  alt=\"Optimal position on same side.\"\n/></li>\n</ol>\n<p>\n  The same reasoning is\n  applicable in case of making a move to the left. Then it basically boils down to making a choice\n  of whether to move right, or left on the keyboard from any current position. The recurrent function\n  then changes to $$$F$$$,<br>\n  &emsp;$$$F(x, y) = min((F(x-1, j_{left}) + \\lvert y-j_{left} \\lvert), (F(x-1, j_{right}) + \\lvert y-j_{right} \\lvert))$$$\n  where $$${j_{left}, j_{right}} \\in P_{x-1}$$$ and $$$j_{left}$$$ and $$$j_{right}$$$ are the closest two positions from $$$x$$$\n  on the left and the right respectively.\n</p>\n<p>\n  This makes the number\n  of choices $$$O(1)$$$, giving us a total time complexity of $$$O(\\mathbf{N}\\times\\mathbf{M})$$$, which is sufficient\n  for test set 3.\n</p>\n\n<p style=\"border-style: groove; border: 2px solid #34a853; padding: 5px;\">\n  If you would like to explore more tasks like Glide Type on the\n  Crowdsource app and directly train Google’s artificial intelligence systems to\n  make Google products work\n  <a href=\"https://www.youtube.com/watch?v=oLTNtvIHJ7M\"\n  target=\"_blank\">equally well for <i>everyone, everywhere</i></a\n  >, you can <a href=\"http://goo.gle/cs-kick-start-2022\" target=\"_blank\">download it here</a>.\n  </p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U24lv8qQ_s7NaRrQjEck5TQf-7u4LMOmx4kqdNI2yiGmo2-u3PbfxiDxw7ls1ll0WpNRlpXxaPv/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000b76f44","statement":"<h3>Problem</h3>\n<p>\n  Glide Typing task in  <a\n    href=\"https://goo.gle/cs-kick-start-2022\" target=\"_blank\"\n  >\n    Crowdsource app\n  </a> uses a new Google keyboard to type a word by sliding\n  a finger across keys without lifting the finger, as shown in the animation\n  below.\n</p>\n\n<img\n  src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U28qe0DoPuqhGLNJfbMuMJP80UL4otn16hru3-Dd3IgkN97vbey_BiGcZObJ7-0zn2gp5BQ4GSqDxU/demo.gif\"\n  alt=\"Demostration of Glide Typing on a mobile device.\"\n/>\n\n<p>\n  To make the Glide Typing task more challenging, instead of a normal keyboard,\n  we have a special linear keyboard $$$\\mathbf{K}$$$ that has all the keys in one row.\n</p>\n\n<p>\n  Imagine that you want to type a word $$$\\mathbf{S}$$$ that is $$$\\mathbf{N}$$$ characters long. The\n  linear keyboard $$$\\mathbf{K}$$$ has $$$\\mathbf{M}$$$ keys. It is guaranteed that the keys cover all characters in $$$\\mathbf{S}$$$. However, some\n  of the keys may be duplicates. In other words, for each character in $$$\\mathbf{S}$$$,\n  there is one or more keys in $$$\\mathbf{K}$$$ mapped to the character. Note that, all characters and keys are\n  represented as integers.\n</p>\n\n<p>\n  You may start with your finger on any key. It takes $$$1$$$ second to move your finger from a key to an adjacent key. Due\n  to Glide Typing, there is no <i>pressing</i> a key. If the finger is currently at the key $$$i$$$ which\n  has character $$$\\mathbf{K_i}$$$, and we want to type the character $$$\\mathbf{K_j}$$$ at index $$$j$$$, we will glide the finger from the key $$$i$$$\n  to the key $$$j$$$, which takes $$$\\lvert j-i \\rvert$$$ seconds.\n  If your finger is at key $$$x$$$, you can type character $$$\\mathbf{K_x}$$$ any number of times\n  instantly. You need to type string $$$\\mathbf{S}$$$ character by character. Formally, you need to type\n  $$$\\mathbf{S_i}$$$ before $$$\\mathbf{S_{i+1}}$$$ for each $$$ 1 \\le i \\le \\mathbf{N}-1 $$$.\n</p>\n\n<p>\n    For example, suppose the word $$$\\mathbf{S}$$$ has characters: <code>1</code>, <code>2</code>, <code>2</code>,\n    <code>3</code>, <code>4</code>. You can start by keeping your finger\n    on key with character <code>1</code> on the keyboard which is at index $$$i$$$. Then you glide\n    your finger to key which has character <code>2</code>\n    which is at index $$$j$$$. It would take $$$\\lvert j-i \\rvert$$$ seconds. In order\n    to type character <code>2</code> two times in string $$$\\mathbf{S}$$$, you can do that in no additional time\n    as $$$\\lvert j-j \\rvert = 0$$$ seconds. Then you can continue to glide your finger to type the other characters\n    in the word $$$\\mathbf{S}$$$ sequentially.\n  </p>\n\n<p>\n  Can you calculate the minimal time needed to type the word?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow.\n</p>\n<p>\n  The first line of each test case contains one integer $$$\\mathbf{N}$$$: the length of the\n  word $$$\\mathbf{S}$$$.<br />\n  The second line of each test case contains $$$\\mathbf{N}$$$ integers: each $$$\\mathbf{S_i}$$$ is the\n  character at the $$$i$$$-th index.<br />\n  The third line of each test case contains one integer $$$\\mathbf{M}$$$: the length of the\n  keyboard $$$\\mathbf{K}$$$.<br />\n  The fourth line of each test case contains $$$\\mathbf{M}$$$ integers: each $$$\\mathbf{K_i}$$$ is the\n character at the $$$i$$$-th key.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing the minimal time needed to type the\n  word.\n  <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the test case number\n  (starting from 1) and $$$y$$$ is the minimal time needed to type $$$\\mathbf{S}$$$ on the keyboard\n  $$$\\mathbf{K}$$$.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n  All characters in $$$\\mathbf{S}$$$ appears at least once in $$$\\mathbf{K}$$$.<br />\n  $$$1 \\le \\mathbf{K_i} \\le 2500$$$.<br />\n  $$$1 \\le \\mathbf{S_i} \\le 2500$$$.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  $$$1 \\le \\mathbf{N} \\le 100$$$.<br />\n  $$$1 \\le \\mathbf{M} \\le 100$$$.<br />\n  It is guaranteed that there are no duplicated keys in keyboard $$$\\mathbf{K}$$$.\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  $$$1 \\le \\mathbf{N} \\le 100$$$.<br />\n  $$$1 \\le \\mathbf{M} \\le 100$$$.<br />\n</p>\n\n<h4>Test Set 3</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n  $$$1 \\le \\mathbf{N} \\le 2500$$$.<br />\n  $$$1 \\le \\mathbf{M} \\le 2500$$$.<br />\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1g6pWf-9pw_7rlcDuAlbG9rU4fa9mpAnKyxc8s0mQOPAWz4c5bhgSGBRWJIYJ065KZp_LE8fpxsJ5m9COMYMtMorAry7W4ccnYrxov8iw/touchbar_typing_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5\n1 2 3 2 1\n3\n1 2 3\n3\n1 1 1\n2\n2 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2KJ-iBi2iRXJjpTssD90rXhvjQqsEgF3te8wJVwOUVZMRZRsiqfU-RLka-6Fa5nH-AhbcuJ2PRdeXbGo2h8zVo4ZW77EAJcVQL2Ev4h5gH/touchbar_typing_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4\nCase #2: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    In Sample Case #1, we can take the following steps to type string $$$\\mathbf{S}$$$ in minimum time.\n    <ul>\n      <li>\n        Start by keeping your finger on key $$$\\mathbf{K_1}$$$ which has character <code>1</code>. We have now\n        typed the first character of the string $$$\\mathbf{S}$$$.\n      </li>\n      <li>\n        In order to type the second character <code>2</code> of the string $$$\\mathbf{S}$$$, glide your finger to key $$$\\mathbf{K_2}$$$.\n        it takes $$$\\lvert 2 - 1 \\rvert = 1$$$ additional second to glide the finger from index $$$1$$$ to index $$$2$$$.\n      </li>\n      <li>\n        In order to type the third character <code>3</code> of the string $$$\\mathbf{S}$$$, glide your finger to key $$$\\mathbf{K_3}$$$.\n        it takes $$$\\lvert 3 - 2 \\rvert = 1$$$ additional second to glide the finger from index $$$2$$$ to index $$$3$$$.\n      </li>\n      <li>\n        In order to type the fourth character <code>2</code> of the string $$$\\mathbf{S}$$$, glide your finger to key $$$\\mathbf{K_2}$$$.\n        it takes $$$\\lvert 2 - 3 \\rvert = 1$$$ additional second to glide the finger from index $$$3$$$ to index $$$2$$$.\n      </li>\n      <li>\n        In order to type the fifth character <code>1</code> of the string $$$\\mathbf{S}$$$, glide your finger to key $$$\\mathbf{K_1}$$$.\n        it takes $$$\\lvert 1 - 2 \\rvert = 1$$$ additional second to glide the finger from index $$$2$$$ to index $$$1$$$.\n      </li>\n      <li>\n        We have typed all characters of the string $$$\\mathbf{S}$$$ in a total of $$$4$$$ seconds.\n      </li>\n    </ul>\n  </p>\n\n  <p>\n    In Sample Case #2, we can take the following steps to type string $$$\\mathbf{S}$$$ in minimum time.\n    <ul>\n      <li>\n        Start by keeping your finger on key $$$\\mathbf{K_2}$$$ which has character <code>1</code>. We have now\n        typed the first character of the string $$$\\mathbf{S}$$$.\n      </li>\n      <li>\n        As our finger is on key $$$\\mathbf{K_2}$$$, we can type the character <code>1</code> any number of times, without\n        any additional time. Hence, we can type the second and third characters of the string $$$\\mathbf{S}$$$.\n      </li>\n      <li>\n        We have typed all characters of the string $$$\\mathbf{S}$$$ in a total of $$$0$$$ seconds.\n      </li>\n    </ul>\n  </p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U27fT9VOZT9Wy18MadcqPhMO3l_Ff37bpYwi4ytWdA74s3tdDqtqNdr6fC2fQKkhrd49hYbUQC1EtYRSiM6STBikgB7ZJYUxqeQfI4pP24/touchbar_typing_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">2\n4\n2 1 4 1\n8\n4 1 5 2 1 3 5 4\n3\n1 2 3\n8\n2 3 5 1 4 6 7 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U16U7zXig2JofeNhNqZ2-IZLKNcJvc0Fp-GjRXBTrhdn9doEUBGbOqRm99HZ_B_0uuv_HV1BxO8EJCJuSSrx8UTv-iHuNIpy3paoWbKnR_f/touchbar_typing_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 4\nCase #2: 4\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    In Additional Sample Case #1, we can take the following steps to type string $$$\\mathbf{S}$$$ in minimum time.\n    <ul>\n      <li>\n        Start by keeping your finger on key $$$\\mathbf{K_4}$$$ which has character <code>2</code>. We have now\n        typed the first character of the string $$$\\mathbf{S}$$$.\n      </li>\n      <li>\n        In order to type the second character <code>1</code> of the string $$$\\mathbf{S}$$$, glide your finger to key $$$\\mathbf{K_2}$$$.\n        it takes $$$\\lvert 2 - 4 \\rvert = 2$$$ additional seconds to glide the finger from index $$$4$$$ to index $$$2$$$.\n      </li>\n      <li>\n        In order to type the third character <code>4</code> of the string $$$\\mathbf{S}$$$, glide your finger to key $$$\\mathbf{K_1}$$$.\n        it takes $$$\\lvert 1 - 2 \\rvert = 1$$$ additional second to glide the finger from index $$$2$$$ to index $$$1$$$.\n      </li>\n      <li>\n        In order to type the fourth character <code>1</code> of the string $$$\\mathbf{S}$$$, glide your finger to key $$$\\mathbf{K_2}$$$.\n        it takes $$$\\lvert 2 - 1 \\rvert = 1$$$ additional second to glide the finger from index $$$1$$$ to index $$$2$$$.\n      </li>\n      <li>\n        We have typed all characters of the string $$$\\mathbf{S}$$$ in a total of $$$4$$$ seconds.\n      </li>\n    </ul>\n  </p>\n\n  <p>\n    In Additional Sample Case #2, we can take the following steps to type string $$$\\mathbf{S}$$$ in minimum time.\n    <ul>\n      <li>\n        Start by keeping your finger on key $$$\\mathbf{K_4}$$$ which has character <code>1</code>. We have now\n        typed the first character of the string $$$\\mathbf{S}$$$.\n      </li>\n      <li>\n        In order to type the second character <code>2</code> of the string $$$\\mathbf{S}$$$, glide your finger to key $$$\\mathbf{K_1}$$$.\n        it takes $$$\\lvert 1 - 4 \\rvert = 3$$$ additional seconds to glide the finger from index $$$4$$$ to index $$$1$$$.\n      </li>\n      <li>\n        In order to type the third character <code>3</code> of the string $$$\\mathbf{S}$$$, glide your finger to key $$$\\mathbf{K_2}$$$.\n        it takes $$$\\lvert 2 - 1 \\rvert = 1$$$ additional second to glide the finger from index $$$1$$$ to index $$$2$$$.\n      </li>\n      <li>\n        We have typed all characters of the string $$$\\mathbf{S}$$$ in a total of $$$4$$$ seconds.\n      </li>\n    </ul>\n  </p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":8},{"type":1,"type__str":"VISIBLE","value":12},{"type":1,"type__str":"VISIBLE","value":10}],"title":"Touchbar Typing","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n<p>\n  One straightforward way to solve this problem is to simulate the process with\n  a recursive brute force method. Let us define the following variables:\n</p>\n<ul>\n  <li>\n    $$$Ai$$$: The pointer to the start of array $$$\\mathbf{A}$$$. The pointer moves one step\n    ahead after answering the first question from $$$\\mathbf{A}$$$, i.e. $$$Ai$$$ becomes\n    $$$Ai+1$$$.\n  </li>\n  <li>\n    $$$Aj$$$: The pointer to the end of array $$$\\mathbf{A}$$$. The pointer moves one step\n    back after answering the last question from $$$\\mathbf{A}$$$, i.e. $$$Aj$$$ becomes\n    $$$Aj-1$$$.\n  </li>\n  <li>$$$Bi$$$: The pointer to the start of array $$$\\mathbf{B}$$$.</li>\n  <li>$$$Bj$$$: The pointer to the end of array $$$\\mathbf{B}$$$.</li>\n  <li>$$$k$$$: The remaining number of questions to answer.</li>\n</ul>\n<p>With these variables, we can write down the recursive equation as follows:</p>\n<!-- prettier-ignore -->\n<div>\n$$$\\begin{equation}\\begin{split}\n  f(Ai, Aj, Bi, Bj, k) =\n  \\begin{cases}\n    \\begin{split}\n      -\\text{inf}, &\\quad \\text{if } (Ai - 1) + (\\mathbf{N} - Aj) \\gt \\mathbf{N} \\text{ or } (Bi - 1) + (\\mathbf{M} - Bj) \\gt \\mathbf{M}.\\\\\n      0, &\\quad \\text{if } k = 0.\n    \\end{split}\\\\\n    \\max \\begin{pmatrix}\\begin{split}\n    f(&Ai+1,&Aj,&Bi,&Bj,&k-1) + \\mathbf{A}[Ai]\\\\\n    f(&Ai,&Aj-1,&Bi,&Bj,&k-1) + \\mathbf{A}[Aj]\\\\\n    f(&Ai,&Aj,&Bi+1,&Bj,&k-1) + \\mathbf{B}[Bi]\\\\\n    f(&Ai,&Aj,&Bi,&Bj-1,&k-1) + \\mathbf{B}[Bj]\n    \\end{split}\\end{pmatrix}, \\text{otherwise}.\n  \\end{cases}\n\\end{split}\\end{equation}$$$\n</div>\n<p>\n  The maximum points we can get by answering $$$\\mathbf{K}$$$ questions from arrays $$$\\mathbf{A}$$$ and\n  $$$\\mathbf{B}$$$ would be the return value of $$$f(1, \\mathbf{N}, 1, \\mathbf{M}, \\mathbf{K})$$$. Be careful that\n  indexes $$$Ai$$$, $$$Aj$$$, $$$Bi$$$, and $$$Bj$$$ may go out of bounds of\n  arrays $$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$. The out-of-bounds values are defined to be zeros in the\n  equations above.\n</p>\n<p>\n  However, the time complexity of the recursion above is $$$O(4^\\mathbf{K})$$$. To\n  improve the performance, we can use dynamic programming: keep the return\n  values in a 4-dimensional array to avoid repeated computation. Notice that the\n  memoization array does not need to keep parameter $$$k$$$ since it can be\n  derived from the other four parameters with $$$k=\\mathbf{K}-(Ai\n  -1)-(\\mathbf{N}-Aj)-(Bi-1)-(\\mathbf{M}-Bj)$$$. With memoization, the time complexity of this\n  method is $$$O(\\mathbf{K}^4)$$$, and space complexity is $$$O(\\mathbf{K}^4)$$$.\n</p>\n<h3>Test Set 2</h3>\n<p>\n  Notice that the order of questions to answer does not affect the points we get\n  from them. Therefore, we can always answer questions in the first array $$$\\mathbf{A}$$$\n  first, and then in the second array $$$\\mathbf{B}$$$. This observation allows us to divide\n  the problem into two sub-problems: find the maximum points $$$P_A$$$ we can\n  get by answering $$$K_A$$$ questions in the first array $$$\\mathbf{A}$$$, and the maximum\n  points $$$P_B$$$ by answering $$$K_B$$$ questions in the second array $$$\\mathbf{B}$$$.\n  Enumerating all possible combinations of $$$(K_A, K_B)$$$ where $$$K_A + K_B =\n  \\mathbf{K}$$$, the total maximum points we can get by answering $$$\\mathbf{K}$$$ questions would\n  be the maximum value of all $$$P_A + P_B$$$.\n</p>\n<p>\n  Now we want to find a way to get the maximum points $$$P_A$$$ by answering\n  $$$K_A$$$ questions in the first array $$$\\mathbf{A}$$$. Since the order of questions to\n  answer does not matter, we can answer $$$K_{AStart}$$$ questions from the\n  start of the array first, and then $$$K_{AEnd}$$$ questions from the end of\n  the array, such that $$$K_{AStart} + K_{AEnd} = K_A$$$. The points we get\n  would be:\n</p>\n<!-- prettier-ignore -->\n<div style=\"margin-top: 1em;\">\n  $$$\\begin{equation}\\begin{split}\n  P'_A &= (\\mathbf{A}_1 + \\mathbf{A}_2 + \\cdots + \\mathbf{A}_{K_{AStart}})\n          &+ (\\mathbf{A}_{\\mathbf{N}-K_{AEnd}+1} + \\mathbf{A}_{\\mathbf{N}-K_{AEnd} + 2} + \\cdots + \\mathbf{A}_\\mathbf{N}) \\\\\n  &= \\text{Prefix}(\\mathbf{A}, K_{AStart}) &+ \\text{Suffix}(\\mathbf{A}, K_{AEnd})\n\\end{split}\\end{equation}$$$\n</div>\n<p>\n  Therefore, we can find the maximum points $$$P_A$$$ by enumerating all\n  combinations of $$$(K_{AStart}, K_{AEnd})$$$ where $$$K_{AStart} + K_{AEnd} =\n  \\min(K_A, \\mathbf{N})$$$, and find the maximum values of all $$$P'_A$$$ with the\n  equation aforementioned. With the prebuilt prefix sum and suffix sum arrays,\n  we can get $$$P'_A$$$ in $$$O(1)$$$ time, and the maximum points $$$P_A$$$ in\n  $$$O(K_A)$$$ time.\n</p>\n<p>\n  We can apply the same algorithm to find the maximum points $$$P_B$$$ by\n  answering $$$K_B$$$ questions in the second array $$$\\mathbf{B}$$$. The time complexity for\n  this method would be:\n</p>\n<ul>\n  <li>\n    $$$O(\\mathbf{N} + \\mathbf{M})$$$ to prebuild the prefix and suffix arrays for $$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$.\n  </li>\n  <li>\n    $$$O(\\mathbf{K}^2)$$$ to get the total maximum points.\n    <ul style=\"padding-top: 0;\">\n      <li>\n        $$$O(1)$$$ to get the points with a pair $$$(K_{AStart}, K_{AEnd})$$$ or\n        $$$(K_{BStart}, K_{BEnd})$$$.\n      </li>\n      <li>\n        $$$O(\\mathbf{K})$$$ to enumerate all $$$(K_{AStart}, K_{AEnd})$$$ pairs and get\n        $$$P_A$$$ &mdash; maximum points by answering questions from array $$$\\mathbf{A}$$$.\n        Same for array $$$\\mathbf{B}$$$.\n      </li>\n      <li>\n        $$$O(\\mathbf{K}^2)$$$ to enumerate all $$$(K_A, K_B)$$$ pairs and get the total\n        maximum points.\n      </li>\n    </ul>\n  </li>\n  <li>Overall: $$$O(\\mathbf{K}^2 + \\mathbf{N} + \\mathbf{M})$$$.</li>\n</ul>\n\n<p style=\"border-style: groove; border: 2px solid #34a853; padding: 5px;\">\nIf you would like to explore more tasks like Audio Validation and Image Labeler Tasks on the\nCrowdsource app and directly train Google's artificial intelligence systems to\nmake Google products work\n<a href=\"https://www.youtube.com/watch?v=oLTNtvIHJ7M\" target=\"_blank\"\n  >equally well for <i>everyone, everywhere</i></a\n>, you can <a href=\"http://goo.gle/cs-kick-start-2022\" target=\"_blank\">download it here</a>.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2zBmQBQ7d6LhHK6-9h_iwYKABjGD4fgoNoyhtSKVw9gTMD6P91nFZ6y5A9YS7m1LfQ2LLxafN5/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000b76fae","statement":"<h3>Problem</h3>\n<p>\n  Charles is participating in an event of <a\n    href=\"https://goo.gle/cs-kick-start-2022\"\n    target=\"_blank\"\n  >\n    Crowdsource\n  </a> tasks and he is most enthusiastic to gain the maximum\n  points from there! There are two Crowdsource tasks: Audio Validation Task and Image Labeler Task.\n  Each task consists of a list of questions.\n  Charles is given two arrays ($$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$) representing the two tasks. Each element of an array indicates the\n  number of points that Charles will gain by answering the corresponding question.\n</p>\n<p>\n  Charles is allowed to answer $$$\\mathbf{K}$$$ questions in total, from both tasks, one at a time.\n  At each step, he is allowed to choose a task (that is, choose one of the two arrays)\n  that has remaining unanswered questions. He is then allowed to answer either the first\n  or the last question, from the list of remaining questions of this task. Once he answers the question, he gets\n  the corresponding points and the answered question is removed from the task.\n</p>\n<p>\n  Can you help Charles choose the questions that will give him the maximum possible points?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow.<br />\n  The first line of each test case contains an integer $$$\\mathbf{N}$$$, which denotes the number of elements in\n  the first array. <br/>\n  The second line of each test case contains $$$\\mathbf{N}$$$ integers $$$\\mathbf{A_1}, \\mathbf{A_2}, \\dots, \\mathbf{A_N}$$$.\n  $$$\\mathbf{A_i}$$$ denotes the points gained for answering the $$$i$$$-th question of Audio\n  Validation Task.  <br/>\n  The third line of each test case contains an integer $$$\\mathbf{M}$$$, which denotes the number of elements in\n  the second array. <br/>\n  The fourth line of each test case contains $$$\\mathbf{M}$$$ integers $$$\\mathbf{B_1}, \\mathbf{B_2}, \\dots, \\mathbf{B_M}$$$.\n  $$$\\mathbf{B_i}$$$ denotes the points gained for answering the $$$i$$$-th question of Image\n  Labeler Task.  <br/>\n  The fifth line of each test case contains an integer $$$\\mathbf{K}$$$, which denotes the number of elements to\n  be selected in total, from both arrays, using the process described above. <br/>\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$\n  is the test case number (starting from 1) and $$$y$$$ is the maximum number of points that\n  Charles can gain in this test case.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$1 \\le \\mathbf{N} \\le 6000$$$.<br/>\n  $$$1 \\le \\mathbf{M} \\le 6000$$$.<br/>\n  $$$1 \\le \\mathbf{A_i}, \\mathbf{B_i} \\le 10^9$$$, for all $$$i$$$.<br/>\n  $$$1 \\le \\mathbf{K} \\le \\mathbf{N}+\\mathbf{M}$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{K} \\le 30$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$1 \\le \\mathbf{K} \\le 3000$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0Zgjf4J7_ysXuDFHkYomdOqCJgdQx7KTh-6yCzUTs-pJLs2PYiS0jh8Mlr4wo-Eh_FHYcZaKD7gRQuZuqY5N-dYi5vyiCn5ktruLg/maximum_gain_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3\n3 1 2\n4\n2 8 1 9\n5\n4\n1 100 4 3\n6\n15 10 12 5 1 10\n6\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1azG9H7lvXiZTxMT6go1IHqvkZeAfAQuIumSweb61z8Amk47480tDX9IbAb19fMycSR4BwetXF3QZhcUUhWOKrgFiCA_rJiDyY-NMX/maximum_gain_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 24\nCase #2: 148\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    In Sample Case #1, Charles can answer $$$5$$$ questions. If he chooses the first and last questions from the\n    first array, he gets $$$(3+2)$$$ points. If he chooses the first two questions and the last question from the\n    second array, he gets $$$(2+8+9)$$$ points. Thus, by answering these $$$5$$$ questions, Charles gets $$$((3+2)+(2+8+9)) = 24$$$\n    points. This happens to be the maximum possible number of points that Charles can obtain in this test case.\n    A non-optimal selection could be to choose the last two elements from the first array, the first\n    element from the second array, and last two elements from the second array. This would have yielded\n    $$$((1+2)+(2+1+9)) = 15$$$ points.\n  </p>\n  <p>\n    In Sample Case #2, Charles can answer $$$6$$$ questions. If he chooses the first two from the first array, he\n    gets $$$(1+100)$$$ points. If he chooses the first three questions and the last question from the second\n    array, he gets $$$(15+10+12+10)$$$ points. Thus, selecting these $$$6$$$ questions, Charles gets\n    $$$((1+100)+(15+10+12+10)) = 148$$$ points, which happens to be the maximum value for this case.\n  </p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":1,"type__str":"VISIBLE","value":11}],"title":"Maximum Gain","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000008caea6","type":1,"type__str":"SPECTATOR"},"title":"Round D 2022","ui_appearance":0,"ui_appearance__str":"APPEARANCE_TYPE_DEFAULT"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
