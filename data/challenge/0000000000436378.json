{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1619296200000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000436378","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1619281800000,"tasks":[{"id":"0000000000c61e6c","statement":"<!--\n  All styles must be keyed by id/class because inline styles are global.\n  Prefix them with 'hashcode-' to avoid name collisions.\n -->\n<style>\n  .hashcode h3 {\n    font-weight: 600 !important;\n    font-size: 1.5rem !important;\n  }\n\n  .hashcode h4 {\n    font-weight: 600 !important;\n    font-size: 1.25rem !important;\n  }\n\n  .hashcode h5 {\n    margin-top: 0.5rem;\n    font-weight: 600 !important;\n    font-size: 1.15rem !important;\n  }\n\n  .hashcode-warning-box {\n    outline: 1px solid black !important;\n    margin-top: 10px;\n    padding: 5px 5px 5px 5px;\n    background-color: lightblue;\n  }\n\n  .hashcode-example-box {\n    outline: 1px solid black !important;\n    margin-top: 10px;\n    padding: 5px 5px 5px 5px;\n  }\n\n  .hashcode ul {\n    margin-left: 10px;\n  }\n\n  .hashcode ol {\n    margin-left: 10px;\n  }\n\n  .hashcode-no-style-list li {\n    list-style-type: none;\n  }\n\n  .hashcode-cross-style-list li {\n    list-style-type: \"❌\";\n  }\n\n  .hashcode-warning-style-list li {\n    list-style-type: \"⚠️\";\n  }\n\n  .hashcode-file td {\n    vertical-align: top;\n  }\n\n  .hashcode-file code {\n    overflow: scroll;\n    white-space: nowrap;\n  }\n\n  .hashcode img {\n    display: block;\n    margin: 1rem auto;\n\n    min-width: 150px;\n  }\n\n  img.hashcode-big-img {\n    max-width: 800px;\n    width: 100%;\n  }\n\n  img.hashcode-medium-img {\n    max-width: 600px;\n    width: 80%;\n  }\n\n  img.hashcode-small-img {\n    max-width: 300px;\n    width: 60%;\n  }\n</style>\n\n<div class=\"hashcode\">\n  <h3>Introduction</h3>\n\n  <p>\n    Google stores the vast majority of its code in one monolithic codebase,\n    holding billions of lines of code. As of 2016, more than 25,000 software\n    engineers were contributing to it, improving existing services and adding\n    cool new features to meet the demands of their users.\n  </p>\n\n  <p>\n    With the growing size of the codebase and the increasing number of Google\n    software engineers, it is getting challenging to schedule the engineers'\n    work, so they can be productive and launch features that make users happy.\n  </p>\n\n  <h3>Goal</h3>\n\n  <p>\n    Given a number of <strong>services</strong>, a number of\n    <strong>binaries</strong>, and a set of <strong>features</strong> to\n    implement, decide how <strong>engineers</strong> should schedule their work\n    to deliver features that would delight the users as much as possible.\n  </p>\n\n  <h3>Problem description</h3>\n  <h4>Architecture</h4>\n  <p>In this problem, we consider features, services and binaries:</p>\n  <ul>\n    <li>\n      <strong>Features</strong> are the user-facing functionality of Google\n      products. For example: video playlists in YouTube or weather forecasts in\n      Google Search.\n    </li>\n    <li>\n      <strong>Services</strong> are programs running in Google data centers. For\n      example: YouTube may have a service responsible for storing user video\n      collections.\n    </li>\n    <li>\n      <strong>Binaries</strong> are groups of services which are combined to run\n      together for efficiency. For example: services running in the same binary\n      can share resources such as a database connection.\n    </li>\n  </ul>\n\n  <h5>Features</h5>\n\n  <p>Each feature is described by:</p>\n\n  <ul>\n    <li>The services it relies on.</li>\n    <li>\n      The number of daily users that benefit from the feature (when it’s\n      launched).\n    </li>\n  </ul>\n\n  <p>\n    Once a feature is implemented in all services that it relies on, it is\n    immediately launched and users start to benefit from it.\n  </p>\n\n  <h5>Services and binaries</h5>\n\n  <p>\n    Each service is part of exactly one binary, but one binary can contain\n    multiple services. Initially each binary contains at least one service, but\n    it is valid for binaries to become empty later on. Services can be moved\n    between binaries and new binaries can be created as needed.\n  </p>\n\n  <p>\n    When implementing a feature, the engineers take advantage of the fact that a\n    binary contains multiple services - an engineer can implement a given\n    feature in all relevant services in a given binary at once.\n  </p>\n\n  <img\n    alt=\"Features, binaries and engineers\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0kGJtsF0WJRkRIrbjEA_OiRZxhpjYPnJ6tYgGKL3o0JcMQTI6IsOIZ7NVrf9aLLQ4AeRiD7TT80z5G7Lne/figure1.svg\"\n    title=\"Features, binaries and engineers\"\n    class=\"hashcode-big-img\"\n  />\n  <p>\n    <strong>Figure 1.</strong> There are two features (foo and bar), five\n    services (sa, sb, sc, sd, se), three binaries (0, 1 and 2), and 2 engineers\n    (G0 and G1). Binary 0 runs one service (se), binary 1 runs two (sa and sc)\n    and binary 2 also runs two (sb and sd). To implement feature foo engineers\n    need to work on services sb, sc, and sd, which means that they will need to\n    work on two binaries (1 and 2). To implement feature bar, engineers need to\n    work on features sa and sc, thus only binary 1.\n  </p>\n\n  <h4>Scheduling work</h4>\n\n  <p>\n    Your goal is to assign work to engineers to implement features so that as\n    many users as possible benefit from them.\n  </p>\n\n  <p>\n    Google has $$$G$$$ engineers who can implement the features. On each day an\n    engineer can start any of the following tasks:\n  </p>\n\n  <ul>\n    <li>Implement a feature $$$F_i$$$ in the services of binary $$$B_j$$$.</li>\n    <li>\n      Move service $$$S_i$$$ from binary $$$B_j$$$ to another binary $$$B_k$$$.\n    </li>\n    <li>Create a new empty binary.</li>\n    <li>Wait for a number of days.</li>\n  </ul>\n\n  <p>\n    None of these tasks can be interrupted, meaning that once an engineer starts\n    working on a task, they will continue to do so for the duration of that\n    task.\n  </p>\n\n  <p>\n    Making changes to a set of services that are running in one binary is easier\n    than making changes to services that are scattered across multiple binaries.\n    On the other hand, many engineers working on services in one binary get in\n    each other's way, slowing down the work. This is described in more detail\n    below.\n  </p>\n\n  <h5>Task: Implement a feature</h5>\n  <p>\n    An engineer can choose any binary $$$B_j$$$ and implement a feature\n    $$$F_i$$$ in all relevant services in that binary at once.\n  </p>\n\n  <p>\n    If an engineer works on a binary $$$B_j$$$ to implement a feature $$$F_i$$$,\n    this work will require $$$D_{Fi} + R_{Bj} + C_{Bj}$$$ days, where:\n  </p>\n\n  <ul>\n    <li>$$$D_{Fi}$$$ is the difficulty of feature $$$F_i$$$,</li>\n    <li>\n      $$$R_{Bj}$$$ is the total number of services in $$$B_j$$$ (including\n      services not relevant to $$$F_{i}$$$), and\n    </li>\n    <li>\n      $$$C_{Bj}$$$ is the number of engineers already working on features in\n      $$$B_j$$$ on the first day of this work.\n    </li>\n  </ul>\n\n  <p>\n    Once the task is done, feature $$$F_i$$$ is implemented in all relevant\n    services in $$$B_j$$$.\n  </p>\n\n  <p>\n    Multiple engineers can implement the same feature in different binaries, but\n    only one engineer at a time can implement a specific feature in one binary.\n    If two engineers start working on the same binary (implementing two\n    different features) on the same day, the <strong>one</strong>\n    listed earlier in the submission file is the first to start and counts\n    towards the number of engineers working on the binary for the second one.\n  </p>\n\n  <img\n    alt=\"Features, binaries and engineers\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1WM0eMFHX6wvKNQWfWzKq-d5Y94MBRugZf2wa5aYgT7Ui1uKGXTHxNrb4C5Pj3TT7_ums0x3V8YzFbNOzfo_U/figure2ab.svg\"\n    title=\"Features, binaries and engineers\"\n    class=\"hashcode-big-img\"\n  />\n  <img\n    alt=\"Features, binaries and engineers\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1BojnDNgzfu-RCK0kjuHSXsUyty2SSaivp5ZQVaIIWxUYkznXjVuaEErU2308Ztc9HEzRL8NYLIAjZvMe9FVY/figure2cd.svg\"\n    title=\"Features, binaries and engineers\"\n    class=\"hashcode-big-img\"\n  />\n  <p>\n    <strong>Figure 2.</strong> <strong>(a)</strong> Engineer $$$G_0$$$ works on\n    binary 2 to implement feature foo. In this case, $$$R_{B2} = 3$$$ as there\n    are three services (sb, sc an sd) in binary 2, and $$$C_{B2} = 0$$$, as no\n    other engineer is working on that binary that day. In total, the engineer\n    needs $$$D_{foo} + 3 + 0$$$ days of work in binary 2 for feature foo.\n    Similarly, engineer G1 needs Dbar + 1 + 0, where 1 is the number of services\n    in binary 1 (service sa). <strong>(b)</strong> Both engineers work on binary\n    2 implementing different features. Supposing that engineer $$$G_0$$$ starts\n    first on this binary, $$$G_0$$$ needs $$$D_{foo} + 3 + 0$$$ days: since\n    no-one was working on binary 2, $$$C_{B2} = 0$$$. Engineer $$$G_1$$$ needs\n    $$$D_{bar} + 3 + 1$$$ days. <strong>(c)</strong> It is possible for two\n    engineers to work on the same feature (here feature bar), but only if they\n    work in two different binaries. <strong>(d)</strong> It is not allowed for\n    two engineers to work on the same feature on the same binary.\n  </p>\n\n  <h5>Task: Move a service</h5>\n\n  <p>\n    An engineer can move a service $$$S_i$$$ from one binary $$$B_j$$$ to a\n    <strong>different</strong> binary $$$B_k$$$. After the move, all features\n    that needed service $$$S_i$$$ will need to have engineers working on binary\n    $$$B_k$$$ instead of $$$B_j$$$. Features already implemented in service\n    $$$S_i$$$ <strong>remain implemented</strong>.\n  </p>\n\n  <p>\n    It takes $$$max(R_{Bj}, R_{Bk})$$$ days to move service $$$S_i$$$ from\n    binary $$$B_j$$$ to $$$B_k$$$, where $$$R_{Bj}$$$ and $$$R_{Bk}$$$ are the\n    number of services running in binaries $$$B_j$$$ and $$$B_k$$$ respectively,\n    before the move.\n  </p>\n\n  <img\n    alt=\"Features, binaries and engineers\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3r02UE8eDkfeRZ2YoKc1YA9ZlZdVXDIeixskw5kyFRTDlQVMx6s0lKz_4l9B7BFZeTk8eksH-tA9mUhzzd/figure3.svg\"\n    title=\"Features, binaries and engineers\"\n    class=\"hashcode-big-img\"\n  />\n  <p>\n    <strong>Figure 3.</strong> Engineer $$$G_0$$$ moves service sc from binary 1\n    to binary 2. Observe that this affects both features (foo and bar).\n  </p>\n\n  <p>\n    <strong\n      >No other engineer can start working on binaries Bj and Bk until the move\n      is finished and the move can't start if any engineer is working on either\n      binary at the time</strong\n    >\n    (implementing a feature or moving a service to/from one of these binaries).\n  </p>\n\n  <h5>Task: Create a new binary</h5>\n\n  <p>\n    An engineer can spend $$$N$$$ days to create a new empty binary. Its ID is\n    the minimum positive integer that is not used yet.\n  </p>\n\n  <img\n    alt=\"Features, binaries and engineers\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0fcmsapLKAna9afFZ173MeE7u5Gz1SmBJLkzX_eO2nzuWR_zqEWkHqZPk7JZobnwhh2NhrRmv086IcZYR2/figure4.svg\"\n    title=\"Features, binaries and engineers\"\n    class=\"hashcode-small-img\"\n  />\n  <p>\n    <strong>Figure 4.</strong> Engineer $$$G_1$$$ creates a new empty binary\n    (binary 3).\n  </p>\n\n  <h5>Task: Wait</h5>\n\n  <p>An engineer can wait for a number of days.</p>\n\n  <img\n    alt=\"Features, binaries and engineers\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3kqIf8HMLdT3aK94fqOp6VGMiKhFSbbCwFn7TtAhJP2hO3J4tdwkwuJ5d_UIqmPWZTk0ZnU3KCeHXfYwKb/figure5.svg\"\n    title=\"Features, binaries and engineers\"\n    class=\"hashcode-small-img\"\n  />\n  <p>\n    <strong>Figure 5.</strong> An engineer takes a break and waits, for example\n    watching cat videos.\n  </p>\n\n  <h3>Input data set</h3>\n\n  \n  <a name=\"inputDataDownloadBox\"></a>\n  <div class=\"test-data-download-wrapper\" style=\"min-width: 100%;\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Input Data</div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3gSWoGCv4N6UcsukRSW_hEyzW_5FvgOXCtIoel-b_BHbs9T66u6kR-JdOYMK6ghRMoCIi3tkTAWA/input_data.zip?dl=1\" target=\"_blank\">\n        <span class=\"material-icons\" style=\"vertical-align: middle;\">save_alt</span>\n        <span style=\"vertical-align: middle;\">Full input (zipped)</span>\n      </a>\n      <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0dkmOH7MINnFrNbd361d2Tn-iYtHVjjXdy0S6a4Zz3HDK25ptv7Nx7p9CxojdC2wZ2J4phM6kUsnJC/a_example.in.txt?dl=1\" target=\"_blank\">\n        <span class=\"material-icons\" style=\"vertical-align: middle;\">save_alt</span>\n        <span style=\"vertical-align: middle;\">A – Example</span>\n      </a>\n      <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2pPATUjtKzjq_NXCUnmONxgEfNxTAnvAM97_KIuDm4Hbn4iLxbxMitz5SebQFK_6akSuwekjnkzE_Kgyi6lRnWBDu3Ug/b_breadth_of_choice.in.txt?dl=1\" target=\"_blank\">\n        <span class=\"material-icons\" style=\"vertical-align: middle;\">save_alt</span>\n        <span style=\"vertical-align: middle;\">B – Breadth of Choice</span>\n      </a>\n      <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3r4Pkwfbaz1zoj12yWnxJzd3L24o2XXQIAy2ugkSsQmW7cRgG6Zf3Inm4aQKZSChyWPKTZDY82rRbzcQ6hbU8jt46KEjRrTKm9AZI/c_constrained_optimisation.in.txt?dl=1\" target=\"_blank\">\n        <span class=\"material-icons\" style=\"vertical-align: middle;\">save_alt</span>\n        <span style=\"vertical-align: middle;\">C – Constrained Optimisation</span>\n      </a>\n      <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U26itIdRoQTY3BTDpgXuL817CUxMCnxHnOHorCtz9Y9R-9cDebBAz1h6QUSZdARRjpmUN0yItkZBxfeOqFHaQ/d_distinction.in.txt?dl=1\" target=\"_blank\">\n        <span class=\"material-icons\" style=\"vertical-align: middle;\">save_alt</span>\n        <span style=\"vertical-align: middle;\">D – Distinction</span>\n      </a>\n      <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2dMjfQNVifOQWkKQjfRjzi8_5xUfWl7ioLz8gfvRuM_UAns2_VFOBimDTquqg60nsAmuo4f_oJbOD8ZSamww4lT4Rx_f60nfSMXlU/e_expectation_maximisation.in.txt?dl=1\" target=\"_blank\">\n        <span class=\"material-icons\" style=\"vertical-align: middle;\">save_alt</span>\n        <span style=\"vertical-align: middle;\">E – Expectation Maximisation</span>\n      </a>\n      <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2SZk7DIqo6EID7teKxwLU3NtIu-bg3GNrR05-Quw_GUxfDRTci0eiAwxx7dUpj_Qslbmq1vPFzBxmW4aGDGgIq/f_five_thousand.in.txt?dl=1\" target=\"_blank\">\n        <span class=\"material-icons\" style=\"vertical-align: middle;\">save_alt</span>\n        <span style=\"vertical-align: middle;\">F – Five Thousand</span>\n      </a>\n    </div>\n  </div>\n\n\n  <h4>File format</h4>\n\n  <p>\n    Each input data set is provided in a plain text file. The file contains only\n    ASCII characters with lines ending with a single '\\n' character (also called\n    “UNIX-­style” line endings). When multiple numbers or strings are given in\n    one line, they are separated by a single space between each two elements.\n  </p>\n\n  <ul>\n    <li>The first line:</li>\n    <ul>\n      <li>time limit in days $$$L$$$ ($$$1 \\leq L \\leq 10^3$$$),</li>\n      <li>number of Google engineers $$$G$$$ ($$$1 \\leq G \\leq 10^5$$$),</li>\n      <li>number of services $$$S$$$ ($$$1 \\leq S \\leq 10^4$$$),</li>\n      <li>number of initial binaries $$$B$$$ ($$$1 \\leq B \\leq 10^4$$$),</li>\n      <li>nnumber of features $$$F$$$ ($$$1 \\leq F \\leq 10^4$$$),</li>\n      <li>\n        duration in days to create a new binary $$$N$$$ ($$$1 \\leq N \\leq\n        10$$$).\n      </li>\n    </ul>\n    <li>The next S lines describe the services and each of these contains:</li>\n    <ul>\n      <li>\n        the service name (string of 1-20 lowercase letters a-z and hyphens -),\n      </li>\n      <li>\n        an integer $$$B_i$$$ ($$$0 \\leq B_i \\leq B-1$$$) - the ID of the binary\n        where the service initially runs. Binaries are numbered from $$$0$$$ to\n        $$$B-1$$$.\n      </li>\n    </ul>\n    <li>The next F blocks of lines describe the features. On each block:</li>\n    <ul>\n      <li>The first line contains:</li>\n      <ul>\n        <li>\n          the feature name (string of 1-20 lowercase letters a-z and hyphens -),\n        </li>\n        <li>\n          $$$M_i$$$ ($$$1 \\leq M_i \\leq S$$$) - the number of services that need\n          to be modified to support the $$$i$$$-th feature,\n        </li>\n        <li>\n          $$$D_i$$$ ($$$1 \\leq D_i \\leq 10^2$$$) - the difficulty of the\n          $$$i$$$-th feature,\n        </li>\n        <li>\n          $$$U_i$$$ ($$$1 \\leq U_i \\leq 10^5$$$) - number of daily users that\n          will benefit from the feature once it is launched.\n        </li>\n      </ul>\n      <li>\n        The second line contains a list of strings $$$S_{i,1}$$$, $$$S_{i,2}$$$,\n        ..., $$$S_{i,M_i}$$$ - the names of the services to be modified to\n        support the $$$i$$$-th feature.\n      </li>\n    </ul>\n  </ul>\n\n  <h4>Example</h4>\n\n  <p>The following example input dataset matches the one shown in Figure 1.</p>\n\n  <table class=\"hashcode-example-box hashcode-file\">\n    <tr>\n      <td>Input file</td>\n      <td>Description</td>\n    </tr>\n    <tr>\n      <td>\n        <code>\n          10 2 5 3 2 5<br />\n          <br />\n          sa 1<br />\n          sb 2<br />\n          sc 1<br />\n          sd 2<br />\n          se 0<br />\n          foo 3 3 100<br />\n          <br />\n          sc sb sd<br />\n          bar 2 1 20<br />\n          <br />\n          sc sa<br />\n        </code>\n      </td>\n\n      <td>\n        <code>\n          10 days, 2 engineers, 5 services, 3 binaries and 2 features,<br />\n          &nbsp;&nbsp;we need 5 days to create a new binary.<br />\n          The first service is named 'sa' and runs in binary 1<br />\n          The second service is named 'sb' and runs in binary 2<br />\n          The third service is named 'sc' and runs in binary 1<br />\n          The fourth service is named 'sd' and runs in binary 2<br />\n          The fifth service is named 'se' and runs in binary 0<br />\n          foo feature is implemented in 3 services, its difficulty is 3<br />\n          &nbsp;&nbsp;and 100 users per day will benefit from it<br />\n          foo feature is implemented in services sc, sb and sd<br />\n          bar feature is implemented in 2 services, its difficulty is 1<br />\n          &nbsp;&nbsp;and 20 users per day will benefit from it<br />\n          bar feature is implemented in services sc and sa<br />\n          project WebChat needs 2 contributors<br />\n        </code>\n      </td>\n    </tr>\n  </table>\n\n  <i>\n    Note that the input file <strong>does not contain any blank lines</strong>.\n    Blank lines and line wrapping in the example above are added for clarity.\n  </i>\n\n  <h3>Submissions</h3>\n\n  <p>Your submission describes the schedule of the engineers' work.</p>\n\n  <h4>File format</h4>\n\n  <ul>\n    <li>\n      The first line: $$$E$$$ - the number of engineers that we plan the work\n      for ($$$0 \\leq E \\leq G$$$)\n    </li>\n    <li>The next E blocks:</li>\n    <ul>\n      <li>\n        The first line: $$$T$$$ ($$$1 \\leq T \\leq L$$$) - number of tasks for\n        the given engineer.\n      </li>\n      <li>The next $$$T$$$ lines contain one of:</li>\n      <ul>\n        <li>\n          Literal <code>impl</code> followed by a feature name $$$F_i$$$ and a\n          number $$$B_j$$$ - the engineer should implement the feature named Fi\n          in the binary with ID $$$B_j$$$.\n        </li>\n        <li>\n          Literal <code>move</code> followed by service name $$$S_i$$$ and a\n          number $$$B_j$$$ - the engineer should move service $$$S_i$$$ from\n          binary $$$B_k$$$ (in which $$$S_i$$$ resides at the time of the move)\n          to a different binary $$$B_j$$$.\n        </li>\n        <li>\n          Literal <code>new</code> - the engineer should start a new (empty)\n          binary.\n        </li>\n        <li>\n          Literal <code>wait</code> followed by number $$$W$$$ ($$$1 \\leq W \\leq\n          L$$$) - the engineer should wait for $$$W$$$ days.\n        </li>\n      </ul>\n    </ul>\n  </ul>\n\n  <h4>Example</h4>\n\n  <table class=\"hashcode-example-box hashcode-file\">\n    <tr>\n      <td>Submission file</td>\n      <td>Description</td>\n    </tr>\n    <tr>\n      <td>\n        <code>\n          2<br />\n          2<br />\n          move sc 2<br />\n          impl foo 2<br />\n          3<br />\n          wait 2<br />\n          impl bar 1<br />\n          impl bar 2<br />\n        </code>\n      </td>\n\n      <td>\n        <code>\n          Both engineers will work<br />\n          The first engineer will do 2 tasks<br />\n          &nbsp;&nbsp;Move service sc to binary 2<br />\n          &nbsp;&nbsp;Implement feature foo in binary 2<br />\n          The second engineer will do 3 tasks<br />\n          Wait for 2 days<br />\n          &nbsp;&nbsp;Implement feature bar in binary 1<br />\n          &nbsp;&nbsp;Implement feature bar in binary 2<br />\n        </code>\n      </td>\n    </tr>\n  </table>\n\n  <img\n    alt=\"Features, binaries and engineers\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2hBoePafoE0tNCJReg8zn_yGApF3H2w1WPT7eSBsSbSRPRlzBuS79Wia_haXJH70g7KSYpB5awSJI70zAQ/figure6.svg\"\n    title=\"Features, binaries and engineers\"\n    class=\"hashcode-big-img\"\n  />\n  <p>\n    <strong>Figure 6.</strong> The timeline of the engineers' work. For engineer\n    $$$G_0$$$, moving cs from binary 1, where it is initially, to binary 2 will\n    need $$$max(R_{B1}, R_{B2})$$$, so 2 days. Implementing foo in binary 2 will\n    require 6 days: $$$D_{foo} + R_{B2} + C_{B2}$$$, where $$$D_foo = 3$$$,\n    $$$R_{B2} = 3$$$ and $$$C_{B2} = 0$$$. Similarly, for engineer $$$G_1$$$ we\n    can calculate the days required to implement each of the binaries for the\n    feature bar.\n  </p>\n\n  <img\n    alt=\"Features, binaries and engineers\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3On9iYwsklEaFzRw8xVXNSj-rXT9UUIeAfNSUgEde1mSjusbOeTp4UQGrJUNwNvE4QzbJLH1A5dVzQXqL8xtg/figure7ab.svg\"\n    title=\"Features, binaries and engineers\"\n    class=\"hashcode-big-img\"\n  />\n  <img\n    alt=\"Features, binaries and engineers\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0SnXBtkAaJIB1RO5I8DqbSwQCPP2Ss7QGGTiyUFVdDThlF_MkDF2GgCAFS4ncBmi9S07OkBxvabJIkHa0_VQ/figure7c.svg\"\n    title=\"Features, binaries and engineers\"\n    class=\"hashcode-small-img\"\n  />\n  <p>\n    <strong>Figure 7.</strong> The work of each engineer at every given time:\n    <strong>(a)</strong> between days 0 and 2, <strong>(b)</strong> between days\n    2 and 4, <strong>(c)</strong> between days 4 and 8. After day 8, feature foo\n    goes live, and stays live until the time limit (day 10), thus for 2 days.\n    Feature bar goes live after day 9, and thus stays live for 1 day.\n  </p>\n\n  <h3>Scoring</h3>\n\n  <p>\n    The engineers execute the scheduled tasks,\n    <strong>one immediately after another</strong>, according to the submission\n    file. If an engineer is scheduled to do a task but they can’t (e.g. they\n    cannot move a service because another engineer is still working on the same\n    binary), the solution is considered invalid and gets 0 points.\n  </p>\n\n  <p>\n    It is valid for an engineer to finish their tasks before the time limit. It\n    is also valid to schedule tasks that will start or finish after the time\n    limit (such tasks are ignored).\n  </p>\n\n  <p>\n    Once a feature is implemented in all relevant services before the time\n    limit, it is immediately launched and the users start to benefit from it. It\n    is valid to only partially implement a feature (e.g. if the engineer working\n    on it would finish after the time limit or not even start implementing the\n    feature in some binaries), but it won’t earn any points. Likewise, features\n    that get fully implemented after the time limit are allowed but won't earn\n    any points.\n  </p>\n\n  <p>\n    Each feature launched before the time limit scores a number of points equal\n    to $$$U_i \\times max(0, L - I_i)$$$\n  </p>\n\n  <p>where</p>\n\n  <ul>\n    <li>\n      $$$U_i$$$ - number of users that benefit from the $$$i$$$-th feature\n    </li>\n    <li>$$$L$$$ - time limit in days</li>\n    <li>\n      $$$I_i$$$ - the day when the $$$i$$$-th feature was launched (number of\n      days it took to fully implement i-th feature).\n    </li>\n  </ul>\n\n  <p>The total score is a sum of the scores earned by each launched feature.</p>\n\n  <h4>Example</h4>\n\n  <div class=\"hashcode-example-box\">\n    <p>\n      For instance, in the example above, the first engineer will spend two days\n      to move service $$$sc$$$ from binary 1 to binary 2: initially there are 2\n      services in binary 1, and 2 services in binary 2, so $$$max(2, 2) = 2$$$.\n      The first engineer will then spend 6 days (3 + 3 + 0) to implement feature\n      foo there. So foo will be ready on day 8, meaning it will be live for two\n      days (until day 10, which is the time limit), scoring 200 (= 2 days ✕ 100\n      users) points.\n    </p>\n  </div>\n\n  <p>\n    The second engineer will spend 2 days waiting and then 2 days (1 + 1 + 0)\n    implementing feature bar in binary 1. They will then spend 5 days (1 + 3 +\n    1) implementing feature bar in binary 2. The feature will be live for 1 day,\n    scoring 20 points.\n  </p>\n\n  <p>The final score is <strong>220</strong> (200 + 20) points.</p>\n\n  <p>\n    <strong>\n      Note that there are multiple data sets representing separate instances of\n      the problem. The final score for your team will be the sum of your best\n      scores on the individual data sets.\n    </strong>\n  </p>\n</div>\n","task_type":2,"task_type__str":"HASH_CODE","tests":[{"name":"A – Example"},{"name":"B – Breadth of Choice"},{"name":"C – Constrained Optimisation"},{"name":"D – Distinction"},{"name":"E – Expectation Maximisation"},{"name":"F – Five Thousand"}],"title":"Software Engineering at Scale"}],"ticket":{"challenge_id":"0000000000436378","type":1,"type__str":"SPECTATOR"},"title":"World Finals","ui_appearance":0,"ui_appearance__str":"APPEARANCE_TYPE_DEFAULT"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
