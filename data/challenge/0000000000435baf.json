{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1619375400000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000435baf","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\r\nUnusually for Code Jam, Round 1B happened on Sunday in a large part of the world, and even\r\nearly Monday in the eastern-most timezones. To make the timing even more strange, we started\r\noff with a <i>Broken Clock</i> that required quite a bit of math to use it\r\nto tell the time properly. It was a particularly challenging first problem for\r\na Round 1. Next up was the tricky <i>Subtransmutation</i>, which required\r\nsome combinatorial insights but could be solved quickly by following some mathematical\r\nintuition and experimentation. The last problem was the interactive <i>Digit Blocks</i>,\r\nthat could be approached in multiple ways.\r\n</p><p>\r\nBecause of the high difficulty floor of this round's problems, the first submission that\r\nsolved a full problem did not happen until after the 10 minute mark and less than 5000\r\ncoders managed to get some points out of more than 6600 that submitted.\r\nThe first perfect score\r\ntook 44 minutes, and gave <b>neal_wu</b> the first place in the round. <b>zscoder</b> and\r\n<b>Egor</b> were the only others to get a perfect score with less than an hour of penalty,\r\nrounding out the top 3. Ultimately, 183 coders managed a perfect score.\r\nThe unofficial cutoff is 31 points, which corresponds to solving Subtransmutation. There were\r\na lot of combinations of partial solutions that could get you over that score and into Round 2.\r\n</p><p>\r\nAs usual, the Code Jam team will spend a few days finalizing the results. You can have fun\r\nreading the analyses in the problem pages while you wait. Congratulations to all advancers,\r\nand for everyone else, there is one more chance to advance to Round 2 in less than a week.\r\nCheck the\r\n<a href=\"https://codingcompetitions.withgoogle.com/codejam/schedule\" target=\"_blank\">schedule</a>\r\nand don't miss Round 1C next weekend!\r\n</p>\r\n<hr>\r\n<p>\r\n  <b>Cast</b>\r\n</p>\r\n<p>\r\n  Broken Clock: Written by Pablo Heiber. Prepared by Artem Iglikov.\r\n</p><p>\r\n  Subtransmutation: Written and prepared by Yossi Matsumoto.\r\n</p><p>\r\n  Digit Blocks: Written by Pablo Heiber. Prepared by Petr Mitrichev.\r\n</p><p>\r\nSolutions and other problem preparation and review by Artem Iglikov, Bir Bahadur Khatri,\r\nDarcy Best, Hannah Angara, Ikumi Hide, Jing Wang, Kevin Tran, Liang Bai, Max Ward,\r\nMd Mahbubul Hasan, Mohamed Yosri Ahmed, Nafis Sadique, Pablo Heiber, Petr Mitrichev,\r\nPi-Hsun Shih, Timothy Buzzelli, and Yossi Matsumoto.\r\n</p><p>\r\nAll analyses written by Pablo Heiber.\r\n</p>\r\n","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1619366400000,"tasks":[{"analysis":"<p>\nLet $$$D_{i,j}$$$ be the digit on the block that has exactly $$$j$$$ blocks under it\nin the $$$i$$$-th tower. The number written on the $$$i$$$-th tower is then\n$$$$\\sum_{j=0}^{\\mathbf{B}-1} 10^j \\cdot D_{i,j}$$$$\nand the total score is\n$$$$\\sum_{i=1}^{\\mathbf{N}} \\sum_{j=0}^{\\mathbf{B}-1} 10^j \\cdot D_{i,j}.$$$$\n</p><p>\nNotice that each term in the last sum is independent from others, that is, each position in a\ntower has a particular value that gets multiplied by the digits, and exchanging blocks\nat the same heights that go on different towers does not change the final outcome.\nOur job to maximize the score is to get the largest digits paired up with the largest values.\nThat means, putting large digits near the top of the towers. Moreover, the value of a\nposition is more than $$$9$$$ times the value of all the positions below it combined.\nTherefore, delaying the use of a position until we can get the maximum possible digit\ncan be worth sacrificing the ability to decide on the order of all positions below it\nfor up to $$$9$$$ towers, and possibly a lot more (as even a random order gets some value).\n</p><p>\nAll the approaches we present are based on trying to reserve high-valued positions for\nhigh-valued digits, sacrificing other positions.\n</p>\n<h3>Greedy strategies</h3>\n<p>\nThe simplest greedy strategy is: try to place $$$9$$$&NoBreak;s in the top position of every tower,\nand sacrifice everything else. That means, when a block comes, if it is a $$$9$$$, place it in\nthe highest non-finished tower we have. If it is not, place it in the highest tower we have that\nhas fewer than $$$\\mathbf{B}-1$$$ blocks on it. This reserves the top spots for $$$9$$$&NoBreak;s and\naccelerates the availability of newer top spots by trying to build towers up as soon as possible.\n</p><p>\nThere are other similar strategies, like doing the same but trying to place $$$9$$$&NoBreak;s in\nthe top two spots of every tower, possibly pivoting to just the top spot when we are running out of\ntime. Similarly, we can pivot to accepting lower digits for second-from-the-top spots or for\ntop spots when there are few blocks left and the likelihood of enough $$$9$$$&NoBreak;s coming\nbecomes low.\n</p><p>\nThese simple strategies oscillate between getting a score of $$$87\\%$$$ and $$$91\\%$$$ of $$$S$$$,\nwhich means many of them are enough to pass Test Set 1, but none seems to be close to pass\nTest Set 2. More sophisticated heuristics can pass Test Set 2, but they need to consider at\nleast the top $$$2$$$ positions and also deal with tactically placing not just $$$9$$$&NoBreak;s but\nalso $$$8$$$&NoBreak;s. These type of solution need careful tweaking and also comes with some\nuncertainty that it will eventually work out. The solutions in the next section address\nboth those issues, ensuring the points and quite possibly saving us time.\n</p>\n<h3><a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\" target=\"_blank\">\n  Dynamic programming</a> strategies</h3>\n<p>\nAn alternative way is to try to maximize the expected score. This does not exactly maximize\nthe probability of getting above a specific threshold (being more aggressive or conservative\nnear the end depending on how close you actually are to the threshold might be better), but it's\nreally close and much simpler.\n</p><p>\nThe optimal such solution (the one that gets $$$S$$$ as its expected score) is too\nslow, but it is worthwhile to consider it as a starting point. By\n<a href=\"https://en.wikipedia.org/wiki/Expected_value#Basic_properties\" target=\"_blank\">\nlinearity of expectation</a>,\nwhen considering where to put a block, only the heights of all current towers matters, but not\nthe actual values that were put there (since that is the score we will get regardless of all future\ndecisions). We can therefore consider the multiset of tower heights the status, and\noptimize a function f(status, next_digit) that checks every possible placement for\neach possible next digit. The problem with this idea is, of course, the status space is too\nbig for the time limit. This is what we did to calculate $$$S$$$, but we ran it for a lot longer\nthan the time limit.\n</p><p>\nAs we mentioned before, we can improve on the time limit by not caring too much about what\nhappens with the low-value positions. That is, consider only a subset of the statuses.\nOne example is this: for each digit we consider only the options of the first greedy strategy.\nWe either put it in the top-most position of some tower, or we put it in the highest tower\nthat has fewer than $$$\\mathbf{B}-1$$$ blocks on it. This severely reduces the number of possible\nstatuses, as there is only one tower that can have a height other than $$$0$$$, $$$\\mathbf{B}-1$$$ or\n$$$\\mathbf{B}$$$. Instead of making the decision greedily, we leave the decision of which option to\nchoose to the dynamic programming part. This solution is fast enough and gets\nabout $$$96\\%$$$ of $$$S$$$ as its score. Not enough for Test Set 2, but getting closer.\nDoing the same but leaving the top $$$2$$$ positions up for optimization, on the other\nhand, gets over $$$99.5\\%$$$ of $$$S$$$ and passes Test Set 2.\n</p><p>\nSince the top position represents close to $$$90\\%$$$ of the value, it makes sense that optimizing\nit gets $$$90\\%$$$ of the score. Similarly, the top two positions represent close to $$$99\\%$$$\nof the value. More formally, consider two modified problems in which the top position or top two\npositions retain their value, but all other positions are valued as $$$0$$$. Our proposed solutions\nget the maximum expected scores $$$S_1$$$ and $$$S_2$$$ for those modified problems, and we know\nthat $$$S_1 \\gt 0.9 \\cdot S$$$ and $$$S_2 \\gt 0.99 \\cdot S$$$. Therefore, our solutions' expected\nscore is guaranteed to be above each respective threshold, and the extra score we get from the\nlower positions gives us an additional gap to make the probability of success extremely high:\nour estimates are that each solution has less than $$$10^{-10}$$$ probability of failing\nthe respective test set.\n</p>\n","id":"00000000007ae37b","statement":"<h3>Problem</h3>\n<p>\nYou are going to build $$$\\mathbf{N}$$$ towers of $$$\\mathbf{B}$$$ cubic blocks each, one block at a time.\nTowers are built bottom-up: the $$$i$$$-th block to be placed in a tower\nends up as the $$$i$$$-th from the bottom. You need to decide where to place\neach block before getting to see any of the upcoming blocks, and once placed,\nblocks cannot be moved.\n</p><p>\nEach block has a single decimal digit printed on it, and towers are built such that the faces with\ndigits are all facing the front. The font is such that blocks cannot be rotated to obtain\na different digit (for example, a block with a $$$6$$$ on it cannot\nbe rotated to obtain a block with a $$$9$$$ on it, nor vice versa).\n</p><p>\nFor example, suppose $$$\\mathbf{N}=3$$$ and $$$\\mathbf{B}=3$$$ and you currently have towers as shown in Picture 1.\nIf a block with a $$$6$$$ shows up next, you have two options: either place it on\ntop of the tower with only two blocks (as shown in Picture 2)\nor start the third tower (as shown in Picture 3). Note that you cannot put it on top of the first\ntower since the first tower already has $$$\\mathbf{B}$$$ blocks.\n</p>\n<div align=center>\n  <div style=\"display: inline-block; flex-direction: column; padding: 40px 60px 0 60px;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0T9mO6CD7eonHtgIedczUS-tylzOsiZLQ7vqP8VUr6amI2OjV7NaB1jpRBtWFXu8cf5T-nmAKVqjm1fridNw-8/digit_blocks_1.png\" style=\"height: 150px;\" alt=\"2 towers having (1, 2, 3) and (4, 5) from top down\">\n    </div>\n    <div>\n      <p>\n        Picture 1\n      </p>\n    </div>\n  </div>\n  <div style=\"display: inline-block; flex-direction: column; padding: 40px 60px 0 60px;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0NQ75Ej7Oa-pNvZZHCVwhhFC81p8RWqr2aZ-6sP7Ognks73Tvq5Eb0SblEAfrE_uA-d5SM1Mki2m-tgsDf_WYi/digit_blocks_2.png\" style=\"height: 150px;\" alt=\"2 towers having (1, 2, 3) and (6, 4, 5) from top down\">\n    </div>\n    <div>\n      <p>\n        Picture 2\n      </p>\n    </div>\n  </div>\n  <div style=\"display: inline-block; flex-direction: column; padding: 40px 60px 0 60px;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U16-69krPtMDaXGiRBs0JcIbGVrycIXYmHdMf4KMCCCJiPg395LQoB6gFT2efpuqlkr1JA4eaANwZqIXsjNP02J/digit_blocks_3.png\" style=\"height: 150px;\" alt=\"3 towers having (1, 2, 3), (4, 5), and (6) from top down\">\n    </div>\n    <div>\n      <p>\n        Picture 3\n      </p>\n    </div>\n  </div>\n</div>\n<p>\nAfter the building is done, we read the $$$\\mathbf{B}$$$ digit integer\nprinted on the front of each tower from the top to the bottom (that is, the digit on\nthe last block placed on a tower is the most significant digit). Notice that these\nintegers may have any number of leading zeroes.\nThen, we add those $$$\\mathbf{N}$$$ integers together to obtain the score of our building operation.\n</p><p>\nFor example, in Picture 4 below, the integers read on each tower, from left to right,\nare $$$123$$$, $$$345$$$, and $$$96$$$. The score of that building operation would\nbe $$$123 + 345 + 96 = 564$$$.\n</p>\n<div align=center>\n  <div style=\"display: inline-block; flex-direction: column; padding: 20px 0 0 0;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1Owzl1SWO_TOMa91vo8Kmz3a2tsOUvRCnleMCodMD8y7X1ETQumXhIynyuRvug-gVm6Is-0BnwPy6ftqG16iuE/digit_blocks_4.png\" style=\"height: 150px;\" alt=\"3 towers having (1, 2, 3), (3, 4, 5), and (0, 9, 6) from top down\">\n    </div>\n    <div>\n      <p>\n        Picture 4\n      </p>\n    </div>\n  </div>\n</div>\n<p>\nThe digit for each block is generated uniformly at random, and independently of\nany other information.\nIn order for your solution to be judged correct, the sum of its scores over all $$$\\mathbf{T}$$$ test cases\nmust be at least $$$\\mathbf{P}$$$.\n</p>\n\n<h3>Input and output</h3>\n<p>\n  This is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of our\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq\" target=\"_blank\">FAQ</a>.\n</p><p>\n  Initially the judge will send you a single line containing four integers $$$\\mathbf{T}$$$, $$$\\mathbf{N}$$$,\n  $$$\\mathbf{B}$$$, and $$$\\mathbf{P}$$$: the number of test cases, the number of towers,\n  the number of blocks in each tower, and the minimum total score you need to reach to\n  pass this test set.\n</p><p>\n  Then, you must process $$$\\mathbf{T}$$$ test cases. Each test case consists of $$$\\mathbf{N} \\times \\mathbf{B}$$$\n  exchanges. Each exchange corresponds to placing one block.\n  Within each exchange, the judge will first print a line containing a single integer\n  $$$\\mathbf{D}$$$ representing the digit printed on the block you need to place.\n  You need to respond with a single line containing a single integer $$$\\mathbf{i}$$$, the number\n  (between $$$1$$$ and $$$\\mathbf{N}$$$) of the tower you want to place that block on.\n</p><p>\n  After the last exchange of each test case except the last one, the judge will\n  immediately start the next test case. After the last exchange of the last test case,\n  the judge will print an additional\n  line containing a single integer: <code>1</code> if your total score\n  is at least $$$\\mathbf{P}$$$ or <code>-1</code> if it is not.\n</p><p>\n  If the judge receives an invalidly formatted line, an invalid tower number,\n  or the number of a tower that already contains $$$\\mathbf{B}$$$ blocks from your\n  program, the judge will print a single number <code>-1</code>.\n  After the judge prints <code>-1</code> for any of the reasons explained above,\n  it will not print any further output. If your program continues to wait for the judge after\n  receiving a <code>-1</code>, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\n</p>\n<p>\n  You can assume that the digit for each block is generated uniformly at random, and independently\n  for each digit, for each test case and for each submission. <i>Therefore\n  even if you submit exactly the same code twice, the judge could use different random digits</i>.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 60 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$\\mathbf{T} = 50$$$.<br/>\n$$$\\mathbf{N} = 20$$$.<br/>\n$$$\\mathbf{B} = 15$$$.<br/>\n$$$\\mathbf{D}$$$ is a decimal digit between $$$0$$$ and $$$9$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$\\mathbf{P} = 860939810732536850$$$ (approximately $$$8.6 \\times 10^{17}$$$).<br/>\nNote that this boundary is chosen as approximately $$$90\\%$$$ of $$$\\mathbf{T} \\times S$$$, where\n$$$S = 19131995794056374.42...$$$ (approximately $$$1.9 \\times 10^{16}$$$)\nis the highest possible <i>expected</i> score that a solution\nto this problem can achieve on one test case given unbounded running time.\n</p>\n\n<p>\nThe exact value of $$$S$$$ as defined above can be found in lines 13 and 14 of the local testing\ntool.\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\n\n$$$\\mathbf{P} = 937467793908762347$$$ (approximately $$$9.37 \\times 10^{17}$$$).<br/>\nNote that this boundary is chosen as approximately $$$98\\%$$$ of $$$\\mathbf{T} \\times S$$$.\n</p>\n\n\n<h3>Testing Tool</h3>\n<p>\n  You can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use our <a href=\"https://storage.googleapis.com/coding-competitions.appspot.com/interactive_runner.py\">interactive runner</a>\n  for that. For more information, read the instructions in comments in that\n  file, and also check out the\n  <a href=\"/codejam/faq#interactive-problems\" target=\"_blank\">Interactive Problems section</a>\n  of the FAQ.\n</p><p>\n  Instructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it is <b>NOT</b>\n  the real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check the\n  <a href=\"/codejam/faq#coding\" target=\"_blank\">Coding section</a>\n  of the FAQ to make sure that you are using the same compiler as us.\n</p><p>\n<a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2bdLjcJNISxNw_qXPu5wUueqC0WDURQ_yxz4CU574nLJ1bm0Q3j0UkfcF77SubeqF-U_sWvnTrP1d88O4AFW8/local_testing_tool.py?dl=1\" download=\"testing_tool.py\">Download testing tool</a>\n</p>\n\n\n  <div class=\"sample-interaction-wrapper\">\n    <div class=\"sample-interaction-header\">\n      <div class=\"sample-interaction-header-text\">Sample Interaction</div>\n    </div>\n    <div class=\"sample-interaction-content\">\n      <div class=\"sample-interaction-judge-solution-labels\">\n        <div class=\"sample-interaction-judge-label\">Judge</div>\n        <div class=\"sample-interaction-solution-label\">Solution</div>\n      </div>\n      \n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Constraints<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">2 3 3 1500\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge provides $$$\\mathbf{T}$$$, $$$\\mathbf{N}$$$, $$$\\mathbf{B}$$$, $$$\\mathbf{P}$$$<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 1<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge provides a block with a 3 on it<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution places it on pile 1<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge provides a block with a 2 on it<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution places it on pile 1<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">5\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">We are now at the state shown in Picture 1<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">6\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">9\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">0\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">We are now at the state shown in Picture 4 (sum = 564)<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 2<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">7\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge provides the first block in the second case<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution places it on pile 3<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">(... 7 exchanges omitted ...)<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">8\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge provides the final block in the second case<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution places it on pile 2 (sum = 1285)<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Both Cases Finished<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge confirms that the sum of both test cases (1849) is at least 1500<br>\n</div>\n\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":16},{"type":1,"type__str":"VISIBLE","value":23}],"title":"Digit Blocks","trial_input_type":2,"trial_input_type__str":"JUDGE_CODE"},{"analysis":"<p>\nTo solve this problem, we can first tackle a simplified version: given a unit of metal $$$x$$$,\ncan it be used to produce all the metals required by the input?\n</p><p>\nTo solve this simplified problem, we can use a greedy strategy. Keep track of the\nmultiset $$$H$$$ of units of metal we have (starting with $$$\\{x\\}$$$) and the multiset $$$D$$$\nof units of metal we owe (starting with the ones given as input). Iterate the following steps:\n<ol>\n<li>Remove the intersection $$$H \\cap D$$$ from both $$$H$$$ and $$$D$$$.</li>\n<li>If $$$D$$$ is empty, the answer is yes.</li>\n<li>If $$$H$$$ is empty and $$$D$$$ is not, the answer is no.</li>\n<li>Take all $$$c$$$ units of the metal $$$i$$$ with the largest number still in $$$H$$$.\nRemove all $$$c$$$ units of $$$i$$$ from $$$H$$$ and insert $$$c$$$ units of $$$i - \\mathbf{A}$$$\nand $$$c$$$ units of $$$i - \\mathbf{B}$$$ into $$$H$$$ (if either new metal number is invalid, skip\nthose).</li>\n</ol>\n</p><p>\nThis procedure works because those units that we greedily transform are not something that we owe,\nso we have nothing better to do with them (it may be futile to convert them, but it does not hurt).\nAnd since we have to produce the units that we owe, we might as well just pay them back as soon\nas possible, as anything we could do with the current unit we could also do with a future unit\nthat we would use to pay the debt instead.\n</p>\n<h3>Test Set 1</h3>\n<p>\nIn Test Set 1, notice that if it is possible to find an answer $$$m$$$\nfor an input where $$$\\mathbf{N}$$$ and all $$$\\mathbf{U_i}$$$ have maximum value, that procedure also produces enough\nunits for any other possible input. If we implement the greedy strategy above and\ntry it for this particular input on increasingly large values for $$$m$$$, we can quickly\narrive at the realization that $$$m=29$$$ solves it. This means that all inputs can be\ngenerated with a metal with number no greater than $$$29$$$. So, using the same\nprocedure of checking increasingly large values of $$$m$$$ for the given input is a valid\nsolution for the full Test Set.\n</p><p>\nIt is also possible to notice and/or prove theoretically that there are no impossible cases\nand that the answers are small. A quick argument is that numbers grow exponentially: from\na single unit of number $$$m$$$ we can create 2 units of number $$$m-2$$$ (with leftovers).\nThis means we can create $$$2^i$$$ units of element $$$m-2i$$$ from a single unit of element\n$$$m$$$. We can distribute these among the elements $$$m-2i-\\mathbf{N}+1$$$ through $$$m-2i$$$ (with\na lot of leftovers), getting\n$$$2^i / \\mathbf{N}$$$ units of each of $$$\\mathbf{N}$$$ consecutive elements. These can be further moved to elements\nwith lower numbers if needed.\nThis shows that an $$$m$$$ such that $$$2^{m - 2 \\times 20} / 20 \\gt 20$$$\nought to be enough, and $$$m=49$$$ fulfills such a requirement.\n</p>\n<h3>Test Set 2</h3>\n<p>\nAs the samples show, impossible cases can happen in Test Set 2. This means running our Test\nSet 1 solution as is will result in the program not finishing and getting a Time Limit Exceeded\nerror. A simple solution, however, is to notice that there is also a somewhat small maximum\nanswer for all possible cases, and then simply stop once we are past it and return impossible.\n</p><p>\nKnowing what that maximum answer is, and proving it, is harder as we cannot just rely on\nexperiments. We have to lean more on the theory of the problem.\n</p><p>\nWe can first notice that starting from metal $$$m$$$, every metal we can possibly produce\nhas the same remainder as $$$m$$$ modulo the\n<a href=\"https://en.wikipedia.org/wiki/Greatest_common_divisor\" target=\"_blank\">\ngreatest common divisor</a>\nbetween $$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$ (let us call that $$$g$$$). This is an application of\n<a href=\"https://en.wikipedia.org/wiki/Diophantine_equation\" target=\"_blank\">\nDiophantine equations</a>, but\nwhile knowing that specific theory could help tackle the problem, it is not absolutely necessary.\nNow, consider the remainder modulo $$$g$$$ of every $$$i$$$ such that $$$\\mathbf{U_i} \\gt 0$$$.\nIf they are all the same value $$$k$$$, then $$$m$$$ modulo $$$g$$$ needs to be $$$k$$$ as well.\nIf they are not all the same, then the case is impossible.\n</p><p>\nAt this point, we can express all metal numbers that matter as $$$g \\times x + k$$$ for some\n$$$x$$$. To show that all of remaining cases are possible, we can generalize the proof we did for\nTest Set 1 and use\n<a href=\"https://en.wikipedia.org/wiki/B%C3%A9zout%27s_identity\">B&eacute;zout's identity</a>\nto build them,\nor we can simply iterate all relatively prime values for $$$\\mathbf{A} / g$$$ and $$$\\mathbf{B} / g$$$\nand solve the largest case experimentally.\nIf we do that, we can arrive at the conclusion that the maximum\npossible answer for a possible Test Set 2 case is $$$402$$$. Therefore, we can do the same solution\nas in Test Set 1, exploring values for $$$m$$$ up to $$$402$$$, and returning impossible if we\ndid not find an answer.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1l2zSCf2TkxdBQedLMZfCoSlOFKGXvmOvls-GAgdU9HnSbD1Nqj5A7-T4KbXSdyKi2rwAyf3UJ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000007ae4aa","statement":"<h3>Problem</h3>\n<p>\nAs the most skilled alchemist in your country, you were summoned yet again because\npowers beyond science were needed to satisfy your country's leader's ever increasing\ngreed for rare metals.\n</p><p>\nEach metal is represented by a positive integer. You need to create $$$\\mathbf{U_1}$$$ units of metal\n$$$1$$$, $$$\\mathbf{U_2}$$$ units of metal $$$2$$$, $$$\\ldots$$$ and $$$\\mathbf{U_N}$$$ units of metal $$$\\mathbf{N}$$$. Metals\n$$$\\mathbf{N}+1, \\mathbf{N}+2, \\ldots$$$ do exist, but you are not required to create any specific amount\nof them. You are allowed to create excess amounts of any metal, which can just be discarded.\n</p><p>\nUnfortunately, budget cuts have left you only the materials for a simple alchemy spell.\nFor some fixed numbers $$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$, with $$$\\mathbf{A} \\lt \\mathbf{B}$$$, you can take one unit\nof metal $$$i$$$ and destroy it to create one unit of metal $$$(i-\\mathbf{A})$$$ and one\nunit of metal $$$(i-\\mathbf{B})$$$.\nIf either of those integers is not positive, that specific unit is not created.\nIn particular, if $$$i \\le \\mathbf{A}$$$, the spell simply destroys the unit and creates nothing.\nIf $$$\\mathbf{A} \\lt i \\le \\mathbf{B}$$$ the spell destroys the unit and\ncreates only a single unit of metal $$$(i-\\mathbf{A})$$$.\n</p><p>\nYou have been assigned an expert miner to assist you. The expert miner can fetch a single unit of\nany metal you want. From that unit, you can use your spell to create other metals\nand then use the spell on the resulting metals to create even more units. The picture below shows a\nsingle unit of metal $$$4$$$ being converted into one unit of metal $$$1$$$ and two units of metal\n$$$2$$$ using two spells with $$$\\mathbf{A}=1$$$ and $$$\\mathbf{B}=2$$$.\n</p><p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2JeD9F-h5N4XV7q7s0nHSkljN2NO7OH_hK8REhuP8akyOHDqhyyMXEPdriEWD4EKxZJG3W1LMtRH5VkvwY6drDYJA/subtransmutation.png\" style=\"max-width:550px;\" alt=\"A single unit of metal 4 creating one unit of metal 1 and two units of metal 2\">\n</p><p>\nMetals represented by larger integers are heavier and more difficult to handle, so you want\nto ask the expert miner for a single unit of metal represented by the smallest possible integer\nthat is sufficient to complete your task, or say that there is no such metal.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$.\n$$$\\mathbf{T}$$$ test cases follow. Each test case consists of two lines. The first line of a\ntest case contains three integers $$$\\mathbf{N}$$$, $$$\\mathbf{A}$$$, and $$$\\mathbf{B}$$$, representing the largest\nmetal number that you are required to create, and the two values that define the\navailable spell as described above, respectively. The second line of a test case contains\n$$$\\mathbf{N}$$$ integers $$$\\mathbf{U_1}, \\mathbf{U_2}, \\ldots, \\mathbf{U_N}$$$, representing the required units of\nmetals $$$1, 2, \\ldots, \\mathbf{N}$$$, respectively.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is <code>IMPOSSIBLE</code>\nif it is not possible to create all required units starting from a single unit of metal.\nOtherwise, $$$y$$$ is the smallest integer that represents a metal such that one unit of it\nis sufficient to create all the required units of metal.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{N} \\le 20$$$.<br/>\n$$$0 \\le \\mathbf{U_i} \\le 20$$$, for all $$$i$$$.<br/>\n$$$1 \\le \\mathbf{U_N}$$$.<br/>\n$$$2 \\le \\mathbf{U_1} + \\mathbf{U_2} + \\cdots + \\mathbf{U_N}$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$\\mathbf{A} = 1$$$.<br/>\n$$$\\mathbf{B} = 2$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{A} \\lt \\mathbf{B} \\le 20$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2hZuxWpvJSCvr-6Xm7Q995qShjA0mMkFp47QXJS8Ws-HeQj6Pj7z9q1a4zHFvK_wgj0XICpvyVMHm5_mcU7MvSDBzyxOhCJokg34xg0bVG/subtransmutation_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n2 1 2\n1 2\n5 1 2\n2 0 0 0 1\n3 1 2\n1 1 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3E-DlB87P0cyYPe4ONm8Axz96dFr8RTthvHPkHLcVDqY7UFeANEcEODGsnkV7uZ9amZmxnoUvUqylEE5yg1LrXuFFb_FOX9uxn1f9fSPcChw/subtransmutation_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4\nCase #2: 6\nCase #3: 5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn Sample Case #1, we require one unit of metal $$$1$$$ and two units of metal $$$2$$$.\nIf we start with a single unit of metal $$$3$$$, then applying the spell once will give us one\nunit of metal $$$1$$$ and one unit of metal $$$2$$$. There is no way to get an additional\nunit of metal $$$2$$$. Similarly,\nstarting with a single unit of metals $$$1$$$ or $$$2$$$ is not sufficient.\nHowever, a single unit of metal $$$4$$$ is sufficient as is demonstrated in the\npicture in the main part of the statement.\n</p><p>\n  In Sample Case #2, we can start with a single unit of metal $$$6$$$ and apply the following\n  operations:\n  <ul>\n    <li>Apply spell on $$$6$$$: $$$\\{6\\} \\longrightarrow \\{4, 5\\}$$$.</li>\n    <li>Apply spell on $$$4$$$: $$$\\{4, 5\\} \\longrightarrow \\{2, 3, 5\\}$$$.</li>\n    <li>Apply spell on $$$2$$$: $$$\\{2, 3, 5\\} \\longrightarrow \\{1, 3, 5\\}$$$.</li>\n    <li>Apply spell on $$$3$$$: $$$\\{1, 3, 5\\} \\longrightarrow \\{1, 1, 2, 5\\}$$$.</li>\n  </ul>\n  Note that even though we have an extra unit of metal $$$2$$$, this solution is valid.\n</p><p>\n  In Sample Case #3, we can start with a single unit of metal $$$5$$$ and apply the following\n  operations:\n  <ul>\n    <li>Apply spell on $$$5$$$: $$$\\{5\\} \\longrightarrow \\{3, 4\\}$$$.</li>\n    <li>Apply spell on $$$4$$$: $$$\\{3, 4\\} \\longrightarrow \\{2, 3, 3\\}$$$.</li>\n    <li>Apply spell on $$$2$$$: $$$\\{2, 3, 3\\} \\longrightarrow \\{1, 3, 3\\}$$$.</li>\n    <li>Apply spell on $$$3$$$: $$$\\{1, 3, 3\\} \\longrightarrow \\{1, 1, 2, 3\\}$$$.</li>\n  </ul>\n  There are other ways to apply spells which also work but they all require starting\n  with a single unit of metal $$$5$$$ or higher.\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U04_HM9RSlZ8pt0CJXNpQhkJaRSM5wEJ7jCmhqU0vrmjX25dOIwSls1vqnImRzq_rXoRlLCPT77cMq24qrT1-ZpudkJVlEkYfOfsJ-y0D4G/subtransmutation_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">3\n3 2 4\n1 1 1\n3 2 4\n1 0 1\n5 2 5\n1 0 0 0 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1fUO_qPh6-Rk7afTjfxzXpKrGKafEQJTvPT4EwTZDcs5ORSsWFbwcMhZLrrhDSzWTjpCD5eQAIHZdOvkXQhwAKmWTGNBa94ntpWHcep7660g/subtransmutation_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: IMPOSSIBLE\nCase #2: 5\nCase #3: 10\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In the first Sample Case for Test Set 2, it is impossible to start with a single unit of any\n  metal and apply the spell with $$$\\mathbf{A}=2$$$ and $$$\\mathbf{B}=4$$$\n  several times and be left with one unit of metals $$$1$$$, $$$2$$$, and $$$3$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":13},{"type":2,"type__str":"HIDDEN","value":18}],"title":"Subtransmutation","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n<p>\nIn Test Set 1, our only unknown is which hand is which. Since there are only $$$3!$$$ possibilities\nfor the assignment of angles in the input to a specific hand, we can just try them all. After\nwe have angles assigned to specific hands, we can just read the time. The easiest way is to\njust check the hours hand, as the statement tells us it moves one tick per nanosecond, so the\ncurrent number of nanoseconds after midnight is equal to the angle in ticks of the hours hand.\nNotice that we still need to check that the time in the other two hands is consistent with this!\nWe can do this by reading the number of minutes and seconds from their hands using the definitions\nin the statements, and see if it is consistent with the current number of minutes and seconds\nas computed from the nanoseconds we got from the hours hand. Alternatively, we can do the\nreverse process of getting from current time to how the clock should look. We do that in more\ndetail below, as it is needed to solve the other test sets.\n</p><p>\nThe solution to Test Sets 2 and 3 is based on first solving the inverse problem: given a time\nof the day, find a canonical set of $$$3$$$ angles that would produce it. Luckily, the way\nto solve it is explained on the statement: we know the speeds of each hand so we can translate\na time of the day into a number of ticks since midnight, and then take it\nmodulo the number of ticks in a full circle ($$$12 \\times 10^{10} \\times 360$$$).\nOnce we get three angles, we need to consider the\npotential rotations. We can say that canonical sets of angles always have at least one $$$0$$$,\nbut there can be up to $$$3$$$ ways to do that (choosing each hand to be the $$$0$$$ one):\nsimply choosing the\n<a href=\"https://en.wikipedia.org/wiki/Lexicographic_order\" target=\"_blank\">lexicographically\nleast</a> of them (after sorting them) suffices.\n</p>\n<h3>Test Set 2</h3>\n<p>\nIn Test Set 2, there are only $$$12 \\times 60 \\times 60$$$ possible times of the day to\nconsider. We can simply build the canonical representation $$$a$$$ for each time $$$t$$$\nand store it in a reverse dictionary from representations to times (which one we save\nif there are multiples does not matter) as a first step. Then, for each input,\nwe get its canonical representation and find a corresponding time in the dictionary to\noutput.\n</p>\n<h3>Test Set 3</h3>\n<p>\nIn Test Set 3, the number of different times of the day is too large to check them all\nindividually. A possible approach is to restrict the number of times of the day that\ncan correspond to a specific input set of angles $$$a$$$ and then check each of those\nto see if anyone fully matches by using the reverse conversion.\n</p><p>\nWe can try every possible assignment of each angle to a specific hand. There are\nonly $$$3!$$$ possibilities for that. Let us say that we now have an angle of $$$a_h$$$ for the\nhours hand, $$$a_m$$$ of the minutes hand and $$$a_s$$$ for the seconds hand.\n</p><p>\nLet us write the real time as $$$h$$$\nfull hours plus $$$n$$$ nanoseconds, that is, $$$h \\cdot 3600 \\cdot 10^9 + n$$$\nnanoseconds since midnight, with $$$h$$$ between $$$0$$$ and $$$11$$$.\nThe angle (in ticks) of the minute hand is $$$12 \\cdot n$$$\nand the angle of the hour hand is $$$h \\cdot 3600 \\cdot 10^9 + n$$$. The difference\nbetween those two numbers $$$h \\cdot 3600 \\cdot 10^9 - 11 \\cdot n$$$ needs to be equal to\nthe difference between the angles we read from the input $$$a_h - a_m$$$. Note that this\nworks because the difference between angles is invariant through rotations.\nIf we try every possible value for $$$h$$$ between $$$0$$$ and $$$11$$$, every variable\nexcept $$$n$$$ in the last equality has an actual value, and we can solve for $$$n$$$.\nIf the value for $$$n$$$ happens to be an integer, it gives us a real time candidate.\n</p><p>\nFinally, for each of the up to $$$3! \\cdot 12$$$ real time candidates, we do the reverse\ncheck as we did in the previous solution.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1nZtaIgHWxkdwOiHXa_c2zNaoZFs7bGoIGPuW7jYK0LzRK2CzmEuuDHstt1EJxuIUX1GLiDinx/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000007ae694","statement":"<h3>Problem</h3>\n<p>\nEmmett found an old clock in his attic. The clock is a circle with 3 hands that attach\nto the center and rotate clockwise at constant speeds. They are called the <i>hours hand</i>,\nthe <i>minutes hand</i> and the <i>seconds hand</i>. At midnight, all hands point up.\nThe hours hand completes a full revolution in $$$12$$$ hours, the minutes hand\ncompletes a full revolution in $$$1$$$ hour, and the seconds hand completes a\nfull revolution in $$$1$$$ minute.\n$$$1$$$ hour is equal to $$$60$$$ minutes, $$$1$$$ minute is equal to $$$60$$$ seconds,\nand $$$1$$$ second is equal to $$$10^9$$$ nanoseconds.\n</p><p>\nFor example, the clock depicted below is showing that the time is exactly $$$6$$$ hours\nand $$$30$$$ minutes after midnight. The hours hand (short black) is halfway between\n$$$6$$$ and $$$7$$$ (completed $$$6.5/12$$$ of a revolution),\nthe minutes hand (long black) is pointing straight down because\nit has completed exactly $$$6$$$ and a half full revolutions and the seconds hand (red)\nis pointing straight up because it has completed an integer number of full revolutions.\n</p><p align=center>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2gt4lHzVl1LHqLhw-SfMalQZ74wsZALwAmjrQH2-HMR6C4V62fCGT_eZGpNksoVIi4bRbCAFjV3A5qGu_UpDEk/broken_clock_2.png\" style=\"max-width: 300px;\" alt=\"a clock showing 6:30\">\n</p><p>\nUnfortunately, the hands are broken, so they all look identical and there is no way to know which hand\nis which. The clock in the picture above, with its hands broken, would look like this.\n</p><p align=center>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3tl11XEuNYOD-L5ZQSyqXiXhKvaI3ZmfSzN_beShlxizI2rl7uj3OPuRbwLSdJOnBggucVjuz1FOEjRE5AEAAAsg/broken_clock_2a.png\" style=\"max-width: 300px;\" alt=\"a clock showing 6:30 with all equal hands\">\n</p><p>\nIn addition, no markings remain that allow Emmett to know which way is up,\nso any rotation of the clock could be the correct one (the clock can only be rotated, not reflected).\nTo continue with our example, the fully broken clock could look like this.\n</p><p align=center>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0TRNvQUS4ndc3i13mwszDOegd__csLTikCKuYGlxawqSMGH_YFvOZd1bFT1f9abr255dmsS63A-t5FqNvh-8mXhg/broken_clock_2b.png\" style=\"max-width: 300px;\" alt=\"a clock showing 6:30 with all equal hands and rotated 45 degrees clockwise\">\n</p><p>\nEmmett does know that the time was strictly\nbefore noon, that is, strictly less than $$$12$$$ hours after midnight. Emmett has taken a picture\nof the clock. Given that picture (represented by the angles of the hands relative to a single\narbitrary axis), figure out what time it could correspond to.\n</p><p>\nNotice that Emmett has already figured out a viable orientation of the clock in some cases\n(Test Set 1) and has managed to narrow down the possible times to a whole integer number of seconds\n(Test Sets 1 and 2) or nanoseconds (Test Set 3). Please see the limits sections for more details.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ lines follow.\nEach line describes a test case and contains three integers $$$\\mathbf{A}$$$, $$$\\mathbf{B}$$$, and $$$\\mathbf{C}$$$: the angles of each hand,\nrelative to an arbitrary axis and given in ticks in the clockwise direction. $$$1$$$ <i>tick</i>\nis equal to $$$1/12 \\times 10^{-10}$$$ degrees. This means that the hours hand rotates exactly\n$$$1$$$ tick each nanosecond, the minutes hand rotates exactly $$$12$$$ ticks each nanosecond and\nthe seconds hand rotates exactly $$$720$$$ ticks each nanosecond.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing\n<code>Case #$$$x$$$: $$$h$$$ $$$m$$$ $$$s$$$ $$$n$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and\n$$$h$$$, $$$m$$$, $$$s$$$, and $$$n$$$ are integers: $$$h$$$ is the number of full hours since\nmidnight (between $$$0$$$ and $$$11$$$, inclusive),\n$$$m$$$ is the number of full minutes since the last full hour (between $$$0$$$ and $$$59$$$,\ninclusive), $$$s$$$ is the number of full seconds since the last full minute (between $$$0$$$\nand $$$59$$$, inclusive) and $$$n$$$ is the number of full nanoseconds since the\nlast full second (between $$$0$$$ and $$$10^9-1$$$, inclusive).\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$0 \\le \\mathbf{A} \\le \\mathbf{B} \\le \\mathbf{C} \\lt 360 \\times 12 \\times 10^{10}$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\nThere is a time $$$t$$$ that corresponds to the input such that:\n<ul>\n  <li>$$$t$$$ is an integer number of seconds after midnight.</li>\n  <li>$$$t$$$ can be read from the input clock without rotating it.</li>\n</ul>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\n\nThere is a time that corresponds to the input and is an integer number of seconds after midnight.\n</p>\n\n<h4>Test Set 3 (Visible Verdict)</h4>\n<p>\n\nThere is a time that corresponds to the input and is an integer number of nanoseconds after\nmidnight.\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3qRLHVjxF1Qr5az5OP5cqihYNq8ovBslU8fLCHCdiWbJTpyuTJVpN7-6GwyoCAz1E47QVTlNsGEmA9t7w1mPBsQRRxHP9VLtX02qQ/broken_clock_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n0 0 0\n0 21600000000000 23400000000000\n1476000000000 2160000000000 3723000000000\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2xHh4__hApeZONWvR4NNXLLo6a1dS8gKm6XnAkV3BU6XlKw4hxA7XrJqb3p8eI3eeXW59RfG49swYbIgzu6vwMxbKlgAF-W9sjNW_o/broken_clock_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0 0 0 0\nCase #2: 6 30 0 0\nCase #3: 1 2 3 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nIn Sample Case #1, all hands point up (as in the first picture below)\nwhich happens only exactly at midnight (as in the second picture below).\n</p><p align=center>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3miydrlscYXRnHLB1EFvxYztM11y9aZbbLsz4rF67Pf-4jetbGEq7Fd9X75GmVsyAKNxtb2KxV520WWuudTV2iZA/broken_clock_1a.png\" style=\"max-width: 300px;\" alt=\"a clock showing midnight with all equal hands\"> &nbsp; &nbsp; &nbsp;\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0cBXrk1P1fyJupyMV34ZqiK3WquaxlBzQwV5iAkqrcyIecIl5ZC5RYmFXjGtAcyS9vz8aYUw3PACQSSuEpgJ-m/broken_clock_1.png\" style=\"max-width: 300px;\" alt=\"a clock showing midnight\">\n</p><p>\nSample Case #2 is the one pictured in the main part of the statement.\nThe angles of the hands in degrees are $$$0$$$, $$$180$$$ and $$$195$$$. These\nangles can correspond to $$$6$$$&NoBreak;h $$$30$$$&NoBreak;m $$$0$$$&NoBreak;s without rotating the clock, as the\npictures in the main part of the statement show. Notice however, that at\n$$$0$$$&NoBreak;h $$$30$$$&NoBreak;m $$$0$$$&NoBreak;s (pictured below), the clock looks\nthe same but rotated 180 degrees.\n</p><p align=center>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2ZryaCAhHyBac5_m-YeBNH4W3ZZhpOzAii8pNE4X1m7UB9GzcONmYX4VJXTLHOEDUNX1A81tTrwD6U_wksa5wyg6hz2A/broken_clock_2_alt.png\" style=\"max-width: 300px;\" alt=\"a clock showing 0:30\">\n</p><p>\nEven in Test Set 1,\n$$$0$$$&NoBreak;h $$$30$$$&NoBreak;m $$$0$$$&NoBreak;s would be a valid answer. The limit\nonly says that there\nis one valid time that does not require rotating the clock, but times that work with rotation\nare also valid answers.\n</p><p>\nIn Sample Case #3, the input represents the clock in the first picture below and the given output happens\nwhen interpreting the clock as in the second picture below.\n</p><p align=center>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1BVhUD-aIeCm61R-Q4Z3PfjzDB14FBBh7ZEedM_mb481Evxwi1WozEcHQ8sr1o2N6HZRUAIgdhFCr3Yn5DPWVjCw/broken_clock_3a.png\" style=\"max-width: 300px;\" alt=\"a clock showing 01:02:03\"> &nbsp; &nbsp; &nbsp;\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1ieOu-4rsaV1z3IjJwkVhrZ50JJvCeSM7emy_M59Pmm3LOf1NZhKu0txRFlO9AEAB1GaN_GARKyZgsszPZFblJ/broken_clock_3.png\" style=\"max-width: 300px;\" alt=\"a clock showing 01:02:03 with all equal hands\">\n</p>\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1klZpEiGcVMugln0lob4XUy3ytv2-sx10EY0x6bPLTVmvBGa4uh9a3v9i2FTD6N2rrjUM2VWPCFGXLrFHTwTDFLxcEW6ZIvQrVtdw/broken_clock_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">3\n5400000000000 5400000000000 5400000000000\n10800000000000 32400000000000 34200000000000\n23076000000000 23760000000000 25323000000000\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1_tMdAzmn6UOqkQDQXc7dttOInStQsC2eY1Arfv1-lVKeWyphm0afXVyrQwDWY_YSCdb8z4D-_N-E5c0dqzSUmzfTzeYisS2lUxQiY/broken_clock_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 0 0 0 0\nCase #2: 0 30 0 0\nCase #3: 1 2 3 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nSample Cases in this test set are the same as in the previous one, but the clock is rotated by\n$$$45$$$, $$$90$$$, and $$$180$$$ degrees clockwise respectively, as shown below.\n</p><p align=center>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1bmuvCiISKUT9xI1uDK9zX1yxByT5Jqc5fBDijIF8e2UMnrCrJzt8M5how5dyqaYr2Gcc1C3fu3zeMUJn2D5rw2A/broken_clock_1b.png\" style=\"max-width: 300px;\" alt=\"a clock showing midnight with all equal hands and rotated 45 degrees\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0TRNvQUS4ndc3i13mwszDOegd__csLTikCKuYGlxawqSMGH_YFvOZd1bFT1f9abr255dmsS63A-t5FqNvh-8mXhg/broken_clock_2b.png\" style=\"max-width: 300px;\" alt=\"a clock showing 06:30:00 with all equal hands and rotated 90 degrees\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0Aha-7jR6S5hccEySlrOYQOqEVgkVuMQ2-G3MsjJDWK7x4nJl28s7ablsfI3h58bLnhg8_oA1D1lQEFSPPSCnaKg/broken_clock_3b.png\" style=\"max-width: 300px;\" alt=\"a clock showing 01:02:03 with all equal hands and rotated 180 degrees\">\n</p>\n\n  <br/>\n  <h3>Additional Sample - Test Set 3</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 3. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0KCdc7xwrfFPXeoVTdXcvT7wIoMpRLjyXxjUdH7whW9HQRUPlzXPHgHBABlcnTw2d3qhWOsJnKuEiv2vBYy11EyCb7rR2Kxvs8Ld0/broken_clock_sample_ts3_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_2').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_2');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_2\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_2\">1\n0 11 719\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3dlRpMGGsgbeuqd3ZCIuW-S2fkpJOLdzs5TvryTAq49kRKvXSTml4nbVR-rgCuEEgbi-iqfFaqQmJVo5xlfeVAy4oenbhMP2gxCiNw/broken_clock_sample_ts3_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_2').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_2');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_2\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_2\">Case #1: 0 0 0 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nAs explained above, $$$1$$$ nanosecond after midnight the hands are moved\nby $$$1$$$, $$$12$$$, and $$$720$$$ ticks, respectively. If the clock is also rotated\ncounter-clockwise by $$$1$$$ tick, the hand angles are exactly the ones given in the input.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":1,"type__str":"VISIBLE","value":6},{"type":1,"type__str":"VISIBLE","value":19}],"title":"Broken Clock","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000435baf","type":1,"type__str":"SPECTATOR"},"title":"Round 1B 2021"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
