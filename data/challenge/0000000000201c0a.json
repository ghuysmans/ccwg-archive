{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1474185600000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000201c0a","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1474174800000,"tasks":[{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1e2uXxibsnQqrQHzu6m8ah4OqsKgTM10PcK2cQOjpvUgV5KPjn2qMA4WPaeECk84CHxnktIQDC/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201c0b","statement":"<h3>Soldiers</h3>\n<p>\nGeneral Alice and General Bob are playing a war game.\nThere are <b>N</b> soldiers in the game.\nEach soldier has two stats: attack and defense.\n</p>\n\n<p>\nBefore the game starts, General Alice and General Bob will take turns selecting soldiers, with General Alice going first.\nIn each turn, a player can select one soldier, as long as that soldier either has an attack stat\ngreater than each of the attack stats of all soldiers selected so far, <i>or</i> has a defense stat\ngreater than each of the defense stats of all soldiers selected so far. To be precise:\nlet <b>A</b><sub>i</sub> and <b>D</b><sub>i</sub> be the attack and defense values for the i-th soldiers,\nfor i from 1 to <b>N</b>, and let S be the set of soldiers that have been selected so far.\nThen a player can select soldier x if and only if at least one of the following is true:\n<ul>\n<li><b>A</b><sub>x</sub> &gt; <b>A</b><sub>s</sub> for all s in S</li>\n<li><b>D</b><sub>x</sub> &gt; <b>D</b><sub>s</sub> for all s in S</li>\n</ul>\nIf no selection can be made, then the selection process\nends and the players start playing the game.\n</p>\n\n<p>\nGeneral Alice wants to select more soldiers than General Bob, and General Bob wants to avoid that. If both players play\noptimally to accomplish their goals, can General Alice succeed?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of each case contains a positive integer <b>N</b>, the number of soldiers. <b>N</b>\nmore lines follow; the i-th of these line contains two integers <b>A</b><sub>i</sub> and <b>D</b><sub>i</sub>,\nindicating the attack and defense stats of the i-th soldier.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the\ntest case number (starting from 1) and <code>y</code> is <code>YES</code> or <code>NO</code>,\nindicating whether General Alice can guarantee that she selects more soldiers than General Bob, even if General Bob plays\noptimally to prevent this.\n</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 10;<br/>\nTime limit: 30 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n1 &le; <b>A</b><sub>k</sub>, <b>D</b><sub>k</sub> &le; 10000.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n1 &le; <b>N</b> &le; 200.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n1 &le; <b>N</b> &le; 4000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0cIhjm0Y0iPUFW9VcwFDFNMqNzhy92Opp0PyHbDwmYpW-ZF51c30IGUXOdwjBzHe8V4zley26Xv_uP7G8VOLSNb6L_3cAjYw/soldiers_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3\n10 2\n1 10\n10 3\n3\n10 1\n10 10\n1 10\n3\n10 2\n1 10\n4 9\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1uyg880XxpdyQyhLFhWwJa_uorGe082cLjmeUy_PkfE48ESA_XNI28NypAMmjGqCZF3bLojJ-EVtWbE9SrafsSCbUx6niV7YU/soldiers_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: NO\nCase #2: YES\nCase #3: YES\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":16},{"type":2,"type__str":"HIDDEN","value":23}],"title":"Soldiers","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1RbZWzsEJxu7f9CXmaELGr0_t3ZB2nKp1BZ461WlF-Pn8j9GI9lMqgVQ8NOcpclJX6hYz7V1lQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201ca4","statement":"<h3>Problem</h3>\n<p>\n<p>Codejamon is a mobile game in which monster trainers walk around in the real world to catch monsters. You have an old smartphone with a short battery life, so you need to choose your path carefully to catch as many monsters as possible.</p>\n<p>Suppose the Codejamon world is a rectangular grid with <b>R</b> rows and <b>C</b> columns. Rows are numbered from top to bottom, starting from 0; columns are numbered from left to right, starting from 0. You start in the cell in the <b>R<sub>s</sub></b>th row and the <b>C<sub>s</sub></b>th column. You will take a total of <b>S</b> unit steps; each step must be to a cell sharing an edge (not just a corner) with your current cell.</p>\n<p>Whenever you take a step into a cell in which you have not already caught a monster, you will catch the monster in that cell with probability <b>P</b> if the cell has a monster attractor, or <b>Q</b> otherwise. If you do catch the monster in a cell, it goes away, and you cannot catch any more monsters in that cell, even on future visits. If you do not catch the monster in a cell, you may still try to catch the monster on a future visit to that cell. The starting cell is special: you have no chance of catching a monster there before taking your first step.</p>\n<p>If you plan your path optimally before making any move, what is the maximum possible expected number of monsters that you will be able to catch?</p>\nThe battery can only support limited steps, so hurry up!\n</p>\n\n<h3>Input</h3>\n<p>\n<p>The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.</p>\n<p>Each test case starts with a line of five integers: <b>R</b>, <b>C</b>, <b>R<sub>s</sub></b>, <b>C<sub>s</sub></b> and <b>S</b>. <b>R</b> and <b>C</b> are the numbers of rows and columns in the grid; <b>R<sub>s</sub></b> and <b>C<sub>s</sub></b><br/> are the numbers of the row and column of your starting position, and <b>S</b> is the number of steps you are allowed to take.</p>\n\n<p>The next line contains two decimals <b>P</b> and <b>Q</b>, where <b>P</b> is the probability of meeting a monster in cells with a monster attractor, and <b>Q</b> is the probability of meeting a monster in cells without a monster attractor. <b>P</b> and <b>Q</b> are each given to exactly four decimal places.</p>\n<p>Each of the next <b>R</b> lines contains contains <b>C</b> space-separated characters; the j-th character of the i-th line represents the cell at row i and column j. Each element is either <code>.</code> (meaning there is no attractor in that cell) or <code>A</code> (meaning there is an attractor in that cell).</p>\n</p>\n\n<h3>Output</h3>\n<p>For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is the largest possible expected number of monsters that the player can catch in the given amount of steps.</p>\n<p><code>y</code> will be considered correct if <code>y</code> is within an absolute or relative error of 10<sup>-6</sup> of the correct answer. See the <a href=\"https://codingcompetitions.withgoogle.com/kickstart/faq\" target=\"_blank\">FAQ</a> for an explanation of what that means, and what formats of real numbers we accept.</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 100.<br/>\nTime limit: 30 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n0 &le; <b>R<sub>s</sub></b> &lt; <b>R</b>.<br/>\n0 &le; <b>C<sub>s</sub></b> &lt; <b>C</b>.<br/>\n0 &le; <b>Q</b> &lt; <b>P</b> &le; 1.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n1 &le; <b>R</b> &le; 10.<br/>\n1 &le; <b>C</b> &le; 10.<br/>\n0 &le; <b>S</b> &le; 5.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n1 &le; <b>R</b> &le; 20.<br/>\n1 &le; <b>C</b> &le; 20.<br/>\n0 &le; <b>S</b> &le; 9.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3SNk2OApRI0l5Xv9eD1QqBFooOPTzAFYQnpcyUaC7Z_F9cDx2FzdC7Upp4iIqdsVFpyo26MDJV8PqN9QKlWe0jt5csxGFghjcuU1k/monster_path_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n4 4 0 0 5\n0.8000 0.2000\n. . . .\n. . . .\n. . A .\n. A . A\n10 10 9 1 4\n0.6121 0.1000\n. . A A . . . . . .\nA . . . . . . . . .\n. . A . . . . A . .\n. . . A A . . . . .\n. A A A . . . . . A\nA . A A . . . . A .\n. A . . . . . A . .\n. . . . A A . . . .\n. . A . . . A . . A\n. . . . A . . A . .</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3llNLj4-vQiQrApsVCxwo2VKSxJ8a6uGAGehkDej3MMo-dG7L_Yh2mpIYX5uNhJWjPVPEzFy4w-0xxTL9rFdRQhETq590UGpvCTNvY/monster_path_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1.6000000\nCase #2: 1.0495336</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>In Case #1, one of the best paths is (0,0)->(0,1)->(0,2)->(1,2)->(2,2)->(2,3). On this path, the expected number of monsters that you will catch is 0.2 + 0.2 + 0.2 + 0.8 + 0.2 = 1.6. Remember that there is no chance of catching a monster before taking your first step, which is why there are five probabilities in the calculation, not six.</p>\n<p>In Case #2, one of the best paths is (9,1)->(9,2)->(8,2)->(8,3)->(8,2). On this path, the expected number of monsters that you will catch is 0.1 + 0.6121 + 0.1 + 0.23743359 = 1.04953359. Since we accept results within an absolute or relative error of 10<sup>-6</sup> of the correct answer (1.04953359), 1.0495336 is accepted.</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":7},{"type":2,"type__str":"HIDDEN","value":8}],"title":"Monster Path","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2Hmen5kphpGo8IiheB7dVjN_6pm58uZeEowh44wo9J5AWIEZMoMGtqGOF2nnpKR7Ix5BN0LdLx/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201d31","statement":"<h3>Problem</h3>\n<p>Codejamon trainers are actively looking for monsters, but if you are not a trainer, these monsters could be really dangerous for you. You might want to find safe places that do not have any monsters!</p>\n<p></p>\nConsider our world as a grid, and some of the cells have been occupied by monsters. We define a <i>safe square</i> as a grid-aligned <b>D</b> &times; <b>D</b> square of grid cells (with <b>D </b> &ge; 1) that does not contain any monsters. Your task is to find out how many safe squares (of any size) we have in the entire world.\n\n<h3>Input</h3>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each test case starts with a line with three integers, <b>R</b>, <b>C</b>, and <b>K</b>. The grid has <b>R</b> rows and <b>C</b> columns, and contains <b>K</b> monsters. <b>K</b> more lines follow; each contains two integers <b>R<sub>i</sub></b> and <b>C<sub>i</sub></b>, indicating the row and column that the i-th monster is in. (Rows are numbered from top to bottom, starting from 0; columns are numbered from left to right, starting from 0.)\n\n<h3>Output</h3>\nFor each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is the the total number of safe zones for this test case.\n\n<h3>Limits</h3>\nTime limit: 60 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n<p>1 &le; <b>T</b> &le; 20.</p>\n<p>(<b>R<sub>i</sub></b>, <b>C<sub>i</sub></b>) &ne; (<b>R<sub>j</sub></b>, <b>C<sub>j</sub></b>) for i &ne; j. (No two monsters are in the same grid cell.)</p>\n<p>0 &le; <b>R<sub>i</sub></b> &lt; <b>R</b>, i from 1 to <b>K</b></p>\n<p>0 &le; <b>C<sub>i</sub></b> &lt; <b>C</b>, i from 1 to <b>K</b></p>\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>1 &le; <b>R</b> &le; 10.</p>\n<p>1 &le; <b>C</b> &le; 10.</p>\n<p>0 &le; <b>K</b> &le; 10.</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>1 &le; <b>R</b> &le; 3000.</p>\n<p>1 &le; <b>C</b> &le; 3000.</p>\n<p>0 &le; <b>K</b> &le; 3000.</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1kCUMHbMH0_nsbUA_Z93wjurAstmWq5LZS52dFw_OKPnq5EUKXgPGwaOW6iOeFdTc7LdRFuUaXbt-B5NbsIoE-8ZvqY67oRmjmUQ8/safe_squares_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3 3 1\n2 1\n4 11 12\n0 1\n0 3\n0 4\n0 10\n1 0\n1 9\n2 0\n2 4\n2 9\n2 10\n3 4\n3 10</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0OHQhr_t3UkiH8aAeSq6nXJZu5vsY8U0ubfPVqrGr-uMxVw83GORJhw7XekUuVMSwzHZgD6o8x4td8eUhf_lEBM4QJCM7ubDGf7VbW/safe_squares_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 10\nCase #2: 51</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>The grid of sample case #1 is:</p>\n<code>\n0 0 0<br>\n0 0 0<br>\n0 1 0<br>\n</code>\n<p>Here, 0 represents a cell with no monster, and 1 represents a cell with a monster. It has 10 safe squares: 8 1x1 and 2 2x2.</p>\n<p>The grid of sample case #2 is:</p>\n<code>\n0 1 0 1 1 0 0 0 0 0 1<br>\n1 0 0 0 0 0 0 0 0 1 0<br>\n1 0 0 0 1 0 0 0 0 1 1<br>\n0 0 0 0 1 0 0 0 0 0 1<br>\n</code>\n\n<p>Note that sample case #2 will only appear in the Large dataset. It has 51 safe squares: 32 1x1, 13 2x2, 5 3x3, and 1 4x4.</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":6},{"type":2,"type__str":"HIDDEN","value":13}],"title":"Safe Squares","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1dSNmBc9egJu4noqArWWTrISZM42SDovgmrRCTpjkIMytHukUEXqRLjaiAqEJgbHzzgu_KWvjQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201dbc","statement":"<h3>Problem</h3>\n<p>\nGiven an unordered list of assignment statements, write a program to determine whether the\nassignment statements can be put in some order in which all variables can be evaluated.\n</p>\n<p>For our problem, an assignment statement will consist of an assignment variable, an assignment\noperator, and an expression, in that order. Statements will be evaluated one at a time, in the order\nyou choose for them. A variable can be evaluated if and only if it has been the assignment variable\nof a previous assignment statement.\n</p>\n\n<p>\nTo simplify the problem, all the expressions are single function calls. Functions can take an\narbitrary number of arguments, including zero; a function with zero arguments is always valid, and a\nfunction with variable arguments is valid as long as all of the variables are evaluatable.\n</p>\n\n<p>\nFor example, for the following list of assignment statements:\n</p>\n\n<pre>a=f(b,c)\nb=g()\nc=h()</pre>\n<p>\nthis is one order that makes every statement valid:\n</p>\n<pre>\nb=g()\nc=h()\na=f(b,c)</pre>\n<p>\nThis is because: (1) <code>b</code> and <code>c</code> can be evaluated because the expressions\n<code>g()</code> and <code>h()</code> don't depend on any variables; and (2)<code>a</code> can also\nbe evaluated because expression <code>a</code> depends on <code>b</code> and <code>c</code>, which\nare evaluatable.\n</p>\n<p>\nHowever, the order\n</p>\n<pre>b=g()\na=f(b,c)\nc=h()</pre>\n<p>\nwould not be valid, because <code>f(b, c)</code> has variable c as an argument, but variable c has\nnot been an assignment variable yet.\n</p>\n<p>\nAnother example is: <code>a=f(a)</code>. This list of statements can't be evaluated because the\nexpression <code>f(a)</code> depends on the variable <code>a</code> itself, which makes it\nimpossible to evaluate the statement.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\nThe first line of each test case contains an integer <b>N</b>: the number of assignment statements.\nThen, <b>N</b> lines follow. Each contains one assignment statement.\n<p>\nEach assignment statement consists of three parts: the assignment variable, the assignment operator,\nand the expression, with no spaces in between. The assignment operator is always <code>=</code>. All\nexpressions consist of a function name, then <code>(</code>, then zero or more comma-separated\nvariable names, then <code>)</code>. All variables and function names consist of one or more\nlowercase English alphabet letters. No variable has the same name as a function. No variable will\nappear more than once as the assignment variable. However, variables may appear more than once in\nvarious functions (even within the same function), and functions may appear more than once.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the\ntest case number (starting from 1) and <code>y</code> is <code>GOOD</code> if all variables\nare evaluatable or <code>BAD</code> otherwise.\n</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 20.<br/>\nTime limit: 30 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\nAll functions take between 0 and 10 arguments, inclusive. All variable names consist of between 1\nand 20 lowercase English alphabet letters.\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n1 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n1 &le; <b>N</b> &le; 1000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0aWovh00U-OKFqF5iEm4vnf2IxzJ0FK_UZ-d1tyzb_rcp5t-EAN-EERv3qj_UHld_a3F7ZbyCXC34WlimVlKPLDgy628m8XEAQ/evaluation_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n3\na=f(b,c)\nb=g()\nc=h()\n2\na=f(b)\nb=f(a)\n2\naaa=foo(x,y)\nbbb=bar(aaa,bbb)\n2\nx=f()\ny=g(x,x)</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U11CO6YPlsontPAkBMDqI-ZFF7RWf-tg2EGhCWntPSbP3tKK991BGzGpdeLpV0-1IW5vVDxhN8bKbaC8-LTXjp-EKpp-RTcn372bg/evaluation_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: GOOD\nCase #2: BAD\nCase #3: BAD\nCase #4: GOOD</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":12},{"type":2,"type__str":"HIDDEN","value":15}],"title":"Evaluation","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000201c0a","type":1,"type__str":"SPECTATOR"},"title":"Round C 2016"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
