{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1601175600000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"000000000019ff48","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\r\n  Thank you for participating in Kick Start 2020 Round F.\r\n</p>\r\n<p>\r\n</p>\r\n<hr>\r\n<p>\r\n<b>Cast</b>\r\n</p><p>\r\n  ATM Queue: Written by Vikash Dubey and prepared by Raihat Zaman Neloy.\r\n</p><p>\r\n  Metal Harvest: Written by Pablo Heiber and prepared by Raihat Zaman Neloy.\r\n</p><p>\r\n  Painters' Duel: Written by Swante Scholz and prepared by Anson Ho.\r\n</p><p>\r\n  Yeetzhee: Written by Pablo Heiber and prepared by Jonathan Irvin Gunawan.\r\n</p><p>\r\n  Solutions, other problem preparation, reviews and contest monitoring by\r\n  Andrey Anurin,\r\n  Anoopam Mishra,\r\n  Anson Ho,\r\n  Anushi Maheshwari,\r\n  Bartosz Kostka,\r\n  Bohdan Pryshchenko,\r\n  Cristhian Bonilha,\r\n  Devanshu Agarwal,\r\n  Diksha Saxena,\r\n  Gagan Kumar,\r\n  Ian Tullis,\r\n  Jared Gillespie,\r\n  Jayant Sharma,\r\n  Jonathan Irvin Gunawan,\r\n  Kevin Tran,\r\n  Lalit Kundu,\r\n  Lizzie Sapiro,\r\n  Marcin Wawerka,\r\n  Michał Łowicki,\r\n  Naranbayar Uuganbayar,\r\n  Nikhil Hassija,\r\n  Pablo Heiber,\r\n  Phil Sun,\r\n  Raihat Zaman Neloy,\r\n  Ruoyu Zhang,\r\n  Sai Surya Upadrasta,\r\n  Sanyam Garg,\r\n  Saurabh Joshi,\r\n  Seunghyun Jo,\r\n  Sudarsan Srinivasan,\r\n  Swante Scholz,\r\n  Swapnil Gupta,\r\n  Timothy Buzzelli,\r\n  Vikash Dubey,\r\n  Vipin Singh,\r\n  Wajeb Saab, and\r\n  Yang Xiao.\r\n</p>\r\n<p>\r\nAnalysis authors:\r\n</p>\r\n<ul>\r\n  <li>ATM Queue: Marcin Wawerka</li>\r\n  <li>Metal Harvest: Vipin Singh</li>\r\n  <li>Painters' Duel: Devanshu Agarwal</li>\r\n  <li>Yeetzhee: Phil Sun</li>\r\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1601164800000,"tasks":[{"analysis":"<h3>Test Set 1</h3>\n<p>\n  There are only 4 rooms, (1, 1), (2, 1), (2, 2) and (2, 3). Both the players, will try to paint the room (2, 2), painting which would block the other player to paint more rooms.\n</p>\n<p>\n  Thus there are five cases,\n</p>\n<ul>\n  <li>If <b>C</b> = 2, none of the players can move, therefore the answer is 0.</li>\n  <li>If any of the players starts on room (2, 2) and <b>C</b> != 2, they will paint two rooms and the other player will paint one room.</li>\n  <li>If room (2, 2) is blocked, none of the players can move, therefore the answer is 0.</li>\n  <li>If any room other than (2, 2) is blocked, and no player start on (2, 2), then Alma will paint two rooms and Berthe will paint one room.</li>\n  <li>If no room is blocked, and no player start on (2, 2), then Alma will paint three rooms and Berthe will paint one room.</li>\n</ul>\n<h3>Test Set 2</h3>\n<p>\n  At any point during the game, few rooms of the museum might be under construction, few might have been painted by Alma, few might have been painted by Berthe and a few might be unpainted.\n</p>\n<p>\n  The rooms which are either under construction, painted by Alma or painted by Berthe are not paintable any further. Lets represent these rooms as blocked rooms, and the remaining rooms as free rooms.\n  Thus, without losing any information we can uniquely represent the state of the museum with the following parameters,\n</p>\n<ul>\n    <li>The free rooms.</li>\n    <li>Position of Alma.</li>\n    <li>Position of Berthe.</li>\n    <li>Whose turn is it?</li>\n    <li>Present score of the game</li>\n</ul>\n<p>\n  We can represent blocked/free rooms of the museum as a binary string, 0 denoting the blocked rooms, and 1 representing the free rooms.\n</p>\n<p>\n  Lets define a function, <code>CalcScore()</code>, which takes the binary string, position of Alma and Berthe, and whose turn it is as input parameters and returns the optimal score as output, that is, the minimal possible score if it is Berthe's turn and maximum possible score if it is Alma's turn.\n</p>\n<p>\n  <code>CalcScore()</code> recursively calls itself with every reachable state, that is, the player tries to paint all the three neighbouring rooms, thus, recursively call <code>CalcScore()</code> for all the valid states.\n</p>\n<p>\n  Lets denote T(N) as time complexity when N rooms are free.\n  In every nested call of <code>CalcScore()</code>, the number of free rooms decreases by 1, thus the recursion depth of <code>CalcScore()</code> can be at max <b>S</b><sup>2</sup>-2.\n  A room has at most three neighboring rooms, but if it is not the starting position at least one of them will already be painted because that's where the player came from. Thus, when a player reaches a room, he has only two neighboring rooms to move to.\n  So, every call to <code>CalcScore()</code> can generate at max 2 recursive calls to <code>CalcScore()</code>.\n</p>\n<p>\n  Thus,\n</p>\n<ul>\n    <li>T(N) = 2 &times; T(N-1)</li>\n    <li>T(0) = O(1)</li>\n</ul>\n<p>\n  Therefore, the time complexity of the initial configuration is O(2<sup><b>S</b><sup>2</sup></sup>).\n  Which although seems to be not good enough for <b>S</b> = 6, but in practice, the solution passes well within the time limits as most of the recursion depth will be way less than the presumed maximum. Depends on the implemetation details, but the number of calls to <code>CalcScore()</code> for the worst case is of the order of 10<sup>5</sup>.\n</p>\n<p>\n  Although not needed for Test Set 2, but, we can use techniques like <a href=\"https://en.wikipedia.org/wiki/Memoization\">Memoization</a> and <a href=\"https://en.wikipedia.org/wiki/Alpha%E2%80%93beta_pruning\">Alpha–Beta pruning</a> to further speed up the solution.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1muVHFWiax8XUR8b8Afy-XnehJpmsp40Q-r_sG3gbxooMbEA75PNFykNd3wrXue11ozNZ1fow/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000003f47fb","statement":"<h3>Problem</h3>\n<p>\n  A new art museum is about to open! It is a single-story building in the shape of a large\n  equilateral triangle. That triangle is made up of many smaller identical\n  equilateral-triangle-shaped rooms, and the side length of the museum is <b>S</b> times the side\n  length of any one of the rooms. Each room has doors connecting it to all other rooms with which\n  it shares a side (not just a vertex).\n</p><p>\n  Each room is identified by two numbers: the row of the building it is in (counting\n  from top to bottom, starting from 1), followed by its position within that row (counting from\n  left to right, starting from 1). Here is an example of how the rooms are connected and labeled\n  when <b>S</b> = 3:\n</p><p style=\"text-align:center\">\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3akAQSQ-I82PrRatfkx7h3TF6LPpYctcxGJM4bKpiIydkElWl4e0sw6vn5eGg4nvSQ5PPv3dkw-sDuYw/example.png\"/>\n</p><p>\n  Alma and Berthe are artists who are painting the rooms of the museum. Alma starts in the room\n  (<b>R<sub>A</sub></b>, <b>P<sub>A</sub></b>), and Berthe starts in a different room\n  (<b>R<sub>B</sub></b>, <b>P<sub>B</sub></b>). Each of them has already painted their starting\n  room. <b>C</b> of the other rooms of the museum are under construction, and neither Alma nor\n  Berthe is allowed to enter these rooms or paint them.\n</p><p>\n  Alma and Berthe are having a friendly competition and playing a turn-based game, with Alma\n  starting first. On a painter's turn, if their current room is adjacent to at least one\n  unpainted room that is not under construction, the painter must choose one of those rooms,\n  move to it, and paint it. Otherwise, the painter cannot move and does nothing on their turn.\n  Once both painters are unable to move, the game is over. The score of the game is the number of\n  rooms painted by Alma minus the number of rooms painted by Berthe.\n</p><p>\n  Both painters make optimal decisions, with Alma trying to maximize the score and Berthe trying\n  to minimize the score. Given this, determine the best score Alma can guarantee for the game,\n  regardless of what Berthe does.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each case begins with one line containing six integers <b>S</b>, <b>R<sub>A</sub></b>,\n  <b>P<sub>A</sub></b>, <b>R<sub>B</sub></b>, <b>P<sub>B</sub></b>, and <b>C</b>. Respectively,\n  these are the side length of the museum (as a multiple of the side length of a room), the row and\n  position of Alma's starting room, the row and position of Berthe's starting room, and the number\n  of rooms that are under construction. Then, there are <b>C</b> more lines. The i-th of these\n  lines (counting starting from 1) contains two integers <b>R<sub>i</sub></b> and\n  <b>P<sub>i</sub></b>, representing the row and position of the i-th room that is under\n  construction.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is the best score that Alma can\n  guarantee for the game, as described above.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 40 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  0 &le; <b>C</b> &le; <b>S</b><sup>2</sup> - 2.<br/>\n  1 &le; <b>R<sub>A</sub></b> &le; <b>S</b>.<br/>\n  1 &le; <b>P<sub>A</sub></b> &le; 2 &times; <b>R<sub>A</sub></b> - 1.<br/>\n  1 &le; <b>R<sub>B</sub></b> &le; <b>S</b>.<br/>\n  1 &le; <b>P<sub>B</sub></b> &le; 2 &times; <b>R<sub>B</sub></b> - 1.<br/>\n  (<b>R<sub>A</sub></b>, <b>P<sub>A</sub></b>) &ne; (<b>R<sub>B</sub></b>, <b>P<sub>B</sub></b>).<br/>\n  1 &le; <b>R<sub>i</sub></b> &le; <b>S</b>, for all i.<br/>\n  1 &le; <b>P<sub>i</sub></b> &le; 2 &times; <b>R<sub>i</sub></b> - 1, for all i.<br/>\n  (<b>R<sub>i</sub></b>, <b>P<sub>i</sub></b>) &ne; (<b>R<sub>A</sub></b>, <b>P<sub>A</sub></b>),\n    for all i.<br/>\n  (<b>R<sub>i</sub></b>, <b>P<sub>i</sub></b>) &ne; (<b>R<sub>B</sub></b>, <b>P<sub>B</sub></b>),\n    for all i.<br/>\n  Either <b>R<sub>i</sub></b> &lt; <b>R<sub>i+1</sub></b>, or\n    <b>R<sub>i</sub></b> = <b>R<sub>i+1</sub></b> and <b>P<sub>i</sub></b> &lt; <b>P<sub>i+1</sub></b>,\n    for all i &lt; <b>C</b>.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  <b>T</b> = 48.<br/>\n  <b>S</b> = 2.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  2 &le; <b>S</b> &le; 6.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U15vgsbCF8hCxYj3WmPC7zPgq1fzJU6SV2DbX0gONP0Ncvl0dZSGK2W0Q7Md8PNW9RwLfC-slqufIxl4M7jDp50BKnPMHEC2L5pvtA/painters_duel_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2 1 1 2 1 0\n2 2 2 1 1 2\n2 1\n2 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0bWSjj9A_GbdRnH_Wp9EMT4N2GwhaDB8fl04e4U8l0cylIXYbPRjGH-w7rDE7iJsbgjd2IrLboEdm-3lXWvg6s7a1h_MloKQUhQcYV/painters_duel_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the turns must proceed as follows:\n</p>\n<ol>\n  <li>Alma moves to room (2, 2).</li>\n  <li>Berthe cannot move.</li>\n  <li>Alma moves to room (2, 3).</li>\n  <li>Berthe still cannot move.</li>\n  <li>Alma cannot move. Since neither painter can move, the game is now over.</li>\n</ol>\n<p>\n  Alma has painted 3 rooms and Berthe has painted 1 room, so the score is 3 - 1 = 2.\n</p>\n<p>\n  In Sample Case #2, neither painter can move. They only paint their starting rooms.\n</p>\n<p>\n  The following additional cases could not appear in Test Set 1, but could appear in Test Set 2.\n</p>\n<pre>\n2\n3 3 4 2 1 2\n2 3\n3 1\n3 3 2 2 3 2\n2 1\n3 1\n</pre>\n<p>\n  The correct output for these two cases would be:\n</p>\n<pre>\nCase #1: 0\nCase #2: -1\n</pre>\n<p>\n  In Case #1, Alma can move to (3, 5) or (3, 3). She cannot move to (2, 3), which is under\n  construction.\n</p>\n<ul>\n  <li>If she moves to (3, 5), she will have no more moves and Berthe will go on to paint\n    two more rooms. Score: 2 - 3 = -1.</li>\n  <li>If Alma moves to (3, 3), then Berthe can do one of the following:\n    <ul>\n      <li>Move to (3, 2), leaving neither painter with any future moves. Score: 2 - 2 = 0.</li>\n      <li>Move to (2, 2). Then the rest of the game must play out as follows: Alma moves to\n        (3, 2), Berthe moves to (1, 1). Score: 3 - 3 = 0.</li>\n    </ul>\n  </li>\n</ul>\n<p>\n  So Alma knows that moving to (3, 3) guarantees a score of 0 no matter what Berthe does, which is\n  better than the score of -1 that she would get by moving to (3, 5). Therefore, Alma moves to\n  (3, 3). Notice that:\n</p>\n<ul>\n  <li>We do not know exactly how the rest of this game will play out, but we do know the best\n    score that Alma can guarantee.</li>\n  <li>It is possible that one or more rooms that are not under construction do not get painted.</li>\n</ul>\n<p>\n  In Case #2, Alma must move to (3, 3), and then it is better for Berthe to move to (3, 4)\n  than to (2, 2).\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":12},{"type":1,"type__str":"VISIBLE","value":19}],"title":"Painters' Duel","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Consider given time intervals as an array.\n  We will refer to the start time of i-th interval as <b>S<sub>i</sub></b> and to the end time of i-th interval as <b>E<sub>i</sub></b>. <br>\n</p>\n\n<p>\n  Let us sort the time interval array by start time in ascending order. To start the harvesting, we need to deploy our first robot at the start time of the first interval (<b>S<sub>1</sub></b>) in the sorted array. It is not optimal to deploy the robot before <b>S<sub>1</sub></b> because we would be wasting robot hours.\n  Per the problem statement, our first robot can be deployed from <b>S<sub>1</sub></b> to <b>S<sub>1</sub></b> + <b>K</b> before it returns for calibration.\n  Let us define interval length of i-th interval as interval_length<sub>i</sub> = <b>E<sub>i</sub></b> - <b>S<sub>i</sub></b>. <br>\n  The following cases are possible for our first robot:\n  <ol>\n  <li> interval_length<sub>1</sub> &gt; <b>K</b> : In this case, as soon as our first robot finishes, we need to deploy another robot to cover the remaining part of the interval.</li>\n\n  <li>interval_length<sub>1</sub> &le; <b>K</b> : This can be further divided in two cases: </li>\n  <ol style=\"list-style-type: lower-alpha\">\n     <li>Bring the first robot back as soon as the first interval finishes. We cannot re-deploy this robot since a robot can only harvest for consecutive units of time. </li>\n     <li>Allow the first robot to be available until <b>K</b> units of time has elapsed. This is a better strategy since it allows us to utilize the robot for future harvesting.</li>\n  </ol>\n</ol>\n<p>\n Based on the above scenarios, the optimal strategy is to deploy a robot at the beginning of the first harvesting interval, for <b>K</b> hours.\n If after <b>K</b> hours the robot is inside the first or any subsequent harvesting interval, deploy another robot to replace it.\n Otherwise, deploy another robot as soon as the next harvesting interval begins. Repeat this for every interval and keep count of the number of total deployments.\n</p>\n<h3>Test Set 1</h3>\n<p>\n  For this test set we can loop over sorted time intervals and then have another inner loop to go over each point in time of such interval. <br>\n  At the i-th point in time, if there is no robot currently deployed for harvesting, we can deploy a robot and keep it harvesting for <b>K</b> units of time.\n  If a robot is already currently deployed for harvesting then no action is needed.\n  The total number of robots deployed is the required answer. <br>\n  Since we are sorting the intevals array and then iterating over each point in time inside an interval, the worst case time complexity will be O( &Sigma;<sub>1 &le; i &le; <b>N</b></sub> interval_length<sub>i</sub> + <b>N</b> log <b>N</b>), where <b>N</b> is the total number of intervals and  interval_length<sub>i</sub> &le; 200.\n</p>\n\n<h3>Test Set 2</h3>\n<p>\n  To solve for this test case we need to find a way to count the number of robots needed for an interval without iterating over each point in time.<br>\n  Let us say we deploy a robot at <b>S<sub>1</sub></b>. The number of robots needed for the first inteval can be calculated as &lceil;interval_length<sub>1</sub> / <b>K</b> &rceil;. <br>\n  Let us define a variable last_harvest_time as the last point in time covered by all deployed robots and initialise it as 0.\n  It is possible that the last robot deployed to cover the first interval will go beyond <b>E<sub>1</sub></b> hence the last_harvest_time after covering the first interval will be, last_harvest_time = max(last_harvest_time , <b>S<sub>1</sub></b>) + number of robots needed for the first interval * <b>K</b>. <br>\n\n  For subsequent intervals:\n  <ol>\n  <li>If the interval is already fully covered with the last_harvest_time, no action is needed.</li>\n  <li>If the interval is not fully covered by the last_harvest_time then follow a similar strategy as first interval to calculate the number of new robots required and again update the last_harvest_time. Also increment the answer by total number of new robots.</li>\n  </ol>\n<p>\nSince we are sorting the intervals array and then iterating over all intervals at once, the worst case time complexity will be O(<b>N</b> log <b>N</b>), where <b>N</b> is the total number of intervals.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2-D-z8cf_td7tX9-wGgC9sddhX6pD_HrAjDoRsqOLSfBbaebnoRvM-4MdJ13QvId284K89msw/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000003f4b8b","statement":"<h3>Problem</h3>\n<p>\n  You are in charge of deploying robots to harvest Kickium from a nearby asteroid. Robots are not\n  designed to work as a team, so only one robot can harvest at any point of time. A single robot\n  can be deployed for up to <b>K</b> units of time in a row before it returns for calibration, regardless\n  of how much time it spends on harvesting during that period.\n  Harvesting can only be done during specific time intervals. These time intervals do not overlap.\n  Given <b>K</b> and the time intervals in which harvesting is allowed, what is the minimum number\n  of robot deployments required to harvest at all possible times?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases\n  follow.\n<p></p>\n  The first line of each test case gives two space separated integers <b>N</b> and <b>K</b>: the\n  number of time intervals in which harvesting is allowed, and the maximum duration\n  a robot can be deployed for before returning for calibration.\n<p></p>\n  The next <b>N</b> lines contain a pair of space separated integers <b>S<sub>i</sub></b> and <b>E<sub>i</sub></b>: the start time and the end time of the i-th interval respectively.\n  Please note that intervals don't include the time unit starting at the moment <b>E<sub>i</sub></b>, so for example an interval with (<b>S<sub>i</sub></b> &equals; 2; <b>E<sub>i</sub></b> &equals; 5) has duration of 3 time units.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is the number of times robot deployment is needed so that for each interval there is one robot harvesting at that time.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  All <b>S<sub>i</sub></b> are distinct.<br/>\n  For any two intervals (<b>S<sub>i</sub></b>,<b>E<sub>i</sub></b>) and (<b>S<sub>j</sub></b>,<b>E<sub>j</sub></b>) with <b>S<sub>i</sub></b> &lt; <b>S<sub>j</sub></b>, <b>E<sub>i</sub></b> &lt; <b>S<sub>j</sub></b>.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  1 &le; <b>N</b> &le; 100.<br/>\n  1 &le; <b>K</b> &le; 100.<br/>\n  1 &le; <b>S<sub>i</sub></b> &lt; <b>E<sub>i</sub></b> &le; 200.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  100 &lt; <b>N</b> &le; 10<sup>5</sup>, in at most 10 test cases.<br/>\n  1 &le; <b>N</b> &le; 100, in the remaining test cases.<br/>\n  1 &le; <b>K</b> &le; 10<sup>9</sup>.<br/>\n  1 &le; <b>S<sub>i</sub></b> &lt; <b>E<sub>i</sub></b> &le; 10<sup>9</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U270hXSRX6A-md_EGU2IupE_MjvjHVXdVMdZAgwarnk-J4cy5BU93yA1DDpZZkaipqt63AP91Gb2Ps1VaaOKuwZwQsNuYicehQldU0/metal_harvest_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3 5\n1 5\n10 11\n8 9\n3 2\n1 2\n3 5\n13 14\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2wuQiQgnDyhmpfRv-GLOVZR9XJLAp4WHSZmJ9jnBTlC_PfM-JANlTQldSrK5DpYjqw2zZnxtpkek7aK7pUmPKm4HriRpJtReF6kXl5/metal_harvest_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 3</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, we deploy the robot at time instant 1 and it becomes available for the interval [1, 6]. However, it harvests only for the time range [1, 5]. After that we deploy the robot\n  at 6 and it becomes available for the time interval [6, 11]. This deployment covers both the remaining intervals [8, 9] and [10, 11]. There are multiple optimal strategies here. For example, we can deploy the second\n  robot at 7. It would then cover the range [7, 12], thus harvesting for the intervals [8, 9] and [10, 11].\n</p>\n<p>\n  In Sample Case #2, we deploy the robot at time instant 1, and it becomes available for [1, 3], but harvests for [1, 2] as [2, 3] is not part of any interval. After that we deploy the robot at 3 for the time range [3, 5] in which the robot harvests for the interval [3, 5]. The third deployment is done\n  at time instant 13 making the robot available for time range [13, 15]. However, it harvests only for the interval [13, 14]. Thus three deployments are needed to cover all the intervals.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":6},{"type":1,"type__str":"VISIBLE","value":10}],"title":"Metal Harvest","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\nFirst, note that Pommel can always win the game in a finite number of moves on expectation. To do so for a given input sequence <b>A</b><sub>1</sub>, <b>A</b><sub>2</sub>, ... <b>A</b><sub><b>K</b></sub>, Pommel can simply reroll until the first <b>A</b><sub>1</sub> dice land on 1, the next <b>A</b><sub>2</sub> dice land on 2, and so on, with the last <b>A</b><sub><b>K</b></sub> dice landing on <b>K</b>. Such an outcome satisfies the group arrangement required by the input; furthermore, on each roll, Pommel has a 1/<b>M</b> chance of rolling the needed value for the die she's on. This implies that Pommel is expected to win in <b>N</b>&times;<b>M</b> turns. Although this may not be optimal, it demonstrates that Pommel always has a winning strategy.\n</p>\n\n<p>\nThe basic procedure for calculating the expected value is the same for any approach. Suppose Pommel has already rolled and fixed some (potentially zero) dice. Furthermore, suppose she chooses a set S of dice configurations, such that she will not re-roll her current die if her dice configuration, after her current roll, is in S. If there is a p<sub>i</sub> probability that her current dice configuration leads to the i-th element of S, then there is a 1 - &Sigma; p<sub>i</sub> probability that Pommel will have to re-roll. If we now let e<sub>i</sub> equal the expected number of moves to win starting from state i, assuming Pommel plays optimally, we can solve for the expected number of moves to win starting from Pommel's current dice configuration. If we let this quantity be x:\n</p>\n\n<p>\n  x = 1 + (1 - &Sigma; p<sub>i</sub>)x + &Sigma; p<sub>i</sub>e<sub>i</sub>\n</p>\n<p>\n  x = (1 + &Sigma; p<sub>i</sub>e<sub>i</sub>) / (&Sigma; p<sub>i</sub>)\n</p>\n\n<p>\nApproaches to the two tests sets differ in how they may enumerate the possible dice configurations and how they find the optimal set S for any given configuration.\n</p>\n\n<h3>Test set 1</h3>\n\n<p>\nFor this test set it's sufficient to look at all dice roll results directly. There are at most &Sigma;<sub>0&le;i&le;<b>N</b></sub> <b>M</b><sup>i</sup> &lt; 60,000 such possibilities. For a given configuration, performing another roll leads to one of <b>M</b> new dice configurations, so for each configuration we can loop through all 2<sup><b>M</b></sup>-1 possible non-empty subsets of configurations that Pommel could choose to not re-roll on (ignoring subsets that contain configurations that make it impossible for Pommel to reach a winning configuration). For each choice of subset, we compute Pommel's expected turns until winning, and we take the subset with the lowest expected value.\n</p>\n\n<p>\nWe need to iterate over the dice configurations such that when we're computing the minimum expected value for a configuration C, we know the minimum expected values for each configuration that C can lead to. This can be done, for example, with DFS. The expected value from the empty configuration is our answer. This algorithm runs in O(<b>M</b><sup><b>N</b></sup>&times;2<sup><b>M</b></sup>&times;<b>M</b>) time which is sufficient.\n</p>\n\n<p>\nAs an example, consider the test case <b>N</b> = 3, <b>M</b> = 2, <b>K</b> = 2, <b>A</b><sub>1</sub> = 1, <b>A</b><sub>2</sub> = 2. Let's compute Pommel's expected turns from winning when she's rolled and locked down a 1. There are two possibilities for the dice configuration after her next turn: [1, 1] and [1, 2], each occuring with probability 1/2. As a precondition to computing the expected turns to win from [1], we know that, on expectation, it takes two moves to win from [1, 1] and one move to win from [1, 2]. We now consider the three possibilies for S: {[1, 1]}, {[1, 2]}, and {[1, 1], [1, 2]}.\n</p>\n\n<p>\nS = {[1, 1]} leads to the equation x = 1 + (1 - 0.5) x + 0.5 &middot; 2, which results in x = 4.\n</p>\n<p>\nS = {[1, 2]} leads to the equation x = 1 + (1 - 0.5) x + 0.5 &middot; 1, which results in x = 3.\n</p>\n<p>\nS = {[1, 1], [1, 2]} leads to the equation x = 1 + (1 - 0.5 - 0.5) x + 0.5 &middot; 1 + 0.5 &middot; 2, which results in x = 2.5. This is the lowest value, so we now know that if Pommel has rolled a single 1, she will win in 2.5 more turns on expectation if she plays optimally.\n</p>\n\n<h3>Test set 2</h3>\n<p>\nFor this test set, the number of possible dice roll outcomes, 50<sup>50</sup>, is far too large to be enumerated in time. We instead focus on the groupings of dice that could possibly lead to the desired configuration. For example, if Pommel rolls [1, 1, 2, 2] or if she rolls [3, 4, 3, 4], either way, she'll have two groups of two dice, which are equivalent for this problem. A dice grouping can be expressed as a <b>K</b>-tuple of integers (x<sub>1</sub>, x<sub>2</sub>, ..., x<sub><b>K</b></sub>) such that the tuple elements are non-decreasing: x<sub>i</sub> &le; x<sub>i+1</sub> for 1 &le; i &lt; <b>K</b>. The i-th element of the tuple expresses the number of dice in the i-th smallest dice group, which is zero if there are fewer than <b>K</b> non-empty groups in the current dice configuration. For example, if <b>K</b>=3 and the dice results so far are [2, 2, 3, 2, 2, 3], the grouping can be expressed as (0, 2, 4).\n</p>\n\n<p>\nWe need to count how many possible <b>K</b>-tuples we need to consider to get an estimate of our algorithm's runtime. One simple bound is that we only need to consider a tuple T if the sum of T's elements is at most <b>K</b>. The total number of tuples we need to consider is therefore at most &Sigma;<sub>0&le;i&le;<b>K</b></sub> p(i) where p(i) is the number of <b>K</b>-tuples whose elements are non-decreasing and add to i. p(i) can be calculated with a script, but it is also the i-th <a href=\"https://en.wikipedia.org/wiki/Partition_(number_theory)\">partition number</a>. The sum of the first 50 partition numbers is only slightly more than a million, which is very tractable.\n</p>\n\n<p>\nA dice roll could lead Pommel from a given configuration to at most <b>K</b> new configurations. We now need a way of computing the optimal subset of new configurations S to not re-roll that is faster than the naive O(<b>K</b> &times; 2<sup><b>K</b></sup>) approach. Consider the expected value equation shown above. First, note that if for some i, e<sub>i</sub> &gt; x, removing configuration i from S will decrease the value of x. Similarly, if there is some configuration C with expected value E[C] &lt; x that is not included in S, adding it to S will lower x. This implies that if some configuration C with expected value E[C] is in S, then all states C' with E[C'] &lt; E[C] must also be in S if Pommel is playing optimally. We can therefore sort all configurations reachable from a given configuration so that they're in ascending order of expected turns until winning. It is guaranteed that the optimal S is a prefix of the sorted list, so it can be found by sorting and iterating over the list in O(<b>K</b> log <b>K</b>) time.\n</p>\n\n<p>\nCombining our improved optimal-subset routine with our bound for the number of <b>K</b>-tuples (which was in fact quite loose and can be shown to be significantly lower) gives us an algorithm that runs in time for <b>M</b>, <b>N</b> &le; 50.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3z0QwBTf5DkHWLSEgLSGPypA2ifockTvj2gms92nA3gFA9XRk7mdqABm6L-80G--IDLEmBS9k/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000003f4dea","statement":"<h3>Problem</h3>\n<p>\n  Pommel is very bored at home so she has invented a new game involving <b>N</b> dice.\n  Each die has the numbers from 1 to <b>M</b> written on it. Whenever she throws a die,\n  it has an equal probability of landing on each of the <b>M</b> possible values.\n</p><p>\n  Pommel places all the dice in a row. She goes through the dice one at a time from left to right.\n  For each die she rolls, Pommel can either keep the value she rolled and move on to the\n  next die or she can re-roll the die. Pommel can re-roll a die as much as she wants before moving on to the next die.\n</p><p>\n  Once Pommel has gone through all the dice, the game is finished.\n  To determine if she has won, she puts the dice into <i>groups</i>.\n  All dice with the same value are put into the same group. So if she finishes the game with x distinct values,\n  then there will be x groups. These groups of dice are then sorted by number of dice in non-decreasing order.\n</p><p>\n  For example:\n  <ul>\n    <li>If the final dice results are [2, 2, 3, 2, 2, 3], the dice would be put into two groups and ordered as follows: [3, 3] and [2, 2, 2, 2].</li>\n    <li>If the final dice results are [1, 6, 7, 7], the dice would be put into three groups and ordered as follows: [6], [1], and [7, 7] (or equivalently, [1], [6] and [7, 7]).</li>\n  </ul>\n</p><p>\n  Pommel wins if she finishes the game with exactly <b>K</b> groups, and the i-th group contains exactly <b>A<sub>i</sub></b> dice,\n  for all i.\n</p><p>\n  What is the <a href=\"https://en.wikipedia.org/wiki/Expected_value\">expected value</a> of the total number of dice rolls it will take Pommel to win the game,\n  assuming she plays optimally to minimize this expected value?\n</p><p>\n  It is guaranteed that for any valid input, it is possible for Pommel to win the game.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  The first line of each test case contains the integers <b>N</b>, <b>M</b> and <b>K</b>.\n  Then, <b>K</b> lines follow describing the groups she must finish with. The i-th line contains <b>A<sub>i</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the expected number of times it will take to roll all the dice for Pommel to win the game.\n</p>\n<p>\n  <code>y</code> will be considered correct if it is within an absolute or\n  relative error of 10<sup>-6</sup> of the correct answer.\n  See the <a href=\"https://codingcompetitions.withgoogle.com/kickstart/faq#how-does-kick-start-handle-real-numbers\">FAQ</a> for an explanation of what that means,\n  and what formats of real numbers we accept.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>K</b> &le; <b>M</b>.<br/>\n  1 &le; <b>A<sub>i</sub></b>, for all i.<br/>\n  <b>A<sub>1</sub></b> +\n  <b>A<sub>2</sub></b> +\n  ... +\n  <b>A<sub>K</sub></b> = <b>N</b>.<br/>\n  <b>A<sub>i</sub></b> &le; <b>A<sub>i+1</sub></b>, for all i.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  2 &le; <b>N</b> &le; 6.<br/>\n  2 &le; <b>M</b> &le; 6.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  2 &le; <b>N</b> &le; 50.<br/>\n  2 &le; <b>M</b> &le; 50.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U04aOYviT-uv_yhm-4bkWukFLpt5W1scKheh7J2JfTFNdy4d6PjRqD8h4CsrO7uQs8kp6ECKV0oZFhCuWOfFHC84iCXQNqa/yeetzhee_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3 6 2\n1\n2\n5 2 1\n5\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0FkkzESd_jhM4xbIMrDvfkGyXL-HFRXQee-DYhSExFn7kcQOmnZ39vm2E61wcY6QpsoF8hsx8t3tNeB1VjN4wQYVBXI7ZPjA/yeetzhee_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4.7\nCase #2: 9.0</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample case #1, Pommel has <b>N</b> = 3 dice, each with a number from 1 to <b>M</b> = 6 written on them.\n  To win, she must finish the game with <b>K</b> = 2 groups. One group must have one die (<b>A<sub>1</sub></b> = 1), while the\n  other group must have two dice (<b>A<sub>2</sub></b> = 2).\n  One optimal strategy for Pommel is as follows:\n  <ul>\n    <li>Pommel throws the first die once.</li>\n    <li>Pommel throws the second die once.</li>\n    <li>If the first and second dice are the same, Pommel keeps throwing the third die until it ends in a different value from the first two. It takes 1.2 dice rolls on average.</li>\n    <li>If the first and second dice are different, Pommel keeps throwing the third die until it matches the first or the second die. It takes 3 dice rolls on average.</li>\n  </ul>\n  This strategy takes Pommel 4.7 (1 + 1 + 1/6 &times; 1.2 + 5/6 &times; 3) dice rolls on average.\n</p><p>\n  In Sample case #2, Pommel has <b>N</b> = 5 dice, each with a number from 1 to <b>M</b> = 2 written on them.\n  To win, she must finish the game with <b>K</b> = 1 group, with all <b>N</b> dice in them (<b>A<sub>1</sub></b> = <b>N</b>).\n  For the first die, Pommel rolls it once.\n  Then, for each remaining die she keeps rolling until it has the same value as the first one. It takes 2 dice rolls on average.\n</p><p>\n  This strategy takes Pommel 9 (1 + 2 + 2 + 2 + 2) dice rolls on average.\n</p>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":15},{"type":1,"type__str":"VISIBLE","value":25}],"title":"Yeetzhee","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Firstly, denote K<sub>i</sub> as the number of times a person will use the ATM.\n  Formally, K<sub>i</sub> = &lceil;<b>A<sub>i</sub></b> / <b>X</b>&rceil;.\n</p>\n<h3>Test Set 1</h3>\n<p>\n  We can directly simulate the process using a queue.\n</p>\n<p>\n  Assume that i-th person, that wants to withdraw <b>A<sub>i</sub></b>, is first in the queue.\n  There are two possibilites:\n  <ul>\n    <li><b>A<sub>i</sub></b> &le; <b>X</b>. In that case, this person withdraws <b>A<sub>i</sub></b> and leaves the queue.\n      We can add i to the answer.</li>\n    <li><b>A<sub>i</sub></b> &gt; <b>X</b>. In that case, this person withdraws <b>X</b>\n      (thus setting <b>A<sub>i</sub></b> to <b>A<sub>i</sub></b> - <b>X</b>) and goes back to the end of the queue. </li>\n  </ul>\n</p>\n<p>\n  Time complexity of this simulation is O(&Sigma; K<sub>i</sub>).\n</p>\n<p>\n  In the worst case, when <b>X</b> = 1, K<sub>i</sub> = <b>A<sub>i</sub></b>.\n  Since <b>A<sub>i</sub></b> &le; 100, the worst time complexity is O(<b>N</b> &times; 100), which easily fits into the time limit.\n</p>\n<h3>Test Set 2</h3>\n<p>\n  In the second test set, K<sub>i</sub> can be as big as 10<sup>9</sup>, so direct simulation is too slow.\n</p>\n<p>\n  Let's look at two people i and j. When will i-th person leave the queue before j-th person? There are two cases:\n  <ul>\n    <li>K<sub>i</sub> &lt; K<sub>j</sub>. Since i-th person will use the ATM fewer times than j-th person, they will leave the queue earlier. </li>\n    <li>K<sub>i</sub> = K<sub>j</sub> and i &lt; j. If they both use the ATM the same amount of times, the person earlier in the queue in the initial configuration will leave first. </li>\n  </ul>\n</p>\n<p>\n  This observation is enough to form a full solution. Sort people first in ascending order of K<sub>i</sub>, and in case of ties in ascending order of their number. After sorting, this is our answer.\n</p>\n<p>\n  Time complexity of this solution is O(<b>N</b> log <b>N</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3vuxUrblGM3VFumdvou-XUwQbtgdwmrfmHruYSzWv4X5ZiznFzSqg0VWmo90hqs9EEGwCXQy0/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000003f4ed8","statement":"<h3>Problem</h3>\n<p>\n  There are <b>N</b> people numbered from 1 to <b>N</b>, standing in a queue to withdraw money from an ATM. The queue is formed in ascending order of their number. The person numbered <b>i</b> wants to withdraw amount <b>A<sub>i</sub></b>. The maximum amount a person can withdraw at a time is <b>X</b>. If they need\n  more money than <b>X</b>, they need to go stand at the end of the queue and wait for their turn in line.\n  A person leaves the queue once they have withdrawn the required amount.\n</p>\n<p></p>\n  You need to find the order in which all the people leave the queue.\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases <b>T</b>. <b>T</b> test cases follow.\n<p></p>\n  The first line of each test case gives two space separated integers: the number of people standing in the queue, <b>N</b> and the maximum amount <b>X</b> that can be withdrawn in one turn.\n<p></p>\n  The next line contains <b>N</b> space separated integers <b>A<sub>i</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n the test case number (starting from 1) and <code>y</code> is the space separated list of integers that denote the order in which the people leave the queue.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  1 &le; <b>N</b> &le; 100.<br/>\n  1 &le; <b>A<sub>i</sub></b> &le; 100.<br/>\n  1 &le; <b>X</b> &le; 100.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  1 &le; <b>N</b> &le; 10<sup>5</sup> for at most 10 test cases. For the remaining cases, 1 &le; <b>N</b> &le; 100<br/>\n  1 &le; <b>A<sub>i</sub></b> &le; 10<sup>9</sup>.<br/>\n  1 &le; <b>X</b> &le; 10<sup>9</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3C7GN-dwARJi4He-HaGFiSye1e04N1vOEqbV-AOtHz3LtQAHxWbe0Hokz67URU1if0R9zbtl5oxuL3trXsr_UpJgiaaHvrdQ/atm_queue_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3 3\n2 7 4\n5 6\n9 10 4 7 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U14eZ5dIEb2PN7QQThVPbvavhVfjl_3xuAtECaMccXvY6uMK-1I4kAr4DaNS5ih52u4LIbeRDUNjeYECkGJz2AG8EAYSKm_LH0/atm_queue_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1 3 2\nCase #2: 3 5 1 2 4</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, there are 3 people and the limit to withdraw in one turn is 3. Below is step-by-step description of how the process will look like:\n  <ol>\n    <li>The queue initially looks like [1, 2, 3]. The first person withdraws an amount of 2 in their first attempt and leaves the queue.</li>\n    <li>The queue now looks like [2, 3]. The second person wants to withdraw an amount of 7, but they can withdraw only 3 in their first turn. Since they still need to withdraw an amount of 4, they have to rejoin the queue at the end of the line.</li>\n    <li>The queue now looks like [3, 2]. The third person needs to withdraw an amount of 4 but they can only withdraw 3 in their first turn so, they rejoin the queue at the end of the line to withdraw amount of 1 later.</li>\n    <li>The queue now looks like [2, 3]. The second person still needs to withdraw an amount of 4. They withdraw an amount of 3 in their second turn and waits for their next turn to arrive to withdraw the remaining amount of 1.</li>\n    <li>The queue now looks like [3, 2]. The third person withdraws the remaining amount of 1 and leaves the queue.</li>\n    <li>The queue now looks like [2]. The second person withdraws the remaining amount of 1 and leaves the queue. </li>\n    <li>The queue is now empty.</li>\n  </ol>\n  The order in which people leave the queue is [1, 3, 2].\n</p>\n\n<p>\n  In Sample Case #2, there are 5 people and the limit to withdraw in one turn is 6. Below is step-by-step description of how the process will look like:\n  <ol>\n    <li>The queue initially looks like [1, 2, 3, 4, 5]. The first person withdraws an amount of 6, and joins at the end again to withdraw the remaining amount of 3 later.</li>\n    <li>The queue looks like [2, 3, 4, 5, 1]. The second person similarly withdraws an amount of 6 and waits for his next turn to withdraw an amount of 4.</li>\n    <li>The queue looks like [3, 4, 5, 1, 2]. The third person withdraws an amount of 4 and leaves the queue.</li>\n    <li>The queue now looks like [4, 5, 1, 2]. The fourth person withdraws 6 and waits for his next turn.</li>\n    <li>The queue looks like [5, 1, 2, 4]. The fifth person withdraws amount of 2 and leaves the queue.</li>\n    <li>The queue looks like, [1, 2, 4]. All other people now leave the queue after their second turn one by one.</li>\n  </ol>\n  The order in which people leave the queue is [3, 5, 1, 2, 4].\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":1,"type__str":"VISIBLE","value":8}],"title":"ATM Queue","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"000000000019ff48","type":1,"type__str":"SPECTATOR"},"title":"Round F 2020"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
