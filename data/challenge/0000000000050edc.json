{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1569790800000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000050edc","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  Thank you for participating in Kick Start 2019 Round F.\n</p>\n<p>\n</p>\n<hr>\n<p>\n<b>Cast</b>\n</p><p>\n  Flattening: Written by Yossi Matsumoto and prepared by Zhang Chen.\n</p><p>\n  Teach Me: Written and prepared by Jonathan Irvin Gunawan.\n</p><p>\n  Spectating Villages: Written by Yossi Matsumoto and prepared by Sadia Atique.\n</p><p>\n  Solutions, other problem preparation, reviews and contest monitoring by\n  Ciprian Olariu,\n  Himanshu Jaju,\n  Jonathan Irvin Gunawan,\n  Kevin Tran,\n  Lalit Kundu,\n  Reyno Tilikaynen,\n  Sadia Atique,\n  St√©phane Henriot,\n  Vivek Dhiman,\n  Yang Xiao, and\n  Zhang Chen.\n</p>\n<p>\nAnalysis authors:\n</p>\n<ul>\n  <li>Flattening: Sadia Atique</li>\n  <li>Teach Me: Jonathan Irvin Gunawan</li>\n  <li>Spectating Villages: Sandeep Mohanty</li>\n</ul>\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1569780000000,"tasks":[{"analysis":"<h3>Test set 1</h3>\n<p>\n  We can solve this test set by considering all ordered pairs of employees. For an ordered pair\n  (i, j), we can check whether there is a skill that the i-th employee knows that the j-th employee\n  does not know with a simple O(<b>C<sub>i</sub></b> &times; <b>C<sub>j</sub></b>) check using\n  nested loops.\n</p>\n<p>\n  This solution runs in O(5<sup>2</sup> &times; <b>N</b><sup>2</sup>).\n</p>\n<h3>Test set 2</h3>\n<p>\n  We can solve this test set by defining m(i) as the number of employees who can mentor the i-th\n  employee. If we can compute m(i), the answer to the problem is the sum of all m(i).\n</p><p>\n  To compute m(i), we can count the number of employees who <b>cannot</b> mentor the i-th employee\n  instead. We can observe that the j-th employee cannot mentor the i-th employee if and only if the\n  set of skills known by the j-th employee is a subset of the set of skills known by the i-th\n  employee. Therefore, we would like to count the number of employees whose set of skills is a\n  subset of the set of skills known by the i-th employee.\n</p><p>\n  To count this, we can consider every subset of\n  {<b>A<sub>i1</sub></b>, ..., <b>A<sub>iC<sub>i</sub></sub></b>}. For a subset B, we can count the\n  number of employees whose set of skills is exactly B. Taking the sum of all subsets gives us the\n  number of employees whose set of skills knowledge is the subset of the set of skills known by the\n  i-th employee. m(i) is simply the number of employees subtracted by this value.\n</p><p>\n  To be able to compute the number of employees whose set of skills is exactly a given set, we can\n  preprocess the set of skills into an occurences hashmap. In other words, we can keep a hashmap\n  that takes a set of skills as its key and returns the number of employees who knows the exact same\n  set of skills as its value.\n</p><p>\n  For each employee i, we need to consider every subset of\n  {<b>A<sub>i1</sub></b>, ..., <b>A<sub>iC<sub>i</sub></sub></b>}. Since there can be up to\n  2<sup>5</sup> subsets, this solutions runs in O(2<sup>5</sup> &times; <b>N</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3BZCd3Ce4O6zQ3O4nb7uAYbNN0n4qbMq2IPUWoxp8HhKemfdmrz0j6_MJAD-KAad0RWA6YMQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000001864bc","statement":"<h3>Problem</h3>\n<p>\n  Here at Google we love teaching new skills to each other!\n  There are <b>N</b> employees at Google, numbered from 1 to <b>N</b>.\n  There are a total of <b>S</b> different skills, numbered from 1 to <b>S</b>.\n  Each employee knows up to 5 different skills.\n</p><p>\n  The i-th employee can <i>mentor</i> the j-th employee if there is a skill that the i-th employee knows that the j-th employee does not know.\n  How many ordered pairs (i, j) are there where the i-th employee can mentor the j-th employee?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  The first line of each test case gives the two integers <b>N</b> and <b>S</b>, which are the number of employees and the number of skills respectively.\n</p><p>\n  The next <b>N</b> lines describe the skills that each employee knows.\n  The i-th of these lines begins with an integer <b>C<sub>i</sub></b> which is the number of skills the i-th employee knows.\n  Then, <b>C<sub>i</sub></b> integers follow on the same line. The j-th of these integers is <b>A<sub>ij</sub></b> indicating that the i-th employee knows the skill <b>A<sub>ij</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the number of ordered pairs (i, j) where the i-th employee can mentor the j-th employee.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 40 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>S</b> &le; 1000.<br/>\n  1 &le; <b>C<sub>i</sub></b> &le; 5 for all i.<br/>\n  1 &le; <b>A<sub>ij</sub></b> &le; <b>S</b> for all i and j.<br/>\n  <b>A<sub>ij</sub></b> &ne; <b>A<sub>ik</sub></b> for all j &ne; k.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  2 &le; <b>N</b> &le; 500.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  2 &le; <b>N</b> &le; 5 &times; 10<sup>4</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1qUnnmERqP0B8iII-0UzMtcPYV8CvatXaoqvKCv6KgBycNqJu_4F5zgraxEBP5AIDes7qhHN4wnzbykCjQ5P_n5gqhwKk/teach_me_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n4 100\n4 80 90 100 5\n1 90\n1 80\n3 80 90 100\n3 30\n4 10 11 12 13\n4 10 11 12 13\n5 25 26 27 28 29\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1kGNqx1M9PbcXSYbOZr5YrA-GJC_A2wIU1FinxAQWok_tmvWo5bZCSTHlC_gZXj5T2rX9uSaI2uObeEkeE1oy7VAjIPRIl/teach_me_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 7\nCase #2: 4\n\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample case #1:\n  <ul>\n    <li>(1, 2) is a valid pair since employee 1 knows the skill 100 (also 5 and 80), while employee 2 does not.</li>\n    <li>(1, 3) is a valid pair since employee 1 knows the skill 100 (also 5 and 90), while employee 3 does not.</li>\n    <li>(1, 4) is a valid pair since employee 1 knows the skill 5, while employee 4 does not.</li>\n    <li>(2, 3) is a valid pair since employee 2 knows the skill 90, while employee 3 does not.</li>\n    <li>(3, 2) is a valid pair since employee 3 knows the skill 80, while employee 2 does not.</li>\n    <li>(4, 2) is a valid pair since employee 4 knows the skill 100 (also 80), while employee 2 does not.</li>\n    <li>(4, 3) is a valid pair since employee 4 knows the skill 100 (also 90), while employee 3 does not.</li>\n  </ul>\n  In total, there are 7 valid pairs, so the answer is 7.\n</p>\n<p>\n  In Sample case #2:\n  <ul>\n    <li>(1, 3) is a valid pair since employee 1 knows the skill 10 (also 11, 12 and 13), while employee 3 does not.</li>\n    <li>(2, 3) is a valid pair since employee 2 knows the skill 10 (also 11, 12 and 13), while employee 3 does not.</li>\n    <li>(3, 1) is a valid pair since employee 3 knows the skill 28 (also 25, 26, 27 and 29), while employee 1 does not.</li>\n    <li>(3, 2) is a valid pair since employee 3 knows the skill 27 (also 25, 26, 28 and 29), while employee 2 does not.</li>\n  </ul>\n  In total, there are 4 valid pairs, so the answer is 4.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":11},{"type":2,"type__str":"HIDDEN","value":25}],"title":"Teach Me","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\n  Test set 1 (Visible)\n</h3>\n<p>\n    Since there are very few villages for this set, we can calculate the sum of beauty values of illuminated villages for every possible set of villages we choose to build lighthouses in and then take the maximum among these.\n</p>\n<p>\n    For each such set, we have to find which villages will be illuminated. So, for each village, we see if it is in the set or if any of its neighbours are in the set and add its beauty value accordingly.\n</p>\n<p>\n    Since there will be 2<sup><b>V</b></sup> such sets and for each such set we are taking O(<b>V</b>) time to figure out what is the corresponding total beauty value for the set, the overall complexity of this approach is O(<b>V</b>2<sup><b>V</b></sup>)\n</p>\n\n<h3>\n  Test set 2 (Hidden)\n</h3>\n<p>\n    The the graph formed by taking the villages as nodes and roads as edges is a tree. Let's root this tree at node number 1.\n</p>\n<p>\n    Now, let us define a function maxBeauty(K, P, Q) which represents the maximum beauty value we can obtain from nodes in the subtree of node K (including itself) such that P is a boolean indicating whether the parent node of K has a lighthouse and Q is a boolean indicating whether K itself has a lighthouse. The solution to our problem is simply max(maxBeauty(1, 0, 1), maxBeauty(1, 0, 0)). We consider a few cases to evaluate maxBeauty(K, P, Q).\n</p>\n<p>\n    If Q = 1, then we have a lighthouse placed at K. Which means all of its children will be illuminated irrespective of them having a lighthouse or not. Therefore, in this case,<br/>\n    maxBeauty(K, P, Q) = <b>B</b><sub>K</sub> + sum of max(maxBeauty(C, 1, 0), maxBeauty(C, 1, 1)) for all children C of node K.\n</p>\n<p>\n    If Q = 0 and P = 1, then irrespective of whatever we choose for the children of K, they are not going to recieve light from K but K itself is going to be illuminated. Therefore, in this case,<br/>\n    maxBeauty(K, P, Q) = <b>B</b><sub>K</sub> + sum of max(maxBeauty(C, 0, 0), maxBeauty(C, 0, 1)) for all children C of node K.\n</p>\n<p>\n    Else, we have Q = 0 and P = 0. This means that the children of K are not going to recieve light from K but the illumination of K depends on whether we place a lighthouse in at least one of the children of K.<br/>\n    This case can be handled using a dynamic programming approach. We  define dp[i][j] as maximum sum of beauty values of all illuminated nodes in the first i subtrees of node K such that, if j = 0 then we have not placed a lighthouse in any of the first i children of K and if j = 1 then there is at least one node among the first i children of K with a lighthouse.<br/>\n    Therefore, dp[i][0] = dp[i-1][0] + maxBeauty(C<sub>i</sub>, 0, 0) and<br/>\n    dp[i][1] = max(dp[i - 1][1] + max(maxBeauty(C<sub>i</sub>, 0, 0), maxBeauty(C<sub>i</sub>, 0, 1)), dp[i - 1][0] + maxBeauty(C<sub>i</sub>, 0, 1)).<br>(Here, C<sub>i</sub> represents the ith child of K)<br/>\n    Finally, for this case, maxBeauty(K, P, Q) = max(dp[M][1] + <b>B</b><sub>K</sub>, dp[M][0]) where M is the total number of children of K.\n</p>\n\n<p>\n    Since for every node K we can get maxBeauty(K, P, Q) for all values of P and Q in O(M) time, overall complexity of this approach is O(<b>N</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U13XoEbxzcDMiI9S74sWKCdiTLZZXOcMqTrGju95e8nrpl3tEmA8IgHwlCE1nknxIjPqqFqNw/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000018666b","statement":"<h3>Problem</h3>\n<p>\n  The countryside of Kickstartia consists of <b>V</b> villages (labelled from 1 to <b>V</b>), connected by <b>V</b>-1 bidirectional roads (labelled from 1 to <b>V</b>-1).\n  The i-th road connects village <b>X<sub>i</sub></b> to village <b>Y<sub>i</sub></b>.\n  Each road connects exactly two villages, and no two roads connect the same two villages.\n  Furthermore, there is exactly one sequence of roads that connects any two villages in Kickstartia.\n</p>\n<p>\n  Some villages are more beautiful than others. The i-th village has a beauty value of <b>B<sub>i</sub></b>.\n  Note that it is possible for a village to have a negative beauty value!\n</p><p>\n  You are going to build lighthouses in some of the villages.\n  A village is <i>illuminated</i> if there is a lighthouse built in it, or there is a lighthouse\n  built in a village that is directly connected to it by a road.\n</p><p>\n  You may build as many or as few (even zero) lighthouses as you like.\n  What is the maximum possible sum of beauty values of illuminated villages you can obtain?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the integer <b>V</b>, the number of villages.\n  The second line contains <b>V</b> integers. The i-th of these is <b>B<sub>i</sub></b>, the beauty value of the i-th village.\n</p><p>\n  Then, <b>V</b>-1 lines follow. The i-th line gives <b>X<sub>i</sub></b> and <b>Y<sub>i</sub></b>,\n  indicating the i-th road connects village <b>X<sub>i</sub></b> to village <b>Y<sub>i</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the maximum possible sum of beauty values of illuminated villages you can obtain.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n  2 &le; <b>V</b> &le; 10<sup>5</sup>.<br/>\n  -10<sup>5</sup> &le; <b>B<sub>i</sub></b> &le; 10<sup>5</sup> for all i.<br/>\n  1 &le; <b>X<sub>i</sub></b>, <b>Y<sub>i</sub></b> &le; <b>V</b> for all i.<br/>\n  <b>X<sub>i</sub></b> &ne; <b>Y<sub>i</sub></b> for all i.<br/>\n  (<b>X<sub>i</sub></b>, <b>Y<sub>i</sub></b>) &ne; (<b>X<sub>j</sub></b>, <b>Y<sub>j</sub></b>) for all i &ne; j.<br/>\n  There is exactly one sequence of roads connecting every pair of villages.\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  1 &le; <b>V</b> &le; 15.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  1 &le; <b>V</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2HL__ds1gQAG0dV7xpIL-xzO3_LOOZwtHRBxipNbfk8dUoi_NCeQxjzgWNfNjmNyAETqbopgXjEa72H9GTgEk6Y6ofkzKOSAyg3YxUWA_pnQ/spectating_villages_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n9\n-10 4 -10 8 20 30 -2 -3 7\n1 4\n2 4\n4 3\n9 4\n9 8\n7 5\n6 7\n7 9\n4\n-2 20 20 20\n1 2\n1 3\n1 4\n5\n-5 -10 8 -7 -2\n5 4\n4 3\n3 2\n2 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0WwCUaaSRLS3jGgSu0KSiXePKNJKhsUcJ69fum2zSzSVavoQvrgf6_iqkwE98W7Me6tidI4XM8p4hUF8C_SPQsVPSOl7XikAG8iOFTdemO0Ok/spectating_villages_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 67\nCase #2: 58\nCase #3: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, you can place a lighthouse in villages 2 and 7.\n  This illuminates villages 2, 4, 5, 6, 7 and 9, for a total beauty of 4 + 8 + 20 + 30 + (-2) + 7 = 67.\n  There are other possible ways to place lighthouses to achieve this total beauty.\n</p><p>\n  In Sample Case #2, you can place a lighthouse in villages 1, 2 and 3.\n  This illuminates villages 1, 2, 3 and 4, for a total beauty of (-2) + 20 + 20 + 20 = 58.\n  There are other possible ways to place lighthouses to achieve this total beauty.\n</p><p>\n  In Sample Case #3, the best you can do is to place no lighthouses at all!\n  This illuminates no villages for a total beauty of 0.\n</p>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":13},{"type":2,"type__str":"HIDDEN","value":29}],"title":"Spectating Villages","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test set 1 (Visible)</h3>\n<p>\n  We can start with an interesting observation, whenever we rebuild a section of the wall, it is equivalent to removing that section.\n  So we can follow two steps,\n</p>\n<ol>\n  <li>Pick a set of sections of the wall to remove.</li>\n  <li>Check if in the remaining wall sections, the number of positions where <b>A</b><sub>i</sub> &ne; <b>A</b><sub>i+1</sub> are less than or equals <b>K</b>.</li>\n</ol>\n<p>\n  There are 2<sup><b>N</b></sup> possible sets of sections, and for each set, checking if the remaining sections will make Blotch happy or not will\n  take O(<b>N</b>) time. So the time complexity of this approach is O(2<sup><b>N</b></sup> &times; <b>N</b>), which is fast enough for test set 1.\n</p>\n\n<h3>Test set 2 (Hidden)</h3>\n<p>\n  We need to approach the problem a bit differently for test set 2. We can start with observing the amount of walls we need to remove\n  for a particular range of consecutive wall sections[i...j]. The most optimal way of making a set of consecutive wall sections have same\n  height would be to figure out which height appeared the most, and remove all sections with a different height.\n</p>\n<p>\n  So for each consecutive set of walls, we can calculate number of wall removals needed. Let's say, R(i, j) defines number of removals\n  necessary to have all wall sections from i to j have the same height.\n</p>\n<p>\n  We can define a solution based on a function F(x, k), where F(x, k) denotes the number of the walls we need to remove so that the sections from 1 to x\n  in the input has <b>A</b><sub>i</sub> &ne; <b>A</b><sub>i+1</sub> in at most k places.\n  We can define the recurrence relation as, F(x, k) = min(F(i, k-1) + R(i+1, x)) for all 1 &le; i &le; x-1.\n  The minimum number of walls that we need to remove for given <b>N</b> and <b>K</b> is F(<b>N</b>, <b>K</b>).\n  We can compute this function using dynamic programming, which will have O(<b>N</b><sup><b>2</b></sup> &times; <b>K</b>) time complexity, which is fast enough for test 2.\n</p>\n<p>\n  We can have a faster solution, if we decompose the problem from a slightly different angle. We can think about running binary search on number of removals needed to satisfy\n  the condition. In each iteration of binary search, we need to calculate if it is possible to have k or less number of positions where <b>A<sub>i</sub></b> &ne; <b>A<sub>i+1</sub></b>\n  if we have at most x removal, x being the value of binary search value of that iteration.\n  That can be also calculated with another dynamic programming, leading us to a solution with time complexity of O(<b>N</b><sup><b>2</b></sup> &times; log(<b>N</b>)).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1dnOWWKhrz-kdebB0XSAeKIclw23OR-jic_47jmOalQXXenF9FXQF68ZFNCgKGSMIFiE1sUQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000018666c","statement":"<h3>Problem</h3>\n<p>\n  Blotch has built a wall.\n  The wall is made up of <b>N</b> sections, numbered from 1 to <b>N</b> from left to right.\n  Since he had built the wall in a hurry, not all the sections are of the same height.\n  The i-th section of wall is <b>A<sub>i</sub></b> metres tall.\n</p><p>\n  Blotch would like to fix his wall by rebuilding some of the sections.\n  Blotch can set the height of each section he rebuilds to any height he chooses.\n</p><p>\n  Blotch will be <i>happy</i> if the number of indices i (1 &le; i &lt; <b>N</b>) where <b>A<sub>i</sub></b> &ne; <b>A<sub>i+1</sub></b>\n  is not more than <b>K</b>.\n</p><p>\n  What is the fewest sections of the wall Blotch needs to rebuild so that he will be happy?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the two integers <b>N</b> and <b>K</b>, the number of sections of wall and the maximum number of changes in height between adjacent sections, respectively.\n</p><p>\n  The second line contains <b>N</b> integers. The i-th integer is <b>A<sub>i</sub></b>, the height\n  of the i-th section of wall.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and\n  <code>y</code> is the fewest sections that Blotch has to rebuild so that he will be happy.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: TBD seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>A<sub>i</sub></b> &le; 1000, for all i.<br/>\n  0 &le; <b>K</b> &le; <b>N</b>.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  2 &le; <b>N</b> &le; 20.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  2 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3ux9pCYhhuwwT8bpm4tugvpaN9guIj3vsdx9ipfHV6nRC9o9V7nnPGZQIQEeXAF2ivwUxrd9Wx6N8j9qxxfMI6aAHGmG9kEw/flattening_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n8 2\n300 100 300 300 200 100 800 500\n5 3\n100 100 100 100 3\n7 3\n10 20 40 10 10 30 30\n10 2\n30 30 60 60 90 90 60 60 30 30\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1Vv6QxRtiP3amuqX_gJsVhQUSqX_a2QV1sSb7XVlRU03zdFU1wWN-nYFjng4ZLCVIRU14Qif7HUuuzcMVSB1msPX9CkARiOkM/flattening_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 0\nCase #3: 1\nCase #4: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n</sampleio>\n\n<p>\n  In the first sample case, there are <b>N</b> = 8 sections of wall, and Blotch will be happy if there are at most <b>K</b> = 2 changes in height between adjacent sections.\n  Blotch can:\n  <ul>\n    <li>rebuild the 2nd section of wall to have height 300,</li>\n    <li>rebuild the 6th section of wall to have height 200, and</li>\n    <li>rebuild the 8th section of wall to have height 800.</li>\n  </ul>\n  This produces a wall with sections of height 300, 300, 300, 300, 200, 200, 800 and 800, which makes Blotch happy.\n</p>\n<p>\n  In the second sample case, there are <b>N</b> = 5 sections of wall, and Blotch will be happy if there are at most <b>K</b> = 3 changes in height between adjacent sections.\n  Blotch is already happy with this wall, so he does not need to rebuild any sections.\n</p>\n<p>\n  In the third sample case, there are <b>N</b> = 7 sections of wall, and Blotch will be happy if there are at most <b>K</b> = 3 changes in height between adjacent sections.\n  Blotch can:\n  <ul>\n    <li>rebuild the 2nd section of wall to have height 10.</li>\n  </ul>\n  This produces a wall with sections of height 10, 10, 40, 10, 10, 30 and 30 which makes Blotch happy.\n</p>\n<p>\n  In the fourth sample case, there are <b>N</b> = 10 sections of wall, and Blotch will be happy if there are at most <b>K</b> = 2 changes in height between adjacent sections.\n  Blotch can:\n  <ul>\n    <li>rebuild the 5th section of wall to have height 60, and</li>\n    <li>rebuild the 6th section of wall to have height 60.</li>\n  </ul>\n  This produces a wall with sections of height 30, 30, 60, 60, 60, 60, 60, 60, 30, 30 which makes Blotch happy.\n</p>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":9},{"type":2,"type__str":"HIDDEN","value":13}],"title":"Flattening","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000050edc","type":1,"type__str":"SPECTATOR"},"title":"Round F 2019"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
