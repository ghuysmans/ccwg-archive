{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1665846000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"00000000008cb2e1","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Thank you for participating in Kick Start 2022 Round G!</p>\n<hr>\n<p><b>Cast</b></p>\n<p>Walktober: Written by Bartosz Kostka and prepared by Nikolai Artemiev.</p>\n<p>Curling: Written by Bintao Sun and prepared by Chun-nien Chan.</p>\n<p>Happy Subarrays: Written by Darshan Bari and prepared by Jared Gillespie.</p>\n<p>Cute Little Butterfly: Written by Pawan Raj and prepared by Chun-nien Chan.</p>\n<p>Solutions, other problem preparation, reviews and contest monitoring by\nAbhilash Tayade, Adilet Zhaxybay, Advitiya Brijesh, Alan Lou, Anveshi Shukla, Bartosz Kostka,\n  Bintao Sun, Bohdan Pryshchenko, Chu-ling Ko, Chun-nien Chan, Cristhian Bonilha, Darshan Bari,\n  Ekanshi Agrawal, Eunice Hameyie, Indrajit Sinha, Jared Gillespie, Jimmy Dang, Jin Gyu Lee,\n  Kai Hsien Boo, Kashish Bansal, Krists Boitmanis, Kunal Verma, Lizzie Sapiro Santor, Lucas Maciel,\n  Luis Santiago Re, Manish Kundu, Mohamed Yosri Ahmed, Nikolai Artemiev, Nitish Rai, Pawan Raj,\n  Prince Kumar, Priyam Khandelwal, Rahul Goswami, Raymond Kang, Rohan Garg, Ruiqing Xiang,\n  Rythum, Sanyam Garg, Satish Karri, Shantam Agarwal, Swapnil Gupta, Tarun Khullar,\n  Teja Vardhan Reddy Dasannagari, Vakul Gupta, Vinay Khilwani, Vishal Som,\n  Yash Ranka, and Zongxin Wu.</p>\n<p>Analysis authors:</p><ul>\n<li>Walktober: Ekanshi Agrawal</li>\n<li>Curling: Anveshi Shukla</li>\n<li>Happy Subarrays: Anveshi Shukla</li>\n<li>Cute Little Butterfly: Krists Boitmanis</li>\n</ul>\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1665835200000,"tasks":[{"analysis":"<p>\n  For simplicity, let us denote subarray of array $$$\\mathbf{A}$$$ starting from index\n  $$$i$$$ and ending at index $$$j$$$, $$$(j \\ge i)$$$ as $$$A(i, j)$$$.\n</p>\n<h3> Test Set 1 </h3>\n\n<p>\n  $$$A(i, j)$$$ is a happy subarray iff all of its prefix sums are non-negative,\n  <i>i.e.</i>\n\n  \\begin{align*}\n    \\mathbf{A_{i}} &\\ge 0 \\\\\n    \\mathbf{A_{i}} + \\mathbf{A_{i + 1}} &\\ge 0 \\\\\n    \\mathbf{A_{i}} + \\mathbf{A_{i + 1}} + \\mathbf{A_{i + 2}} &\\ge 0 \\\\\n    &\\vdots\\\\\n    \\mathbf{A_{i}} + \\mathbf{A_{i + 1}} + \\mathbf{A_{i + 2}} + \\cdots + \\mathbf{A_{j}} &\\ge 0\n  \\end{align*}\n\n  We can observe that:\n<ul>\n  <li>\n    Observation 1: If $$$A(i, j)$$$ is a happy subarray then all its prefix\n    arrays $$$A(i, k)$$$, such that $$$i \\le k \\le j$$$ are also happy subarray.\n  </li>\n  <li>\n    Observation 2: If $$$A(i, j)$$$ is <i>not</i> a happy subarray then\n    all subarrays $$$A(i, k)$$$, such that $$$k \\ge j$$$ are also\n    <i>not</i> happy subarray.\n  </li>\n</ul>\n</p>\n<p>\n  We can iterate over all subarrays with a left index $$$i$$$. For a fixed left\n  index $$$i$$$, we can iterate over the right index $$$j$$$ such that the\n  subarray sum is non-negative. As soon as we find an index $$$j$$$ such that\n  subarray sum of $$$A(i, j)$$$ is less than $$$0$$$, we can stop and increase\n  the left index.\n</p>\n\n<p>\n  Here is a sample code in C++.\n</p>\n\n<pre>\n  <code class=\"language-cpp\">\n  int ans = 0;\n  for(int i = 1; i <= N; i++) {\n    int cur_sum = 0;\n    for(int j = i; j <= N; j++) {\n      cur_sum += A[j];\n      if(cur_sum < 0)\n        break;\n      ans += cur_sum;\n    }\n  }\n  </code>\n</pre>\n\nThe overall time complexity of the above solution would be\n$$$O(\\mathbf{N}^2)$$$, which is fast enough for test set $$$1$$$.\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  Let us denote subarray sum of $$$A(i, j)$$$ as $$$S(i, j)$$$ and prefix sum of array $$$\\mathbf{A}$$$ till\n  $$$i^{th}$$$ index as $$$P(i)$$$,\n\n  \\begin{align*}\n    S(i, j) &= \\mathbf{A_{i}} + \\mathbf{A_{i + 1}} + \\mathbf{A_{i + 2}} + \\cdots +\\mathbf{A_{j}} \\\\\n  P(i) &= \\mathbf{A_{1}} + \\mathbf{A_{2}} + \\mathbf{A_{3}} + \\cdots + \\mathbf{A_{i}}\n  \\end{align*}\n\n  The prefix sum array $$$P$$$ of array $$$\\mathbf{A}$$$ can be computed in\n  $$$O(\\mathbf{N})$$$ by iterating over the array from left to right:\n\n  \\begin{align*}\n      P(i) =\n      \\begin{cases}\n        0 & i = 0\\\\\n        P(i -1) + \\mathbf{A_i} & i > 0\n      \\end{cases}\n  \\end{align*}\n\n</p>\n\nBy the definition of a prefix array, we can easily note that $$$S(i, j) = P(j) -\nP(i - 1)$$$\n\n<p>\n  For every index $$$i$$$, let us compute $$$nsv(i)$$$ (nearest smaller value),\n  the smallest index $$$j$$$ such that\n  $$$j \\ge i$$$ and subarray sum of $$$A(i, j)$$$ is less than 0.\n  If there is no such index we can simply set $$$nsv(i) = \\mathbf{N} + 1$$$.\n  Finding smallest index $$$j$$$ on right of $$$i$$$, such that\n  the subarray sum $$$A(i, j)$$$ is less than $$$0$$$\n</p>\n\\begin{align*}\n  \\mathbf{A_{i}} + \\mathbf{A_{i + 1}} + \\mathbf{A_{i + 2}} + \\cdots + \\mathbf{A_{j}} &\\lt 0 \\\\\n  S(i, j) &\\lt 0 \\\\\n  P(j) - P(i - 1) &\\lt 0 \\\\\n  P(j) &\\lt P(i - 1) \\\\\n\\end{align*}\n\nis same as finding the smallest index $$$j$$$, $$$j\n\\ge i$$$ and $$$P(j) \\lt P(i - 1)$$$. This can be done using small modification\nin\n<a\n  target=\"_blank\"\n  href=\"https://en.wikipedia.org/wiki/All_nearest_smaller_values\"\n  >All nearest smaller values algorithm</a\n>\nin $$$O(\\mathbf{N})$$$.\n\n<p>\n  All subarrays which starts at index $$$l$$$ and end at index $$$j$$$,\n  such that $$$l \\le j \\lt nsv(l)$$$ would have non-negative sum.\n  Sum of all such subarrays starting at index $$$l$$$ and extending at max to index\n  $$$r$$$, $$$ r = nsv(l) - 1$$$ is same as the sum of below expressions:\n</p>\n\\begin{align*}\n  \\mathbf{A_{l}} &= P(l) - P(l - 1) \\\\\n  \\mathbf{A_{l}} + \\mathbf{A_{l + 1}} &= P(l + 1) - P(l - 1) \\\\\n  \\mathbf{A_{l}} + \\mathbf{A_{l + 1}} + \\mathbf{A_{l + 2}} &= P(l + 2) - P(l - 1) \\\\\n  &\\vdots\\\\\n  \\mathbf{A_{l}} + \\mathbf{A_{l + 1}} + \\mathbf{A_{l + 2}} + \\cdots + \\mathbf{A_{r}} &= P(r) - P(l -1)\n\\end{align*}\n\nOn simplification, sum of all subarray $$$A(i, j)$$$ such that\n$$$i = l$$$ and $$$i \\le j \\le r$$$\n\n\\begin{align*}\n  sum(l) = (P(l) + P(l + 1) + P(l + 2) + \\cdots + P(r)) - (r - l + 1) \\times P(l - 1)\n\\end{align*}\n\nThe first term $$$P(l) + P(l + 1) + P(l + 2) + \\cdots + P(r)$$$ can be computed\nby pre-calculating the prefix sum array of $$$P$$$.\n\n<p>\n  Let us denote prefix sum of $$$P$$$ as $$$PP$$$, <i>i.e.</i>\n  $$$ PP(i) = P(1) + P(2) + \\cdots + P(i)$$$. The above sum can be simplified as:\n</p>\n\n\\begin{align*}\n  sum(l) &= PP(r) - PP(l - 1) - (r - l + 1) \\times P(l - 1) \\\\\n  ans &= \\sum\\limits_{l=1}^{N} sum(l) \\\\\n  ans &= \\sum\\limits_{l=1}^{N} PP(r) - PP(l - 1) - (r - l + 1) \\times P(l - 1)\n\\end{align*}\n\n<p>\n  Nearest smaller value on right for each index in prefix array $$$nsv(i)$$$ can be computed\n  in $$$O(\\mathbf{N})$$$. Sum of all subarrays with fixed left index and moving\n  right index can be computed in $$$O(1)$$$, if we have pre computed\n  prefix sum array of $$$\\mathbf{A}$$$ <i>i.e.</i> $$$P$$$ and prefix sum array of $$$P$$$ <i>i.e.</i> $$$PP$$$.\n  Precomputation of prefix sum arrays can be done in $$$O(\\mathbf{N})$$$.\n  The overall time complexity of the above solution would be $$$O(\\mathbf{N})$$$\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1Zbqq_yT0jCmq2PqnuLlfoHrr0bt0bLyzmhRu8CJ7ZGUjJhp49_OKdOgSEKAwZKs2n_nxM6Drn/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000c17491","statement":"<h3>Problem</h3>\n<p>\n  Let us define $$$F(B, L, R)$$$ as the sum of a subarray of an array $$$B$$$\n  bounded by indices $$$L$$$ and $$$R$$$ (both inclusive). Formally, $$$F(B, L,\n  R) = B_L + B_{L+1} + \\cdots + B_R$$$.\n</p>\n<p>\n  An array $$$C$$$ of length $$$K$$$ is called a happy array if all the prefix\n  sums of $$$C$$$ are non-negative. Formally, the terms $$$F(C, 1, 1), F(C, 1,\n  2), \\dots, F(C, 1, K)$$$ are all non-negative.\n</p>\n<p>\n  Given an array $$$\\mathbf{A}$$$ of $$$\\mathbf{N}$$$ integers, find the result of adding the sums of all\n  the happy subarrays in the array $$$\\mathbf{A}$$$.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow.<br />\n  Each test case begins with one line consisting an integer $$$\\mathbf{N}$$$ denoting the\n  number of integers in the input array $$$\\mathbf{A}$$$. Then the next line contains $$$\\mathbf{N}$$$\n  integers $$$\\mathbf{A_1}, \\mathbf{A_2}, \\dots, \\mathbf{A_N}$$$ representing the integers in\n  given input array $$$\\mathbf{A}$$$.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the test case number\n  (starting from 1) and $$$y$$$ is the result of adding the sums of all happy\n  subarrays in the given input array $$$\\mathbf{A}$$$.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 25 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n  $$$-800 \\le \\mathbf{A_i} \\le 800$$$, for all $$$i$$$.<br />\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{N} \\le 200$$$.<br />\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  For at most 30 cases:<br/>\n  $$$1 \\le \\mathbf{N} \\le 4 \\times 10^5$$$.<br/>\n  For the remaining cases:<br/>\n  $$$1 \\le \\mathbf{N} \\le 200$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3BDKyGFluMavgj6FXqIpNhAn3PNMZVzoNu3ncBpWyd9kgT5VcIEyRrPbYxTKQjE8AUPUsswJ4cwy8zTs7F3m1CNi7EdumQZkpoMFz0cCc/happy_subarrays_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5\n1 -2 3 -2 4\n3\n1 0 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1W4Z0mZ0EQl6oqqyrFM__2L6yzsJn6GJBj8k6J5mF5AA0_Z9Qnv9rwsYJgmWb9tUwyFHFgxyJKCPV5wzQ0rKnOUO0PnjqOPmHBGVQUe8cF/happy_subarrays_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 14\nCase #2: 12\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    In Sample Case #1, the happy subarrays are $$$[1], [3], [3, -2], [3, -2,\n    4],$$$ and $$$[4]$$$ with their respective sums $$$1, 3, 1, 5,$$$ and\n    $$$4$$$. After adding the sums obtained, the result is $$$14$$$.\n  </p>\n  <p>\n    In Sample Case #2, the happy subarrays are $$$[1], [1, 0], [1, 0, 3], [0],\n    [0, 3],$$$ and $$$[3]$$$ with their respective sums $$$1, 1, 4, 0, 3,$$$ and\n    $$$3$$$. After adding the sums obtained, the result is $$$12$$$.\n  </p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":11},{"type":1,"type__str":"VISIBLE","value":20}],"title":"Happy Subarrays","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n\n<p>\n  We are given the daily steps count of only two people -- John, and another\n  participant.\n  To make sure that John had the maximum steps on each day, we just need to compare\n  his steps on each day with the other participant's steps on that day.\n  Let us maintain a count $$$C$$$ of the steps John needs  in order to achieve his goal.\n  Before day $$$1$$$, $$$C$$$ is equal to $$$0$$$. Then, for each day from the beginning of Walktober:\n</p>\n<ul>\n  <li>\n    <p>\n      If John's steps were less than those of the other participant, we add the\n      difference between their steps to $$$C$$$ as that is the number of additional steps John needed.\n    </p>\n  </li>\n  <li>\n    <p>\n      If John's steps were greater than or equal to those of the other\n      participant, we continue to the next day as John already had the maximum\n      steps for that day.\n    </p>\n  </li>\n</ul>\n<p>\n  After the above process, we end up with the total number of steps John\n  required last year in variable $$$C$$$.\n</p>\n<p>\n  <b>Time and Space Complexity:</b> Iterating over all the days would take\n  $$$O(\\mathbf{N})$$$ time. Overall time taken would be of the order of $$$O(\\mathbf{N})$$$,\n  with $$$O(1)$$$ extra space.\n</p>\n<br />\n\n<h3>Test Set 2</h3>\n<p>\n  To help visualize the input, let us make a 2D grid of each person's steps count:\n</p>\n<table>\n    <tr>\n      <th><p>ID</p></th>\n      <th><p>Day $$$1$$$</p></th>\n      <th><p>Day $$$2$$$</p></th>\n      <th><p>$$$\\cdots$$$</p></th>\n      <th><p>Day $$$\\mathbf{N}$$$</p></th>\n    </tr>\n    <tr>\n      <th>$$$1$$$</th>\n      <td>$$$\\mathbf{S_{1,1}}$$$</td>\n      <td>$$$\\mathbf{S_{1,2}}$$$</td>\n      <td>$$$\\cdots$$$</td>\n      <td>$$$\\mathbf{S_{1,N}}$$$</td>\n    </tr>\n    <tr>\n      <th>$$$2$$$</th>\n      <td>$$$\\mathbf{S_{2,1}}$$$</td>\n      <td>$$$\\mathbf{S_{2,2}}$$$</td>\n      <td>$$$\\cdots$$$</td>\n      <td>$$$\\mathbf{S_{2,N}}$$$</td>\n    </tr>\n    <tr>\n      <th>$$$\\cdots$$$</th>\n      <td>$$$\\cdots$$$</td>\n      <td>$$$\\cdots$$$</td>\n      <td>$$$\\cdots$$$</td>\n      <td>$$$\\cdots$$$</td>\n    </tr>\n    <tr>\n      <th>$$$\\mathbf{M}$$$</th>\n      <td>$$$\\mathbf{S_{M,1}}$$$</td>\n      <td>$$$\\mathbf{S_{M,2}}$$$</td>\n      <td>$$$\\cdots$$$</td>\n      <td>$$$\\mathbf{S_{M,N}}$$$</td>\n    </tr>\n</table>\n\n<p>\n  To calculate the answer, we first need to calculate the maximum steps taken by\n  a participant each day. This would simply be the maximum step count over all\n  $$$\\mathbf{M}$$$ participants in that day's column in the table above.\n  Let us denote this value for day $$$j$$$ with $$$maxOfDay(j)$$$, where $$$1\n  \\le j \\le \\mathbf{N}$$$. $$$maxOfDay(j)$$$ can be calculated by traversing the day\n  column $$$j$$$ and keeping a track of the maximum steps encountered so far.\n  <br /><br />\n</p>\n\n<center>\n  $$$maxOfDay(j) = max(\\mathbf{S_{1,j}}, \\mathbf{S_{2,j}}, \\dots , \\mathbf{S_{M,j}})$$$\n</center>\n\n<p>\n  Again, we maintain a count $$$C$$$ of the number of steps John would have\n  needed to achieve his goal, starting with $$$C = 0$$$. Recall from the\n  statement that $$$\\mathbf{P}$$$ denotes John's ID. For day $$$j$$$, John would require\n  $$$C_j$$$ additional steps, where: <br /><br />\n</p>\n\n<center>$$$C_j = (maxOfDay(j) - \\mathbf{S_{P,j}})$$$</center>\n\n<p>\n  The total number of steps John required to achieve his goal (and therefore, the answer) would then be:<br /><br />\n</p>\n\n<center> $$$C = (C_1 + C_2 + \\dots + C_{\\mathbf{N}})$$$</center>\n\n<p>\n  <b>Time and Space Complexity:</b> $$$maxOfDay()$$$ runs in $$$O(\\mathbf{M})$$$ time\n  to find the maximum steps over $$$\\mathbf{M}$$$ participants on a particular day. Calculating $$$maxOfDay(j)$$$ for\n  each $$$j$$$ such that $$$1 \\le j \\le \\mathbf{N}$$$ would take $$$O(\\mathbf{M}\\cdot\\mathbf{N})$$$\n  time. Overall time taken would be of the order of $$$O(\\mathbf{M}\\cdot\\mathbf{N})$$$, with\n  $$$O(\\mathbf{N})$$$ extra space to calculate and store $$$C_1, C_2, \\dots, C_{\\mathbf{N}}$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2qy760JEblNFwsh8LvDJuzP47zuEbbyxzAGSl6JiEHmeV9uApO3MJB77JRKStd4c_cduCl0hPo/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000c174f2","statement":"<h3>Problem</h3>\n<p>\n  John participates in an annual walking competition called <i>Walktober</i>. The competition\n  runs for a total of $$$\\mathbf{N}$$$ days and tracks the daily steps of the participants\n  for all the $$$\\mathbf{N}$$$ days. Each participant will be assigned a unique ID ranging from\n  $$$1$$$ to $$$\\mathbf{M}$$$ where $$$\\mathbf{M}$$$ is the total number of registered participants. A global scoreboard\n  is maintained tracking the daily steps of each participant.\n</p>\n<p>\n  John is determined to win Walktober this year and his goal is to\n  score the maximum daily steps on each of the $$$\\mathbf{N}$$$ days among all the participants.\n  Having participated in Walktober last year as well, he wanted to know how many steps\n  he fell short of in achieving his goal. Given the previous year scoreboard,\n  calculate the minimum additional steps he needed over his last year score in order\n  to achieve his goal of scoring the maximum daily steps every day.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow.\n  <br />\n  The first line of each test case contains three integers $$$\\mathbf{M}$$$, $$$\\mathbf{N}$$$, and $$$\\mathbf{P}$$$\n  denoting the total number of participants, the total number of days the\n  competition runs, and the last year participant ID of John.\n  <br />\n  The next $$$\\mathbf{M}$$$ lines describe the scoreboard of the previous year and contains\n  $$$\\mathbf{N}$$$ integers each. The $$$j$$$-th integer of the $$$i$$$-th line\n  denotes the step count $$$\\mathbf{S_{i,j}}$$$ of the participant with ID $$$i$$$ on the\n  $$$j$$$-th day of the competition.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the test case number\n  (starting from 1) and $$$y$$$ is the minimum total additional steps needed by\n  John to achieve his goal.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n  $$$1 \\le \\mathbf{N} \\le 31$$$.<br />\n  $$$1 \\le \\mathbf{S_{i,j}} \\le 60000$$$ for all $$$i$$$ and $$$j$$$.<br />\n  $$$1 \\le \\mathbf{P} \\le \\mathbf{M}$$$.<br />\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  $$$\\mathbf{M} = 2$$$.<br />\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n  $$$2 \\le \\mathbf{M} \\le 1000$$$.<br />\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2phBX0H4jU2RiyPpwpMMYkn3atTb3wEFkFbi3vqDVPxtEqZ9HVp98RyLHS9if-CJYG8E6_KHDsBjIvS9xIC43Y7vNYeYLJH3w/walktober_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">1\n2 3 1\n1000 2000 3000\n1500 1500 3000\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3nmz7omMGkp_ydn1DcLND4VzOM5pNUTZluwdgFDGjLf6lJTrAkqJDdNT1Yej_A6zGYOu4LWlpFqXS2CRraw5zmghqhskwsqp_L/walktober_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 500</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In the Sample Case, the competition ran for $$$3$$$ days and the participant ID of John\n  was $$$1$$$. On day $$$1$$$, as the other participant has more steps, John needs $$$500$$$\n  additional steps. On the rest of the days, as John already has the maximum steps, he needs\n  no additional steps. So, he needs a total of $$$500$$$ additional steps to achieve his goal.\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2W1zA6h3XG848B9zPW6dlGjpR1Xn7XRVdrVf4l9Fti7EfxEgKXlCnExicYIRYCWX5UZU-YBLQiGm9Hi7UnQmJ2OeuMKOCktY8/walktober_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">2\n3 2 3\n1000 2000\n1500 4000\n500 4000\n3 3 2\n1000 2000 1000\n1500 2000 1000\n500 4000 1500\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1tiGHItE5pdIOJizbLAbKLgMxQG3Yfn-K_kU0AAP60n6zw-PYJL1j0cgn41ESZevf5O0ijkXzcoP0lX7c4tabHfZ0_3TQwSl-x/walktober_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 1000\nCase #2: 2500</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In the Sample Case #1, the competition ran for $$$2$$$ days and the participant ID of John\n  was $$$3$$$. He needs an additional $$$1000$$$ steps on day $$$1$$$ and $$$0$$$ steps on day\n  $$$2$$$ to achieve his goal. So, he needs a total of $$$1000$$$ additional steps to achieve\n  his goal.\n</p>\n\n<p>\n  In the Sample Case #2, the competition ran for $$$3$$$ days and the participant ID of John\n  was $$$2$$$. He needs an additional $$$0$$$ steps on day $$$1$$$, $$$2000$$$ steps on day\n  $$$2$$$, and $$$500$$$ steps on day $$$3$$$ to achieve his goal. So, he needs a total of\n  $$$2500$$$ additional steps to achieve his goal.\n</p>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":4},{"type":1,"type__str":"VISIBLE","value":6}],"title":"Walktober","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\n  Test Set 1\n</h3>\n\n<p> Let us introduce some notation first.\n  <ul>\n    <li>The maximum $$$x$$$-coordinate of a flower $$$X_\\max=\\max_{1 \\le i \\le \\mathbf{N}} \\mathbf{X_i}$$$.</li>\n    <li>The maximum $$$y$$$-coordinate of a flower $$$Y_\\max=\\max_{1 \\le i \\le \\mathbf{N}} \\mathbf{Y_i}$$$.</li>\n  </ul>\n</p>\n\n<p>\n  For $$$\\mathbf{N} \\le 6$$$, we can enumerate all valid sequences of flowers and take the\n  sequence yielding the highest energy. A sequence of flowers is valid if their $$$y$$$-coordinates\n  form a non-increasing sequence and thus do not require any upward moves, which are illegal.\n  As we visit the flowers one by one, there is no incentive of changing the\n  direction if the next flower can be reached without doing so. This leads to the following\n  recursive method using Python-like syntax:\n</p>\n\n<p>\n<pre>\nused = [False] * N\nans = 0\nenumerate(x=0, y=Y_max+1, is_right=True, energy=0)\nprint(ans)\n\ndef enumerate(x, y, is_right, energy):\n  ans = max(ans, energy)\n  for i in range(N):\n    if not used[i] and Y[i] &lt;= y:\n      used[i] = True\n      if (is_right and X[i] &lt; x) or (not is_right and X[i] &gt; x):\n        # Need to change direction to reach the i-th flower\n        enumerate(X[i], Y[i], not is_right, energy + C[i] - E)\n      else:\n        # Can reach the i-th flower without changing the direction\n        enumerate(X[i], Y[i], is_right, energy + C[i])\n      used[i] = False\n</pre>\n</p>\n\n<p>\n  The time complexity of this brute-force method is $$$O(\\mathbf{N}!)$$$.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  Let us define another function.\n</p>\n<ul>\n<li>The energy function\n  $$$c(x,y)=\\begin{cases} \\mathbf{C_i}, & \\text{if } (x,y)=(\\mathbf{X_i},\\mathbf{Y_i}) \\text{ for some flower } i, \\\\\n  0, & \\text{otherwise.} \\end{cases}$$$ </li>\n</ul>\n<p>\n  The following observation will simplify our reasoning about the problem.\n  Since going straight without changing the direction does not consume any energy, we can\n  assume that direction changes happen at the $$$x$$$-coordinates $$$0$$$ and\n  $$$X_\\max$$$ only. This, in turn, implies the existence of an optimal\n  path where the flowers at the same $$$y$$$-coordinate are visited in one straight movement from\n  left to right or from right to left without changing the direction in between. Therefore, we can\n  clearly distinguish between the two scenarios when the flowers at level $$$y$$$ are visited in the\n  right or left direction.\n</p>\n<p>\n  Let $$$r(x,y)$$$ be the maximum energy of a path ending at the point $$$(x,y)$$$\n  when the flowers at level $$$y$$$ are visited in the right direction, and let us define a similar\n  function $$$l(x,y)$$$ for the left direction. The final answer is then\n  $$$\\max_{0 \\leq x \\leq X_\\max,0 \\leq y \\leq Y_\\max}\\max(r(x,y),l(x,y))$$$.\n</p>\n<p>\n  The values of $$$r(x,y)$$$ and $$$l(x,y)$$$ can be computed using dynamic\n  programming and the following recurrence relations. As the relations suggest, we should\n  calculate the functions $$$r(x,y)$$$ and $$$l(x,y)$$$ for higher values of $$$y$$$ first.\n  For points in the same $$$y$$$ level, we calculate $$$r(x,y)$$$ from left to right, and\n  $$$l(x,y)$$$ from right to left.\n</p>\n<ol>\n  <li>$$$r(0,Y_\\max)=c(0,Y_\\max)$$$,</li>\n  <li>$$$r(x,Y_\\max)=r(x-1,Y_\\max)+c(x,Y_\\max)$$$ for $$$x > 0$$$,</li>\n  <li>$$$l(X_\\max,Y_\\max)=c(X_\\max, Y_\\max)-\\mathbf{E}$$$,</li>\n  <li>$$$l(x,Y_\\max)=l(x+1,Y_\\max)+c(x, Y_\\max)$$$ for $$$x &lt; X_\\max$$$,</li>\n  <li>$$$r(0,y)=\\max[r(0,y+1),l(0,y+1)-\\mathbf{E}]+c(0,y)$$$ for $$$y &lt; Y_\\max$$$,</li>\n  <li>$$$r(x,y)=\\max[r(x-1,y),r(x,y+1)]+c(x,y)$$$ for $$$x > 0$$$ and $$$y &lt; Y_\\max$$$,</li>\n  <li>$$$l(X_\\max,y)=\\max[l(X_\\max,y+1),r(X_\\max,y+1)-\\mathbf{E}]+c(X_\\max,y)$$$ for $$$y &lt; Y_\\max$$$,</li>\n  <li>$$$l(x,y)=\\max[l(x+1,y),l(x,y+1)]+c(x,y)$$$ for $$$x &lt; X_\\max$$$ and $$$y &lt; Y_\\max$$$.</li>\n</ol>\n<p>\n  The following image illustrates these recurrence relations.\n</p>\n<img\nstyle=\"width: 100%; max-width: 1280px\"\nsrc=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2ejUCw4l5vyOm8BXQv9JfqhaRaZRV8RlOS3AZMUWn1C3oqJj6bYmA9Wqdd4o22tGN8FAWpF0CeUES2z5kHKab6DgVZ3lkh7nK5PtSJEnjjfQ/analysis_test_set_2_updated.png\"\nalt=\"Illustration of the recurrence relations.\"\n/>\n<p>\n  The time complexity of such a dynamic programming solution is $$$O(X_\\max \\times Y_\\max)$$$, which\n  is efficient enough as the coordinates are bounded by $$$500$$$.\n</p>\n\n<h3>\n  Test Set 3\n</h3>\n\n<p>\n  For the large test set, the coordinate space is not reasonably restricted, so we should confine\n  the calculation of $$$r(x,y)$$$ and $$$l(x,y)$$$ to the set of points with flowers. The general\n  dynamic programming idea remains the same, though.\n</p>\n<p>\n  Assuming that we are currently processing the flower $$$i$$$, let us consider the recurrence\n  relation (6). We can reach the $$$i$$$-th flower from any processed flower $$$j$$$ moving in the\n  right direction if $$$\\mathbf{X_j} \\leq \\mathbf{X_i}$$$. Among all such flowers $$$j$$$, we are looking for the\n  one with the largest $$$r(\\mathbf{X_j}, \\mathbf{Y_j})$$$. To make such a lookup efficient, let us store the\n  processed flowers in a set $$$S_r$$$ sorted by $$$\\mathbf{X_j}$$$. Moreover, if $$$\\mathbf{X_j} \\leq \\mathbf{X_k}$$$ for two\n  processed flowers $$$j \\neq k$$$ and $$$r(\\mathbf{X_j},\\mathbf{Y_j}) \\geq r(\\mathbf{X_k},\\mathbf{Y_k})$$$, we can safely ignore\n  the flower $$$k$$$ and drop it from $$$S_r$$$, so the set is essentially increasing by values\n  $$$r(\\mathbf{X_j},\\mathbf{Y_j})$$$ as well. Now, to find the best processed flower $$$j$$$ to visit the current\n  flower $$$i$$$ from, we just look for the flower $$$j$$$ in $$$S_r$$$ with the highest $$$\\mathbf{X_j}$$$ such\n  that $$$\\mathbf{X_j} \\leq \\mathbf{X_i}$$$. Once we are done calculating $$$r(\\mathbf{X_i},\\mathbf{Y_i})$$$, we add the flower\n  $$$i$$$ to the set $$$S_r$$$ and potentially drop some other flowers to maintain the sorted\n  property of the set.\n</p>\n<p>\n  In order to facilitate the calculation of $$$l(x,y)$$$, we should maintain a similar set of\n  processed flowers $$$S_l$$$, which is increasing by the coordinates $$$\\mathbf{X_j}$$$ and decreasing by the\n  values $$$l(\\mathbf{X_j},\\mathbf{Y_j})$$$.\n</p>\n<p>\n  Equipped with the sets $$$S_r$$$ and $$$S_l$$$, we can also handle the border cases like\n  items (5) and (7) above. Suppose we have calculated the functions $$$r$$$ and $$$l$$$ for all flowers\n  $$$i$$$ with $$$\\mathbf{Y_i} \\gt y$$$ for some level $$$y$$$ and we are about to process the flowers\n  $$$i$$$ with $$$\\mathbf{Y_i}=y$$$. Let $$$a$$$ be the first (i.e. leftmost) flower in $$$S_l$$$ and\n  $$$b$$$ be the last (i.e. rightmost) flower in $$$S_r$$$. To account for the\n  change of direction before visiting the leftmost flower $$$i$$$ with $$$\\mathbf{Y_i}=y$$$, we should make\n  sure $$$r(\\mathbf{X_i}, \\mathbf{Y_i})$$$ is at least $$$l(\\mathbf{X_a}, \\mathbf{Y_a}) + \\mathbf{C_i} - \\mathbf{E}$$$ in analogy with the\n  recurrence relation (5) above. Similarly, for the rightmost flower $$$i$$$ with $$$\\mathbf{Y_i}=y$$$,\n  $$$l(\\mathbf{X_i}, \\mathbf{Y_i})$$$ is at least $$$r(\\mathbf{X_b}, \\mathbf{Y_b}) + \\mathbf{C_i} - \\mathbf{E}$$$ in analogy with the\n  recurrence relation (7).\n<p>\n  The time complexity of this modified dynamic programming approach is $$$O(\\mathbf{N} \\log \\mathbf{N})$$$, as it\n  involves sorting the flowers by their coordinates and using a standard sorted set data structure\n  with $$$O(\\log \\mathbf{N})$$$ time per operation.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3v_VJr0nvcJSeAOrj1vpDBXhqpBKtuMO377-luGRPQ8oGAo7WBLgQwTOiPuvObSZ7c8u4zmHdl/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000c17b68","statement":"<h3>Problem</h3>\n<p>\n  In a forest of the magical world, there lies a garden full of magical\n  creatures. The garden has plenty of flowers which are not just beautiful but\n  also a source of energy for butterflies.\n</p>\n<p>\n  Consider the garden a 2D plane where the X-axis represents the ground, and the\n  Y-axis represents the altitude. There are plants of infinite height on every\n  non-negative integral point on the X-axis. There are $$$\\mathbf{N}$$$ flowers in the\n  garden, where the $$$i$$$-th flower is on the point ($$$\\mathbf{X_i}$$$, $$$\\mathbf{Y_i}$$$) with the\n  nectar of some energy value $$$\\mathbf{C_i}$$$.\n</p>\n<p>\n  Our cute little butterfly wants as much energy as possible to become strong.\n  By going to the same position of a flower, the butterfly can consume its nectar\n  and gain that flower's energy value. Each flower's nectar can only be consumed once.\n</p>\n<p>\n  The butterfly is initially at point $$$(0, 10^{18})$$$ with $$$0$$$ units of energy and\n  facing towards the right.\n  At any point, the butterfly can:\n</p>\n\n<ul>\n  <li>Move to a lower altitude, that is, from $$$(x, y)$$$ to $$$(x, y-1)$$$ only if its current altitude is positive ($$$y > 0$$$).</li>\n  <li>Move in the positive direction along the X-axis, that is, from $$$(x, y)$$$ to $$$(x+1, y)$$$ if it is facing right.</li>\n  <li>Move in the negative direction along the X-axis, that is, from $$$(x, y)$$$ to $$$(x-1, y)$$$ if it is facing left.</li>\n  <li>Change the direction it is facing (from left to right or vice versa). This will consume $$$\\mathbf{E}$$$ units of energy.</li>\n</ul>\n\n<p>\n  We know our butterfly is lazy, and it hates to move upwards during the\n  journey. So, for this problem, we will assume that going upwards is not\n  allowed. Also, energy can be negative at any point. Negative energy means\n  the butterfly has spent more energy than it obtained from the flowers.\n</p>\n\n<p>Find the <i>maximum</i> energy our cute butterfly can achieve.</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow.<br />\n  The first line of each test case contains two integers, $$$\\mathbf{N}$$$ and $$$\\mathbf{E}$$$: the\n  number of flowers and the energy required per turn, respectively.<br />\n  The next $$$\\mathbf{N}$$$ lines describe the flowers. The $$$i$$$-th line contains three\n  integers, $$$\\mathbf{X_i}$$$, $$$\\mathbf{Y_i}$$$ and $$$\\mathbf{C_i}$$$: the position and the energy value of the\n  $$$i$$$-th flower, respectively.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the test case number\n  (starting from 1) and $$$y$$$ is the maximum overall energy our cute butterfly\n  can achieve.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n  $$$0 \\le \\mathbf{E} \\le 10^9$$$.<br />\n  $$$1 \\le \\mathbf{C_i} \\le 10^9$$$, for all $$$i$$$.<br />\n  All flowers are located at distinct points.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  $$$1 \\le \\mathbf{N} \\le 6$$$.<br />\n  $$$0 \\le \\mathbf{X_i} \\le 500$$$, for all $$$i$$$.<br />\n  $$$0 \\le \\mathbf{Y_i} \\le 500$$$, for all $$$i$$$.<br />\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n  $$$1 \\le \\mathbf{N} \\le 10^3$$$.<br />\n  $$$0 \\le \\mathbf{X_i} \\le 500$$$, for all $$$i$$$.<br />\n  $$$0 \\le \\mathbf{Y_i} \\le 500$$$, for all $$$i$$$.<br />\n</p>\n\n<h4>Test Set 3</h4>\n<p>\nTime limit: 60 seconds.<br/>\n\n  $$$0 \\le \\mathbf{X_i} \\le 10^5$$$, for all $$$i$$$.<br />\n  $$$0 \\le \\mathbf{Y_i} \\le 10^9$$$, for all $$$i$$$.<br />\n  For at most 10 cases:<br />\n  $$$1 \\le \\mathbf{N} \\le 10^5$$$.<br />\n  For the remaining cases:<br />\n  $$$1 \\le \\mathbf{N} \\le 10^4$$$.<br />\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2rLtqbOEXROimnVCR0BjoOCsxoFLZXIx2afIcxAfDK4amHoo1pEquXkC71o0SC5OvqdXqE5IfpuP7oy8XY2vsCpXYnJ44P5teacte1smkmq_jb_BQ/cute_little_butterfly_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n4 10\n1 1 2\n1 2 2\n2 1 2\n2 2 2\n6 5\n1 1 4\n1 3 1\n3 4 5\n4 3 2\n5 2 1\n3 2 10\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U23LYl6Ez2CrFufypDYGITGJrhsJ1zhl3ccQY6bn4lYnf-dn0gnU0BvISj-IkOHIA4D1C1jZODDpFYzOIec_YwBouE0PDN0zLng4ipjEtndzdFAgfNb/cute_little_butterfly_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 6\nCase #2: 17\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In sample test case #1, there are $$$\\mathbf{N} = 4$$$ flowers and $$$\\mathbf{E} = 10$$$.\n  To maximise the overall energy our butterfly can move in this way:\n</p>\n<p>\n  <img\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0PoqHfdQYPLHAe_wiQ_yHpFMTXkTONCOlrYCYdOxHc6Tp4_QDQK0VGzTsEVUzE85ugtIB61xg1ZIR_9Yf5NUvKVhZU-PJA/sample_testcase_1.png\"\n    alt=\"Explanation for sample testcase 1\"\n  />\n</p>\n<ul>\n  <li>Collect energy from the second flower. Total energy is now 2 units</li>\n  <li>Collect energy from the fourth flower, by moving right. Total energy is now 4 units</li>\n  <li>Collect energy from the third flower, by moving down. Total energy is now 6 units</li>\n</ul>\n\n<p>Hence, the total energy the butterfly got in this way is $$$6$$$ units.</p>\n\n<p>\n  In sample test case #2, there are $$$\\mathbf{N} = 6$$$ flowers and $$$\\mathbf{E} = 5$$$.\n  To maximise the overall energy our butterfly can move in this way:\n</p>\n<p>\n  <img\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3QED2ZDnnrZn9PUHEdyZe7VbS_wiqXNIhpN8w1s4AJwYtuFDq25TGyZhnZq_bYj6ipCAuOH1bzzHqZ3_1P_oV7ciaRe5TN/sample_testcase_2.png\"\n    alt=\"Explanation for sample testcase 2\"\n  />\n</p>\n<ul>\n  <li>Collect energy from the third flower. Total energy is now 5 units</li>\n  <li>Collect energy from the fourth flower, by moving right and down. Total energy is now 7 units</li>\n  <li>Collect energy from the fifth flower, by moving right and down. Total energy is now 8 units</li>\n  <li>Change direction to left. Total energy is now 3 units</li>\n  <li>Collect energy from the sixth flower, by moving left. Total energy is now 13 units</li>\n  <li>Collect energy from the first flower, by moving left and down. Total energy is now 17 units</li>\n</ul>\n\n<p>Hence, the total energy the butterfly got in this way is $$$17$$$ units.</p>\n</sampleio>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":11},{"type":1,"type__str":"VISIBLE","value":13},{"type":1,"type__str":"VISIBLE","value":18}],"title":"Cute Little Butterfly","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Let us denote the score of the red team and the yellow team as $$$s_{red}$$$\n  and $$$s_{yellow}$$$, respectively.\n</p>\n\n<h3>Test Set 1</h3>\n\nFor this test set, $$$\\mathbf{M}$$$ = 0, i.e., there are no stones remaining on the curling\nsheet for the yellow team. In this case:\n\n<ul>\n  <li>$$$s_{red} = $$$ number of stones which are in the house.</li>\n  <li>$$$s_{yellow} = 0$$$.</li>\n</ul>\n\n<br />\n\nFor a house of radius $$$\\mathbf{R_h}$$$ centered at $$$(0, 0)$$$, a stone centered at $$$(x,\ny)$$$ with radius $$$\\mathbf{R_s}$$$ is:\n\n<ol>\n  <li>\n    in the house iff: $$$\\sqrt{x^2 + y^2} \\le \\mathbf{R_h} + \\mathbf{R_s}$$$ (Equality is for\n    the case when the stone and the house are tangent to each other. Figure 1\n    shows such a case).\n  </li>\n  <li>outside the house iff: $$$\\sqrt{x^2 + y^2} \\gt \\mathbf{R_h} + \\mathbf{R_s}$$$.</li>\n</ol>\n\n<br />\n\nTo count the stones in the house, we can iterate over the stones and count those\nwhich satisfy condition 1, i.e., $$$x^2 + y^2 \\le (\\mathbf{R_h} + \\mathbf{R_s})^2$$$.\n\n<center>\n  <figure>\n    <img\n      src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1yVAHVpKH_DUuvNob25oeF5fx0FoxjaAYSQ2-dy1rTpCOQ7d7Ux9uQEcbptR6W6rAXDLs9dJFg7R7shhbGz9iHfzsGy_Wj/curling_condition.png\"\n      style=\"max-width: 600px\"\n      alt=\"Figure 1\"\n    />\n    <figcaption>Figure 1: Stone touches the house externally.</figcaption>\n  </figure>\n</center>\n\n<p>Here is a sample code in C++:</p>\n\n<pre>\n  <code class=\"language-cpp\">\n  int s_red = 0, s_yellow = 0;\n  for(int i = 1; i <= N; i++) {\n    s_red += (x[i] * x[i] + y[i] * y[i]) <= (rh + rs) * (rh + rs);\n  }\n  </code>\n</pre>\n\n<h3>Test Set 2</h3>\n\nIn this test set, we can have non-zero number of stones remaining for both\nteams. Figure 2 shows some examples of scoring in the game. To calculate the\nscore of a team, we can count the number of stones which contribute to the score\nof a team. A stone contributes to the score of a team iff:\n\n<ol>\n  <li>It is in the house.</li>\n  <li>\n    It is closer to the center $$$(0, 0)$$$ than all of the stones of the\n    opponent team.\n  </li>\n</ol>\n\n<center>\n  <figure>\n    <img\n      src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U00if9fpBCzsEEE7reOQEatvuPHFq42LQykDnMdzEvZF4bKiKyAMLQClDnFIc5_CLhKDFFGhNZA5sMtTkVNFT2V7ehW/curling_scores.png\"\n      style=\"max-width: 600px\"\n      alt=\"Figure 2\"\n    />\n    <figcaption>\n      Figure 2: Examples of scoring in curling. Numbered circles are the only\n      scoring ones.\n    </figcaption>\n  </figure>\n</center>\n\n<p></p>\n\n<p>Here is a sample code in C++:</p>\n\n<pre>\n  <code class=\"language-cpp\">\nint dist(int x, int y) { return x * x + y * y; }\n\nvoid solve() {\n  int s_red = 0;\n  for(int i = 1; i <= N; i++) {\n   bool is_scoring = dist(x[i], y[i]) <= (rs + rh) * (rs + rh); // Inside house.\n   for(int j = 1; j <= M; j++) {\n    is_scoring &= dist(x[i], y[i]) < dist(z[j], w[j]);\n   }\n   s_red += is_scoring;\n  }\n\n  int s_yellow = 0;\n  for(int i = 1; i <= M; i++) {\n   bool is_scoring = dist(z[i], w[i]) <= (rs + rh) * (rs + rh); // Inside house.\n   for(int j = 1; j <= N; j++) {\n    is_scoring &= dist(z[i], w[i]) < dist(x[j], y[j]);\n   }\n   s_yellow += is_scoring;\n  }\n}\n  </code>\n</pre>\n\n<p>\n  The overall time complexity of the above solution would be $$$O(\\mathbf{N} \\times\n  \\mathbf{M})$$$.\n</p>\n\n<h4>Another solution</h4>\n\n<p>\n  Note that the score of at least one team must be $$$0$$$. If a team does not\n  have any stones on the curling sheet, their score is $$$0$$$. If both teams\n  have at least one stone still in play, the opponent of the team that has the\n  stone closest to the center will have a $$$0$$$ score.\n</p>\n\n<ul>\n  <li>\n    Case 1: $$$\\mathbf{N} = 0 \\text{ or } \\mathbf{M} = 0$$$, i.e. there is at least one team\n    that does not have any stones remaining on the curling sheet.\n    <ul>\n      <li>\n        In this case, the score of the team which does not have any stones left\n        is $$$0$$$ and the score of the other team is the number of stones in\n        the house.\n      </li>\n    </ul>\n  </li>\n  <br />\n  <li>\n    Case 2: $$$\\mathbf{N}\\gt 0$$$ and $$$\\mathbf{M} \\gt 0$$$, i.e. each team has at least one\n    stone on the curling sheet.\n    <ul>\n      <li>\n        Let $$$m_{red}$$$ be the least squared distance of a stone of the red\n        team, and $$$m_{yellow}$$$ be the least squared distance of a stone of\n        the yellow team. \\begin{aligned} m_{red} &=\\min _{1 \\leq i \\leq\n        \\mathbf{N}}\\left(\\mathbf{X}_{\\mathbf{i}}^2+\\mathbf{Y}_{\\mathbf{i}}^2\\right)\n        \\\\ m_{yellow} &=\\min _{1 \\leq i \\leq\n        \\mathbf{M}}\\left(\\mathbf{Z}_{\\mathbf{i}}^2+\\mathbf{W}_{\\mathbf{i}}^2\\right)\n        \\end{aligned} Note: $$$m_{red} \\neq m_{yellow}$$$, as no two stones can\n        be equally close to the center $$$(0,0)$$$.\n        <p>The score of teams:</p>\n        <ul>\n          \\begin{align*} s_{red} = \\begin{cases} \\text {number of stones such\n          that } \\mathbf{X_i}^2 + \\mathbf{Y_i}^2 \\lt m_{yellow} \\text{ and }\n          \\mathbf{X_i}^2 + \\mathbf{Y_i}^2 \\le (\\mathbf{R_h} + \\mathbf{R_s})^2, &\n          m_{red} < m_{yellow} \\\\ 0, & m_{red} > m_{yellow} \\\\ \\end{cases}\n          \\end{align*}\n        </ul>\n\n        <ul>\n          \\begin{align*} s_{yellow} = \\begin{cases} \\text {number of stones such\n          that } \\mathbf{Z_i}^2 + \\mathbf{W_i}^2 \\lt m_{red} \\text{ and }\n          \\mathbf{Z_i}^2 + \\mathbf{W_i}^2 \\le (\\mathbf{R_h} + \\mathbf{R_s})^2, &\n          m_{yellow} < m_{red} \\\\ 0, & m_{yellow} > m_{red} \\\\ \\end{cases}\n          \\end{align*}\n        </ul>\n      </li>\n    </ul>\n  </li>\n</ul>\n\n<p>\n  The overall time complexity of the above solution would be $$$O(\\mathbf{N} + \\mathbf{M})$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1-qDAjLyQMfi1VRdIS4G4blwm6d1HwVbWhE_pwlDicxunzGw5aaOR_itmG8vamPWkolg-XpGk6/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000c17c82","statement":"<h3>Problem</h3>\n<p>\n  2022 is a year of the Winter Olympics! Curling has been one of the most\n  popular winter sports as it requires skill, strategy, and sometimes a bit of\n  luck.\n</p>\n\n<p>\n  In a curling game, two teams compete by sliding heavy granite stones on a long\n  ice sheet. We call the teams the <i>red</i> team and the <i>yellow</i> team,\n  as their stones are usually distinguished by the red and the yellow handle\n  color. A curling game consists of several <i>ends</i> (subgames); in every\n  end, the teams, each owning $$$8$$$ stones, take turns to slide them across\n  the long ice sheet toward a circular target area called the <i>house</i>. A\n  stone may hit existing stones to change its own moving direction and other\n  stones' position (including knocking them out of play). Roughly speaking, the\n  goal for a team is to make their stones as close to the center of the house as\n  possible.\n</p>\n\n<p>\n  Geometrically, a house and a stone can be modeled as a circle and a disk (the\n  region bounded by a circle), respectively, and the scoring rules at the\n  conclusion of each end are formally summarized as follows.\n</p>\n\n<ul>\n  <li>\n    Each stone can be viewed as a disk of radius $$$\\mathbf{R_s}$$$ on a $$$2$$$-dimensional\n    plane.\n  </li>\n  <li>The house is a circle of radius $$$\\mathbf{R_h}$$$ centered at $$$(0, 0)$$$.</li>\n  <li>\n    Only stones <i>in the house</i> are considered in the scoring. A stone is in\n    the house if any portion of the stone lies on or within the circle\n    representing the house. Tangency also counts.\n  </li>\n  <li>\n    A team is awarded $$$1$$$ point for each of their own stones in the house\n    such that no opponent's stone is closer (in Euclidean distance) to the\n    center than it. We assume in this problem that no two stones are equally\n    close to the center $$$(0,0)$$$.\n  </li>\n</ul>\n\n<p>\n  Two teams are playing and have just delivered all their stones. The red team\n  has $$$\\mathbf{N}$$$ stones remaining on the curling sheet, centered at $$$(\\mathbf{X_1}, \\mathbf{Y_1}),\n  (\\mathbf{X_2}, \\mathbf{Y_2}), \\dots, (\\mathbf{X_N}, \\mathbf{Y_N})$$$, while the yellow team has $$$\\mathbf{M}$$$ stones\n  remaining, centered at $$$(\\mathbf{Z_1}, \\mathbf{W_1}), (\\mathbf{Z_2}, \\mathbf{W_2}), \\dots, (\\mathbf{Z_M},\n  \\mathbf{W_M})$$$. Now you are asked to figure out the scores of both teams.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow.\n</p>\n\n<p>\n  Each test case begins with a line containing the two space-separated integers\n  $$$\\mathbf{R_s}$$$ and $$$\\mathbf{R_h}$$$.\n</p>\n<p>\n  The next line contains the integer $$$\\mathbf{N}$$$. Then $$$\\mathbf{N}$$$ lines follow, the $$$i$$$-th\n  line of which containing the two space-separated integers $$$\\mathbf{X_i}$$$ and $$$\\mathbf{Y_i}$$$.\n</p>\n<p>\n  After that, similarly, the next line contains the integer $$$\\mathbf{M}$$$. In the next $$$\\mathbf{M}$$$\n  lines, the $$$i$$$-th line contains the two space-separated integers $$$\\mathbf{Z_i}$$$ and\n  $$$\\mathbf{W_i}$$$.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$y$$$ $$$z$$$</code>, where $$$x$$$ is the test case\n  number (starting from 1), $$$y$$$ is the score of the red team, and $$$z$$$ is\n  the score of the yellow team.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n  $$$1 \\le \\mathbf{R_s} \\lt \\mathbf{R_h} \\le 10^4$$$.<br />\n  $$$0 \\le \\mathbf{N} \\le 8$$$.<br />\n  $$$-2 \\times 10^4 \\le \\mathbf{X_i} \\le 2 \\times 10^4$$$, for\n  all $$$i$$$.<br />\n  $$$-2 \\times 10^4 \\le \\mathbf{Y_i} \\le 2 \\times 10^4$$$, for\n  all $$$i$$$.<br />\n  $$$-2 \\times 10^4 \\le \\mathbf{Z_i} \\le 2 \\times 10^4$$$, for\n  all $$$i$$$.<br />\n  $$$-2 \\times 10^4 \\le \\mathbf{W_i} \\le 2 \\times 10^4$$$, for\n  all $$$i$$$.<br />\n  The distances between the center of each stone and the center of the house\n  $$$(0, 0)$$$ are distinct, i.e., no two stones are equally close to the center\n  of the house.<br />\n  No two stones overlap (but two stones can be tangent).<br />\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n $$$\\mathbf{M} = 0$$$.<br /> </p>\n\n<h4>Test Set 2</h4>\n<p>\n $$$0 \\le \\mathbf{M} \\le 8$$$.<br /> </p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U06Rp1_IeEvyB9ziJHXVEQIGo_wQ9L-jK9-BOFNkbPG2e_1MGryBDOx8dt6RF3enrHdVCRwrwjPz_uuWEmdpM-L6zNcEbzG/curling_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n1 5\n4\n1 -1\n6 1\n0 6\n-5 0\n0\n10 100\n2\n-3 -4\n200 200\n0\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3puAnkCO6QqFovSFROHjV8N2UnZW3TtNon0a9hzx2vFtpKWySikmPVp0DPz3hMDiXUjakN28w4GpEVUcIE-SlTBiSBtLfvRg/curling_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3 0\nCase #2: 1 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    The following picture illustrates Sample Case #1. The big circle with a\n    light blue interior represents the house, and the red disks represent the\n    red team's stones.\n  </p>\n  <p>\n    <img\n      src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0z1qDeMDqdDjLXxMuDFIC6kXa8OFE0lr40phgm6Unof3Sw2nOXXDZBRQtmjSwe_u_5_wHE6FS-AVfy3k-N/sample_1.svg\"\n      style=\"max-width: 600px\"\n      alt=\"Illustration of Sample Case #1\"\n    />\n  </p>\n  <p>\n    In this case, the yellow team has no stones left in the house, so the red\n    team receives a point for each of their stone in the house. All the existing\n    stones are in the house except the one centered at $$$(6, 1)$$$ (it would\n    have touched the house boundary if it were centered at $$$(6, 0)$$$), so the\n    red team gets $$$3$$$ points.\n  </p>\n</sampleio>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3M9bsw_UNfAd_YkG5-PNSekXTDXTGDwnqbf3wBrPn6_uFUs4f8TI8txHZ8BGRvAbGDAGt6AJ-_TIf8Y-CFPZl-HRnAX-ph/curling_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">2\n1 5\n2\n1 0\n-3 0\n1\n0 2\n10 50\n2\n-40 -31\n-35 70\n3\n59 0\n-10 0\n30 40\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0jvAd8YBD5pd9-vX2nvIltAAmOqzhUn5ntyLkbWIyYA3aRSDk9DZ1N4AWXN_warFgPcCpf9Q9aQkALA6CuvtBQ6mLn8WH2GA/curling_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 1 0\nCase #2: 0 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    The following picture illustrates Sample Case #1. Besides the big circle and\n    the red disks, the yellow disk represents the yellow team's only remaining\n    stone.\n  </p>\n  <p>\n    <img\n      src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1E4i2uobxaFgs8RJsTbBnMQ1Ll1JV1Gm_r9ycwr-wzMDb-pD8MBGLVBXdMeLidaBos3vtUb80w0lvoMGbv/sample_2.svg\"\n      style=\"max-width: 600px\"\n      alt=\"Illustration of Additional Sample Case #1\"\n    />\n  </p>\n  <p>\n    In this case, both teams have stones inside the house. The red stone at\n    $$$(1, 0)$$$ is in the house and no yellow stone is closer than it to the\n    center of the house, so it is worthy of a point. Although the other red\n    stone (centered at $$$(-3, 0)$$$) is also in the house, it is not worthy of\n    a point because the yellow stone centered at $$$(0, 2)$$$ is closer than it\n    to the center $$$(0,0)$$$. The yellow stone is not worthy of a point,\n    either, due to the existence of the red stone at $$$(1, 0)$$$. Therefore,\n    the red team gets $$$1$$$ point and the yellow team gets $$$0$$$ points.\n  </p>\n</sampleio>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":1,"type__str":"VISIBLE","value":10}],"title":"Curling","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000008cb2e1","type":1,"type__str":"SPECTATOR"},"title":"Round G 2022","ui_appearance":0,"ui_appearance__str":"APPEARANCE_TYPE_DEFAULT"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
