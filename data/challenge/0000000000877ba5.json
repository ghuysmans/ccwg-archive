{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1649475000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000877ba5","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n<p>Round 1A started with <i>Double or One Thing</i> that surely required double the normal thinking to solve. Next, <i>Equal Sum</i> was a unique interactive problem that had contestants solving an NP-complete problem with a twist. Finally, <i>Weightlifting</i> gave contestants a good workout while they optimized the ordering of weights on an exercise machine.</p>\n\n<p><b>Benq</b> was the first one with a perfect score, and that gave them the top position in the final standings. <b>ecnerwala</b> and <b>Geothermal</b> rounded out the top 3 with only a few more minutes of penalty. More than 300 people managed a perfect score. Over 9000 people scored some points out of the more than 10000 that submitted a solution.</p>\n\n<p>When the hidden results were revealed, the contestant in 1500th place had 56 points, which is the unofficial cutoff for advancing. Come back once results are finalized to see the final look of the scoreboard.</p>\n\n<p>Congratulations to all advancers! If you did not advance, you have two more chances in Round 1B and Round 1C. <a href=\"https://codingcompetitions.withgoogle.com/codejam/schedule\">See the schedule</a> to find out when and mark your calendar!\n</p>\n<hr>\n<p>\n  <b>Cast</b>\n</p>\n<p>\n  Double or One Thing: Written by Pablo Heiber. Prepared by Shantam Agarwal.\n</p><p>\n  Equal Sum: Written by Pablo Heiber. Prepared by Artem Iglikov.\n</p><p>\n  Weightlifting: Written by Thomas Tellier. Prepared by Yang Xiao.\n</p><p>\nSolutions and other problem preparation and review by Abhilash Tayade, Aditya Mishra, Antonio Mendez, Apoorv Agarwal, Chakradhar Reddy, Chu-ling Ko, Darcy Best, Deepak Gour, Ikumi Hide, Liang Bai, Md Mahbubul Hasan, Mohamed Yosri Ahmed, Nafis Sadique, Nhi Le, Nikita Rungta, Pablo Heiber, Pi-Hsun Shih, Priyam Khandelwal, Sudarsan Srinivasan, Swapnil Gupta, Swapnil Mahajan, Timothy Buzzelli, Ulises Mendez Martinez, Vaibhav Tulsyan, Yang Xiao, Yeabkal Wubshit, and Yui Hosaka.\n</p><p>\nAnalysis authors:\n</p><ul>\n  <li>Double or One Thing: Chu-ling Ko.</li>\n  <li>Equal Sum: Pablo Heiber.</li>\n  <li>Weightlifting: Pablo Heiber.</li>\n</ul>","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1649466000000,"tasks":[{"analysis":"<p>\n  For any string $$$\\mathbf{S}$$$, the number of new strings we can obtain from it is at most $$$2^{|\\mathbf{S}|}$$$\n  because for each character in $$$\\mathbf{S}$$$, there are $$$2$$$ choices: to highlight it or not.\n</p>\n\n<h3>\n  Test Set 1\n</h3>\n\n<p>\n  Since the length of $$$\\mathbf{S}$$$ is at most $$$10$$$, the number of new strings we can obtain is at most\n  $$$2^{10}$$$. We can enumerate all of them to find the lexicographically smallest one. The time\n  complexity of this solution is $$$O(2^{|\\mathbf{S}|}\\times|\\mathbf{S}|)$$$ because there are $$$2^{|\\mathbf{S}|}$$$\n  strings in total to compare, and the length of them is at most $$$2\\times |\\mathbf{S}|$$$.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  Now that the length of $$$\\mathbf{S}$$$ can be up to $$$100$$$, $$$2^{100}$$$ is too large to enumerate all of them.\n</p>\n\n<p>\n  Note that a string $$$p$$$ appears before a different string $$$q$$$ in alphabetical order\n  if $$$p$$$ is a prefix of $$$q$$$ or if $$$p$$$ has a letter lexicographically smaller\n  at the leftmost position at which $$$p$$$ and $$$q$$$ differ.\n</p>\n\n<p>\n  Then, for any character $$$\\mathbf{S_i}$$$ in $$$\\mathbf{S}$$$, we have the following rule to decide whether to highlight it or not:\n</p>\n\n<ul>\n  <li>\n    If the next different character in $$$\\mathbf{S}$$$ is lexicographically larger than the current character\n    (in other words, there is an index\n    $$$j$$$ that $$$\\mathbf{S_j}\\gt \\mathbf{S_i}$$$ and $$$\\mathbf{S_k} = \\mathbf{S_i}$$$ for all $$$i \\lt k \\lt j$$$), then\n    we must highlight $$$\\mathbf{S_i}$$$. That is because when we double $$$\\mathbf{S_i}$$$, we also push $$$\\mathbf{S_j}$$$ right\n    and replace that index with $$$\\mathbf{S_i}$$$ at the same time. Therefore doubling $$$\\mathbf{S_i}$$$ will make the new\n    string lexicographically smaller.\n  </li>\n  <li>\n    If the next different character in $$$\\mathbf{S}$$$ is lexicographically smaller than the current character\n    (in other words, there is an index\n    $$$j$$$ that $$$\\mathbf{S_j}\\lt \\mathbf{S_i}$$$ and $$$\\mathbf{S_k} = \\mathbf{S_i}$$$ for all $$$i \\lt k \\lt j$$$), then\n    we must NOT highlight $$$\\mathbf{S_i}$$$. That is because when we double $$$\\mathbf{S_i}$$$, we also push $$$\\mathbf{S_j}$$$ right\n    and replace that index with $$$\\mathbf{S_i}$$$ at the same time. Therefore doubling $$$\\mathbf{S_i}$$$ will make the new\n    string lexicographically larger.\n  </li>\n  <li>\n    If there is no next characters different from $$$\\mathbf{S_i}$$$ (in other words, $$$i$$$ is the last index in $$$\\mathbf{S}$$$\n    or $$$\\mathbf{S_k} = \\mathbf{S_i}$$$ for all $$$i \\lt k \\lt |\\mathbf{S}|$$$), then we must NOT highlight $$$\\mathbf{S_i}$$$.\n    That is because doubling $$$\\mathbf{S_i}$$$ will make the original string be the prefix of the new string,\n    which means the new string is lexicographically larger.\n  </li>\n</ul>\n\n<p>\n  There are a lot of different ways to implement it and here is one: We can preprocess the given $$$\\mathbf{S}$$$\n  into groups of same and continuous characters. For example, <code>BOOKKEEPER</code> is\n  preprocessed as <code>[(B,1), (O,2), (K,2), (E,2), (P,1), (E,1), (R,1)]</code>. Then for each\n  element in this list, we output the character with twice its original occurrence if the character\n  of the next element is lexicographically larger than it. Otherwise, we output the character with\n  its original occurrence.\n</p>\n\n<p>\n  The time complexity of this solution is $$$O(|\\mathbf{S}|)$$$ because we need to iterate through $$$\\mathbf{S}$$$ when\n  preprocessing it, and iterate through the preprocessed list with length up to $$$|\\mathbf{S}|$$$ when\n  outputing the final answer.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1NKfQs7xozZVOJ1UKYABoVPN9LZg8i2rNR1wkvbG47rO-0f9xUZIjNKRUSVtxKKrZGoggOSFKA/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000aa8e9c","statement":"<h3>Problem</h3>\n<p>\nYou are given a string of uppercase English letters. You can highlight any number of the\nletters (possibly all or none of them). The highlighted letters do not need to be consecutive.\nThen, a new string is produced by processing the letters from left to right:\nnon-highlighted letters are appended once to the new string, while highlighted letters are\nappended twice.\n</p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3kGKNkzkc6vLeQpmCs9BRHdtPyPSLmB-M2MSGPvcGVPUhWSOa29LbqQQ92yI6Ih6eSr5zKxXamISZnWFqnF5JUjbVq9w4/double_or_one_thing.png\" alt=\"Double or One Thing example.\" style=\"max-width: 100%;\"/></p>\n<p>\nFor example, if the initial string is <code>HELLOWORLD</code>, you could highlight the\n<code>H</code>, the first and last <code>L</code>s and the last <code>O</code> to obtain<br/>\n<code><span style=\"background-color: #fee183;\">H</span>E<span style=\"background-color: #fee183;\">L</span>LOW<span style=\"background-color: #fee183;\">O</span>R<span style=\"background-color: #fee183;\">L</span>D</code>\n$$$\\Rightarrow$$$\n<code>HHELLLOWOORLLD</code>. Similarly, if you highlight nothing, you obtain\n<code>HELLOWORLD</code>, and if you highlight all of the letters, you obtain\n<code>HHEELLLLOOWWOORRLLDD</code>. Notice how each occurrence of the same letter can be highlighted\nindependently.\n</p><p>\nGiven a string, there are multiple strings that can be obtained as a result of this process,\ndepending on the highlighting choices. Among all of those strings, output the one that appears\nfirst in alphabetical (also known as lexicographical) order.\n</p><p>\nNote: A string $$$s$$$ appears before a different string $$$t$$$ in alphabetical order\nif $$$s$$$ is a prefix of $$$t$$$ or if at the first place $$$s$$$ and $$$t$$$ differ,\nthe letter in $$$s$$$ is earlier in the alphabet than the letter in $$$t$$$. For example,\nthese strings are in alphabetical order:\n<code>CODE</code>, <code>HELLO</code>, <code>HI</code>, <code>HIM</code>, <code>HOME</code>,\n<code>JAM</code>.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case is described in a single line containing a single string $$$\\mathbf{S}$$$.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the string that\ncomes first alphabetically from the set of strings that can be produced from $$$\\mathbf{S}$$$ by the\nprocess described above.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 2 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\nEach character of $$$\\mathbf{S}$$$ is an uppercase letter from the English alphabet.\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$1 \\le $$$ the length of $$$\\mathbf{S} \\le 10$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\n\n$$$1 \\le $$$ the length of $$$\\mathbf{S} \\le 100$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U14QO8Nppj5vrOgSVg5V_UVEmYH_lDG0gGzH3PpHvxVC6NNvBxdagIYrqBy2pWFje66wzrPmSvRJe4sFQZBtg9FdNTtMQj8I0z2c70778axUq4g/double_or_one_thing_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\nPEEL\nAAAAAAAAAA\nCODEJAMDAY\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2q81FqhG9q_BjigTNnFm3UNFsm8SVwoXmUGapLgTKjRSHr1mpSdNJb6NfnGcNreFBrgf8iLb7SobDtIhD1xfyNl9vjbGHkSEXsOGlLlDXlaiX7OA/double_or_one_thing_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: PEEEEL\nCase #2: AAAAAAAAAA\nCase #3: CCODDEEJAAMDAAY\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, these are all the strings that can be obtained, in alphabetical order:\n<code>PEEEEL</code>,\n<code>PEEEELL</code>,\n<code>PEEEL</code>,\n<code>PEEELL</code>,\n<code>PEEL</code>,\n<code>PEELL</code>,\n<code>PPEEEEL</code>,\n<code>PPEEEELL</code>,\n<code>PPEEEL</code>,\n<code>PPEEELL</code>,\n<code>PPEEL</code>, and\n<code>PPEELL</code>.\n</p><p>\n  In Sample Case #2, every string that can be obtained contains only <code>A</code>s. The\n  shortest of those is alphabetically first, because it is a prefix of all others.\n</p><p>\n  In Sample Case #3, there are $$$1024$$$ possible strings which can be generated from\n  <code>CODEJAMDAY</code> out of which <code>CCODDEEJAAMDAAY</code> is the lexicographically\n  smallest one.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":15}],"title":"Double or One Thing","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\nIn this problem we first pick half of the input, then the judge picks the other half, and then\nwe need to solve an\n<a href=\"https://en.wikipedia.org/wiki/Partition_problem\" target=\"_blank\">NP-complete problem</a> on that input.\nThis means we have to be really strategic on how we pick that input.\n</p><p>\nWe only get to provide half of the numbers. So, it might be best to first see how good of a\nsplit we can do with using just the judge provided numbers and only afterwards come up with the\nnumbers we provide.\n</p><p>\nA common heuristic to solve problems in which we do\nnot know all of the input yet is to optimize locally. In this case, sort out the numbers into two\nsets, trying for their sums to be as close as possible. That means, we go through the input integers\nand assign them to the set that has the smallest current sum. After we process all of the judge's\nintegers, this guarantees that the difference between the sets is bounded by the size of\na single integer ($$$10^9$$$), as opposed to being bounded by the total sum of the integers we\nhave seen ($$$10^{11}$$$).\n</p><p>\nWe need our integers to always be able to make up for that difference, so we need to guarantee at\nleast some of the integers we pick are big enough. Moreover, we need to be able to make up for the\ndifference exactly, so we want to pick integers that get progressively more precise. This smells\nlike binary. However, when writing in binary we get to sum over a subset of the powers of $$$2$$$.\nIn this case, the integers that do not end up in one subset go to the other one, so binary can just\nwrite any possible difference. That being said, powers of $$$2$$$ still work, as long as we do not\nwrite in binary.\n</p><p>\nAfter we finish sorting out the judge's input, we know that the difference between the two subsets\nis at most $$$10^9$$$. Therefore, if we decide where to put the largest power of $$$2$$$\n($$$2^{29}$$$) using the same algorithm, that guarantees that the difference is now at most\n$$$2^{29}$$$. As long as the next number is always at least half of the previous one, we can maintain\nthe difference bounded by the last processed number. If we process the powers of $$$2$$$ last,\nand in decreasing order, the difference between the two subsets at the end is no larger\nthan $$$2^0 = 1$$$. Since the limits guarantee that the total sum is even, the difference\nis $$$0$$$.\n</p><p>\nThe paragraph above shows that any set of integers up to $$$X$$$ with even sum that contains every\npower of $$$2$$$ no greater than $$$X$$$ can be partitioned into two subsets of equal sum. Moreover,\nthe partition can be found efficiently. There are $$$30$$$ powers of $$$2$$$ between $$$1$$$ and\n$$$10^9$$$, which means we can choose the other $$$70$$$ integers we are entitled in any way.\n</p>\n","id":"0000000000aa8fc1","statement":"<h3>Problem</h3>\n<p>\nYou are given a set of distinct integers. You need to separate them into two\nnon-empty subsets such that each element belongs to exactly one of them and the sum of all elements of\neach subset is the same.\n</p><p>\nAn anonymous tip told us that the problem above was unlikely to be solved in polynomial time (or\nsomething like that), so we decided to change it. Now <b>you</b> get to decide what half of the integers are!\n</p><p>\nThis is an interactive problem with three phases. In phase 1, you choose $$$\\mathbf{N}$$$ distinct integers.\nIn phase 2, you are given another $$$\\mathbf{N}$$$ integers that are distinct from each other and from\nthe ones you chose in phase 1. In phase 3, you have to partition those $$$2\\mathbf{N}$$$ integers\ninto two subsets, both of which sum to the same amount.\nAll $$$2\\mathbf{N}$$$ integers are to be between $$$1$$$ and $$$10^9$$$, inclusive, and it is guaranteed\nthat they sum up to an even number.\n</p>\n<h3>Input and output</h3>\n<p>\n  This is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of our\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq\" target=\"_blank\">FAQ</a>.\n</p>\n<p>\n  Initially, your program should read a single line containing an integer,\n  $$$\\mathbf{T}$$$, the number of test cases. Then, $$$\\mathbf{T}$$$ test cases must be processed.\n</p>\n<p>\n  For each test case, your program must first read a line containing a single integer $$$\\mathbf{N}$$$.\n  Then, it must output a line containing $$$\\mathbf{N}$$$ distinct integers $$$A_1, A_2, \\dots, A_\\mathbf{N}$$$.\n  Each of these integers must be between $$$1$$$ and $$$10^9$$$, inclusive.\n  After that, your program must read a line containing $$$\\mathbf{N}$$$ additional integers\n  $$$\\mathbf{B_1}, \\mathbf{B_2}, \\dots, \\mathbf{B_N}$$$. Finally, your program must\n  output a line containing between $$$1$$$ and $$$2\\mathbf{N}-1$$$ integers from among\n  $$$A_1, A_2, \\dots, A_\\mathbf{N}, \\mathbf{B_1}, \\mathbf{B_2}, \\dots, \\mathbf{B_N}$$$: the ones chosen to be\n  part of the first subset. The integers from $$$A$$$ and $$$\\mathbf{B}$$$ that you do not output are\n  considered to be part of the other subset.\n</p>\n<p>\n  The next test case starts immediately if there is one. If this was the last test case,\n  the judge will expect no more output and will send no further input to your program.\n  In addition, all $$$\\mathbf{T}$$$ test cases are always processed, regardless of whether the final\n  output from your program is correct or not.\n</p>\n<p>\n  <i>\n    Note: It can be shown that given the limits for this problem, there exists a sequence $$$A_1, A_2, \\dots, A_\\mathbf{N}$$$ such that any sequence\n  $$$\\mathbf{B_1}, \\mathbf{B_2}, \\dots, \\mathbf{B_N}$$$ results in a set of $$$2\\mathbf{N}$$$ integers\n  that can be separated into two subsets with equal sums.\n  </i>\n</p>\n<p>\n  If the judge receives an invalidly formatted or invalid line (like outputting an\n  unexpected number of integers, or integers out of range, or repeated integers in a line)\n  from your program at any moment, the judge\n  will print a single number $$$-1$$$ and will not print any further output.\n  If your program continues to wait for the judge after\n  receiving a $$$-1$$$, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 5 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$\\mathbf{N} = 100$$$.<br/>\n$$$1 \\le \\mathbf{B_i} \\le 10^9$$$, for all $$$i$$$.<br/>\n$$$\\mathbf{B_i} \\neq A_j$$$, for all $$$i, j$$$.<br/>\n$$$\\mathbf{B_i} \\neq \\mathbf{B_j}$$$, for all $$$i \\neq j$$$.<br/>\nFor each test case, the judge will choose the $$$\\mathbf{B_i}$$$s such that the sum of all $$$2\\mathbf{N}$$$ integers is even.\n</p>\n\n\n<h3>Testing Tool</h3>\n<p>\n  You can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use our <a href=\"https://storage.googleapis.com/coding-competitions.appspot.com/interactive_runner.py\">interactive runner</a>\n  for that. For more information, read the instructions in comments in that\n  file, and also check out the\n  <a href=\"/codejam/faq#interactive-problems\" target=\"_blank\">Interactive Problems section</a>\n  of the FAQ.\n</p><p>\n  Instructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it is <b>NOT</b>\n  the real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check the\n  <a href=\"/codejam/faq#coding\" target=\"_blank\">Coding section</a>\n  of the FAQ to make sure that you are using the same compiler as us.\n</p><p>\n<a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3RUaGUHG2NP5ySjoKqqOkC4VWwwiLaWvKyulswOxTumupodYJFca4AzL7ag12-EIrRbguh1Cf7xUOQ82QFdbE/local_testing_tool.py?dl=1\" download=\"testing_tool.py\">Download testing tool</a>\n</p>\n\n\n  <div class=\"sample-interaction-wrapper\">\n    <div class=\"sample-interaction-header\">\n      <div class=\"sample-interaction-header-text\">Sample Interaction</div>\n    </div>\n    <div class=\"sample-interaction-content\">\n      <div class=\"sample-interaction-judge-solution-labels\">\n        <div class=\"sample-interaction-judge-label\">Judge</div>\n        <div class=\"sample-interaction-solution-label\">Solution</div>\n      </div>\n      \n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Number of cases<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 1<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge gives $$$\\mathbf{N}=3$$$.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">5 1 3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution starts with $$$\\{1, 3, 5\\}$$$.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">10 4 9\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge adds to the set to get $$$\\{1, 3, 4, 5, 9, 10\\}$$$.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">1 10 5\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution says to use $$$\\{1, 5, 10\\}$$$ for one subset.<br>\nThis is correct because $$$1+5+10=16=3+4+9$$$.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 2<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge gives $$$\\mathbf{N}=3$$$.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">5 2 3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution starts with $$$\\{2, 3, 5\\}$$$.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">10 8 12\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge adds to the set to get $$$\\{2, 3, 5, 8, 10, 12\\}$$$.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">12 8\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution says to use $$$\\{8, 12\\}$$$ for one subset.<br>\nThis is correct because $$$8+12=20=2+3+5+10$$$.<br>\n</div>\n\n    </div>\n  </div>\n\n\n\nIn the sample interaction above, the solution gets all cases right and would receive a correct verdict.\nNotice that the value for $$$\\mathbf{N}$$$ does not conform to the limits for the Test Set and is used to\nsimplify the example only. Notice that the judge could have given the solution the integers\n$$$\\{2, 7, 100\\}$$$ for the first case, making it impossible for the solution to find a valid\npartition into subsets of equal sum.\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":31}],"title":"Equal Sum","trial_input_type":2,"trial_input_type__str":"JUDGE_CODE"},{"analysis":"<h3>Test Set 1</h3>\n<p>\nThe limits for Test Set 1 are small enough that we can afford to use brute force.\nSince there is no reason to have more than $$$\\max_j \\mathbf{X_{i,j}}$$$ weights of type $$$i$$$,\nthe number of possible states of the stack to consider is very limited\n(in fact, it is $$$\\sum_{0 \\le a,b,c \\le 3} \\frac{(a+b+c)!}{a!b!c!} = 5248$$$).\nTo solve for the minimum number of operations to finish all of the exercises, you can use a\n<a href=\"https://en.wikipedia.org/wiki/Breadth-first_search\" target=\"_blank\">breadth-first search</a>\nover all possible combinations of the stack states and the number of completed exercises.\nSpecifically, the breadth-first search starts at the state of an empty stack with no completeted\nexercises, and the final answer is the distance from that to the state where the stack is empty but\nall exercises are completed.\n</p>\n<h3>Test Set 2</h3>\n<p>\nThe first observation we can make to solve Test Set 2 of this problem is the following:\nif there are any weights that are used in every exercise, it is always optimal to put them at the\nbottom of the stack before the first exercise, and leave them there until after the last one.\nMoreover, if there are multiple such weights, putting them in any order is equivalent. Formally,\nif $$$C$$$ is the multiset of weights that is common to all exercises, there is an optimal solution\nthat has $$$C$$$ at the bottom of the stack during all exercises.\n</p><p>\nNow, for a given full sequence of exercises, let us call $$$A$$$ to the largest sequence of weights\nthat appears at the bottom of the stack for all exercises ($$$A$$$ could be empty). Since $$$A$$$ is\nused for all exercises, $$$A \\subseteq C$$$. If we use the first observation, then also\n$$$C \\subseteq A$$$, so $$$A = C$$$. Therefore, we can make a second observation: if there is more\nthan one exercise, there is at least one time in between exercises in which the stack contains exactly $$$C$$$.\nThis points towards a divide and conquer solution: find that intermediate point and then\nrecursively solve the problem of minimizing the operations before and after that point,\ndisregarding $$$C$$$.\n</p><p>\nAs it is common with divide and conquer approaches, we can either find the place to split without\nrecursion, or we can use <a href=\"https://en.wikipedia.org/wiki/Memoization\" target=\"_blank\">memoization</a> to be\nable to simply try every possible split point, without incurring significant additional\ncomputation time.\n</p><p>\nTo formalize the approach, let $$$C(\\ell,r)$$$ be the multiset of weights that is the\nintersection of the multiset of weights needed for each exercise between $$$\\ell$$$ and $$$r$$$,\ninclusive. Additionally, let $$$M(\\ell, r)$$$ be the minimum number of operations to get from a\nstack containing $$$C(\\ell,r)$$$, in any order, perform all operations between $$$\\ell$$$ and\n$$$r$$$, inclusive, and leave the stack with $$$C(\\ell, r)$$$ on it, in the same order. To calculate\n$$$M(\\ell, r)$$$ we follow the strategy above: for some mid-point $$$x$$$ we do this twice:\nload the additional weights for one part of the split, optimize according to a recursive result,\nthen unload those additional weights. The additional weights for the left part of the split\nare $$$C(\\ell, x) \\setminus C(\\ell, r)$$$ and for the right part of the split\nare $$$C(x+1, r) \\setminus C(\\ell, r)$$$ (notice that $$$C(\\ell, r)$$$ is included in the other\ntwo multisets by definition). Therefore, the cost in addition to the recursion for the mid-point\n$$$x$$$ is $$$2 \\times (|C(\\ell, x)| + |C(x+1, r)| - 2 \\times |C(\\ell, r)|)$$$.\nPutting it all together:\n<ul>\n<li>$$$M(\\ell, r) = 0$$$, if $$$\\ell = r$$$;</li>\n<li>$$$M(\\ell, r) = \\min_{\\ell \\le x \\lt r} \\bigl(M(\\ell, x) + M(x+1, r) +\n  2 \\times (|C(\\ell, x)| + |C(x+1, r)| - 2 \\times |C(\\ell, r)|)\\bigr)$$$, otherwise.</li>\n</ul>\n</p><p>\nPrecomputing the $$$O(\\mathbf{E}^2)$$$ values of $$$C$$$ takes $$$O(\\mathbf{E}^2 \\times \\mathbf{W})$$$ time.\nWith memoization, we can compute the $$$O(\\mathbf{E}^2)$$$ values $$$M$$$ in $$$O(\\mathbf{E}^3)$$$ overall time.\nThis is fast enough to pass Test Set 2.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2sZxeSF7n7opngfX_F17h-kJ118K17ta0QhBN2CaQyAGiLmL7u_tREki6APiehib68WknTtUVM/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000aa9280","statement":"<h3>Problem</h3>\n<p>\nYou are following a prescribed training for weightlifting. The training consists of a series of\nexercises that you must do in order.  Each exercise requires a specific set of weights to be placed\non a machine.\n</p><p>\nThere are $$$\\mathbf{W}$$$ types of different weights. For example, an exercise may require\n$$$3$$$ weights of type A and $$$1$$$ weight of type B, while the next requires $$$2$$$\nweights each of types A, C, and D.\n</p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3l53qUe3dt1GROzOHdlHyATFjYTWthDHw9ABAfcQX6wZyrGVlyTUesI2PqWxcPcZqdcqEFjVtbP23rOoP1_WU/weightlifting.png\" alt=\"Weightlifting example.\"/></p>\n<p>\nThe weights are placed on the machine as a stack.\nFormally, with a single operation, you can either add a new weight of any type to the top of the\nstack, or remove the weight that is currently at the top of the stack.\n</p><p>\nYou can load the weights for each exercise onto the machine's stack in any order.\nSo, if you place the weight of type B at\nthe bottom in the first exercise of the example above, you will have to take all the weights off\nbefore putting on the weights for the second exercise. On the other hand, if you place the weight\nof type B third from the bottom, you can leave two of the weights of type A on the bottom of the\nstack to be part of the next exercise's set, saving you some time.\n</p><p>\nGiven the amount of weights of each type needed for each exercise, find the minimum\nnumber of operations needed to do them all. You must complete the exercises in the order given.\nThe machine stack starts out empty, and you must leave it empty after you finish with all your\nexercises.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case starts with a line containing $$$2$$$ integers $$$\\mathbf{E}$$$ and $$$\\mathbf{W}$$$: the number of exercises\nand the number of types of weights. Weight types are numbered between $$$1$$$ and $$$\\mathbf{W}$$$.\nThen, $$$\\mathbf{E}$$$ lines follow. The $$$i$$$-th of these lines\ncontains $$$\\mathbf{W}$$$ integers $$$\\mathbf{X_{i,1}}, \\mathbf{X_{i,2}}, \\dots, \\mathbf{X_{i,W}}$$$ representing that the\n$$$i$$$-th exercise requires exactly $$$\\mathbf{X_{i,j}}$$$ weights of type $$$j$$$.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the minimum number of\nmachine stack operations needed to run through all your exercises.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{X_{i,1}} + \\mathbf{X_{i,2}} + \\dots + \\mathbf{X_{i,W}}$$$, for all $$$i$$$. (Each exercise requires at least one weight.)<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{E} \\le 10$$$.<br/>\n$$$1 \\le \\mathbf{W} \\le 3$$$.<br/>\n$$$0 \\le \\mathbf{X_{i,j}} \\le 3$$$, for all $$$i, j$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{E} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{W} \\le 100$$$.<br/>\n$$$0 \\le \\mathbf{X_{i,j}} \\le 100$$$, for all $$$i, j$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U07CgannbxYOSzic412PUCuPQedZm4r_o8PYSHTvCIwAHL17g4j03sTLKRSpBC7h3gG8F-tsTFrvWRREAB_T3o9juUOD5BiKLrtBd4h/weightlifting_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3 1\n1\n2\n1\n2 3\n1 2 1\n2 1 2\n3 3\n3 1 1\n3 3 3\n2 3 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2MM1E4BSFn_1EBkJKFY7Dh7OgH80NLSELHDLXOUjWSPYD3hAxiW2qdRjfwKdd9r_NtnkfjTt2tdLcJLD2OU1s0W2ToS6rBXiHNxxckTA/weightlifting_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4\nCase #2: 12\nCase #3: 20\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn Sample Case #1, there is only one type of weight.\nThe first exercise needs $$$1$$$ weight, the second needs $$$2$$$ weights,\nand the third needs $$$1$$$ weight.\nYou can complete the exercise in $$$4$$$ operations as follows:\n<ol>\n  <li>Add a weight onto the stack. You do the first exercise.</li>\n  <li>Add a weight onto the stack. You do the second exercise.</li>\n  <li>Remove a weight from the top of the stack. You do the third exercise.</li>\n  <li>Remove a weight from the top of the stack. Now the stack becomes empty.</li>\n</ol>\n</p><p>\nIn Sample Case #2, one way to complete the exercises in $$$12$$$ operations is as follows:\n<ol>\n  <li>Add a weight of type $$$2$$$.</li>\n  <li>Add a weight of type $$$3$$$.</li>\n  <li>Add a weight of type $$$1$$$.</li>\n  <li>Add a weight of type $$$2$$$. Now the stack contains weights of types $$$2, 3, 1, 2$$$ from bottom to top. You do the first exercise.</li>\n  <li>Remove a weight of type $$$2$$$ from the top of the stack.</li>\n  <li>Add a weight of type $$$3$$$.</li>\n  <li>Add a weight of type $$$1$$$. Now the stack contains weights of types $$$2, 3, 1, 3, 1$$$ from bottom to top. You do the second exercise.</li>\n  <li>Remove a weight of type $$$1$$$ from the top of the stack.</li>\n  <li>Remove a weight of type $$$3$$$ from the top of the stack.</li>\n  <li>Remove a weight of type $$$1$$$ from the top of the stack.</li>\n  <li>Remove a weight of type $$$3$$$ from the top of the stack.</li>\n  <li>Remove a weight of type $$$2$$$ from the top of the stack. Now the stack becomes empty.</li>\n</ol>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":13},{"type":2,"type__str":"HIDDEN","value":31}],"title":"Weightlifting","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000877ba5","type":1,"type__str":"SPECTATOR"},"title":"Round 1A 2022","ui_appearance":0,"ui_appearance__str":"APPEARANCE_TYPE_DEFAULT"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
