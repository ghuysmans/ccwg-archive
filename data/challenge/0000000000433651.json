{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1433003400000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000433651","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\nThe problems were much tougher this round; only 10 people got a perfect score!  But 500 contestants advance to round 3, so solving problem A and just the small inputs to problems B and C with a fast enough time was sufficient.\n</p>\n<p>\n<i>Pegman</i> was an easy warmup problem. Over 2000 people solved it!\n<i>Kiddie Pool</i> was a simple optimization problem that could be solved with some thinking about the structure of the optimal solution.\n<i>Bilingual</i> was another optimization problem, which could be transformed in a non-obvious way such that it can be solved with a network flow algorithm.\n<i>Drum Decorator</i> was a difficult dynamic programming problem, which required careful handling of several cases.\n</p>\n<p>\n\n</p>\n<p>\nCongratulations to everyone who has now advanced to Round 3!\n</p>\n<hr>\n<p>\nCast\n</p>\n<p>\nProblem A. <i>Pegman</i> written and prepared by Ian Tullis.\n</p>\n<p>\nProblem B. <i>Kiddie Pool</i> written by Bartholomew Furrow.  Prepared by Carlos Gu√≠a Vera and Ian Tullis.\n</p>\n<p>\nProblem C. <i>Bilingual</i> written by Bartholomew Furrow.  Prepared by John Dethridge, Dustin Tseng, and Ian Tullis.\n</p>\n<p>\nProblem D. <i>Drum Decorator</i> written by Ian Tullis.  Prepared by John Dethridge.\n</p>\n<p>\nSolutions and other problem preparation by\n\nAhmed Aly,\nBrian Hirashiki,\nDavid Spies,\nIan Tullis,\nIgor Naverniouk,\nJackson Gatenby,\nJohn Dethridge,\nJonathan Wills,\nMd. Arifuzzaman Arif,\nNikolay Kurtov,\nPetr Mitrichev,\nSteve Thomas,\nand Yiming Li.\n</p>","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1432994400000,"tasks":[{"analysis":"<p>\nConstruct a graph with a node for each sentence and word.  For each sentence S, add edges in the graph between the node for S and each of the nodes for the words in S.\n\n</p>\n<p>\nNow consider a path in the graph from sentence 0 to sentence 1. The nodes on the path will alternate between sentences and words. Since the language of the sentences in the path must at some point change from English to French, one of the words along the path must belong to both languages. We need to find a minimal set of words such that every path from sentence 0 to sentence 1 in the graph goes through one of the words in the set. This is equivalent to finding a minimal vertex cut in the graph, where the cut vertices can only include the nodes for words.\n</p>\n<p>\nWe can solve this by transforming the problem into an edge cut problem in a directed graph.  For each word w, create two nodes A<sub>w</sub> and B<sub>w</sub>.  Add a directed edge from A<sub>w</sub> to B<sub>w</sub> with capacity 1, and for each sentence S which contains w, add directed edges from S to A<sub>w</sub> and from B<sub>w</sub> to S, both with infinite capacity.  \n</p>\n<p>\nNow we find the size of the minimum cut using a maximum flow algorithm, and the <a href=\"https://www.google.com/search?q=max+flow+min+cut+theorem\" target=\"_blank\">max-flow min-cut theorem</a>.\nEach edge in the cut will cut the edge from A<sub>w</sub> to B<sub>w</sub> for some word w, since those are the only finite-capacity edges.  These words form a minimal set of bilingual words which solves the problem.\n</p>\n","id":"0000000000433517","statement":"<h3>Problem</h3>\n<p>\nElliot's parents speak French and English to him at home. He has heard a lot of words, but it isn't always clear to him which word comes from which language! Elliot knows one sentence that he's sure is English and one sentence that he's sure is French, and some other sentences that could be either English or French. If a word appears in an English sentence, it must be a word in English. If a word appears in a French sentence, it must be a word in French.\n</p>\n<p>\nConsidering all the sentences that Elliot has heard, what is the minimum possible number of words that he's heard that must be words in both English and French?\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>.  <b>T</b> test cases follow.  Each starts with a single line containing an integer <b>N</b>. <b>N</b> lines follow, each of which contains a series of space-separated \"words\". Each \"word\" is made up only of lowercase characters a-z. The first of those <b>N</b> lines is a \"sentence\" in English, and the second is a \"sentence\" in French. The rest could be \"sentences\" in either English or French. (Note that the \"words\" and \"sentences\" are not guaranteed to be valid in any real language.) \n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the test case number (starting from 1) and y is the minimum number of words that Elliot has heard that must be words in both English and French.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n1 &le; <b>T</b> &le; 25.<br/>\nEach word will contain no more than 10 characters.<br/>\nThe two \"known\" sentences will contain no more than 1000 words each.<br/>\nThe \"unknown\" sentences will contain no more than 10 words each.<br/>\n</p>\n\n<h4>Small dataset</h4>\n<p>\nTime limit: 240 seconds.<br/>\n2 &le; <b>N</b> &le; 20.<br/>\n</p>\n\n<h4>Large dataset</h4>\n<p>\nTime limit: 480 seconds.<br/>\n2 &le; <b>N</b> &le; 200.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper\">\n  <table>\n  <tr>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Input</span>\n  <br/>&nbsp;\n  </td>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Output</span>\n  <br/>&nbsp;\n  </td>\n  </tr>\n  <tr>\n  <td>\n  <pre class=\"io-content\">4\n2\nhe loves to eat baguettes\nil aime manger des baguettes\n4\na b c d e\nf g h i j\na b c i j\nf g h d e\n4\nhe drove into a cul de sac\nelle a conduit sa voiture\nil a conduit dans un cul de sac\nil mange pendant que il conduit sa voiture\n6\nadieu joie de vivre je ne regrette rien\nadieu joie de vivre je ne regrette rien\na b c d e\nf g h i j\na b c i j\nf g h d e\n\n  </pre>\n  </td>\n  <td>\n  <pre class=\"io-content\">Case #1: 1\nCase #2: 4\nCase #3: 3\nCase #4: 8\n\n  </pre>\n  </td></tr></table>\n  </div>\n  \n\nIn Case #1, Elliot knows for sure that the first sentence is in English and the second is in French, so there is no ambiguity; the only word that must be in both English and French is \"baguettes\".<br>\n<br>\nIn Case #2, the last two sentences could either be: English English, English French, French English, or French French. The second of those possibilities is the one that minimizes the number of words common to both languages; that set turns out to be d, e, i, and j.\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":6},{"type":2,"type__str":"HIDDEN","value":24}],"title":"Bilingual","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"If Pegman walks off the map, there must have been some arrow that points towards an edge of the grid, with no other arrows in between.  So we must take every such arrow and point it towards another arrow.  We simply count how many of these arrows there are, and if any of them can't be pointed towards another arrow &mdash; which is when there are no other arrows in the same row or column &mdash; then the answer is <code>IMPOSSIBLE</code>.\n","id":"0000000000433552","statement":"<h3>Problem</h3>\n<p>\nWhile using Google Street View, you may have picked up and dropped the character Pegman before. Today, a mischievous user is going to place Pegman in some cell of a rectangular grid of unit cells with <b>R</b> rows and <b>C</b> columns. Each  of the cells in this grid might be blank, or it might be labeled with an arrow pointing in one of four possible directions: up, right, down, or left.<br>\n<br>\nWhen Pegman is placed on a grid cell, if that cell is blank, Pegman stands still forever. However, if that cell has an arrow, Pegman starts to walk in that direction. As he walks, whenever he encounters a blank cell, he just keeps walking in his current direction, but whenever he encounters another arrow, he changes to the direction of that arrow and then keeps walking.<br>\n<br>\nYou know that it is possible that Pegman might keep happily walking around and around the grid forever, but it is also possible that Pegman's walk will take him over the edge of the grid! You may be able to prevent this and save him by changing the direction of one or more arrows. (Each arrow's direction can only be changed to one of the other three possible directions; arrows can only be changed, not added or removed.)<br>\n<br>\nWhat is the smallest number of arrows you will need to change to ensure that Pegman will not walk off the edge, no matter where on the grid he is initially placed?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each begins with one line with two space-separated integers <b>R</b>, <b>C</b>. This line is followed by <b>R</b> lines, each of which has <b>C</b> characters, each of which describes a grid cell and is one of the following:<br>\n<br>\n<code>\n. period = no arrow<br>\n^ caret = up arrow<br>\n&gt; greater than = right arrow<br>\nv lowercase v = down arrow<br>\n&lt; less than = left arrow<br>\n</code>\n<br>\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the test case number (starting from 1) and y is the minimum number of arrows that must be changed to ensure that Pegman will not leave the grid no matter where he is initially placed, or the text <code>IMPOSSIBLE</code> if it is not possible to ensure this, no matter how many arrows you change.  \n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n1 &le; <b>T</b> &le; 100.<br/>\n</p>\n\n<h4>Small dataset</h4>\n<p>\nTime limit: 240 seconds.<br/>\n1 &le; <b>R, C</b> &le; 4.<br/>\n</p>\n\n<h4>Large dataset</h4>\n<p>\nTime limit: 480 seconds.<br/>\n1 &le; <b>R, C</b> &le; 100.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper\">\n  <table>\n  <tr>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Input</span>\n  <br/>&nbsp;\n  </td>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Output</span>\n  <br/>&nbsp;\n  </td>\n  </tr>\n  <tr>\n  <td>\n  <pre class=\"io-content\">4\n2 1\n^\n^\n2 2\n&gt;v\n^&lt;\n3 3\n...\n.^.\n...\n1 1\n.\n\n  </pre>\n  </td>\n  <td>\n  <pre class=\"io-content\">Case #1: 1\nCase #2: 0\nCase #3: IMPOSSIBLE\nCase #4: 0\n  </pre>\n  </td></tr></table>\n  </div>\n  \n\nIn Case #1, Pegman is guaranteed to walk off the top edge of the grid, no matter where he is placed. You can prevent that by changing the topmost arrow to point down, which will cause him to walk back and forth between those two arrows forever.<br>\n<br>\nIn Case #2, no matter where Pegman is placed, he will walk around and around the board clockwise in a circle. No arrows need to be changed.<br>\n<br>\nIn Case #3, the mischievous user might place Pegman on the up arrow in the middle of the grid, in which case he will start walking and then walk off the top edge of the grid. Changing the direction of this arrow won't help: it would just make him walk off a different edge.<br>\n<br>\nIn Case #4, the only possible starting cell is blank, so Pegman will stand still forever and is in no danger.\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":5},{"type":2,"type__str":"HIDDEN","value":10}],"title":"Pegman","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<br>\nSome important initial insights are:<br>\n<ul>\n<li>A cell can only take three values: 1, 2, or 3. 4s would have to keep propagating until they hit an edge cell, and edge cells only border three other cells.\n<li>If a 3 appears, it must be in a band of 2 complete rows. To see this, place a 3 along the border of the top of the drum, and note that the 3 adjacent cells must all contain 3s. This must continue all the way around the top, which also fills up the row below. Suppose that some other finite arrangement of 3s was valid &mdash; then there must be a highest 3 in the pattern, above which no other 3 can be placed, but then that 3 can only be part of a set of 2 rows of 3s, by the same argument above.\n<li>If a 2 appears, it must be either in a 2x2 square of 2s, or in a (possibly winding) line of 2s that goes all the way around the drum and reconnects with itself.\n<li>1s can only appear in adjacent \"dominoes\" of two.\n</ul>\n</p>\n<p>\nBesides the bands of 3s, there are four patterns using 1s and 2s:\n</p>\n<p>\nI. one-thick bands of 2s:<br>\n<br>\n2...<br>\n</p>\n<p>\nII. alternating upright dominoes of 1s and 2x2 squares of 2s:<br>\n<br>\n122...<br>\n122...<br>\n</p>\n<p>\nIII. a line of 2s winding around horizontal dominoes of 1s:<br>\n<br>\n222112...<br>\n112222...<br>\n</p>\n<p>\nIV. a line of 2s winding around vertical dominoes of 1s:<br>\n<br>\n2212...<br>\n1212...<br>\n1222...<br>\n</p>\n<p>\nNone of these patterns can border each other, but they can be separated by bands of 3s. The number of columns in a drum can rule out some patterns -- II, III, and IV require multiples of 3, 6, and 4, respectively.<br>\n</p>\n<p>\nNow we can use dynamic programming to assign patterns to the drum.  Our state is how many rows we have filled, and whether the previous pattern was a pair of rows of 3s.\n</p>\n<p>\nEach of the five patterns repeat with some period P, which is either 1, 3, 4 or 6, so there are P ways to place that pattern on the drum.\n</p>\n<p>\nEach overall drum assignment also has a period, which is the least common multiplier of the periods of all of the patterns on it.\n</p>\n<p>\nAn extra complication is that drum assignments that are rotations of each other should only be counted once.  So our dynamic programming state should also include the period of the current drum assignment.  When counting the final number of solutions, we divide the number of solutions in each state by the state's period.  For example, if we have 18 ways to produce a solution of period 3, this only corresponds to 6 solutions.\n</p>\n<p>\nAnother way to handle equivalent patterns is to use <a href=\"https://www.google.com/search?q=burnside%27s+lemma\" target=\"_blank\">Burnside's lemma</a>.  We leave the details as an exercise to the reader!\n</p>\n\n\n\n\n","id":"000000000043373a","statement":"<h3>Problem</h3>\n<p>\nYou are the drummer in the rock band Denise and the Integers. Your drum is a cylinder around which you've wrapped a rectangular grid of cells.<br>\n<br>\nYour band is scheduled to perform in Mathland. The Mathlanders are a tough audience, and they will expect every cell of your drum to contain a positive integer; zeroes and negative integers are not allowed. Moreover, each integer K must border (share an edge, and not just a point, with) exactly K other cells with the same integer -- that is, a cell with a 1 must touch exactly one other cell with a 1, a cell with a 2 must touch exactly 2 other cells with a 2, and so on. Apart from this restriction, it does not matter what other cells a cell touches. (The circular top and bottom of the drum do not count as cells and do not need to be decorated. Note that this means that the cells along the top and bottom of the drum only touch three other cells each, whereas all the other cells touch four other cells each.)<br>\n<br>\nFor example, this is a valid decoration of a cylinder formed by a grid with 3 rows and 5 columns:<br>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0KNnUZZpagaAmUOgZ9X6cRXoAjTzji-142eRQcNdCIb4KxoAeln0inA4evt_8QORIfhUQCbkbRJuw/sampledrum1.png\"><br>\n(Imagine that the unseen two columns on the back of the drum are the same as the three visible columns.)<br>\n<br>\nYou want to know how many different valid decorations are possible. Two decorations are different if one cannot be rotated (around the cylinder's axis of symmetry) to produce the other. The top and bottom of a drum are considered different, so this decoration of a 3x5 grid is different from the one above:<br>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3FUBDI4DO6tkJffX0GU1Kk1CFqT9zk6FJclZ5va7uTSKyFpSVyUHGPZ1FhdSNu0xmBgz1WHAuPlGE/sampledrum2.png\"><br>\n(Again, imagine that the unseen two columns on the back of the drum are the same as the three visible columns.)<br>\n<br>\nYour drum has <b>R</b> rows and <b>C</b> columns. How many different valid decorations are possible? The number may be large, so return the number of decorations modulo 10<sup>9</sup> + 7 (1000000007).<br>\n<br>\n</p>\n\n<h3>Input</h3>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> lines follow; each contains two space-separated integers, <b>R</b> and <b>C</b>, which are the number of rows and columns in the drum. \n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the test case number (starting from 1) and y is the number of valid decorations modulo 10<sup>9</sup> + 7, as described above.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n<h4>Small dataset</h4>\n<p>\nTime limit: 240 seconds.<br/>\n1 &le; <b>T</b> &le; 20.<br>\n2 &le; <b>R</b> &le; 6.<br>\n3 &le; <b>C</b> &le; 6.<br>\n</p>\n\n<h4>Large dataset</h4>\n<p>\nTime limit: 480 seconds.<br/>\n1 &le; <b>T</b> &le; 100.<br>\n2 &le; <b>R</b> &le; 100.<br>\n3 &le; <b>C</b> &le; 100.<br>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper\">\n  <table>\n  <tr>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Input</span>\n  <br/>&nbsp;\n  </td>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Output</span>\n  <br/>&nbsp;\n  </td>\n  </tr>\n  <tr>\n  <td>\n  <pre class=\"io-content\">2\n2 4\n3 5\n\n  </pre>\n  </td>\n  <td>\n  <pre class=\"io-content\">Case #1: 1\nCase #2: 2\n\n  </pre>\n  </td></tr></table>\n  </div>\n  \n\nIn Case #1, the only solution is to fill all cells with 3s.<br>\n<br>\nIn Case #2, the only two solutions are the two depicted in the problem statement.","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":11},{"type":2,"type__str":"HIDDEN","value":19}],"title":"Drum Decorator","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\nWhile the pool is being filled, each source of water is turned on for some fraction of the time.  This is equivalent to having each source turned on for the whole time at a fixed rate which is between zero and <b>R</b><sub>i</sub>.  So the problem is to find what rate each source should be set to in order to maximize the total flow and get the correct temperature.  Then the fill time is the capacity of the pool divided by the total flow rate.\n</p>\n<p>\nFind the temperature of the water we get when setting each source's rate to the maximum.  If the temperature is exactly the desired temperature, then we have the solution.\n</p>\n<p>\nIf the temperature is too hot, then we need to lower the temperature by lowering the flow rate of some of the sources.  To lower the total flow by as little as possible, we decrease flow starting with the hottest source, moving to the cooler sources if necessary, until the average temperature of the flowing water equals the desired temperature.  If we never reach the desired temperature, then no solution was possible.\n</p>\n<p>\nIf the temperature is too low when all the sources are set to their maximum rate, then the solution is similar &mdash; we raise the temperature by reducing the flow rate of sources, starting from the coldest source.\n</p>\n","id":"0000000000433a10","statement":"<h3>Problem</h3>\n<p>\nA kiddie pool is a big container in which you can put water, so that small children can play in it.\n</p>\n<p>\nYou have access to <b>N</b> different sources of water. The i<sup>th</sup> source of water produces water at rate <b>R</b><sub>i</sub> and at temperature <b>C</b><sub>i</sub>. Initially, all of the water sources are off. Each source of water can be switched on only once, and switched off only once; the act of switching a source on or off takes no additional time. Multiple sources can be on at the same time.\n</p>\n<p>\nYour pool can hold an infinite amount of water, but you want to fill the pool to a volume of exactly <b>V</b> with a temperature of exactly <b>X</b>, as quickly as possible. If you turn sources on and off optimally (not every source necessarily has to be used), what's the minimum number of seconds it will take you to do this?\n</p>\n<p>\nFor the purposes of this problem, combining water that has volume <b>V</b><sub>0</sub> and temperature <b>X</b><sub>0</sub> with water that has volume <b>V</b><sub>1</sub> and temperature <b>X</b><sub>1</sub> will <b>instantaneously</b> create water with volume <b>V</b><sub>0</sub>+<b>V</b><sub>1</sub> and temperature (<b>V</b><sub>0</sub><b>X</b><sub>0</sub>&nbsp;+&nbsp;<b>V</b><sub>1</sub><b>X</b><sub>1</sub>)&nbsp;/&nbsp;(<b>V</b><sub>0</sub>&nbsp;+&nbsp;<b>V</b><sub>1</sub>). For example, combining 5L of water at 10 degrees with 10L of water at 40 degrees will result in 15L of water at 30 degrees. You should also assume that water does not heat or cool over time except as a result of being combined with other water.\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>.  <b>T</b> test cases follow. The first line of each test case contains three space-separated numbers: an integer <b>N</b>, and real numbers <b>V</b> and <b>X</b> as described above.\n</p>\n<p>\nThe next <b>N</b> lines each contain two space-separated real numbers, <b>R</b><sub>i</sub> and <b>C</b><sub>i</sub>, the rate of flow and temperature of the i<sup>th</sup> water source respectively. The volume is expressed in liters, rates of flow are expressed in liters per second, and temperatures are expressed in degrees Celsius.\n</p>\n<p>\nAll real numbers will be exactly specified to four decimal places.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the test case number (starting from 1) and y is the minimum number of seconds it takes to fill the kiddie pool to the right volume and temperature. If it is impossible to do so given the inputs, y should be the string <code>IMPOSSIBLE</code>.\n</p>\n<p>\ny will be considered correct if it is within an absolute or relative error of 10<sup>-6</sup> of the correct answer.  See the <a href=\"/codejam/faq.html#floating_point\" target=\"_blank\">FAQ</a> for an explanation of what that means, and what formats of real numbers we accept. You can also read there about the format of our input real numbers, in which the decimal point will be represented by the <code>.</code> character.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n1 &le; <b>T</b> &le; 100.<br/>\n0.1 &le; <b>X</b> &le; 99.9.<br/>\n0.1 &le; <b>C</b><sub>i</sub> &le; 99.9.<br/>\n</p>\n\n<h4>Small dataset</h4>\n<p>\nTime limit: 240 seconds.<br/>\n1 &le; <b>N</b> &le; 2.<br/>\n0.0001 &le; <b>V</b> &le; 100.0.<br/>\n0.0001 &le; <b>R</b><sub>i</sub> &le; 100.0.<br/>\n</p>\n\n<h4>Large dataset</h4>\n<p>\nTime limit: 480 seconds.<br/>\n1 &le; <b>N</b> &le; 100.<br/>\n0.0001 &le; <b>V</b> &le; 10000.0.<br/>\n0.0001 &le; <b>R</b><sub>i</sub> &le; 10000.0.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper\">\n  <table>\n  <tr>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Input</span>\n  <br/>&nbsp;\n  </td>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Output</span>\n  <br/>&nbsp;\n  </td>\n  </tr>\n  <tr>\n  <td>\n  <pre class=\"io-content\">6\n1 10.0000 50.0000\n0.2000 50.0000\n2 30.0000 65.4321\n0.0001 50.0000\n100.0000 99.9000\n2 5.0000 99.9000\n30.0000 99.8999\n20.0000 99.7000\n2 0.0001 77.2831\n0.0001 97.3911\n0.0001 57.1751\n2 100.0000 75.6127\n70.0263 75.6127\n27.0364 27.7990\n4 5000.0000 75.0000\n10.0000 30.0000\n20.0000 50.0000\n300.0000 95.0000\n40.0000 2.0000\n\n  </pre>\n  </td>\n  <td>\n  <pre class=\"io-content\">Case #1: 50.0000000\nCase #2: 207221.843687375\nCase #3: IMPOSSIBLE\nCase #4: 0.500000000\nCase #5: 1.428034895\nCase #6: 18.975332068\n  </pre>\n  </td></tr></table>\n  </div>\n  \n\nNote that Case #6 is not within the limits for the Small dataset.<br>\n<br>\nIn Case #1, the one available source happens to be the exact temperature we need. The optimal strategy is to immediately turn it on and let it run until we have 10 L. Since 0.2 L will come out every second, this takes 50 seconds.<br>\n<br>\nIn Case #2, one optimal strategy is to turn on the first source and let it run for 207221.843687375 seconds, and then, about 0.092778156 seconds before the end, also turn on the second source.<br>\n<br>\nIn Case #3, both available water sources are cooler than the target temperature, so there is no way to reach it.\n\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":7},{"type":2,"type__str":"HIDDEN","value":18}],"title":"Kiddie Pool","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000433651","type":1,"type__str":"SPECTATOR"},"title":"Round 2 2015"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
