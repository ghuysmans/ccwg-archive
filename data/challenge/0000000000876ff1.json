{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1648951200000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000876ff1","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  Although Code Jam's 19th season kicked off on what many around the world call \"April Fools' Day,\"\n  the Qualification Round was no joke!\n</p><p>\n  For the third time, the Qualification Round had five problems! The first problem was about\n  <i>Punched Card Python</i>, which is a fun new language that (if you didn't notice\n  during the round) we accepted submissions in! The language option served as a throwback to\n  <a href=\"https://en.wikipedia.org/wiki/Punched_card\" target=\"_blank\">punched cards</a>, and we're\n  happy to say that 140 users enjoyed experimenting in this new language during the round. Special\n  congratulations to <b>htamas</b> who was the only contestant to solve all problems using\n  <i>Punched Card Python</i>!\n</p><p>\n  After working with punched cards at the start, participants had to quickly shift gears to\n  <i>3D Printing</i> where they had to find a color all three printers had enough ink for. Next\n  came <i>d1000000</i> where participants tested their luck with dice and had to find the max\n  length straight that could be made. Both of these problems could be solved using a greedy\n  algorithm. Things ramped up in difficulty with <i>Chain Reactions</i>, which required doing\n  a clever tree traversal to get the full points. Finally, participants found\n  themselves in a cave while trying to solve a probabilistic interactive problem called\n  <i>Twisty Little Passages</i>.\n</p><p>\n  Contestants stormed out of the gate with a total of 325 submissions passing the samples in\n  the first 10 minutes, with several contestants solving the first 3 problems in that time!\n  <b>pwypeanut</b> was the first to score a perfect 100 points in just over 35 minutes to\n  secure their victory. <b>ksun48</b>, <b>ecnerwala</b>, and <b>neal_wu</b> also solved all\n  5 problems in under 45 minutes.\n</p><p>\n  In the end, 32702 contestants submitted something, with 31491 getting points. When the final\n  results were revealed, 28111 scored at least 30 points and advanced to Round 1. 361 contestants\n  went above and beyond and managed to score a perfect 100 points.\n</p><p>\n  Thank you for joining us for another year of Code Jam! If you got at least 30\n  points, congratulations, you have advanced! We will see you in any of the\n  Round 1s, starting with Round 1A next week. (You can keep participating in Round\n  1s until you advance to Round 2.) If you did not score enough points to\n  get to Round 1 this time, we hope you'll join us in 2023!\n  In the meantime, to improve your skills, you can practice with lots\n  of old problems from our\n  <a href=\"/codejam/archive\" target=\"_blank\">archive</a>.\n  In addition,\n  <a href=\"/kickstart\" target=\"_blank\">Kick Start</a>\n  registration remains open and you can jump in at any round for some live-contest experience!\n  If you want additional help,\n  <a href=\"https://groups.google.com/forum/#!forum/google-code/join\" target=\"_blank\">join our\n  mailing list</a> and ask questions!\n</p>\n<hr>\n<p>\n  <b>Cast</b>\n</p>\n<p>\n  Punched Cards: Written by Pablo Heiber and Timothy Buzzelli. Prepared by Jose Toro.\n</p><p>\n  3D Printing: Written by Pablo Heiber. Prepared by Artem Iglikov and Pablo Heiber.\n</p><p>\n  d1000000: Written by Pablo Heiber. Prepared by Timothy Buzzelli.\n</p><p>\n  Chain Reactions: Written by Hsin-Yi Wang. Prepared by Barun Parruck and Mohamed Yosri Ahmed.\n</p><p>\n  Twisty Little Passages: Written and prepared by John Dethridge.\n</p><p>\n  Solutions and other problem preparation and review by Abhilash Tayade, Apoorv Agarwal,\n  Amanda Fernandez, Artem Iglikov, Bianca Oe, Brendan Wood, Chill Chiu, Chu-ling Ko, Darcy Best,\n  Dylan Sleeper, Jayant Sharma, Jayasurya, John Dethridge, Liang Bai, Md Mahbubul Hasan,\n  Mohamed Yosri Ahmed, Nafis Sadique, Nhi Le, Nour Yosri, Pablo Heiber, Raghul Rajasekar,\n  Rohan Garg, Sudarsan Srinivasan, Swapnil Mahajan, Timothy Buzzelli, Ulises Mendez Martinez,\n  Vaibhav Tulsyan, Yan Li, and Yeabkal Wubshit.\n</p><p>\nAnalysis authors:\n</p><ul>\n  <li>Punched Cards: Timothy Buzzelli.</li>\n  <li>3D Printing: Pablo Heiber.</li>\n  <li>d1000000: Pablo Heiber.</li>\n  <li>Chain Reactions: Mohamed Yosri Ahmed and Pablo Heiber.</li>\n  <li>Twisty Little Passages: John Dethridge.</li>\n</ul>\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1648854000000,"tasks":[{"analysis":"<h3>Test Set 1</h3>\n<p>\n  In Test Set 1 there are very few modules. This means that we can try all\n  possible orders for the manual initiators, simulate the rules as explained in\n  the statement to get the overall fun yielded by each order, and keep the\n  maximum result from among those. Notice that modules that are pointed at the\n  abyss and not pointed at by any other module contribute their own fun to the\n  total no matter the order. Therefore, we can assume they all trigger in any\n  specific order at the beginning. This brings down the number of orders to try\n  from $$$\\mathbf{N}!$$$ to at most $$$(\\mathbf{N} / 2)!$$$, which is a lot less.\n</p>\n<h3>Test Set 2</h3>\n<p>\n  We can start by modeling the problem. We can see the input as a\n  <a href=\"https://en.wikipedia.org/wiki/Tree_(graph_theory)\" target=\"_blank\"\n    >rooted forest</a\n  >\n  where the parenting relationship models the pointed at relationship. Root\n  nodes are modules that are pointed at the abyss.\n</p>\n<p>\n  As it is often the case for problems on trees, we can solve this one\n  efficiently with a\n  <a\n    href=\"https://en.wikipedia.org/wiki/Divide-and-conquer_algorithm\"\n    target=\"_blank\"\n  >\n    divide and conquer</a\n  >\n  approach, and the aid of\n  <a href=\"https://en.wikipedia.org/wiki/Memoization\" target=\"_blank\"\n    >memoization</a\n  >/<a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\" target=\"_blank\"\n    >dynamic programming</a\n  >\n  to keep the running time small.\n</p>\n<p>\n  Notice we can solve each tree (connected component) in the forest\n  independently. Then, we can notice that the root of the tree is triggered by\n  the first manual initiator. So, we can try all possibilities for the first\n  manual initiator and eliminate the path between them and the root. That leaves\n  a lot of separated subtrees that we can solve recursively.\n</p>\n<p>\n  Formally, let $$$F(i)$$$ be the fun of node $$$i$$$ and $$$Ftree(t)$$$ be the\n  fun value of a given subtree rooted at $$$t$$$. To compute $$$Ftree(t)$$$, if\n  $$$t$$$ is a single node we simply return its fun $$$F(t)$$$. Otherwise, we\n  take the maximum (over all possible x) of $$$\\text{fun}(x, t) + \\sum_{s}\n  Ftree(s)$$$ where $$$\\text{fun}(x, t)$$$ is the maximum fun of all nodes in\n  the path from $$$x$$$ to $$$t$$$'s root and $$$x$$$ is a leaf of this subtree\n  and the summation is over all subtrees $$$s$$$ whose root parent in the\n  original tree is in the mentioned path.\n</p>\n<p>\n  The domain of $$$F$$$ is equal to the number of subtrees, which is equal to\n  the number of nodes of the tree. If we memoize $$$F$$$, the overall running\n  time of computing it for all subtrees of a tree of size $$$k$$$ is the domain\n  size ($$$k$$$) times the time it takes to compute it for a single item in the\n  domain, disregarding the cost of recursive calls. This is $$$O(k)$$$ because\n  of the summation, which means an overall time complexity of $$$O(k^2)$$$. The\n  worst case is when the entire input forest is a single tree, which means the\n  time complexity of the algorithm overall is $$$O(\\mathbf{N}^2)$$$.\n</p>\n<h3>Test Set 3</h3>\n<p>\n  To solve Test Set 3 we continue on our modelling from Test Set 2. We observe\n  that the answer for $$$Ftree(t)$$$ can be broken down to\n  $$$\\text{max}(\\text{fun}(x, a), F(t)) + \\sum_{s} Ftree(s)$$$ where $$$a$$$ is\n  one of $$$t$$$'s children and $$$x$$$ is a leaf node. We also observe that to\n  maximize this, we need to choose a leaf $$$x$$$ which minimizes\n  $$$\\text{fun}(x, a)$$$. This way we guarantee that $$$\\text{fun}(x, t)$$$\n  benefits from having $$$F(t)$$$ on the path, and that all other subtrees\n  $$$s$$$ have a maximum possible value. Otherwise if we pick a path other than\n  the minimum, this means the minimum path will be considered as one of the\n  other subtrees which reduces $$$\\sum_{s} Ftree(s)$$$ reducing the final answer\n  we can get.\n</p>\n<p>\n  Identifiying $$$x$$$ can be done using a DFS traversal solving each tree of\n  size $$$k$$$ in $$$O(k)$$$. Leading to an overall complexity of $$$O(N)$$$.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0Ddi7frMMUyhH3plph8CnMPK8A02m2zD4v3ZD8bl2JtA9mmaz0579tBB580DT0aZuAoOG9CKVc/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000a45ef7","statement":"<h3>Problem</h3>\n\n<p>\nWile lives alone in the desert, so he entertains himself by building complicated machines\nthat run on chain reactions. Each machine consists of $$$\\mathbf{N}$$$ modules indexed $$$1, 2, \\dots, \\mathbf{N}$$$.\nEach module may point at one other module with a lower index. If not, it points at the abyss.\n</p><p>\nModules that are not pointed at by any others are called <i>initiators</i>. Wile can manually trigger\ninitiators. When a module is triggered, it triggers the module it is pointing at (if any) which in turn may trigger\na third module (if it points at one), and so on, until the chain would hit the abyss or an already\ntriggered module. This is called a <i>chain reaction</i>.\n</p><p>\nEach of the $$$\\mathbf{N}$$$ modules has a fun factor $$$\\mathbf{F_i}$$$. The fun Wile gets from a chain reaction is the largest\nfun factor of all modules that triggered in that chain reaction. Wile is going to trigger each initiator\nmodule once, in some order. The overall fun Wile gets from the session is the sum of\nthe fun he gets from each chain reaction.\n</p><p>\nFor example, suppose Wile has $$$4$$$ modules with fun factors $$$\\mathbf{F_1}=60, \\mathbf{F_2}=20, \\mathbf{F_3}=40,$$$\nand $$$\\mathbf{F_4}=50$$$ and module $$$1$$$ points at the abyss, modules $$$2$$$ and $$$3$$$ at module\n$$$1$$$, and module $$$4$$$ at module $$$2$$$. There are two initiators ($$$3$$$ and $$$4$$$) that\nWile must trigger, in some order.\n</p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2D2yXea8AujsvC7o2_Fir01lOmgH6AMblDOSXxqtzxeodyBiNQQThDsipkCDOk_hi5aC3a9Ka9ZiSaBQ/example_1.gif\" alt=\"Example in statement when activating 4 then 3.\"/></p>\n<p>\nAs seen above, if Wile manually triggers module\n$$$4$$$ first, modules $$$4$$$, $$$2$$$, and $$$1$$$ will get triggered in the same chain reaction, for a fun of\n$$$\\max(50, 20, 60) = 60$$$. Then, when Wile triggers module $$$3$$$, module $$$3$$$\nwill get triggered alone (module $$$1$$$ cannot get triggered again), for a fun of\n$$$40$$$, and an overall fun for the session of $$$60+40=100$$$.\n</p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3-bK66vm0GoITTwLorWfKeIWzBnjM2KP0ushShksj--CRo9jJLM14Yil-3d5Tz9Ol25uDN5D4BPVdl-A/example_2.gif\" alt=\"Example in statement when activating 3 then 4.\"/></p>\n<p>\nHowever, if Wile manually triggers module $$$3$$$ first,\nmodules $$$3$$$ and $$$1$$$ will get triggered in the same chain reaction, for a fun of $$$\\max(40, 60) = 60$$$.\nThen, when Wile triggers module $$$4$$$, modules $$$4$$$ and $$$2$$$\nwill get triggered in the same chain reaction, for a fun of $$$\\max(50, 20) = 50$$$,\nand an overall fun for the session of $$$60+50=110$$$.\n</p><p>\nGiven the fun factors and the setup of the modules, compute the maximum fun Wile can get if he\ntriggers the initiators in the best possible order.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow,\neach described using 3 lines.\nEach test case starts with a line with a single integer $$$\\mathbf{N}$$$, the number of modules\nWile has. The second line contains $$$\\mathbf{N}$$$ integers $$$\\mathbf{F_1}, \\mathbf{F_2}, \\dots, \\mathbf{F_N}$$$ where\n$$$\\mathbf{F_i}$$$ is the fun factor of the $$$i$$$-th module.\nThe third line contains $$$\\mathbf{N}$$$ integers $$$\\mathbf{P_1}, \\mathbf{P_2}, \\dots \\mathbf{P_N}$$$.\nIf $$$\\mathbf{P_i}=0$$$, that means module $$$i$$$ points at the abyss. Otherwise, module $$$i$$$\npoints at module $$$\\mathbf{P_i}$$$.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the maximum fun\nWile can have by manually triggering the initiators in the best possible order.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{F_i} \\le 10^9$$$.<br/>\n$$$0 \\le \\mathbf{P_i} \\le i - 1$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\nTime limit: 5 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 10$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\nTime limit: 5 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 1000$$$.<br/>\n</p>\n\n<h4>Test Set 3 (Hidden Verdict)</h4>\n<p>\nTime limit: 10 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 100000$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0pfAjyzW6dr8wmzxHA05KupG3fRteXP_7dKbvXDQzu6DoPURGTdIO6oUXmvaDFf6-KgIhwmn0SVj7Ggg-rZ3Y9zdMRFwN3pbMKY3HEJuI/chain_reactions_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n4\n60 20 40 50\n0 1 1 2\n5\n3 2 1 4 5\n0 1 1 1 0\n8\n100 100 100 90 80 100 90 100\n0 1 2 1 2 3 1 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3wM_MVK7v2mMRA25SYbdhaE7LmRDdg0jpFrIwTOd22uQe7KjERtEbfvYYK3O8Sa0PilWaSIcXbx7OCmQrqOnL-ZmBFMyCZISevSuJiE5pk/chain_reactions_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 110\nCase #2: 14\nCase #3: 490\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  Sample Case #1 is the one explained in the problem statement.\n</p><p>\n  In Sample Case #2, there are $$$4$$$ initiators (modules $$$2$$$ through $$$5$$$),\n  so there are $$$4$$$ chain reactions. Activating them in order\n  $$$3, 5, 4, 2$$$ yields chains of fun $$$3, 5, 4, 2$$$ for an overall fun of $$$14$$$. Notice that\n  we are summing the four highest fun numbers in the input, so there is no way to get more\n  than that.\n</p><p>\n  In Sample Case #3, an optimal activation order of the $$$5$$$ initiators is $$$4, 5, 7, 6, 8$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":10},{"type":1,"type__str":"VISIBLE","value":12},{"type":2,"type__str":"HIDDEN","value":5}],"title":"Chain Reactions","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\nIn general, we can't just teleport to every room, because N can be much larger than K.\nWe could teleport to a randomly-chosen subset of the rooms, calculate\nthe average degree (number of adjoining passages) of those rooms we've visited, and assume that this\nis a good estimate of the average degree of all the rooms.\nThe number of passages is half the sum of the room degrees (since each passage connects two rooms.)\n<p>\nWhen can this approach yield a poor estimate?  If a small subset of the rooms have a degree\nmuch higher or much lower than the median degree, then we might not visit any of them,\nand our estimate would be too high or too low.\n<p>\nCases where most rooms have high degree and a small number of rooms have low degree are not a\nproblem, because we are judged on relative error, and the relative error in this case is low.\nIf the average degree is 100 but we estimate that it is 103, we would only be 3% from the answer.\nBut if the average degree is 5 and we estimate that it is 2, we would be 60% away from the answer!\n<p>\nSo consider a troublesome case where most rooms have low degree, and a small set of rooms have high\ndegree &mdash; few enough that we are unlikely to find one of them by\nteleporting randomly.\nIf these rooms contribute a significant fraction of the total number of passages, then they must\nconnect to a significant fraction of the total set of rooms.\nSo we can find these with high probability by repeatedly teleporting to a random room and then\nwalking through a random passage with the \"W\" command.\n<p>\nConsider a series of rounds where we alternate between teleporting to a random room with the \"T\"\ncommand and walking through a random passage with the \"W\" command.\nWe cannot simply extrapolate the average degree for the whole cave from the average degree of all\nthe rooms we've seen &mdash; the rooms we reach with \"W\" commands are not a uniform sample.\nWe can, however, use the average degree of just the rooms we visited with the \"T\" command as our\nestimate for all the rooms we haven't visited, and then add the known degrees to that.\nThis is sufficient to solve the problem.\n<p>\nAnother solution is to use an alternating series of \"T\" and \"W\" commands as above, and then use a\ntechnique called <a href=\"https://google.com/search?q=importance+sampling\" target=\"_blank\">importance sampling</a>.\nEach visit to a room gives us a sample of the average degree, but each room does not have an equal\nchance of being visited in any given sample.\nBy weighting each sample appropriately, we can compute a weighted average which serves as an\nunbiased estimate of the total.\nThe weights are chosen to compensate for the non-uniform probabilities of visiting each room.\n<p>\nWhen we randomly choose a room and visit it via a \"T\" command, each room had an equal chance of\nbeing chosen; we give this sample a weight of 1.\nWhen we visit a room via a \"W\" command, each room did not have an equal chance of being visited.\nWe need to calculate weights for these samples, such that the expected weight for each room (the\nprobability of visiting that room via a \"W\" command, multiplied by the expected weight we assign\nfor such visits) is $$$1/N$$$.  This will give our final estimate the correct expected value.\n<p>\nConsider a sample where we were previously in a room $$$R_1$$$ with degree $$$A$$$, and then we\nissued a \"W\" command and walked into a room $$$R_2$$$ with degree $$$B$$$.\nThe probability of us being in $$$R_1$$$ after the last \"T\" command was $$$1/N$$$.\nThe probability of following the passage to $$$R_2$$$ was $$$1/A$$$, because $$$R_1$$$ had $$$A$$$\npassages connected to it.\nSo the overall probability was $$$1/(AN)$$$.  We assign this sample the weight $$$A/B$$$, so that\nthe contribution to the expected weight for room $$$R_2$$$ is $$$1/(BN)$$$.\nAfter we sum over all $$$B$$$ ways we could arrive at $$$R_2$$$, we get a total expected weight of\n$$$1/N$$$ for $$$R_2$$$, as required.\n<p>\nAs an example, consider the following interaction:\n<pre>\nT 1\n1 1\nW\n3 2\nT 2\n2 1\nW\n3 2\nT 3\n3 2\nW\n1 1\n</pre>\nWe get samples of degrees $$$1, 2, 1, 2, 2, 1$$$ with weights $$$1, 1/2, 1, 1/2, 1, 2$$$, and the\nweighted average degree is $$$8/6$$$.\n","id":"0000000000a45fc0","statement":"<h3>Problem</h3>\n\n<p>\nYou are investigating a cave. The cave has $$$\\mathbf{N}$$$ rooms.\nThere are underground passages that bidirectionally connect some pairs of rooms.\nEach room has at least one passage connected to it.\nNo passage goes from a room to itself, and no two rooms are connected by more than one\npassage.\n</p><p>\nWhen in a room, you can identify what room you are in and see how many passages it connects to,\nbut you cannot distinguish the passages. You want to estimate the number of passages that exist in the cave.\nYou are allowed to do up to $$$\\mathbf{K}$$$ operations. An operation is either:\n</p>\n<ul>\n<li>be magically teleported to a room of your choice, or</li>\n<li>walk through a random passage connected to the room you are in, taking you to the room at the other end of that passage.</li>\n</ul>\n<p>\nWhen you decide to walk through a passage, you are unable to choose which one, because they are all alike.\nA passage is chosen for you uniformly at random.\n</p><p>\nYou begin the investigation in an arbitrary room. Estimate the number of passages between rooms\nin the cave with at most $$$\\mathbf{K}$$$ operations.\n</p><p>\nIf $$$E$$$ is your estimate and $$$P$$$ is the\nactual number of passages, your solution is considered correct for a test case if and only if\n$$$P \\cdot 2/3 \\le E \\le P \\cdot 4/3$$$.\n</p><p>\nTo pass a test set, your solution must be correct for at least 90% of the test cases in that set.\n</p>\n\n<h3>Input and output</h3>\n<p>\n  This is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of our\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq\" target=\"_blank\">FAQ</a>.\n</p>\n<p>\n  Initially, your program should read a single line containing an integer,\n  $$$\\mathbf{T}$$$, the number of test cases. Then, $$$\\mathbf{T}$$$ test cases must be processed.\n</p>\n<p>\n  For each test case, your program must first read a line containing two integers $$$\\mathbf{N}$$$ and $$$\\mathbf{K}$$$:\n  the number of rooms in the cave, and the maximum number of room operations you are allowed.\n  Rooms are numbered between $$$1$$$ and $$$\\mathbf{N}$$$.\n  The cave is determined at the beginning of the test case &ndash; it won't be changed while you explore it.\n  Then, your program must process up to $$$\\mathbf{K} + 1$$$ exchanges.\n</p>\n<p>\n  The $$$i$$$-th exchange starts with you reading a line containing two integers $$$\\mathbf{R_i}$$$ and\n  $$$\\mathbf{P_i}$$$, representing the number of the room you are currently in and the number of passages\n  it connects to. Then, you must output a single line containing one of the following:\n</p>\n<ul>\n<li>A single uppercase <code>W</code>: this means you want to walk through a random passage.</li>\n<li>A single uppercase <code>T</code> and an integer $$$S$$$: this means you want to teleport to room\n  $$$S$$$.</li>\n<li>A single uppercase <code>E</code> and an integer $$$E$$$: this means you want to finish\n  exploring and estimate that the cave contains $$$E$$$ passages.</li>\n</ul>\n<p>\nAfter an estimation operation, the judge will immediately start the next test case if there is one,\nregardless of the correctness of your estimation.\nIf there is no next test case, the judge will wait for you to finish without any further output.\n</p><p>\n  If the judge receives an invalidly formatted line from your program at any moment,\n  or if your $$$(\\mathbf{K}+1)$$$-th exchange for a test case is not an estimation operation,\n  the judge will print a single number $$$-1$$$ and will not print any further output.\n  If your program continues to wait for the judge after\n  receiving a $$$-1$$$, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 120 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$2 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n$$$K = 8000$$$.<br/>\nEach room has at least one passage connected to it.\n</p>\n\n\n<h3>Testing Tool</h3>\n<p>\n  You can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use our <a href=\"https://storage.googleapis.com/coding-competitions.appspot.com/interactive_runner.py\">interactive runner</a>\n  for that. For more information, read the instructions in comments in that\n  file, and also check out the\n  <a href=\"/codejam/faq#interactive-problems\" target=\"_blank\">Interactive Problems section</a>\n  of the FAQ.\n</p><p>\n  Instructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it is <b>NOT</b>\n  the real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check the\n  <a href=\"/codejam/faq#coding\" target=\"_blank\">Coding section</a>\n  of the FAQ to make sure that you are using the same compiler as us.\n</p><p>\n<a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1JIItRo2Ozkn7Vu4_32fElt9FhyE_I727V6OlUfCmvoAl-igdVUtOoyHGatI17lwV7rZA9AqT94xrDmj1Pr40S/local_testing_tool.py3?dl=1\" download=\"testing_tool.py\">Download testing tool</a>\n</p>\n\n\n  <div class=\"sample-interaction-wrapper\">\n    <div class=\"sample-interaction-header\">\n      <div class=\"sample-interaction-header-text\">Sample Interaction</div>\n    </div>\n    <div class=\"sample-interaction-content\">\n      <div class=\"sample-interaction-judge-solution-labels\">\n        <div class=\"sample-interaction-judge-label\">Judge</div>\n        <div class=\"sample-interaction-solution-label\">Solution</div>\n      </div>\n      \n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Number of cases<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 1<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">5 3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge gives $$$\\mathbf{N}=5, \\mathbf{K}=3$$$.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">4 1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">We start at room $$$4$$$ which has $$$1$$$ passage.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">T 5\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Teleport to room 5.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">5 2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">It has two passages.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">W\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Walk through a passage.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">4 1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">We arrived at room 4 again.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">T 1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Teleport to room 1.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1 3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">It has three passages.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">E 5\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Guess 5 passages.<br>\n(It can be shown that the actual number of passages is either 4 or 5. The two possible graphs for this test case are shown below.)<br>\n</div>\n\n    </div>\n  </div>\n\n<p><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1k-MDPWKY-AivBiCyXkOqIKRf1P0nhmfk7V2pgecF9TK0V5NHFEsrBvxy2nZgCCPhZXq_1QvNDeUsT9ErVnoV6Qpng09DE6Dw/twisty_little_passages.png\" alt=\"Twisty Little Passages sample case example.\"/></p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":29}],"title":"Twisty Little Passages","trial_input_type":2,"trial_input_type__str":"JUDGE_CODE"},{"analysis":"<p>\n  This problem required us to print out ASCII pictures of punched cards of different sizes. Although\n  the problem and solution are relatively straightforward, we need to know how to read from stdin\n  and write to stdout. Examples of this can be found in the\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq#coding\" target=\"_blank\">\"Coding\" section of the FAQ</a>.\n</p><p>\n  Because the dimensions of the punched cards we need to print are so small, one option would be to\n  store all the ASCII pictures in an array and just print the requested cards.\n  However, we can make use of nested <a href=\"https://en.wikipedia.org/wiki/For_loop\" target=\"_blank\">for-loops</a>\n  to generate the art for any sized punched card.\n</p><p>\n  We can use a loop to print out the punched card one line at a time and use another loop to print\n  the characters in each line. The odd-numbered (1-indexed) lines alternate between (<code>+</code>) and (<code>-</code>),\n  and the other lines alternate between (<code>|</code>) and (<code>.</code>). We can check the\n  line number and column number $$$(\\text{mod} \\, 2)$$$ to see which character we should print. The only\n  exception is when both the line number and column number are $$$\\le 2$$$&NoBreak;. In this case,\n  we always print a period (<code>.</code>).\n</p>\n\n<p>\n  As some of you may have already discovered, for this year's qualification round, you could\n  submit solutions in <i>Punched Card Python</i>. The following is a solution to\n  <i>Punched Cards</i> written using <i>Punched Card Python</i>:\n</p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2dhe7qw9MFrQOcK790ZJ0e9FJlC7hzZoPIXHVEcWG3H85RcF1MFs-mOKcEE-03_9O2A8ux0KpP6uXBWnbjva7jnR0Ef4vgQw/punched_card_python_1.png\" alt=\"Solution to Punched Cards in Punched Card Python (1/3).\" style=\"max-width: 500px;\"/></p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0VkULVazXZxUgct0QifKNVUGL_HDH1khEvre-KjYf2-oWP1y2lzg5M1EOAuNXSviWX1AGKQyn-m_LZXTc5zSpHhItZ-hzJxA/punched_card_python_2.png\" alt=\"Solution to Punched Cards in Punched Card Python (2/3).\" style=\"max-width: 500px;\"/></p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1QjqaMJaHsQcNMS2avN2IDxzrOd6IXTT9uklUFtVrdOcWG1iTWGIS5n4iE468BwlkNU0JtuR3nq-JsYQhNnPWVkN8EAvcnrg/punched_card_python_3.png\" alt=\"Solution to Punched Cards in Punched Card Python (3/3).\" style=\"max-width: 500px;\"/></p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3qBZRf4VSnEcgVbK5ZvS-RXupl9nUDEQCr4FMlpAp9mn7tNyYqlIAvzLeOLeSBn3deAajt9CDY/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000a4621b","statement":"<h3>Problem</h3>\n<p>\nA secret team of programmers is plotting to disrupt the programming language landscape and\nbring punched cards back by introducing a new language called <i>Punched Card Python</i> that lets\npeople code in Python using punched cards!\nLike good disrupters, they are going to launch a viral campaign to promote their new language before\neven having the design for a prototype. For the campaign, they want to draw\npunched cards of different sizes in ASCII art.\n</p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U262jpm6Qd7uxxBv1jstjtSrZPrnp58urkNJJQ5Ol7y1bJepKIazfTkMpkRzBodMQB8RiruyLu_TJY37T67YQ/punched_card.png\" alt=\"Example Punched Card.\" style=\"max-width: 500px;\"/></p>\n<p>\nThe ASCII art of a punched card they want to draw is similar to an $$$\\mathbf{R} \\times \\mathbf{C}$$$ matrix without\nthe top-left cell. That means, it has $$$(\\mathbf{R} \\cdot \\mathbf{C}) - 1$$$ cells in total.\nEach cell is drawn in ASCII art as a period (<code>.</code>) surrounded by dashes (<code>-</code>) above\nand below, pipes (<code>|</code>) to the left and right, and plus signs (<code>+</code>) for each corner.\nAdjacent cells share the common characters in the border. Periods (<code>.</code>) are used\nto align the cells in the top row.\n</p><p>\nFor example, the following is a punched card with $$$\\mathbf{R} = 3$$$ rows and $$$\\mathbf{C} = 4$$$ columns:\n</p>\n<p><pre align=\"center\">\n..+-+-+-+\n..|.|.|.|\n+-+-+-+-+\n|.|.|.|.|\n+-+-+-+-+\n|.|.|.|.|\n+-+-+-+-+\n</pre>\n</p><p>\nThere are more examples with other sizes in the samples below. Given the integers $$$\\mathbf{R}$$$ and $$$\\mathbf{C}$$$\ndescribing the size of a punched card, print the ASCII art drawing of it as described above.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ lines follow,\neach describing a different test case with two integers $$$\\mathbf{R}$$$ and $$$\\mathbf{C}$$$: the number of rows\nand columns of the punched card that must be drawn.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$:</code>,\nwhere $$$x$$$ is the test case number (starting from 1).\nThen, output $$$(2 \\cdot \\mathbf{R}) + 1$$$ additional lines with the ASCII art drawing of a\npunched card with $$$\\mathbf{R}$$$ rows and $$$\\mathbf{C}$$$ columns.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 5 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{T} \\le 81$$$.<br/>\n$$$2 \\le \\mathbf{R} \\le 10$$$.<br/>\n$$$2 \\le \\mathbf{C} \\le 10$$$.<br/>\n</p>\n\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U32YTpU7psOPBYsgSh28Sw2UuHlHthmX9wteUtV0oCeO5qysHd0lURQ4Mwc7ueWYAp6JPF_Y6SEdkf4-I7yN0MPKTbDoyrMXPTkW5fV/punched_cards_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3 4\n2 2\n2 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1ZOhPEhZP1r6n7NGCL9hZBtCbUiTgn8BfOTtx_KokTn0yEWKetXSBjWVTf7y7kWxK56QkARERsYvbsyOEmUJsoD6V_2GZ9rcJdDPIbWQ/punched_cards_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1:\n..+-+-+-+\n..|.|.|.|\n+-+-+-+-+\n|.|.|.|.|\n+-+-+-+-+\n|.|.|.|.|\n+-+-+-+-+\nCase #2:\n..+-+\n..|.|\n+-+-+\n|.|.|\n+-+-+\nCase #3:\n..+-+-+\n..|.|.|\n+-+-+-+\n|.|.|.|\n+-+-+-+\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  Sample Case #1 is the one described in the problem statement. Sample Cases #2 and #3 are additional\n  examples. Notice that the output for each case contains exactly $$$\\mathbf{R} \\cdot \\mathbf{C} + 3$$$ periods.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":11}],"title":"Punched Cards","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n<p>\nThere are multiple of ways to solve Test Set 1 of this problem. A particularly funny one is to throw\nthe solution of an\n<a href=\"https://codingcompetitions.withgoogle.com/codejam/round/0000000000201909/00000000002017fc\" target=\"_blank\">old finals problem</a>\nat it (even the Test Set 1 solution of that problem works).\n</p>\n<h3>Test Set 2</h3>\n<p>\nTest Set 2 has very big numbers, so we need insights that are specific to this problem.\n</p><p>\nInsight 1. If a straight from $$$A$$$ to $$$B$$$ can be done, then one from $$$1$$$ to $$$B-A+1$$$\ncan be done as well using the same dice in the same order, since a die showing a number $$$X$$$\ncan always be used to show number $$$X-A+1$$$.\n</p><p>\nInsight 2. If a straight is done with a $$$di$$$ showing number $$$X$$$ and a $$$dj$$$ showing\nnumber $$$X+1$$$ with $$$i \\gt j$$$, we can build the same straight but using $$$dj$$$ for $$$X$$$\nand $$$di$$$ for $$$X+1$$$.\n</p><p>\nInsight 2b. Any straight that can be done, can also be done while using the dice in non-decreasing\norder of number of faces.\n</p><p>\nCombining insights 1 and 2b gives an algorithm: start by sorting the dice. Then, in that order, try\nto extend the current straight if possible. Or, in pseudo-code:\n</p><pre>\nmaximum_straight_length(S):\n  sort(S)\n  length = 0\n  for si in S:\n    if si > length: length += 1\n  return length\n</pre><p>\nThis algorithm requires only linear time beyond sorting the input, which means $$$O(\\mathbf{N} \\log \\mathbf{N})$$$\noverall. This is fast enough to pass Test Set 2.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3cPI-loA7xMPBBsStfPa1tmWgEq59qd9Zv2sKp4pM0mhsxh2-Kx0Yr-_GD1MR6jvZuZKl_YupM/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000a46471","statement":"<h3>Problem</h3>\n<p>\nWhile the most typical type of dice have $$$6$$$ sides, each of which shows a different\ninteger $$$1$$$ through $$$6$$$, there are many games that use other types.\nIn particular, a $$$dk$$$ is a die with $$$k$$$ sides, each of which shows a different\ninteger $$$1$$$ through $$$k$$$. A $$$d6$$$ is a typical die, a $$$d4$$$ has four sides,\nand a $$$d1000000$$$ has one million sides.\n</p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0Ye6mCUUW3QCOElBYeuWtLh0z2-T88MZ59pc2w5mR7IsB-_p37FxAF3DPKTmFSIgnEgL9yW18R7HPP/D1000000.png\" alt=\"Dice from sample case 1\"/></p>\n<p>\nIn this problem, we start with a collection of $$$\\mathbf{N}$$$ dice. The $$$i$$$-th die is a $$$d\\mathbf{S_i}$$$, that is,\nit has $$$\\mathbf{S_i}$$$ sides showing integers $$$1$$$ through $$$\\mathbf{S_i}$$$. A straight of length $$$\\ell$$$\nstarting at $$$x$$$ is the list of integers $$$x, x + 1, \\dots, x + (\\ell - 1)$$$.\nWe want to choose some of the dice (possibly all) and pick one number from each to form a straight.\nWhat is the longest straight we can form in this way?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case is described in two lines. The first line of a test case contains a single\ninteger $$$\\mathbf{N}$$$, the number of dice in the game. The second line contains $$$\\mathbf{N}$$$ integers\n$$$\\mathbf{S_1}, \\mathbf{S_2}, \\dots, \\mathbf{S_N}$$$, each representing the number of sides of a different\ndie.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the maximum number of\ninput dice that can be put in a straight.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\nTime limit: 5 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 10$$$.<br/>\n$$$4 \\le \\mathbf{S_i} \\le 20$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\nTime limit: 15 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n$$$4 \\le \\mathbf{S_i} \\le 10^6$$$, for all $$$i$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U22M43CrwWmbJnPOr2qftrBEHx-Uzf4wkgnAtGxoRp2--5Y_MUEFAFuWpjFn-58w_Byxr0IQhv8kFXcjPYjsUH9QwGk1hQSzg/d1000000_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n4\n6 10 12 8\n6\n5 4 5 4 4 4\n10\n10 10 7 6 7 4 4 5 7 4\n1\n10\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3byE0OmcmXAZuHiZv-xxkHG5pHek9wBg5l-czPnrfsU7gfhleLOSJRXjJU5q20D64xZHEbdUpdprvdpXu2ITDWxs9myGeGNW8/d1000000_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4\nCase #2: 5\nCase #3: 9\nCase #4: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, there are multiple ways to form a straight using all $$$4$$$ dice. One possible\n  way is shown in the image above.\n</p><p>\n  In Sample Case #2, since none of the dice can show an integer greater than $$$5$$$, there is no way to\n  have a straight with more than $$$5$$$ dice. There are multiple ways to form a straight with\n  exactly $$$5$$$ dice. For example, pick the integers $$$4$$$ and $$$5$$$ for both $$$d5$$$&NoBreak;'s\n  and then integers $$$1, 2,$$$ and $$$3$$$ for three of the $$$d4$$$&NoBreak;'s to form $$$1,2,3,4,5$$$.\n</p><p>\n  In Sample Case #3, it is possible to form the straight $$$1,2,3,4,5,6,7,8,9$$$ by discarding one\n  $$$d4$$$ and using the $$$d4$$$&NoBreak;'s, $$$d5$$$, and $$$d6$$$ to get $$$1$$$ through $$$4$$$;\n  the $$$d7$$$&NoBreak;'s to get $$$5$$$ through $$$7$$$; and the $$$d10$$$&NoBreak;'s to get $$$8$$$\n  and $$$9$$$. There is no way to form a straight of length $$$10$$$, so this is the best that\n  can be done.\n</p><p>\n  In Sample Case #4, we can only form a straight of length $$$1$$$, but we can do so by picking\n  any integer for the $$$d10$$$ we are given.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":9},{"type":1,"type__str":"VISIBLE","value":11}],"title":"d1000000","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\nThe first thing we can notice is that if a printer has $$$u$$$ units of ink left of a given\ncolor, we cannot use more than $$$u$$$ units of that color. Moreover, this is the only restriction\nimposed by that value. So, we can summarize the input by saying we cannot use more than\n$$$C = \\min(\\mathbf{C_1}, \\mathbf{C_2}, \\mathbf{C_3})$$$ units of cyan ink, $$$M = \\min(\\mathbf{M_1}, \\mathbf{M_2}, \\mathbf{M_3})$$$ units of\nmagenta ink, $$$Y = \\min(\\mathbf{Y_1}, \\mathbf{Y_2}, \\mathbf{Y_3})$$$ units of yellow ink, or\n$$$K = \\min(\\mathbf{K_1}, \\mathbf{K_2}, \\mathbf{K_3})$$$ units of black ink.\n</p><p>\nIf $$$C + M + Y + K \\lt 10^6$$$ then the case is impossible and we are done. Otherwise, we may need\nto use lower amounts of each color. We can simply go one color at a time, lowering the amounts of\nink until we make the sum exactly $$$10^6$$$. Doing it one unit at a time works, but it is very slow.\nWe can do better: in the same way as before, we can consider all the colors one at at a time.\nLet $$$S$$$ be the sum of the current amount of ink for\nthe $$$3$$$ colors not currently under consideration. If $$$S \\ge 10^6$$$, we can simply set the\namount of the current color to $$$0$$$ and continue with the next one. If $$$S \\lt 10^6$$$ we\ncan lower the current color to $$$10^6 - S$$$ and finish immediately. This works because at all\ntimes we maintain the invariant that the total amount of ink we are considering is at least\n$$$10^6$$$ units.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3_EFiT4SHRFI4e3FP0Vgrm2ZmC6Q2v3B6T9AN5wKZGlyuN34vy6YQEcWlnA-y_p5zi1hxP_pkF/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000a4672b","statement":"<h3>Problem</h3>\n<p>\nYou are part of the executive committee of the Database Design Day festivities.\nYou are in charge of promotions and want to print three D's to create a\nlogo of the contest. You can choose any color you want to print them, but all three\nhave to be printed in the same color.\n</p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1yXmbP6Nf5PONAMbqVd5eyM5BBSbjggzDn9H6vS3ATQiqbGVrfZ0ABoAbBkn8IWocYoj1rdJim6VkTTOP4/3d_printing.png\" alt=\"Illustration of Sample #1.\"/></p>\n<p>\nYou were given three printers and will use each one to print one of the D's.\nAll printers use ink from $$$4$$$ individual cartridges\nof different colors (cyan, magenta, yellow, and black) to form any color.\nFor these printers, a color is uniquely defined by $$$4$$$ non-negative integers\n$$$c$$$, $$$m$$$, $$$y$$$, and $$$k$$$, which indicate the number of ink units of cyan, magenta,\nyellow, and black ink (respectively) needed to make the color.\n</p><p>\nThe total amount of ink needed to print a single D is exactly $$$10^6$$$ units.\nFor example, printing a D in pure yellow would use $$$10^6$$$\nunits of yellow ink and $$$0$$$ from all others. Printing a D in the Code Jam red uses $$$0$$$ units of cyan ink, $$$500000$$$ units of magenta\nink, $$$450000$$$ units of yellow ink, and $$$50000$$$ units of black ink.\n</p><p>\nTo print a color, a printer must have at least the required amount of ink for each of its $$$4$$$ color cartridges.\nGiven the number of units of ink each printer has in each cartridge, output any color, defined as\n$$$4$$$ non-negative integers that add up to $$$10^6$$$, such that all three printers have enough\nink to print it.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case consists of $$$3$$$ lines. The $$$i$$$-th line of a test case contains\n$$$4$$$ integers $$$\\mathbf{C_i}$$$, $$$\\mathbf{M_i}$$$, $$$\\mathbf{Y_i}$$$, and $$$\\mathbf{K_i}$$$, representing the number of ink units\nin the $$$i$$$-th printer's cartridge for the colors cyan, magenta, yellow, and black, respectively.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$r$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$r$$$ is <code>IMPOSSIBLE</code>\nif there is no color that can be printed by all $$$3$$$ printers. Otherwise, $$$r$$$ must be\nequal to \"$$$c$$$ $$$m$$$ $$$y$$$ $$$k$$$\" where $$$c$$$, $$$m$$$, $$$y$$$, and $$$k$$$ are\nnon-negative integers that add up to $$$10^6$$$ and $$$c \\le \\mathbf{C_i}$$$, $$$m \\le \\mathbf{M_i}$$$,\n$$$y \\le \\mathbf{Y_i}$$$, and $$$k \\le \\mathbf{K_i}$$$, for all $$$i$$$.\n</p><p>\nIf there are multiple solutions, you may output any one of them.\n(See \"What if a test case has multiple correct solutions?\"\nin the <a href=\"/codejam/faq#competing\" target=\"_blank\">Competing section of the FAQ</a>.)\nThis information about multiple solutions will not be explicitly stated in the remainder of the\n2022 contest.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 5 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$0 \\le \\mathbf{C_i} \\le 10^6$$$, for all $$$i$$$.<br/>\n$$$0 \\le \\mathbf{M_i} \\le 10^6$$$, for all $$$i$$$.<br/>\n$$$0 \\le \\mathbf{Y_i} \\le 10^6$$$, for all $$$i$$$.<br/>\n$$$0 \\le \\mathbf{K_i} \\le 10^6$$$, for all $$$i$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0WTRDC-tn2ZE-2KkhKsKxn1qgJ4W1LprE-sfqynN47kctVljg-GDkV8CT-TCu7JPkmMAhFHFKmD0WoT0OG1bqIQ_Ltm_O5riMh7g/3d_printing_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n300000 200000 300000 500000\n300000 200000 500000 300000\n300000 500000 300000 200000\n1000000 1000000 0 0\n0 1000000 1000000 1000000\n999999 999999 999999 999999\n768763 148041 178147 984173\n699508 515362 534729 714381\n949704 625054 946212 951187\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2sSv6PHjpQQZ4WsTvo6Mdxn6IoYDV_zVjKVpN_DoZcej-v2iaiAvQCTGZoZhu_HcLPJC102RKB9WPEaqBduTbAncytpLY-ddl3trQ/3d_printing_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 300000 200000 300000 200000\nCase #2: IMPOSSIBLE\nCase #3: 400001 100002 100003 399994\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  Sample Case #1 is the image provided above. The proposed color is using up all of the ink in the\n  cyan, magenta, and yellow cartridges of the first printer and all of the\n  ink in the black cartridge of the last printer. This means that no additional\n  unit of ink could be used from any of the $$$4$$$ ink colors, so the given\n  sample output is the only possible output for this case.\n</p><p>\n  In Sample Case #2, magenta is the only color that both the first and second\n  printers have, so our only chance would be to use $$$10^6$$$ units of\n  magenta. Unfortunately, the third printer does not have quite enough, making\n  this case impossible.\n</p><p>\n  In Sample Case #3, other correct outputs are:\n  \"<code>400000 100000 100000 400000</code>\", \"<code>300000 0 0 700000</code>\", and\n  \"<code>350000 140000 160000 350000</code>\", among lots of others. Notice that\n  \"<code>300000 140000 160000 700000</code>\" would not be a valid answer because,\n  even though there is enough ink in all printers to do that, the total number of\n  ink units must be exactly $$$10^6$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":13}],"title":"3D Printing","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000876ff1","type":1,"type__str":"SPECTATOR"},"title":"Qualification Round 2022","ui_appearance":0,"ui_appearance__str":"APPEARANCE_TYPE_DEFAULT"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
