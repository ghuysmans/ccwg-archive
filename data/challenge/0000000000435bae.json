{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1631995200000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000435bae","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Thank you for participating in Kick Start 2021 Round F!</p>\r\n<hr>\r\n<p><b>Cast</b></p>\r\n<p>Trash Bins: Written by Bartosz Kostka and prepared by Jennifer Zhou.</p>\r\n<p>Star Trappers: Written by Fahim Ferdous Neerjhor and prepared by Jennifer Zhou.</p>\r\n<p>Festival: Written by Anurag Singh and prepared by Swapnil Mahajan.</p>\r\n<p>Graph Travel: Written by Sean Jin and prepared by Junyang Jiang.</p>\r\n<p>Solutions, other problem preparation, reviews and contest monitoring by\r\nAditya Ghosh, Akul Siddalingaswamy, Aneesh D H, Ankit Goyal, Anurag Singh, Bartosz Kostka, Bohdan Pryshchenko, Dee Guo, Deepak Gour, Eric Dong, Fahim Ferdous Neerjhor, Harshil Shah, Jakub Kuczkowiak, Jared Gillespie, Jayant Sharma, Jennifer Zhou, Junyang Jiang, Kashish Bansal, Lizzie Sapiro Santor, Lucas Maciel, Maks Verver, Maneeshita Sharma, Michał Łowicki, Mo Luo, Nikolai Artemiev, Phil Sun, Pranav Raj, Ruoyu Zhang, Samiksha Gupta, Sanyam Garg, Sarah Young, Sasha Fedorova, Sean Jin, Sera Wang, Shweta Karwa, Swapnil Gupta, Swapnil Mahajan, Teja Vardhan Reddy Dasannagari, Umang Goel, Vijay Krishan Pandey, Wendi Wang.</p>\r\n<p>Analysis authors:</p><ul>\r\n<li>Trash Bins: Maneeshita Sharma</li>\r\n<li>Star Trappers: Maks Verver</li>\r\n<li>Festival: Lucas Maciel</li>\r\n<li>Graph Travel: Deepak Gour</li>\r\n</ul>\r\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1631984400000,"tasks":[{"analysis":"<p>\n  For every house, we have to find the closest house with a trash bin. This can either be the same house,\n  or some other house to its left or right as at least one house has a trash bin in front of it.\n<p>\n  Let $$$F(i)$$$ denote distance that the $$$i$$$-th house owner has to walk to take their trashes out.\n  The final answer is\n  $$$\\displaystyle\\sum_{i=1}^{\\mathbf{N}} F(i) $$$.\n</p>\n<h3>\n    Test Set 1\n</h3>\n\n<p>\n  For $$$i$$$-th house, we find $$$F(i)$$$ by iterating over all the houses and picking the house\n  $$$j$$$ such that $$$\\mathbf{S}_{j}=1$$$ and the distance between the house $$$i$$$ and $$$j$$$ is least.\n</p>\n\n<p>\n<i>Complexity : $$$O(\\mathbf{N} ^ 2)$$$ per test case</i>\n</p>\n\n<h3>\n    Test Set 2\n</h3>\n\n\n<p>\n  For $$$i$$$-th house, let $$$L(i)$$$ denote the closest house to its left which has trash bin in front of it\n  and $$$R(i)$$$ denote the closest house to its right with a trash bin in front of it.\n  We can find $$$L(i)$$$ and $$$R(i)$$$ for all the houses in one linear pass.\n</p>\n<p>\n  $$$L(i) =\n  \\begin{cases}\n    -\\infty       & \\quad \\text{if } i = 1\\\\\n    i-1  & \\quad \\text{if } i > 1 \\text{ and } \\mathbf{S}_{i-1} = 1 \\\\\n    L(i-1) & \\quad \\text{if } i > 1 \\text{ and } \\mathbf{S}_{i-1} = 0 \\\\\n  \\end{cases}$$$\n</p>\n<p>\n  $$$R(i) =\n  \\begin{cases}\n    \\infty       & \\quad \\text{if } i = \\mathbf{N}\\\\\n    i+1  & \\quad \\text{if } i < \\mathbf{N} \\text{ and } \\mathbf{S}_{i+1} = 1 \\\\\n    R(i+1) & \\quad \\text{if } i < \\mathbf{N} \\text{ and } \\mathbf{S}_{i+1} = 0 \\\\\n  \\end{cases}$$$\n</p>\n<p>\n  $$$F(i) =\n  \\begin{cases}\n    0       & \\quad \\text{if } \\mathbf{S}_{i} = 1\\\\\n    \\min({i - L(i), R(i) - i})  & \\quad \\text{if } \\mathbf{S}_{i} = 0\\\\\n  \\end{cases}$$$\n</p>\n<p>\n  You might have to deal with overflow issues depending on the data types used as the maximum value\n  of answer does not fit 32-bit integer data types.\n</p>\n<p>\n  You can take $$$\\infty$$$ as any value  $$$ >= 2 \\times \\mathbf{N}$$$.\n</p>\n<p>\n<i>Complexity : $$$O(\\mathbf{N})$$$ per test case</i>\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1CG1fZCQUDjw-GB0a-U1iLFh8FquLtF-L0YTaohEfr4Ma_ec1azAymPwHM4vxw4F_cfhuFCnuS/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000887c32","statement":"<h3>Problem</h3>\n<p>\n  In the city where you live, Kickstartland,\n  there is one particularly long street with $$$\\mathbf{N}$$$ houses on it.\n  This street has length $$$\\mathbf{N}$$$, and the $$$\\mathbf{N}$$$ houses are evenly placed along it,\n  that is, the first house is at position $$$1$$$, the second house is at position $$$2$$$,\n  and so on.\n  The distance between any pair of houses $$$i$$$ and $$$j$$$ is $$$|i-j|$$$,\n  where $$$|x|$$$ denotes the absolute value of $$$x$$$.\n</p>\n<p>\n  Some of these houses have trash bins in front of them. That means that the owners of such\n  houses do not have to walk when they want to take their trash out. However, for the owners\n  of houses that do not have trash bins in front of them,\n  they have to walk towards some house that has a trash bin in front of it,\n  either to the left or to the right of their own house.\n</p>\n<p>\n  To save time, every house owner always takes their trash out to the trash bin\n  that is closest to their houses.\n  If there are two trash bins that are both the closest to a house, then the\n  house owner can walk to any of them.\n</p>\n<p>\n  Given the number of houses $$$\\mathbf{N}$$$, and the description of which of these houses have trash bins\n  in front of them, find out what is the sum of the distances that each house owner has to\n  walk to take their trashes out.\n  You can assume that at least one house has a trash bin in front of it.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n  Each test case consists of two lines.\n</p>\n<p>\n  The first line of each test case contains an integer $$$\\mathbf{N}$$$,\n  denoting the number of houses on the street.\n</p>\n<p>\n  The second line of each test case contains a string $$$\\mathbf{S}$$$ of length $$$\\mathbf{N}$$$,\n  representing which houses have trash bins in front of them.\n  If the $$$i$$$-th character in string $$$\\mathbf{S}$$$ is equal to $$$1$$$,\n  then it means that the $$$i$$$-th house has a trash bin in front of it.\n  Otherwise, if it is equal to $$$0$$$,\n  then it means that the $$$i$$$-th house does not have a trash bin in front of it.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\n  where $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is\n  the sum of the distances that each house owner has to walk to take their trashes out.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  The length of $$$\\mathbf{S}$$$ is equal to $$$\\mathbf{N}$$$.<br/>\n  Each character of $$$\\mathbf{S}$$$ is either $$$0$$$ or $$$1$$$.<br/>\n  There is at least one character $$$1$$$ in $$$\\mathbf{S}$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{N} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$1 \\le \\mathbf{N} \\le 5 \\times 10^5$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2E5x0M8aIe2sbPVelrHaVHhCX-4L7PIWFnPBKRwbeT4w8NBQfbxJRMaz0Xy6iTP-L08PyMKf7p0EN4O6wk5vBO_TM-WJw-9B9L/trash_bins_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3\n111\n6\n100100\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1NjR7iDQhuRWDGyxYfcQ67P5bK7JAagqU_NhcbHRT9dseAt-u5cDi4OE58ky8ou9Sh9Mv2aUdrEOujQd0Z7wCzPPjV5XjvoD8XKA/trash_bins_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0\nCase #2: 5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  For the first test case, every house has a trash bin in front of it,\n  and therefore none of the house owners will have to walk to take their trashes out.\n</p>\n<p>\n  For the second test case, the first and the fourth house owners have trash bins in front\n  of their houses, and therefore will not have to walk. The second house owner will walk\n  towards the first house, and the distance will be equal to $$$1$$$. The third, fifth, and sixth\n  house owners will walk towards the fourth house,\n  and the distances will be equal to $$$1$$$, $$$1$$$, and $$$2$$$, respectively.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":1,"type__str":"VISIBLE","value":6}],"title":"Trash Bins","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\n  Test Set 1\n</h3>\n\n<p>\n  We can consider each attraction as an interval that covers some range of days and has some\n  <i>happiness rating</i>.\n  Let us denote <i>happiness rating</i> of an interval as HR.<br/>\n  <br/>\n  At first we sort the intervals according to their HRs, from higher to lower.\n  Then we will iterate through each day and consider that day as the day we will attend the\n  festival. Let us denote this day as $$$d_i$$$. And let us denote the total happiness of upto $$$\\mathbf{K}$$$\n  intervals on this day as $$$c_i$$$.<br/>\n  <br/>\n  Let us set $$$c_i$$$ to $$$0$$$. Now we will iterate through the sorted intervals and check if\n  $$$d_i$$$ is included in the current interval. If yes, then we add the HR of that\n  interval to $$$c_i$$$. If no, we continue to the next interval. If the number of intervals taken\n  into account reaches $$$\\mathbf{K}$$$, we stop calculating $$$c_i$$$ and compare it to the current maximum\n  answer and store it as maximum if it is greater. If we iterate through all the intervals and the\n  number of intervals taken is less than $$$\\mathbf{K}$$$, we still compare $$$c_i$$$ to the current maximum\n  answer and store it as maximum if it is greater.<br/>\n  <br/>\n  The answer is the maximum among all $$$c_i$$$s.<br/>\n  <br/>\n  The time complexity of this solution is $$$O(\\mathbf{N} \\times \\log{\\mathbf{N}} + \\mathbf{D} \\times \\mathbf{N})$$$.<br/>\n  The space complexity (without considering the input) of this solution is $$$O(1)$$$ as no extra\n  memory is used.\n</p>\n\n<p>\n  A pseudocode would look something like this:\n</p>\n\n<pre>\n<code>\n  ans = 0\n  sort(intervals) // from higher to lower\n  for d_i = 1 to D:\n    c_i = 0\n    cnt = 0\n    for j = 1 to N:\n      if (cnt == K): break\n      if (s_j <= d_i <= e_j):\n        c_i += h[d_i]\n        cnt++\n    ans = max(ans, c_i)\n  return ans\n</code>\n</pre>\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  Now the brute force will not work. We can still iterate through each day, but now we cannot check\n  each interval to see if this day is in that interval or not. Rather for each day, we will update\n  the events taking place on that day efficiently and then calculate the total HR for that day. We\n  will consider the ending days as the ($$$\\mathbf{e_i}$$$ + 1)-th days, because the $$$\\mathbf{e_i}$$$-th day is\n  included in the interval. So now we will consider the ($$$\\mathbf{e_i}$$$ + 1)-th day as the ending day\n  for each interval. For example, if an interval ended on day $$$6$$$ previously, now we will\n  consider that it ends on day $$$7$$$.<br/>\n  <br/>\n  For each day, we will store the intervals that either start or end on that day.<br/>\n  <br/>\n  We will use segment trees for our solution. Each leaf node of the tree will be an interval and\n  the intervals will be sorted according to their HRs, from higher to lower. Initially every\n  interval will have a value of $$$0$$$. When an interval becomes active, we will update that index\n  with its HR. And when an interval becomes inactive, we will update that index with $$$0$$$ again.\n  We need to query the sum of any range in the trees. We also need another operation. At any moment\n  we need to find the index of the $$$\\mathbf{K}$$$-th maximum (HR wise) active interval. If there are less than\n  $$$\\mathbf{K}$$$ active intervals, we will return the index of the rightmost/last active interval. We can use\n  another segment tree for this.<br/>\n  <br/>\n  Now we will iterate through the days.<br/>\n  <br/>\n  If the current day is a starting day for an interval, it means this interval has become active.\n  We will update its index with its HR in one tree and will make it active in the other one.<br/>\n  If the current day is an ending day for an interval, it means this interval has become inactive.\n  We will update its index with $$$0$$$ in one tree and will make it inactive in the other one.<br/>\n  We will do this for each interval for which the current day is a starting day or an ending\n  day.<br/>\n  <br/>\n  On the days that we update the segment trees, after updating, we will query for the index of the\n  $$$\\mathbf{K}$$$-th maximum active interval in the second tree. Let us assume this index is $$$idx$$$. And then\n  in the first tree, we will query the sum from the $$$0$$$-th index to index $$$idx$$$. We will\n  store this sum in the current answer if the current answer is smaller.<br/>\n  <br/>\n  The answer is the final value in the current answer.<br/>\n  <br/>\n  The time complexity of building a segment tree with $$$n$$$ elements is $$$O(n)$$$ and for\n  updating and querying the time complexity is $$$O(\\log{n})$$$ for each operation.<br/>\n  So the time complexity of this solution is\n  $$$O(\\mathbf{N} + \\mathbf{D} + \\mathbf{N} \\times \\log{\\mathbf{N}})$$$.<br/>\n  And the space complexity of this solution is $$$O(\\mathbf{N})$$$.\n</p>\n\n<h4>\n  Alternative Solution\n</h4>\n<p>\n  We will discuss another solution using\n  <a href=\"https://www.cplusplus.com/reference/set/multiset/\" target=\"_blank\">multisets</a> which is available in\n  C++ standard template library (STL). It can also be implemented using a\n  <a href=\"https://en.wikipedia.org/wiki/Binary_search_tree\" target=\"_blank\">binary search tree</a> in any\n  language.<br/>\n  <br/>\n  We will use two multisets, one to keep track of the $$$\\mathbf{K}$$$ active intervals with higher HRs, and the\n  other one to keep track of the rest of the active intervals.<br/>\n  <br/>\n  Now we will iterate through the days again.<br/>\n  <br/>\n  If the current day is a starting day of an interval, then if the number of active intervals in the\n  first multiset is less than $$$\\mathbf{K}$$$, we insert this interval in the first multiset. Otherwise, if the\n  interval with the smallest HR has a greater HR than this interval, then we insert this interval\n  in the second multiset. And if it is less or equal, then we remove the smallest from the first\n  multiset and insert the removed interval into the second multiset. And then we insert the current\n  interval in the first multiset.<br/>\n  <br/>\n  If the current day is an ending day of an interval, then if this interval is in the second\n  multiset, we simply remove it from there. Otherwise it is in the first multiset. So, we remove the\n  current interval from the first multiset. Then we remove the interval with the largest HR from the\n  second multiset and insert the removed interval in the first multiset.<br/>\n  <br/>\n  We always maintain a variable $$$sum$$$ which is the sum of the HRs of the intervals in the first\n  multiset. While inserting/removing an interval in/from the first multiset, we have to update the\n  value of the $$$sum$$$ accordingly.<br/>\n  <br/>\n  The answer is the maximum value of $$$sum$$$ across the whole time.<br/>\n  <br/>\n  The time complexity of accessing, inserting, removing elements from a multiset with $$$n$$$\n  elements is $$$O(\\log{n})$$$ for each operation. Since there are $$$\\mathbf{N}$$$ intervals and each\n  interval will be handled $$$2$$$ times and each handling will require $$$O(1)$$$ operations with\n  the multisets, the overall complexity of all operations with multisets will be\n  $$$O(\\mathbf{N} \\times \\log{\\mathbf{N}})$$$.<br/>\n  So, the overall complexity of this solution is: $$$O(\\mathbf{D} + \\mathbf{N} \\times \\log{\\mathbf{N}})$$$.<br/>\n  And the space complexity of this solution is $$$O(\\mathbf{N})$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1njxLaM_IUi9NKF50unH9q5QQeOdKQbLoh8x57ajyWvEMPyjwEyRqeAFCCa1vT8k8PZ6-iMmsQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000887dba","statement":"<h3>Problem</h3>\n<p>\n  You have just heard about a wonderful festival that will last for $$$\\mathbf{D}$$$ days, numbered from $$$1$$$ to $$$\\mathbf{D}$$$.\n  There will be $$$\\mathbf{N}$$$ attractions at the festival. The $$$i$$$-th attraction\n  has a <i>happiness rating</i> of $$$\\mathbf{h_i}$$$ and will be available from day $$$\\mathbf{s_i}$$$ until day $$$\\mathbf{e_i}$$$, inclusive.\n</p><p>\n  You plan to choose one of the days to attend the festival. On that day, you will choose up to $$$\\mathbf{K}$$$\n  attractions to ride. Your <i>total happiness</i> will be the sum of happiness ratings of the\n  attractions you chose to ride.\n</p><p>\n  What is the maximum total happiness you could achieve?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n</p><p>\n  The first line of each test case contains the three integers, $$$\\mathbf{D}$$$, $$$\\mathbf{N}$$$ and $$$\\mathbf{K}$$$.\n  The next $$$\\mathbf{N}$$$ lines describe the attractions. The $$$i$$$-th line contains\n  $$$\\mathbf{h_i}$$$,\n  $$$\\mathbf{s_i}$$$ and\n  $$$\\mathbf{e_i}$$$.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\n  where $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the maximum total happiness you could achieve.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$1 \\le \\mathbf{K} \\le \\mathbf{N}$$$.<br/>\n  $$$1 \\le \\mathbf{s_i} \\le \\mathbf{e_i} \\le \\mathbf{D}$$$, for all $$$i$$$.<br/>\n  $$$1 \\le \\mathbf{h_i} \\le 3 \\times 10^5$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  $$$1 \\le \\mathbf{N} \\le 1000$$$.<br/>\n  $$$1 \\le \\mathbf{D} \\le 1000$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 90 seconds.<br/>\n\n  For at most $$$10$$$ test cases:\n  <ul>\n    <li> $$$1 \\le \\mathbf{N} \\le 3 \\times 10^5$$$. </li>\n    <li> $$$1 \\le \\mathbf{D} \\le 3 \\times 10^5$$$. </li>\n  </ul>\n  <br/>\n  For the remaining cases, $$$1 \\le \\mathbf{N}, \\mathbf{D} \\le 1000$$$. <br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3kxS7_eYXBQOwWjYf7y5EcgsBROv83FLWzl5yu5MEz2URPRRjCas7rfElJI7QbxXon47LYpyYTeiolaA_ib8kmb9GCMZa-6g/festival_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n10 4 2\n800 2 8\n1500 6 9\n200 4 7\n400 3 5\n5 3 3\n400 1 3\n500 5 5\n300 2 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3WRrU_87OCNoHTv9v1p2qlc9VHOdMa73QZN1FJl5aR_teX2ZnSLC_63V2GSrfV1n2CTkzHlYLxTiME9atnn17dP_vBTs7HolE/festival_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2300\nCase #2: 700\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In sample test case 1,\n  the festival lasts $$$\\mathbf{D} = 10$$$ days,\n  there are $$$\\mathbf{N} = 4$$$ attractions, and\n  you can ride up to $$$\\mathbf{K} = 2$$$ attractions.\n</p><p>\n  If you choose to attend the festival on the 6th day, you could ride the first and second\n  attractions for a total happiness of $$$800 + 1500 = 2300$$$. Note that you cannot also ride the\n  third attraction, since you may only ride up to $$$\\mathbf{K} = 2$$$ attractions.\n  This is the maximum total happiness you could achieve, so the answer is $$$2300$$$.\n</p>\n<p>\n  In sample test case 2,\n  the festival lasts $$$\\mathbf{D} = 5$$$ days,\n  there are $$$\\mathbf{N} = 3$$$ attractions, and\n  you can ride up to $$$\\mathbf{K} = 3$$$ attractions.\n</p><p>\n  If you choose to attend the festival on the 3rd day, you could ride the first and third\n  attractions for a total happiness of $$$400 + 300 = 700$$$. This is the maximum total happiness\n  you could achieve, so the answer is $$$700$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":8},{"type":1,"type__str":"VISIBLE","value":10}],"title":"Festival","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\n    Test Set 1\n</h3>\nWe use a brute force strategy by DFS:\n<ol>\n  <li>Pick a room to start. Add it to the path and save the path as visited. If we have $$$\\mathbf{K}$$$ points, increment our paths counter.</li>\n  <li>Pick a room outside the path that keeps our total points under $$$\\mathbf{K}$$$. Check if any coordidor connects the room to another room in the path. If yes, add the new connected room to the path and remove the corridor from the set. If no, try the next room outside the path. Evaluating each room choice requires checking every corridor and takes $$$O(\\mathbf{M})$$$ time.</li>\n  <li>If we are out of corridors or our total points $$$\\ge \\mathbf{K}$$$, we backtrack. Remove the latest room from the path, and try the next available corridor.</li>\n</ol>\n\nIn terms of run time in the worst case, we try each possible ordering of rooms. There are $$$\\mathbf{N}!$$$ orderings. Each ordering has $$$\\mathbf{N}$$$ room \"addition\" steps and each step takes us $$$\\mathbf{M}$$$ time to evaluate (see step 2 above). That gives us $$$O(\\mathbf{N}! \\times \\mathbf{M})$$$\n\n<h3>\n    Test Set 2\n</h3>\nBrute force is not good enough. We approach this problem with dynamic programming. Our strategy will be the following:\n<ol>\n  <li>Find the total magic points of every combination of rooms regardless of whether they can be visited. </li>\n  <li>For each combination of rooms, determine if a room can be visited as a new room. </li>\n  <li>Use dynamic programming to determine which combinations can actually be visited given any single room as a starting point. </li>\n  <li>Filter down to room combinations with point total $$$\\mathbf{K}$$$ that can be visited. </li>\n</ol>\n\n<p>\n  There are $$$2^\\mathbf{N}$$$ different ways to pick combinations of rooms. Let us first assume that it is possible to\n  visit that combination of rooms and calculate the total magic points. Since there are $$$2^\\mathbf{N}$$$ possible\n  combinations, we can express each combination as a number whose binary representation tells us\n  whether we visit that room. For example:\n  <ul>\n    <li>$$$7 = 111$$$ contains rooms $$$1$$$, $$$2$$$, and $$$3$$$</li>\n    <li>$$$4 = 100$$$ contains only room $$$3$$$</li>\n  </ul>\n\n  We can express the total number of magic points for each room combination as a list of length $$$2^\\mathbf{N}$$$ and takes $$$O(2^\\mathbf{N} \\times \\mathbf{N})$$$ time to compute. We can also do it in $$$O(2^\\mathbf{N})$$$ using Sum Over Subset Dp technique.\n</p>\n\n<p>\n  Next, assume we have just visited a combination of rooms, we want to find out if we are able to visit a particular room and add it as a new unique room.\n  <ol>\n    <li>If at least one of the rooms in starting combination is adjacent to the new room. To check this, we can maintain a bitmask of rooms adjacent to each room (adjacency bitmask) and then we can check if the starting combination and adjacency bitmask have a common element (this can be done checking that the <code>AND</code> of starting combination and adjacency bitmask is non zero).</li>\n    <li>We have the correct number of points to break that room's shield (say our destination is room $$$i$$$ and we have $$$P$$$ points, this means $$$\\mathbf{L_i} \\le P \\le \\mathbf{R_i}$$$).</li>\n  </ol>\n\n  We can express this information as a $$$2^\\mathbf{N} \\times \\mathbf{N}$$$ list of lists called canVisit. Let us say we find that we can visit room $$$i$$$ from combination of rooms $$$c$$$. $$$canVisit[c][i] = true$$$. We also allow ourselves to start in any room so $$$canVisit[0][i] = true$$$. This list of lists takes $$$O(2^\\mathbf{N} \\times \\mathbf{N} + \\mathbf{M})$$$ time to compute since checking each of above two steps takes $$$O(1)$$$ time and the computing of adjacency bitmasks takes $$$O(\\mathbf{M})$$$ time because we need to iterate over all the corridors.\n</p>\n\n<p>\n  Now we use dynamic programming. We iterate through all the integers between $$$0$$$ and $$$2^\\mathbf{N}$$$, each integer representing a possible combination of rooms.\n  For a combination $$$x$$$, we iterate through every room already in $$$x$$$. We remove a room and check if it is possible to visit that room ($$$i$$$) from the remaining combination ($$$x'$$$) using the $$$canVisit$$$ array ($$$canVisit[x'][i]$$$).\n  The number of ways to visit combination $$$x$$$ is equal to the sum of all the numbers of ways to visit all possible $$$x'$$$. Since we are iterating from smaller combinations up, we know we only need to iterate once.\n  This will tell us which room combinations can be visited.\n  This takes $$$O(2^\\mathbf{N} \\times \\mathbf{N}+\\mathbf{M})$$$\n</p>\n\n<p>\n  Finally, we pick out all the room combinations that have total of $$$\\mathbf{K}$$$ points. We filter that down to the combinations that we can actually visit and sum all the unique ways to visit that combination. This just takes $$$O(2^\\mathbf{N})$$$ time.\n  Our final run time is $$$O(2^\\mathbf{N} \\times \\mathbf{N}+\\mathbf{M})$$$\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1Oo1ryz58YREP3YdGpFcNX0OrLEwBVOPdz7cOMhtoWR90DpInOULC_BivGXOP3F93Pi7-xJI3M/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000888764","statement":"<h3>Problem</h3>\n<p>\n  Ada lives in a magic country A, and she is studying at Magic University.\n  Today, Ada wants to collect magic points in a special space.\n</p>\n\n<p>\n  The space has $$$\\mathbf{N}$$$ rooms $$$(0, 1, \\dots, \\mathbf{N}-1)$$$. There are $$$\\mathbf{M}$$$ corridors connecting the rooms.\n  A corridor $$$j$$$ connects room $$$\\mathbf{X_j}$$$ and room $$$\\mathbf{Y_j}$$$,\n  meaning you can travel between the two rooms.\n</p>\n\n<p>\n  The $$$i$$$-th room contains $$$\\mathbf{A_i}$$$ magic points and is protected by a magic shield with properties $$$\\mathbf{L_i}$$$ and $$$\\mathbf{R_i}$$$.\n  To enter the $$$i$$$-th room, first you need to get to any room adjacent to the $$$i$$$-th room (i.e. connected to it by a corridor)\n  through rooms with already broken shields.\n\n  Then you have to break the shield to this room, but you can break the shield if and only if\n  you have between $$$\\mathbf{L_i}$$$ and $$$\\mathbf{R_i}$$$ magic points, inclusive.\n  After you break the shield, you will enter the room and automatically collect the $$$\\mathbf{A_i}$$$ magic points assigned to this room.\n  The room will not generate new magic points. The room will also not generate a new shield\n  after it is broken, so you can freely go back to every room with already broken shields\n  regardless of the amount of points you have.\n</p>\n\n<p>\n  Ada starts with $$$0$$$ magic points and her goal is to find a way to collect exactly $$$\\mathbf{K}$$$ magic points. She can start in any room, and end in any room.\n  The room she chooses to start in will automatically have its magic shield broken,\n  and she will automatically collect all the magic points from this room.\n</p>\n\n<p>\n  After inspecting the map of the rooms and corridors, Ada thinks the task is very easy, so she wants to challenge herself with a more difficult task.\n  She wants to know how many unique ways there are to reach the goal. Two ways are different if their unique paths are different.\n  The unique path is the order of rooms in which she broke the shields, e.g.: if you visit the rooms in the order $$$(1, 3, 2, 1, 3, 5, 3, 6)$$$, the unique path is $$$(1, 3, 2, 5, 6)$$$.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.<br/>\n  For each test case, the first line contains three integers $$$\\mathbf{N}$$$, $$$\\mathbf{M}$$$, and $$$\\mathbf{K}$$$: the number of rooms, the numbers of corridors, and the numbers of magic points we want to collect, respectively.<br/>\n  The next $$$\\mathbf{N}$$$ lines contain three integers $$$\\mathbf{L_i}$$$, $$$\\mathbf{R_i}$$$, and $$$\\mathbf{A_i}$$$: The magic shield properties $$$\\mathbf{L_i}$$$ and $$$\\mathbf{R_i}$$$ of room $$$i$$$, and the number of magic points $$$\\mathbf{A_i}$$$, respectively.<br/>\n  The next $$$\\mathbf{M}$$$ lines contain two integers $$$\\mathbf{X_j}$$$ and $$$\\mathbf{Y_j}$$$: the rooms that are connected by corridor $$$j$$$.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the number of ways to collect $$$\\mathbf{K}$$$ magic points.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$0 \\le \\mathbf{M} \\le \\frac{N \\times (N-1)}{2}$$$.<br/>\n  $$$\\mathbf{0} \\le \\mathbf{X_j}, \\mathbf{Y_j} \\le \\mathbf{N-1}$$$.<br/>\n  $$$\\mathbf{X_j} \\neq \\mathbf{Y_j}$$$<br/>\n  Each pair of rooms can be connected by at most one corridor.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 8$$$.<br/>\n$$$1 \\le \\mathbf{K} \\le 100$$$.<br/>\n$$$0 \\le \\mathbf{L_i} \\le \\mathbf{R_i} \\le 50$$$.<br/>\n$$$1 \\le \\mathbf{A_i} \\le 50$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 60 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 15$$$.<br/>\n$$$1 \\le \\mathbf{K} \\le 2 \\times 10^9$$$.<br/>\n$$$0 \\le \\mathbf{L_i} \\le \\mathbf{R_i} \\le 10^9$$$.<br/>\n$$$1 \\le \\mathbf{A_i} \\le 10^9$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Gh3WU3PU3oPHHs2pmY0toCJqg83Vy0LP0UF9qdZTXpRKVDPkfHR7y95UcqFdAhrX7o9SQGAOdfNO2iUJWBy4mm3gE6UULQe3nwis/graph_travel_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n4 3 3\n1 3 1\n1 1 1\n2 4 1\n2 3 1\n0 1\n1 2\n2 3\n4 5 3\n1 3 1\n1 1 1\n2 4 1\n2 3 1\n0 1\n1 2\n2 3\n3 0\n0 2\n4 1 2\n0 4 1\n0 4 1\n0 4 2\n0 4 2\n0 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1SdTE_hx3S8ssk3fk1ozfX239hhFdDzlGHGSPvOTt3EtHyvtZPFTGdDWEiq23DmcWdELApV0mFnyUxQSMjScpcuytJDmxhOuTV1T25/graph_travel_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4\nCase #2: 8\nCase #3: 4\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In the first case, there are $$$4$$$ different ways. They are:\n</p>\n\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1u4iaFxwtfIZ4044mwEVAWfkVaPxcLj_MvutAKr1dC-Dhgo_ccWrNHRS3r1e0I-6Gh-CZar-oBe9624OFivA/sample_1a.png\" alt=\"Visualization for the first case, showing 4 different ways.\">\n\n<p>\n  In the second case, there are $$$8$$$ different ways. They are:\n</p>\n\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Vzvj3mswOh_zKb8hf3pjnLbYTW4Iue1J-Ll46-F4ZutJo7c-BvPRUSCDmAkp9u_XfhLXaq5tjWOHCSDrJ/sample_2.png\" alt=\"Visualization for the second case, showing 8 different ways.\">\n\n<p>\n  In the third case, there are $$$4$$$ different ways. They are:\n</p>\n\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3_Npx3nrGK5qsJnq20JKO_9fG2vhvHAsDAUPusa3foL8Kp7KIAzRn5hkSSjsyRtGJzYhoTmz7BQ2-sNgac/sample_3.png\" alt=\"Visualization for the third case, showing 4 different ways.\">\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":15},{"type":1,"type__str":"VISIBLE","value":21}],"title":"Graph Travel","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n<p>\nSay, we have just one polygon and the point we need to capture (called $$$P$$$\nhenceforth). We need a way to check if that point is inside the polygon or not.\nThis problem is known as <a\n    href=\"https://en.wikipedia.org/wiki/Point_in_polygon\" target=\"_blank\">Point\n    in Polygon</a> and ray casting is one of the standard ways to solve it.\nNow, for the first test set, we can generate all possible simple polygons and\ncheck the minimum perimeter polygon which contains the point. Following steps\nshow how to generate all simple polygons:\n<ol>\n    <li>Generate all distinct permutations from the given set of points (minimum\n        $$$3$$$ points). Treat each permutation as a polygon with points\n        describing consecutive vertices of that polygon.</li>\n    <li>For each polygon, if any two edges intersect each other, discard that\n        polygon.</li>\n    <li>All remaining permutations will describe all possible simple\n        polygons.</li>\n</ol>\n</p>\n\n<p>\n<i>Runtime Analysis:</i> To generate $$$R$$$ distinct permutations from\n$$$\\mathbf{N}$$$ points will take $$$\\mathbf{N}$$$ <a href=\"https://en.wikipedia.org/wiki/Permutation\"\n    target=\"_blank\">permutations</a> $$$R$$$ (called $$$\\mathrm{P}^{\\mathbf{N}}_R$$$)\nand then checking for intersection of any two edges will take $$$(R - 1) \\times\n(R - 2)$$$. Then for each polygon it will take $$$(R - 1)$$$ checks for ray\ncasting. So, total runtime will be: <br />\n$$$O(\\sum_{R=3}^{\\mathbf{N}}\\mathrm{P}^{\\mathbf{N}}_R \\times (R - 1) \\times (R - 2) \\times (R\n- 1) = O(\\sum_{R=3}^{\\mathbf{N}}\\mathrm{P}^{\\mathbf{N}}_R \\times R^3) = O(\\mathbf{N}! \\times\n\\mathbf{N}^3)$$$.<br />\nNote: This might look like it will TLE but most of the checks would not be\nperformed. We can improve this runtime, though, using <a\n    href=\"https://en.wikipedia.org/wiki/Convex_hull\" target=\"_blank\">convex\n    hull</a>. A convex hull of a simple polygon will always include the initial\narea of a simple polygon and will have smaller or equal perimeter. The runtime\nin that case will be:<br />\n$$$O(\\sum_{R=3}^{\\mathbf{N}}\\mathrm{C}^{\\mathbf{N}}_R \\times (R \\times log(R)) \\times (R - 1))\n= O(2^\\mathbf{N} \\times \\mathbf{N}^2 \\times log(\\mathbf{N}))$$$\n</p>\n\n<h3>Test Set 2</h3>\n<p>\nNotice that if a point is inside a polygon with more than $$$4$$$ points, we can\nreduce it to a triangle ($$$ABC$$$ in the image below) or a quadrilateral\n($$$ABCD$$$ in the image below) which contains the point.\n</p>\n\n<p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2Yt1CT9Y6_Z6JeyqzQAr7KbbDKF3fdcpAt-UXMiHIJFNl23nWyPc-lCPmunxK-Z155-xf8mxVovBnK0ZFR9nXVFMs1I69X/point_in_triangle.jpg\" alt=\"P inside triangle\"/>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1O7gtUaV3ZnMlMJi9xOS6Yj8wECClv3_UEUz65g3fSsd6ljt0CPj_ASxlskA6wN8oxFrATxJIlAr5ITgMozkF3ZKZt9koScTiBwic/point_in_quadrilateral.jpg\" alt=\"P on quadrilateral diagonal\"/>\n</p>\n\n<p>\nNote: It can be some other triangle/quadrilateral in the above polygon, the\nimage is just for illustration.\n</p>\n\n<p>\nSo, we can generate all possible quadrilaterals and triangles and then check the\nminimum perimeter polygon which contains the point.\n</p>\n\n<p>\n<i>Runtime Analysis:</i> We can generate all sets of points with set size being\n$$$4$$$ (for quadrilateral) and $$$3$$$ (for triangle) from the given set of\npoints taking $$$O(\\mathbf{N}^4 + \\mathbf{N}^3) = O(\\mathbf{N}^4)$$$. Checking \"Point in Polygon\" in\nthis case will be constant time.\n</p>\n\n<h3>Test Set 3</h3>\n<p>\nThe observation required for this set is that if the point $$$P$$$ is on one of\nthe diagonals in the quadrilateral, it must be at the intersection of the\ndiagonals. If it is not, then we can reduce the quadrilateral to a triangle\nwith a lesser perimeter (as in the following diagram, quadrilateral $$$ABCD$$$\ncan be reduced to triangle $$$ABC$$$).\n</p>\n\n<p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2ymLSjoXy1fAYUsUH2iN8ffit1y-B_OzCkur4wFiYyHJZMi8V0ZswwQvXqEJQ_4kzq2w6InXN6Mv2cbQa7Bn7wxMrPvbo5JiVCEA/point_on_one_diagonal.jpg\" alt=\"P only on one quadrilateral diagonal\"/>\n</p>\n\n<p>\nAnother observation is that among the points collinear to $$$P$$$ only one point\nclosest to $$$P$$$ on both side matters. Other points will always create\nquadrilateral with larger perimeter. So, all collinear segments of interest are\nunique. <br />\nSo, for this set we can check all the triangles first. Then to generate\nquadrilaterals, we can find the diagonals as:\n<ol>\n    <li>Find polar angles of all points, treating $$$P$$$ as origin.</li>\n    <li>Group all points with same polar angles in one equivalence class.</li>\n    <li>Choose the point closest to $$$P$$$ in each equivalence class and\n        discard rest of the points.</li>\n    <li>Now, generate line segments from the remaining points. For each polar\n        angle between $$$[0, \\pi)$$$ radians (called $$$\\theta$$$), check if we\n        have a point at $$$\\theta + \\pi$$$. These two points make one line\n        segment (note that $$$P$$$ lies on this segment).</li>\n    <li>These line segments are treated as diagonals of the quadrilateral.</li>\n</ol>\n</p>\n\n<p>\n<i>Runtime Analysis:</i> The triangle case remains the same, taking\n$$$O(\\mathbf{N}^3)$$$. For quadrilateral, we will generate at most $$$\\mathbf{N} / 2$$$ sets\nof points in $$$O(\\mathbf{N})$$$ and then we can check all combinations of these\nsegments for possible quadrilateral candidates in $$$O((\\mathbf{N}/2)^2)$$$. So, total\nruntime will be:<br />\n$$$O(\\mathbf{N}^3 + \\mathbf{N} + (\\mathbf{N}/2)^2) = O(\\mathbf{N}^3)$$$\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2Rf_TqtU8nmq2dug4Q1H_2SXYcHkNy9gxNthPPqn3FastA6Mmy4ttmkHV7wJnkIHqT_Irfdj7-/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000888d45","statement":"<h3>Problem</h3>\n<p>\n  John and Ada are sitting on the grass above a small hill. It is midnight and the sky is full of\n  stars. The sky looks like a 2D plane from so far away and the stars look like points on that\n  plane. Ada loves blue stars and suddenly she notices one, while all the other stars in the\n  sky are white. She loves the blue star so much that she wants to trap it. And she asks John for\n  help.\n</p>\n\n<p>\n  Ada will tell John the position of the blue star and he has to trap it. To trap it, John has\n  to draw a polygon in the sky with his buster sword, so that the blue star is strictly inside the\n  polygon (not on the border of the polygon) and the polygon has the smallest possible perimeter.\n  The vertices of the polygon must be the white stars.\n</p>\n\n<p>\n  Even though John is super awesome, he needs your help. Given the positions of the white stars\n  and the blue star, you need to find out whether John can trap the blue star and if he can,\n  also find the minimum length of the perimeter of the polygon he will use.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.<br/>\n  For each test case, the first line contains an integer $$$\\mathbf{N}$$$, it denotes the number of white stars\n  in the sky.<br/>\n  The next $$$\\mathbf{N}$$$ lines will each contain two integers, $$$\\mathbf{X_i}$$$ and $$$\\mathbf{Y_i}$$$. The\n  $$$i$$$-th pair of integers denotes the <i>x</i> and <i>y</i> coordinates of the $$$i$$$-th star\n  in the sky.<br/>\n  After these $$$\\mathbf{N}$$$ lines, there will be one last line, which will contain two integers,\n  $$$\\mathbf{X_s}$$$ and $$$\\mathbf{Y_s}$$$, which denote the <i>x</i> and <i>y</i> coordinates of the\n  blue star.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\n  where $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the minimum length of the\n  perimeter of the polygon drawn to trap the shooting star. If it is impossible for John to draw a\n  polygon that traps the star, then $$$y$$$ should be <code>IMPOSSIBLE</code>.\n</p>\n\n<p>\n    $$$y$$$ will be considered correct if it is within an absolute or relative error of\n    $$$10^{-6}$$$ of the correct answer. See the\n    <a href=\"https://codingcompetitions.withgoogle.com/kickstart/faq#how-does-kick-start-handle-real-numbers\" target=\"_blank\">\n    FAQ</a> for an explanation of what that means, and what formats of real numbers we accept.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$0 \\le \\mathbf{X_i}, \\mathbf{Y_i} \\le 10^{6}$$$, for all $$$i$$$.<br/>\n  $$$0 \\le \\mathbf{X_s}, \\mathbf{Y_s} \\le 10^{6}$$$.<br/>\n\n  No two stars (including the blue star) will have the same position.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 5 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 10$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 5 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 45$$$.<br/>\n</p>\n\n<h4>Test Set 3</h4>\n<p>\nTime limit: 50 seconds.<br/>\n\nFor at most 10 test cases:<br/>\n$$$1 \\le \\mathbf{N} \\le 300$$$.<br/>\n<br/>\nFor the remaining test cases:<br/>\n$$$1 \\le \\mathbf{N} \\le 60$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1G3D-5XNKlniQxS-4ufr7kBijji0r9w6BbLqpvrZ3Dnz1B9D0RKuIJSn5vR2j5P-WOqXVHQEDDpswk6QavN50-4oOcE5RmpcY50teV/star_trappers_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2\n0 0\n5 0\n2 2\n3\n0 0\n5 0\n0 5\n1 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1C34lVwYZcltGZMNBOp77Q7WHnUEQRhSNiEt1SXxa2Y6idvm7aPpFQ0NdEbtbcjxYuGGy_X7QTes86-Ju44KpKDbLOA9Z1txczeIqiSw/star_trappers_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: IMPOSSIBLE\nCase #2: 17.071068\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p> In the first test case we have only two white stars, so we cannot draw any polygons.</p>\n\n<p>In the second test case we have three white stars, so we can draw only one polygon (a triangle), as shown in the picture below.\nIt turns out that we are able to catch the blue star in this polygon. The  length of the perimeter of this polygon is $$$5 + 5 + 5\\sqrt{2} \\approx 17.071068$$$.</p>\n\n<p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0SfFnc05lcc3_tkkrrDqs_Uf22p74MXZ3WCX4eSPpwjbHclh7zJz1ko6lBMed2qxDZfNVfDK2lK82coA/sample.png\" alt=\"Visualization for the second test case.\"/>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":11},{"type":1,"type__str":"VISIBLE","value":12},{"type":1,"type__str":"VISIBLE","value":12}],"title":"Star Trappers","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000435bae","type":1,"type__str":"SPECTATOR"},"title":"Round F 2021"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
