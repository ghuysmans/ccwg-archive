{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1614288600000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"00000000004361e2","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1614274200000,"tasks":[{"id":"0000000000c617e4","statement":"<!--\n  All styles must be keyed by id/class because inline styles are global.\n  Prefix them with 'hashcode-' to avoid name collisions.\n -->\n<style>\n  .hashcode h3 {\n    font-weight: 600 !important;\n    font-size: 1.5rem !important;\n  }\n\n  .hashcode h4 {\n    font-weight: 600 !important;\n    font-size: 1.25rem !important;\n  }\n\n  .hashcode h5 {\n    margin-top: 0.5rem;\n    font-weight: 600 !important;\n    font-size: 1.15rem !important;\n  }\n\n  .hashcode-warning-box {\n    outline: 1px solid black !important;\n    margin-top: 10px;\n    padding: 5px 5px 5px 5px;\n    background-color: lightblue;\n  }\n\n  .hashcode-example-box {\n    outline: 1px solid black !important;\n    margin-top: 10px;\n    padding: 5px 5px 5px 5px;\n  }\n\n  .hashcode ul {\n    margin-left: 10px;\n  }\n\n  .hashcode ol {\n    margin-left: 10px;\n  }\n\n  .hashcode-no-style-list li {\n    list-style-type: none;\n  }\n\n  .hashcode-cross-style-list li {\n    list-style-type: \"❌\";\n  }\n\n  .hashcode-warning-style-list li {\n    list-style-type: \"⚠️\";\n  }\n\n  .hashcode-file td {\n    vertical-align: top;\n  }\n\n  .hashcode-file code {\n    overflow: scroll;\n    white-space: nowrap;\n  }\n\n  .hashcode img {\n    display: block;\n    margin: 1rem auto;\n\n    min-width: 150px;\n  }\n\n  img.hashcode-big-img {\n    max-width: 800px;\n    width: 100%;\n  }\n\n  img.hashcode-medium-img {\n    max-width: 600px;\n    width: 80%;\n  }\n\n  img.hashcode-small-img {\n    max-width: 300px;\n    width: 60%;\n  }\n</style>\n\n<div class=\"hashcode\">\n  <h3>Introduction</h3>\n  <p>\n    The world's first traffic light dates back to 1868. It was installed in\n    London to control traffic for... horse-drawn vehicles! Today, traffic lights\n    can be found at street intersections in almost every city in the world,\n    making it safer for vehicles to go through them.\n  </p>\n  <p>\n    Traffic lights have at least two states, and use one color (usually red) to\n    signal \"stop\", and another (usually green) to signal that cars can proceed\n    through. The very first traffic lights were manually controlled. Nowadays\n    they are automatic, meaning that they have to be carefully designed and\n    timed in order to optimize the overall travel time for all the participants\n    in traffic.\n  </p>\n\n  <h3>Task</h3>\n  <p>\n    Given the description of a city plan and planned paths for all cars in that\n    city, optimize the schedule of traffic lights to minimize the total amount\n    of time spent in traffic, and help as many cars as possible reach their\n    destination before a given deadline.\n  </p>\n\n  <h3>Problem description</h3>\n  <h4>City plan</h4>\n  <p>\n    The city plan consists of one-way streets and intersections. Each street:\n  </p>\n  <ul>\n    <li>is identified by a unique name,</li>\n\n    <li>leads from one intersection to another,</li>\n\n    <li>\n      does not contain any intersections in between (if two streets need to\n      cross outside an intersection, a bridge or tunnel is used),\n    </li>\n\n    <li>\n      has a fixed amount of time $$$L$$$ it takes a car to get from the\n      beginning of the street to the end. If it takes $$$L$$$ seconds to drive\n      through a street and a car enters it at time $$$T$$$ it will arrive at the\n      end of the street precisely at $$$T+L$$$, independently of how many cars\n      are on the street.\n    </li>\n  </ul>\n\n  <img\n    alt=\"A city plan with 4 intersections (see description below).\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1gNiV35FA5YuMyESHy2LnP2LZMQEHlN89vv3nLFocjXNWebshsMIcEBhpCmUvaCXGAeoTa5Q/figure1.png\"\n    title=\"A city plan with 4 intersections.\"\n    class=\"hashcode-medium-img\"\n  />\n\n  <p>\n    <b>Figure 1.</b> A city plan with 4 intersections (0, 1, 2, and 3) and 7\n    streets (a, b, ... , g-street). Intersections 0 and 2 are directly connected\n    both ways through a-street and b-street. c-street uses a bridge over\n    a-street and b-street and does not intersect with those two streets.\n  </p>\n\n  <p>\n    Note that while the streets are one-way, it is still possible to have two\n    one-way streets connecting two intersections in opposite directions (see\n    intersections 0 and 2 and a-street and b-street in Figure 1). However, there\n    will never be two streets connecting two intersections in the same\n    direction.\n  </p>\n\n  <p>Each intersection:</p>\n  <ul>\n    <li>has a unique integer ID (for example 0, 1, 2 ...),</li>\n    <li>\n      has at least one street that comes into it, and at least one street coming\n      out of it.\n    </li>\n  </ul>\n\n  <h4>Traffic lights</h4>\n\n  <p>\n    There is a traffic light at the end of every street (just before the\n    intersection). Each traffic light has two states: a green light indicates\n    that the cars from that street can cross the intersection and head towards\n    any other street, while a red light indicates that the cars from that street\n    need to stop. At most one traffic light will be green at each intersection\n    at any given time. While the light is green for an incoming street, only\n    cars from this street will be allowed to enter the intersection (and move to\n    any outcoming street), all other cars have to wait.\n  </p>\n  <h5>Queuing up</h5>\n\n  <p>\n    When the light at the end of a street is red, arriving cars queue up waiting\n    for the light to turn green.\n    <b\n      >When the light is green, one car can cross the intersection every\n      second.</b\n    >\n    This means that if a green light for a given street lasts for $$$T_i$$$\n    seconds then only the first $$$T_i$$$ cars from that street will continue\n    their travel (see Figure 2). Others will need to wait for the following\n    green light.\n  </p>\n\n  <img\n    alt=\"Example of cars queuing up (see description below)\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U29A6SHOC6PAJpEdnYNgtT8rXRVDmH4zOzi0s0iCMOqNDw_YYRzx8n1xfdHF1ax0LpDCf1Onacxu2I/figure2-abc.png\"\n    title=\"Example of cars queuing up\"\n    class=\"hashcode-big-img\"\n  />\n\n  <img\n    alt=\"Example of cars queuing up (see description below)\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U14HCzgVE3YYSJ-kLYJCoIUEA6c1QvjD1ZBk0gnVlD-sZmQyWgfI6Akol0tzPjLn8pcSeBj5tVAxag/figure2-def.png\"\n    title=\"Example of cars queuing up\"\n    class=\"hashcode-big-img\"\n  />\n\n  <p>\n    <b>Figure 2.</b> Consider an intersection with two incoming streets\n    (a-street with 3 waiting cars and b-street with 2 waiting cars), and two\n    outgoing streets (c-street and d-street). There are two traffic lights, one\n    at the end of a-street with $$$T_1=2$$$ and one at the end of the b-street\n    with $$$T_2=3$$$. Initially, the traffic light of a-street is green, and the\n    first (yellow) car starts moving. At $$$T=1$$$, the next (green) car from\n    a-street starts moving. At $$$T=2$$$, a-street has a red light, and the last\n    (red) car waiting there needs to stop. At the same time, the traffic light\n    of b-street turns green, and the first (purple) car queued there starts\n    moving. At $$$T=3$$$ and $$$T=4$$$, the two (purple and blue) cars that were\n    initially on b-street have already passed the traffic light and continued\n    their path. At $$$T = 5$$$, the light at a-street turns back to green and\n    the (red) car that was waiting there can now move.\n  </p>\n\n  <h5>Schedule</h5>\n\n  <p>\n    For each intersection we can set a traffic light schedule. The traffic light\n    schedule determines the order and duration of green light for the incoming\n    streets of the intersection and repeats itself until the end of the\n    simulation. The schedule is a list of pairs: incoming street and duration.\n    <b>Each street can appear at most once in the schedule.</b> The schedule can\n    ignore some of the incoming streets – those will never get a green light.\n  </p>\n  <p>\n    The traffic light schedule is controlled by your submissions. You don't have\n    to specify the schedule of all traffic lights.\n    <b>By default all lights on all intersections are red </b>(yes, cars stuck\n    there will have to wait until the end of simulation).\n  </p>\n\n  <h5>Example traffic light schedules</h5>\n\n  <p>\n    In the following example, an intersection has 3 streets leading to it (a, b,\n    and c-street), and one leaving the intersection (d-street). We consider\n    three different example schedules for these traffic lights:\n  </p>\n\n  <p><b>No traffic light schedule (default).</b></p>\n\n  <img\n    alt=\"Example of intersection with no traffic light schedule (see description below)\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1KaZIbtFFRR8nBtkNg0HyfYQ7-42PC0F487GGS1pgLuU3GfsqKkYLEZ4lkur1T46wARiIzgcnv/figure4-a.png\"\n    title=\"Example of intersection with no traffic light schedule\"\n    class=\"hashcode-small-img\"\n  />\n\n  <p>\n    <strong>Figure 4 (a).</strong> If no traffic light schedule is set for an\n    intersection, all of the traffic lights remain red throughout the\n    simulation. Any cars that are scheduled to pass through a, b, or c-street\n    will be blocked and not reach their destination.\n  </p>\n\n  <p><b>Schedule that covers only one street.</b></p>\n\n  <img\n    alt=\"Example of intersection with traffic light schedule that only covers one street (see description below)\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1nPg5IqN2LZjDExfrswI53ixxojWcKHkLY7m5kvlR99npwgrnoGRlzgpX3WlH3Ge5avfCNUne8/figure4-b.png\"\n    title=\"Example of intersection with traffic light schedule that only covers one street\"\n    class=\"hashcode-small-img\"\n  />\n\n  <p>\n    <strong>Figure 4 (b). </strong>In this example the traffic light schedule\n    covers only one incoming street (b-street). In this case b-street always has\n    a green light. Αny cars coming from b-street will always go through the\n    intersection directly, while any cars scheduled to pass through either\n    a-street or c-street will be blocked and not reach their destination.\n  </p>\n\n  <p><b>Schedule that covers all streets.</b></p>\n\n  <img\n    alt=\"Example of intersection with traffic light schedule that covers all streets (see description below)\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2RrA4GIYyRCgkbha__PS3h8JoZo77OtRLP81KWKG08waCuUrjcxIKvvSIbqZPyJSXZF6HOWYti/figure4-c.png\"\n    title=\"Example of intersection with traffic light schedule that covers all streets\"\n    class=\"hashcode-big-img\"\n  />\n\n  <p>\n    <strong>Figure 4 (c). </strong>In this example, the traffic light schedule\n    covers all incoming streets (c-street, then a-street, then b-street). For\n    each street we can define a different\n    <strong\n      ><code>T<sub>i</sub></code></strong\n    >, meaning different duration during which that traffic light remains green.\n  </p>\n\n  <h4>Cars</h4>\n\n  <p>\n    Each car is described by the path (a sequence of streets) it is going to\n    drive through. The paths are defined by the input datasets and can't be\n    altered. In the input datasets we guarantee that each car can go through a\n    single intersection at most once.\n  </p>\n  <p>\n    Initially, all cars start <b>at the end</b> of the first street in their\n    path, waiting for the green light (in case the traffic light is red), or\n    ready to move (if it's green). If two cars start at the end of the same\n    street, the car listed first in the input file goes first. Each car then\n    follows a given path, while obeying the traffic lights, and needs to reach\n    the end of the last street in that path.\n  </p>\n  <p>\n    Cars are queued up at the end of each street. The first car in the queue can\n    cross the intersection immediately after the light turns green. There is no\n    delay while a car passes through an intersection. Cars after that cross the\n    intersection one after another, <b>one car every second</b>.\n  </p>\n  <p>\n    When a car enters the last street of its path, it completes its drive until\n    the end of the street and then is\n    <b>immediately removed from it</b>. This means that the car does not queue\n    up at the end of the last street of its path and does not enter the\n    intersection at the end of it.\n  </p>\n\n  <img\n    alt=\"Example of cars moving through a street (see description below)\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1TffdncARAqCX0SJm9XhuRQdd_6z6KjhQSdPQ8SZxz0JXV--bxnlOsYg_jt6c604ATzXcgEA/figure3.png\"\n    title=\"Example of cars moving through a street\"\n    class=\"hashcode-medium-img\"\n  />\n\n  <p>\n    <b>Figure 3.</b> This figure shows the state of three cars at exactly\n    $$$T$$$ seconds, with the simulation starting at $$$T=0$$$ and ending at\n    $$$T=5$$$. The street has $$$L=3$$$, meaning that any car needs 3 seconds to\n    go from its beginning to the end. The light turns green on the left\n    intersection at $$$T=1$$$ and turns red again 2 seconds later. The cars are\n    queuing up at the end of the street, with yellow being the first one. At\n    $$$T=1$$$, the <strong>first (yellow)</strong>\n    <strong>car</strong> immediately starts moving and reaches the end of the\n    street 3 seconds later, at $$$T=4$$$. The\n    <strong>second (red) car</strong> has to wait 1 second before it starts\n    moving and arrives at the end of the street 3 seconds later, at $$$T=5$$$.\n    The <strong>third (purple) car</strong> did not have enough time to enter\n    the street, as the light already turned red. Note that this figure only\n    shows two streets for simplicity: when a traffic light is shown to be red,\n    this means that another one in the same intersection has turned green.\n  </p>\n\n  <h3>Input data set</h3>\n\n  \n  <a name=\"inputDataDownloadBox\"></a>\n  <div class=\"test-data-download-wrapper\" style=\"min-width: 100%;\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Input Data</div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1KS-Z2wiS7k_8JTKr7t4bLDK9zStmL89N35HlC5Y24wp06xj2iD8DxRGq7RvHouk2aP_HFXppucQ/input_data.zip?dl=1\" target=\"_blank\">\n        <span class=\"material-icons\" style=\"vertical-align: middle;\">save_alt</span>\n        <span style=\"vertical-align: middle;\">Full input (zipped)</span>\n      </a>\n      <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3_hkZvCk0gEH4-F_1zm5qwBKfQ9VRgI_iE2HsrORSunOERmbwoXttf2pUX8VnoXDpk3e149iVHFr4CLqab/a_an_example.in.txt?dl=1\" target=\"_blank\">\n        <span class=\"material-icons\" style=\"vertical-align: middle;\">save_alt</span>\n        <span style=\"vertical-align: middle;\">A – An example</span>\n      </a>\n      <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2UmAFMwHk_0ko91AK8Ezj48LQ1oKWZ1KCf2wJUX2GFtkwBr845nQrX8ziVqrG6mKrP_MDSOa8hfu8sc_b38xE/b_by_the_ocean.in.txt?dl=1\" target=\"_blank\">\n        <span class=\"material-icons\" style=\"vertical-align: middle;\">save_alt</span>\n        <span style=\"vertical-align: middle;\">B – By the ocean</span>\n      </a>\n      <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U18Lx1a-L7aSYGirVIaHHJLakkQddNJJnFzmzsabAzHByufPMAF9UyEqhlXM4VL4vqjjSi5WhuFEuyltBs/c_checkmate.in.txt?dl=1\" target=\"_blank\">\n        <span class=\"material-icons\" style=\"vertical-align: middle;\">save_alt</span>\n        <span style=\"vertical-align: middle;\">C – Checkmate</span>\n      </a>\n      <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3rWzg5q7sdtIj36JKbl5kzGRAYuDHt82xoJYUpNCq1DDL3V9TkojOin5d8j7D7S4AqNy7HXYS2KAIpPsYjTobS/d_daily_commute.in.txt?dl=1\" target=\"_blank\">\n        <span class=\"material-icons\" style=\"vertical-align: middle;\">save_alt</span>\n        <span style=\"vertical-align: middle;\">D – Daily commute</span>\n      </a>\n      <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3aMo1oUX6izBm9ade0NQ9gIqTf2zJKDxWog12Git3WIsRPtc5kMqsyYe1rr2oVK3h9hdvyGIuvS-Q/e_etoile.in.txt?dl=1\" target=\"_blank\">\n        <span class=\"material-icons\" style=\"vertical-align: middle;\">save_alt</span>\n        <span style=\"vertical-align: middle;\">E – Etoile</span>\n      </a>\n      <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3TQ58weFBCC3Zjcnj7ITb--1mi8tFXBAC30yuQU6-U8MIW6Qp3P9XVbqG0I2CwiLABCwwyTKq1ssTGelXAqwajfg/f_forever_jammed.in.txt?dl=1\" target=\"_blank\">\n        <span class=\"material-icons\" style=\"vertical-align: middle;\">save_alt</span>\n        <span style=\"vertical-align: middle;\">F – Forever jammed</span>\n      </a>\n    </div>\n  </div>\n\n\n  <h4>File format</h4>\n  <p>\n    Each input data set is provided in a plain text file. The file contains only\n    ASCII characters with lines ending with a single '\\n' character (also called\n    “UNIX-­style” line endings). When multiple numbers are given in one line,\n    they are separated by a single space between each two numbers.\n  </p>\n\n  <p>The first line contains five numbers:</p>\n  <ul>\n    <li>\n      an integer $$$D$$$ ($$$1 \\leq D \\leq 10^4$$$) - the duration of the\n      simulation, in seconds,\n    </li>\n\n    <li>\n      an integer $$$I$$$ ($$$2 \\leq I \\leq 10^5$$$) - the number of\n      intersections (with IDs from 0 to $$$I-1$$$),\n    </li>\n\n    <li>\n      an integer $$$S$$$ ($$$2 \\leq S \\leq 10^5$$$) - the number of streets,\n    </li>\n\n    <li>an integer $$$V$$$ ($$$1 \\leq V \\leq 10^3$$$) - the number of cars,</li>\n\n    <li>\n      an integer $$$F$$$ ($$$1 \\leq F \\leq 10^3$$$) - the bonus points for each\n      car that reaches its destination before time $$$D$$$.\n    </li>\n  </ul>\n\n  <p>\n    The next $$$S$$$ lines contain descriptions of streets. Each line contains:\n  </p>\n  <ul>\n    <li>\n      two integers $$$B$$$ ($$$0\\leq B \\lt I$$$) and $$$E$$$ ($$$0 \\leq E \\lt\n      I$$$) - the intersections at the start and the end of the street,\n      respectively,\n    </li>\n\n    <li>\n      the street name (a string consisting of between 3 and 30 lowercase ASCII\n      characters a-z and the character -),\n    </li>\n\n    <li>\n      an integer $$$L$$$ ($$$1 \\leq L \\leq D$$$) - the time it takes a car to\n      get from the beginning to the end of that street.\n    </li>\n  </ul>\n\n  <p>\n    The next $$$V$$$ lines describe the paths of each car. Each line contains:\n  </p>\n  <ul>\n    <li>\n      an integer $$$P$$$ ($$$2 \\leq P \\leq 10^3$$$) - the number of streets that\n      the car wants to travel,\n    </li>\n\n    <li>\n      followed by $$$P$$$ names of the streets:\n      <b>The car starts at the end of the first street</b> (i.e. it waits for\n      the green light to move to the next street) and follows the path until the\n      end of the last street. The path of a car is always valid, i.e. the\n      streets will be connected by intersections.\n    </li>\n  </ul>\n\n  <h4>Example</h4>\n\n  <table class=\"hashcode-example-box hashcode-file\">\n    <tr>\n      <td>Input file</td>\n      <td>Description</td>\n    </tr>\n    <tr>\n      <td>\n        <code>\n          6 4 5 2 1000<br />\n          2 0 rue-de-londres 1<br />\n          0 1 rue-d-amsterdam 1<br />\n          3 1 rue-d-athenes 1<br />\n          2 3 rue-de-rome 2<br />\n          1 2 rue-de-moscou 3<br />\n          4 rue-de-londres rue-d-amsterdam rue-de-moscou rue-de-rome<br />\n          3 rue-d-athenes rue-de-moscou rue-de-londres\n        </code>\n      </td>\n\n      <td>\n        <code>\n          6 seconds, 4 intersections, 5 streets, 2 cars, 1000 points for\n          reaching destination on time.<br />\n          Street rue-de-londres starts at intersection 2, ends at 0, and has\n          L=1.<br />\n          Street rue-d-amsterdam starts at intersection 0, ends at 1 and has\n          L=1.<br />\n          Street rue-d-athenes starts at intersection 3, ends at 1 and has\n          L=1.<br />\n          Street rue-de-rome starts at intersection 2, ends at 3 and has L=2.<br />\n          Street rue-de-moscou starts at intersection 1, ends at 2, and has\n          L=3.<br />\n          The first car starts at the end of rue-de-londres and then follows the\n          given path.<br />\n          The second car starts at the end of rue-d-athenes and then follows the\n          given path.\n        </code>\n      </td>\n    </tr>\n  </table>\n\n  <img\n    alt=\"Streets and intersections described by the example input file (see above)\"\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2YJ-cWP0kKueiSOAe0dqFDMZIwhTD8ipYK7Qzn1vTNuMC1XrjSZihMMKkl6-irTilxVo9-Yw/figure5.png\"\n    title=\"Streets and intersections described by the example input file\"\n    class=\"hashcode-small-img\"\n  />\n  <p>\n    <b>Figure 5.</b> The streets and intersections, as given by the example\n    input data set, as well as the two cars at their initial positions.\n  </p>\n\n  <h3>Submissions</h3>\n\n  <p>\n    Your submission describes the traffic light schedules you want to set for\n    specific intersections.\n  </p>\n\n  <h4>File format</h4>\n\n  <p>\n    The first line must contain a single integer $$$A$$$ ($$$0 \\leq A \\leq\n    I$$$), the number of intersections for which you specify the schedule.\n  </p>\n\n  <p>\n    Then, the submission file must describe the intersection schedules, in any\n    order. Each schedule must be described by multiple lines:\n  </p>\n  <ul>\n    <li>\n      the first line containing a single integer $$$i$$$ ($$$0 \\leq i \\lt I$$$)\n      – the ID of the intersection,\n    </li>\n\n    <li>\n      the second line containing a single integer $$$E_i$$$ ($$$0 \\lt E_i$$$) –\n      the number of incoming streets (of the intersection $$$i$$$) covered by\n      this schedule,\n    </li>\n\n    <li>\n      $$$E_i$$$ lines describing the order and duration of green lights. Each of\n      those lines must contain (separated by a single space):\n      <ul>\n        <li>the street name,</li>\n\n        <li>\n          an integer $$$T$$$ ($$$1 \\leq T \\leq D$$$) indicating for how long\n          each street will have a green light.\n        </li>\n      </ul>\n    </li>\n  </ul>\n  <p>\n    Each intersection can only be listed once in the submission file. And each\n    street name can only be listed once per schedule. If the street name is not\n    present in intersection configuration it means its traffic light is always\n    red. If an intersection configuration is not present in the submission file\n    then all of its traffic lights are always red.\n  </p>\n  <h4>Example</h4>\n\n  <table class=\"hashcode-example-box hashcode-file\">\n    <tr>\n      <td>Submission file</td>\n      <td>Description</td>\n    </tr>\n    <tr>\n      <td>\n        <code>\n          3<br />\n          1<br />\n          2<br />\n          rue-d-athenes 2<br />\n          rue-d-amsterdam 1<br />\n          0<br />\n          1<br />\n          rue-de-londres 2<br />\n          2<br />\n          1<br />\n          rue-de-moscou 1\n        </code>\n      </td>\n\n      <td>\n        <code>\n          There are 3 intersections with traffic light schedules:<br />\n          On intersection 1 the traffic lights are green for<br />\n          2 different incoming streets, namely<br />\n          rue-d-athenes for 2 seconds, then green for<br />\n          rue-d-amsterdam for 1 second, then again rue-d-athenes.<br />\n          On intersection 0 the traffic lights are green for<br />\n          1 incoming street only, namely<br />\n          rue-de-londres for 2 seconds per cycle (it's always green for\n          rue-de-londres).<br />\n          On intersection 2 the traffic lights are green for<br />\n          1 incoming street only, namely<br />\n          rue-de-moscou for 1 second per cycle (it's always green for\n          rue-de-moscou).\n        </code>\n      </td>\n    </tr>\n  </table>\n\n  <h3>Scoring</h3>\n\n  <p>\n    A score is awarded for each car that finishes its path before the end of the\n    simulation. For a car that finishes its path at time $$$T$$$, the awarded\n    score is $$$F$$$ points (fixed award for finishing the path) and\n    additionally $$$D - T$$$ points. (One point for each second left when the\n    car finished the path.)\n  </p>\n\n  <p>In other words: if a car finishes at time $$$T$$$ it scores</p>\n\n  <ul>\n    <li>$$$F + (D – T)$$$ points if $$$T ≤ D$$$,</li>\n\n    <li>or $$$0$$$ points otherwise.</li>\n  </ul>\n  <p>The score for the solution is the sum of scores for all cars.</p>\n  <h4>Example</h4>\n\n  <p>For instance, in the example above, the first car:</p>\n  <ul>\n    <li>\n      $$$T = 0$$$: crosses immediately intersection <b>0</b>, as the traffic\n      light there is always green,\n    </li>\n\n    <li>\n      $$$T = 1$$$: one second later, it has gone through\n      <b>rue-d-amsterdam</b>. However, the traffic light is <b>red</b> (as for\n      intersection <b>1</b>, the submission has set the duration for\n      <b>rue-d-athenes</b>'s light to be green for 2 seconds),\n    </li>\n\n    <li>\n      $$$T = 2$$$: the car now crosses the intersection and continues to\n      <b>rue-de- moscou</b>,\n    </li>\n\n    <li>\n      $$$T = 5$$$: the car has reached the end of\n      <b>rue-de-moscou</b>, finds a <b>green</b> light at intersection <b>2</b>,\n      crosses it<b> </b>and continues to <b>rue-de-rome</b>.\n    </li>\n  </ul>\n  <p>\n    This first car would have reached the end of <b>rue-de-rome</b> at $$$T =\n    7$$$, but this is past the deadline of the run (defined in the input data\n    set). Meaning that <b>0 points</b> are assigned to this car.\n  </p>\n  <p>The second car:</p>\n  <ul>\n    <li>\n      $$$T = 0$$$: finds a green light at intersection\n      <b>1</b> and continues to<b> rue-de-moscou</b>,\n    </li>\n\n    <li>\n      $$$T = 3$$$: reaches the end of\n      <b>rue-de-moscou</b>, finds a green light at intersection <b>2</b> and no\n      cars waiting, so it immediately crosses the intersection and heads towards\n      <b>rue-de-londres</b>,\n    </li>\n\n    <li>\n      $$$T = 4$$$: the car reaches the end of\n      <b>rue-de-londres,</b> which is its destination.\n    </li>\n  </ul>\n  <p>\n    So the second car finishes before the deadline, and gets a score of $$$1000\n    + (6 - 4) = 1002$$$ points.\n  </p>\n  <p>The final score for this submission is <b>1002</b>.</p>\n  <p>\n    <b\n      >Note that there are multiple data sets representing separate instances of\n      the problem. The final score for your team will be the sum of your best\n      scores for the individual data sets.\n    </b>\n  </p>\n</div>\n","task_type":2,"task_type__str":"HASH_CODE","tests":[{"name":"A – An example"},{"name":"B – By the ocean"},{"name":"C – Checkmate"},{"name":"D – Daily commute"},{"name":"E – Etoile"},{"name":"F – Forever jammed"}],"title":"Traffic signaling"}],"ticket":{"challenge_id":"00000000004361e2","type":1,"type__str":"SPECTATOR"},"title":"Online Qualifications","ui_appearance":0,"ui_appearance__str":"APPEARANCE_TYPE_DEFAULT"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
