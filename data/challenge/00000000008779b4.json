{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1654360200000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"00000000008779b4","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  This year's Round 3 was different than any of our past rounds. None of the problems were easy,\n  and more importantly, we had two interactive problems in the same round for the first time ever.\n  <i>Revenge of GoroSort</i> was another interactive sorting problem which required some\n  knowledge about permutations and a bit of research / trial and error. <i>Duck, Duck, Geese</i>\n  was the only typical competitive programming problem that was about data structures.\n  <i>Mascot Maze</i> was highly idea-oriented, where getting the right insight led to a\n  straightforward implementation. Finally, there was a large jump in difficulty to the\n  second interactive problem of the round, <i>Win as Second</i>, which was about game theory\n  and had contestants play around in a tree.\n</p><p>\n  About 10 minutes into the contest the first submissions that solved <i>Revenge of GoroSort</i> in\n  full started coming in. But it wasn't until almost 2 hours that someone got a perfect score.\n  <b>Gennady.Korotkevich</b> was the first one there, and claimed the first place in the round.\n  <b>Benq</b>, <b>SpyCheese</b>, and <b>Um_nik</b> were the other three that managed to do it\n  and rounded out the top 4. The unofficial cutoff to make it to the finals is 71 points and a\n  low enough penalty.\n</p><p>\n  The results will be reviewed in the coming days. Those who are in the top 25 after the round is\n  finalized will advance to the Virtual World Finals!\n  You can keep trying the problems or pratice for your next challenge by checking out our\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/archive\" target=\"_blank\">archive</a>.\n</p><p>\n  Thank you for participating and remember you can get a certificate showing your Code Jam\n  achievements in your\n  <a href=\"https://codingcompetitions.withgoogle.com/profile\" target=\"_blank\">profile page</a>.\n</p>\n<hr>\n<p>\n  <b>Cast</b>\n</p>\n<p>\n  Revenge of GoroSort: Written by Ian Tullis. Prepared by Timothy Buzzelli.\n</p><p>\n  Duck, Duck, Geese: Written by Chakradhar Reddy. Prepared by Shane Carr.\n</p><p>\n  Mascot Maze: Written by John Dethridge. Prepared by John Dethridge and Swapnil Mahajan.\n</p><p>\n  Win as Second: Written and prepared by Petr Mitrichev.\n</p><p>\nSolutions and other problem preparation and review by Andrei Korneev, Andy Huang, Antonio Mendez,\nChakradhar Reddy, Darcy Best, Deepak Gour, Ian Tullis, John Dethridge, Liang Bai,\nMd Mahbubul Hasan, Mohamed Yosri Ahmed, Nafis Sadique, Nhi Le, Nour Yosri, Pablo Heiber,\nPetr Mitrichev, Pi-Hsun Shih, Salma Mustafa, Samuel Huang, Shane Carr, Shantam Agarwal,\nSwapnil Mahajan, Timothy Buzzelli, and Yui Hosaka.\n</p><p>\nAnalysis authors:\n</p><ul>\n  <li>Revenge of GoroSort: Ian Tullis.</li>\n  <li>Duck, Duck, Geese: Timothy Buzzelli.</li>\n  <li>Mascot Maze: Artem Iglikov.</li>\n  <li>Win as Second: Petr Mitrichev.</li>\n</ul>","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1654351200000,"tasks":[{"analysis":"<p>\n  This is a variation of the classic\n  <a href=\"https://en.wikipedia.org/wiki/Graph_coloring\" target=\"_blank\">graph coloring</a>\n  problem, where the rooms, exits, and mascots of the problem form the nodes, edges, and colors of a\n  graph.\n</p>\n<p>\n  Cases where there is a cycle of length two (two rooms x and y where there is an exit from x to y\n  and an exit from y to x) are obviously impossible.\n  We will show later that these are the only impossible cases, by giving an algorithm that always\n  produces a coloring for graphs with no cycles of length two.\n</p>\n<h3>Test Set 1</h3>\n<p>\n  Given the low limits, it is possible to implement a\n  <a href=\"https://en.wikipedia.org/wiki/Backtracking\" target=\"_blank\">backtracking</a> solution:\n  recursively try coloring each vertex in each color. There are techniques which will help speed up\n  the solution. For example, you can keep track of the colors that shouldn't be used for a vertex\n  (since one of its neighbors was previously colored with that color).\n</p>\n<p>\n  However, plain backtracking algorithms are unlikely to work for Test Set 2, since early color\n  assignments might make it impossible to color later nodes, and it can take a long time until\n  those early assignments are revisited by the algorithm.\n</p>\n<h3>Test Set 2</h3>\n<p>\n  Consider the graph G' which has an edge from one node to another if there is a path of length 1 or\n  2 linking them in G. That is, G' contains the edge (v,w) if (v,w) is in G, or there is a\n  pair of edges (v,x) and (x,w) in G. It is sufficient to color G' so that no adjacent\n  pair of nodes has the same color.\n</p>\n<p>\n  Since each node in G' has outdegree at most 6 (2 nodes that are one edge away in G and 4 nodes\n  that are two edges away in G), the average indegree must be at most 6, and so at least some\n  individual node V must have degree at most 6 + 6 = 12. No matter what colors were chosen for this\n  node's neighbors, there is always at least one different color for this node because it has at\n  most 12 neighbors.\n</p>\n<p>\n  The only case when the coloring is impossible for G' is when it contains a\n  <a href=\"https://en.wikipedia.org/wiki/Loop_(graph_theory)\" target=\"_blank\">self-loop</a>. In\n  such a case it is also impossible for G.\n</p>\n<p>\n  Using these observations the following algorithm can be used to color G':\n</p>\n<ol>\n  <li>Find some V with the degree not greater than 12.</li>\n  <li>Temporarily remove V (and the edges connected to it) from the graph.</li>\n  <li>Recursively color the rest of the graph (which still maintains all the described properties).</li>\n  <li>Reinsert V and color it.</li>\n</ol>\n<p>\n  Here is one way to implement this solution efficiently:\n</p>\n<ul>\n  <li>\n    Build an <a href=\"https://en.wikipedia.org/wiki/Adjacency_list\" target=\"_blank\">adjacency list</a>\n    and an array of degrees for G'. Make sure to track both incoming and outgoing edges.\n  </li>\n  <li>\n    Run a <a href=\"https://en.wikipedia.org/wiki/Breadth-first_search\" target=\"_blank\">breadth-first search</a>\n    to remove the vertices of degree not greater than 12 one by one. Start by adding all such\n    vertices to the queue and use adjacency lists for efficient removal. If the degree of any\n    neighbor of the vertex currently being removed becomes 12, add this vertex to the queue. Note\n    that you don't need to remove the vertex from the adjacency lists (as you will need those\n    further), just update the degree. While running BFS keep track of the order in which the\n    vertices are traversed.\n  </li>\n  <li>\n    Go through the vertices in the reverse order and color each one greedly: try each color and use\n    it if none of the neighbours still have it.\n  </li>\n</ul>\n<p>\n  Every step of the algorithm can be done in linear time, so the overall time complexity of the\n  solution is linear.\n</p>\n<p>\n  Some heuristic approaches, like local search, can also be made to work if implemented efficiently.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1WRSSCz0r4F87XB_ti-LoLhQI-MHgWeZLsYJHZV9eIyM3mCn7nZCj9dVX-9c_-jzmUuwGKPgLu/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000b44a4f","statement":"<h3>Problem</h3>\n<p>\nThe Google Coding Competitions team is setting up a new theme park. As in any good theme\npark, we want to have actors dressed up as mascots to interact with visitors. Because we\nare in a rush to open, we decided to use the letters from <code>CODE JAM</code>,\n<code>KICK START</code>, and <code>HASH CODE</code> as mascots, for a total of $$$13$$$\ndifferent mascots (the letters <code>ACDEHIJKMORST</code>).\n</p><p>\nThe park's only attraction is a maze that has a set of $$$\\mathbf{N}$$$ rooms numbered from $$$1$$$ to $$$\\mathbf{N}$$$. Each\nroom has a left exit and a right exit. Each exit takes the visitor to another\nroom. Exits cannot be used in reverse; for example, if room $$$2$$$ has an exit to\nroom $$$3$$$, you cannot go back from room $$$3$$$ to room $$$2$$$ unless room $$$3$$$ also\nhappens to have an exit to room $$$2$$$.\n</p><p align=\"center\">\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U19J16kFX87WgZ4m7b166xCY7YrN1QWM1kwgHfBbV7dNH-PkJ8esV5n7Qo9iW9krGbTDhDw--zdUSQgPOVg52xzg-OlTPEA4g/mascot_maze_example_1.png\" alt=\"Illustration of Sample Case #1.\"/>\n</p><p>\nWe want to place exactly one of our $$$13$$$ mascots in each room. Each letter\nmay be present in zero, one, or more rooms of the maze.\nTo increase variety, we want to place mascots so that\nany three (not necessarily distinct) rooms that a visitor can visit consecutively have three\ndifferent mascots.\n</p><p>\nCan you help us choose a mascot for each room such that this goal is met, or let us know that\nit cannot be done?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case consists of $$$3$$$ lines. The first line contains a single integer $$$\\mathbf{N}$$$,\nrepresenting the number of rooms in the maze. The second line contains\n$$$\\mathbf{N}$$$ integers $$$\\mathbf{L_1}, \\mathbf{L_2}, \\dots, \\mathbf{L_N}$$$, representing that the left exit from room\n$$$i$$$ leads to room $$$\\mathbf{L_i}$$$. The third and last line contains $$$\\mathbf{N}$$$ integers\n$$$\\mathbf{R_1}, \\mathbf{R_2}, \\dots, \\mathbf{R_N}$$$, representing that the right exit from room $$$i$$$ leads to\nroom $$$\\mathbf{R_i}$$$.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is <code>IMPOSSIBLE</code>\nif there is no way to assign mascots while obeying the rules explained above. Otherwise, $$$y$$$\nis an $$$\\mathbf{N}$$$ character long string. The $$$i$$$-th character of $$$y$$$ should be an uppercase letter\nfrom the set <code>ACDEHIJKMORST</code>, representing that you wish to assign that mascot to the\n$$$i$$$-th room.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$\\mathbf{L_i} \\neq i$$$, for all $$$i$$$.\n$$$\\mathbf{R_i} \\neq i$$$, for all $$$i$$$.\n$$$1 \\le \\mathbf{L_i} \\lt \\mathbf{R_i} \\le \\mathbf{N}$$$, for all $$$i$$$.\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n$$$3 \\le \\mathbf{N} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\nTime limit: 45 seconds.<br/>\n\n$$$3 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1hCwzCxiJguY4e_sr7DNYHdemysmweeM1lLJDf7bbDejqXI7GkD6rIG5GSu-02CYNVpa5GDm5YMGxEfjHiuC_K1GS0oUphLFJTOw/mascot_maze_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n3\n2 1 1\n3 3 2\n6\n3 1 4 1 2 3\n5 3 5 2 4 5\n20\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 1 1\n3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 20 2\n19\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 1 1\n3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 19 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2fbaEWVdaD2tF2AWFV1Bommyh4L-7yYiV2JvaOPYRI4fr2E_Dsoa6Jh2V4U4HxqNjcGWFGRWmx1Hp1AujW8-I27WGFT5D7vSppm8k/mascot_maze_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: IMPOSSIBLE\nCase #2: TSHIRT\nCase #3: HCJKSHCJKSHCJKSHCJKS\nCase #4: CODEJAMROCKSTHEMOST\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  Sample Case #1 is the image in the problem statement. It is possible to visit rooms 1, 2, and 1\n  consecutively (which visits room 1 twice), so the case is impossible.\n</p><p>\n  Sample Case #2 has the following layout (blue arrows represent the left exits and red arrows\n  represent the right exits):\n</p><p align=\"center\">\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3J_swtL-dX4DAxKjeepOgUOPLBPh7CWZcuF8hhPHZvY5eAGqoYVUxBWZ8ol3l6LJ0JzrpcZnti-79_CF_gBtPG4G6J5GGRFQ/mascot_maze_example_2.png\" alt=\"Illustration of Sample Case #2.\"/>\n</p><p>\n  One of many valid answers is to assign mascots as indicated. Notice that although we do not\n  need to assign two <code>T</code> mascots in this case, we have done so in a way that does\n  not break the rules.\n</p><p>\n  Sample Cases #3 and #4 are possible, but require the use of multiple copies of some mascots.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":12},{"type":2,"type__str":"HIDDEN","value":13}],"title":"Mascot Maze","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  In the original GoroSort problem from 2011, Goro could hold as many elements\n  in place as he wanted; using the terminology of this problem, he could\n  create arbitrary many box color groups with $$$1$$$ ball (element) each. But\n  unlike in this problem, he was only allowed to use at most one color group\n  of size greater than $$$1$$$. That made the optimal strategy relatively\n  straightforward: he could repeatedly permute all list elements that were not\n  in the correct places.\n</p><p>\n  That strategy puts one additional element in the right place each turn, in\n  expectation, which is clearly too slow for this problem. (Our version of that\n  solution takes almost $$$100000$$$ rounds!) What is more surprising is that\n  the crux of the original problem &mdash; namely, thinking in terms of\n  expected numbers of elements that become correctly placed after the bump\n  &mdash; can even be <i>misleading</i> in this problem!\n</p>\n<h3>The perils of pairing</h3>\n<p>\n  It is intutively clear that any elements that are already in the right place\n  should be left alone (i.e., each should be put in its own color group). It\n  also seems reasonable to not break up pairs of elements that are swapped (i.e.,\n  each is in the other's place). We can also reasonably guess that splitting\n  such a pair would be useless, and that putting additional elements in that\n  group would be worse than handling those other elements in their own\n  group(s).\n</p><p>\n  What about the other elements? One very tempting strategy is to try to pair\n  them up into \"trespasser pairs\" such that one member of the group is in the\n  other member's place. It may not be possible to do this with every element,\n  but we can, e.g., find a way to tack leftovers onto existing trespasser\n  pairs.\n</p><p>\n  Consider a trespasser pair ($$$x, y$$$), where $$$x$$$ belongs where $$$y$$$\n  is and $$$y$$$ belongs somewhere else entirely. The judge's \"bumping\"\n  (permutation) process will put $$$x$$$ in the right place with probability\n  $$$\\frac{1}{2}$$$. So if we somehow manage to create around\n  $$$\\frac{\\mathbf{N}}{2}$$$ trespasser pairs, each bump will put around\n  $$$\\frac{\\mathbf{N}}{4}$$$ more elements in the right places. This seems quite\n  good, and it is good enough to pass Test Set 1, but not the other two. (Our\n  trespasser-pair-based solutions take between $$$15000$$$ and $$$16300$$$\n  rounds, depending on the care taken with implementation details.)\n</p>\n<h3>Thinking in terms of cycles</h3>\n<p>\n  Any permutation &mdash; and therefore any state in this problem &mdash; can\n  be described as a multiset of <a href=\"https://en.wikipedia.org/wiki/Permutation#Cycle_notation\" target=\"_blank\">cycles</a>\n  of particular lengths. For example, each element that is already in the\n  correct place is a $$$1$$$-cycle, and each pair of swapped elements is a\n  $$$2$$$-cycle.\n</p><p>\n  If we try to implement the pairing idea above in a greedy way, we may miss\n  some opportunities to form trespasser pairs. We can get as many as possible\n  by first finding all the cycles, then going through each cycle and chopping\n  it into trespasser pairs, plus perhaps one \"trespasser trio\" at the end. (A\n  trespasser trio is a set of elements $$$x, y, z$$$, in some order, such that\n  $$$y$$$ is in $$$x$$$'s place, $$$z$$$ is in $$$y$$$'s place, and $$$z$$$\n  belongs outside of the group.) These improvements (especially creating\n  trespasser trios where needed) help a lot, but not enough to pass Test Set\n  2; our trespasser pairs + one trio solution takes around $$$13100$$$ rounds.\n</p><p>\n  But what if we leave the cycles as they are, and make each cycle its own\n  permutation group? Now we do much better, and pass Test Set 2 as well (but\n  not Test 3; we take about $$$11800$$$ rounds). Why is this cycle-based strategy so\n  much better than the trespasser pair strategies?\n</p>\n<h3>When expectation doesn't satisfy our expectations</h3>\n<p>\n  Here's the problem with chopping into trespasser pairs. Suppose that we have\n  a $$$4$$$-cycle like $$$2 3 4 1$$$. If we split it into two trespasser pairs\n  $$$2 3$$$ and $$$4 1$$$, we will (in expectation) put one element in the\n  correct place. But, as we will see later on, we get the same expectation of\n  $$$1$$$ if we designate the entire cycle as one group.\n</p><p>\n  Does this necessarily mean these strategies are equally good? Let's set our\n  expectations appropriately! We really care about the expected <i>total</i>\n  number of rounds to finish sorting, so let's work toward calculating that\n  instead. First we observe that:\n</p>\n<ul>\n  <li>\n    <b>If we split the $$$4$$$-cycle into two trespasser pairs</b>:\n    <ul>\n      <li>\n        With probability $$$\\frac{1}{4}$$$, both elements end up in their\n        correct places in the group, and we get two $$$1$$$-cycles and one\n        $$$2$$$-cycle.\n      </li><li>\n        With probability $$$\\frac{1}{4}$$$, neither element ends up in its\n        correct place in the group, and we end up stuck at a $$$4$$$-cycle.\n      </li><li>\n        Otherwise, with probability $$$\\frac{1}{2}$$$, we end up with a\n        $$$1$$$-cycle and a $$$3$$$-cycle.\n      </li>\n  </ul>\n  </li><li>\n    If we don't split the cycle before permuting:\n    <ul>\n      <li>\n        With probability $$$\\frac{1}{24}$$$, we get four $$$1$$$-cycles.\n      </li><li>\n        With probability $$$\\frac{1}{4}$$$, we get two $$$1$$$-cycles and a\n        $$$2$$$-cycle.\n      </li><li>\n        With probability $$$\\frac{1}{3}$$$, we get a $$$3$$$-cycle and a\n        $$$1$$$-cycle.\n      </li><li>\n        With probability $$$\\frac{1}{8}$$$, we get two $$$2$$$-cycles.\n      </li><li>\n        With probability $$$\\frac{1}{4}$$$, we are stuck at a $$$4$$$-cycle.\n      </li>\n    </ul>\n  </li>\n</ul>\n<p>\n  Comparing these two probability distributions directly, and canceling out\n  the parts that are the same, we need to know which is better:\n</p>\n<ul>\n  <li>a $$$\\frac{1}{6}$$$ probability of getting a $$$3$$$-cycle and a\n    $$$1$$$-cycle, or</li>\n  <li>a $$$\\frac{1}{8}$$$ probability of getting two $$$2$$$-cycles and\n    a $$$\\frac{1}{24}$$$ probability of getting four $$$1$$$-cycles</li>\n</ul>\n<p>\n  Now we can assess each of those states in terms of the expected number\n  of rounds to completion. A $$$3$$$-cycle turns out to take $$$3$$$ rounds,\n  in expectation, to become all $$$1$$$-cycles. (This comes from solving\n  $$$\\mathbf{E}[3] = 1 + \\frac{1}{3} \\cdot \\mathbf{E}[3] + \\frac{1}{2}\\mathbf{E}[2] + \\frac{1}{6}(0)$$$,\n  and using the fact that $$$\\mathbf{E}[2] = 2$$$.) By a similar analysis, two\n  $$$2$$$-cycles take $$$\\frac{8}{3}$$$ rounds, in expectation, to become\n  all $$$1$$$-cycles. (And if we are lucky enough to reach four\n  $$$1$$$-cycles directly, $$$0$$$ additional rounds are needed.)\n</p><p>\n  Therefore, chopping up a $$$4$$$-cycle into two trespasser pairs is strictly\n  worse than leaving it as is! We wouldn't have known this if we\n  had argued purely based on the expected number of correctly placed elements;\n  it also matters what we leave behind. Intuitively, the trespassers can only\n  be dealt with after their companions have been correctly placed, so the\n  chopping strategy is less parallelizable. But we shouldn't assume this will\n  always be true no matter how we chop...\n</p>\n<h3>Chopping is not always bad</h3>\n<p>\n  It's tedious to perform the above analysis for cycles longer than $$$4$$$.\n  But we shouldn't give up hope. The expectations for the two strategies were\n  the same for $$$4$$$-cycles, but will that hold up in general?\n</p><p>\n  Let's think about how many cycles we expect to see in a random permutation\n  of length $$$\\mathbf{N}$$$. You may have heard of the following problem: everyone loses\n  their hats all at once, and each person puts on a random hat; in\n  expectation, how many people get their own hats back? The probability that\n  the each person gets their own hat is $$$\\frac{1}{\\mathbf{N}}$$$, and then by\n  linearity of expectation, the total number of instances of someone getting\n  their own hat is $$$\\frac{1}{\\mathbf{N}} \\cdot \\mathbf{N} = 1$$$.\n</p><p>\n  So this gives us the expected number of $$$1$$$-cycles. We can make a\n  similar argument about $$$2$$$-cycles: there are $$${\\mathbf{N} \\choose 2}$$$\n  distinct pairs of elements that could form a 2-cycle, and for each one, the\n  probability that each has the other's element is\n  $$$\\frac{1}{\\mathbf{N}} \\cdot \\frac{1}{\\mathbf{N}-1}$$$. This all boils down to\n  $$$\\frac{1}{2}$$$. Indeed, the answer for general\n  $$$k$$$-cycles is $$$\\frac{1}{k}$$$.\n</p><p>\n  Then how many total cycles should we expect? It's\n  $$$\\frac{1}{1} + \\frac{1}{2} + ... + \\frac{1}{\\mathbf{N}}$$$. You may recognize\n  this as the expression for the $$$\\mathbf{N}$$$-th\n  <a href=\"https://en.wikipedia.org/wiki/Harmonic_number\" target=\"blank\">harmonic number</a>.\n  The harmonic numbers grow rather slowly; $$$H_{100}$$$, for example, is just\n  over $$$5$$$.\n</p><p>\n  Therefore, if there are only around $$$5$$$ cycles in our initial random\n  permutation of length $$$\\mathbf{N} = 100$$$, we expect to place around $$$5$$$\n  elements. But if we chop the cycles into, say, $$$50$$$ trespasser pairs,\n  we should expect to place around $$$25$$$ elements! How can it possibly be\n  better to leave such large cycles alone? Does the argument about leaving\n  more mess behind really still hold up?\n</p><p>\n  One issue with chopping into pairs is that, intuitively, many roads to\n  completion include forming one or more $$$4$$$-cycles, and we have now seen\n  that the pair-chopping strategy mishandles them. (And now we have reason to\n  suspect that it mishandles larger cycles as well).\n</p><p>\n  What if we chop a cycle into chunks larger than pairs? For example, if we\n  chop a $$$6$$$-cycle into two trespasser trios, each of them will produce\n  $$$2 \\cdot \\frac{1}{3} = \\frac{2}{3}$$$ correctly placed elements in\n  expectation. That's $$$\\frac{4}{3}$$$ overall, which is less than the\n  $$$3 \\cdot \\frac{1}{2} = \\frac{3}{2}$$$ we would have gotten from chopping\n  into trespasser pairs. But these trespasser trios leave less of a mess; each\n  one can only leave one element to clean up later, so there will be two such\n  elements as compared to three.\n</p><p>\n  It is hard to directly weigh the costs of cleaning up these leftover\n  elements against the benefits of correctly placing more elements in\n  expectation. The math for our $$$4$$$-cycle example was already a bit\n  cumbersome to carry out in a timed round, and there is not a strong\n  incentive to do even more of it when the local testing tool can quickly tell\n  us how well a strategy does, and when all three test sets are Visible.\n  Indeed, we can find that leaving all cycles of length less than $$$6$$$\n  intact, and breaking all cycles of length $$$6$$$ or more into trespasser\n  trios (or trespasser sets of four or five, when there are extra elements)\n  does much better than leaving all cycles intact, and lets us pass Test Set\n  3, taking about $$$10950$$$ rounds.\n</p><p>\n  We can do even better by choosing different chunk lengths (e.g. break each\n  cycle of length $$$c$$$ into chunks of size roughly $$$\\sqrt{c}$$$, to get\n  down to around $$$10500$$$ rounds), but that is not necessary for this\n  problem.\n</p>\n","id":"0000000000b45189","statement":"<h3>Problem</h3>\n<p>\n<i>In this problem, when something is said to be chosen at random, it means uniformly at\n  random from among all valid possibilities, and independently of any other choice.</i>\n</p>\n<p>\n  Code Jam contestants once\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/round/0000000000432f3a/0000000000432ccf\" target=\"_blank\">helped the mighty Goro sort an array of integers</a>.\n  (You do not need to read that problem to solve this one.) Once again, Goro\n  needs your help. He has $$$\\mathbf{N}$$$ boxes lined up on the table in a single row, numbered\n  $$$1$$$ through $$$\\mathbf{N}$$$ from left to right.\n  Each box has exactly one ball inside. Balls are also numbered\n  $$$1$$$ through $$$\\mathbf{N}$$$. Goro wants ball $$$i$$$ to end up in box $$$i$$$, for all $$$i$$$.\n  That is, he wants to leave the balls in sorted order.\n  Unfortunately, that is not initially the case.\n</p><p>\n  When Goro bumps the table with his powerful fists, balls pop up in the air\n  and fall back in boxes. Goro can do this so accurately that exactly one ball\n  falls into each box. A ball may fall into the same box it came out of, or\n  into a different one.\n</p><p>\n  Better yet, Goro also has the ability to assign colors to boxes before\n  each bump. Then, he can bump the table in such a way that balls coming out of\n  a box of color $$$c$$$ always fall into a box of color $$$c$$$. As impressive\n  as this accuracy is, Goro does not have any more control than that. Within each color,\n  balls end up assigned to boxes at random.\n</p><p align=\"center\">\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0TSqSosoIMBYlzS1mAwGNLI7ZH8n0F05S8v4uMWxCHrnW1Ql1MQ-V1jUWmWI7jj50Of4kIRyNSGjXd2SJr60jcSljQWCGK/revenge_of_goro_sort.png\"\n       alt=\"6 boxes numbered 1 to 6 from left-to-right. Box 1 is red.\n            Boxes 2 and 6 are green. Boxes 3-5 are blue.\n            There is a grey ball in each box. The balls are numbered 1, 4, 3, 6, 5, 2.\"/>\n</p><p>\n  For example, suppose the balls appear in the order $$$1, 4, 3, 6, 5, 2$$$ (as seen above). He might choose\n  &mdash; not necessarily optimally &mdash; to give the first box the color red,\n  the second and sixth boxes the color green, and the third through\n  fifth boxes the color blue. Then, after Goro bumps the table,\n</p>\n<ul>\n  <li>The $$$1$$$ in the first box falls back into the same box, because that is the only\n    red box.</li>\n  <li>The $$$4$$$ and $$$2$$$ in the second and sixth boxes remain in\n    place with probability $$$\\frac{1}{2}$$$, and switch places with\n    probability $$$\\frac{1}{2}$$$.</li>\n  <li>The $$$3, 6, 5$$$ in the third, fourth, and fifth\n    boxes end up in one of the following orders, each with probability\n    $$$\\frac{1}{6}$$$:\n    <ul>\n      <li>$$$3, 6, 5$$$</li>\n      <li>$$$3, 5, 6$$$</li>\n      <li>$$$6, 3, 5$$$</li>\n      <li>$$$6, 5, 3$$$</li>\n      <li>$$$5, 3, 6$$$</li>\n      <li>$$$5, 6, 3$$$</li>\n    </ul>\n  </li>\n</ul>\n<p>\n  So, for example, the probability of the bump leaving the balls in the\n  order $$$1, 2, 3, 5, 6, 4$$$ is $$$\\frac{1}{12}$$$. If\n  Goro got this or some other non-sorted result, he\n  would have to designate a set of box colors for the next round, and so on, until\n  he eventually arrives at the sorted $$$1, 2, 3, 4, 5, 6$$$. Goro can assign\n  colors to boxes in any way before each bump, regardless of previous assignments.\n</p><p>\n  Can you help Goro implement a better strategy that will efficiently sort the balls?\n  It is guaranteed that the balls start in a random non-sorted order.\n</p>\n\n<h3>Input and output</h3>\n<p>\n  This is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of our\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq\" target=\"_blank\">FAQ</a>.\n</p><p>\n  Initially, your program should read a single line containing three integers,\n  $$$\\mathbf{T}$$$ $$$\\mathbf{N}$$$ $$$\\mathbf{K}$$$: the number of test cases, the number of boxes per test\n  case, and the total number of bumps allowed for all test cases combined.\n  Then, $$$\\mathbf{T}$$$ test cases must be processed.\n</p><p>\n  Each test case begins with the judge sending one line with $$$\\mathbf{N}$$$ integers,\n  with each integer from $$$1$$$ to $$$\\mathbf{N}$$$ appearing exactly once, and with the\n  list chosen at random from all non-sorted lists. Then you must engage in a series of\n  interactions with the judge. Each interaction works as follows:\n</p>\n<ul>\n  <li>\n      You send one line of $$$\\mathbf{N}$$$ integers $$$C_1, C_2, \\dots, C_{\\mathbf{N}}$$$, in which each\n      integer is between $$$1$$$ and $$$\\mathbf{N}$$$, inclusive. Each $$$C_i$$$ represents\n      that you are assigning color $$$C_i$$$ to box $$$i$$$ for the next bump.\n      You may choose how many colors there are and how they are numbered, but you must\n      assign a color to each box.\n  </li><li>\n      The judge simulates the bump as explained in the statement.\n      If this results in the balls being in sorted order:\n      <ul>\n        <li>\n          If this interaction was the $$$\\mathbf{K}$$$-th interaction across all test cases,\n          and this was not the last test case, the judge sends one line with\n          the integer $$$-1$$$ and does not output anything further.\n        </li><li>\n          Otherwise, the judge sends one line with the integer $$$1$$$ and\n          then immediately begins the next test case, if there is one. If this\n          was the last test case, your program must exit without error and\n          without sending anything further.\n        </li>\n      </ul>\n      <br>\n  </li><li>\n      Otherwise, the balls are not sorted, and:\n      <ul>\n         <li>\n           If this interaction was the $$$\\mathbf{K}$$$-th across all test cases, or if you\n           provided an invalid line (e.g., too few integers, or color numbers\n           out of range), the judge sends one line with the integer\n           $$$-1$$$ and does not output anything further.\n        </li><li>\n          If this was not your $$$\\mathbf{K}$$$-th interaction, the judge sends one line with\n          the integer $$$0$$$, and then another line with $$$\\mathbf{N}$$$ integers, with\n          each integer from $$$1$$$ to $$$\\mathbf{N}$$$ appearing exactly once, and in\n          non-sorted order, representing the new order of the balls, that is, the\n          $$$i$$$-th of these integers is the ball that fell into box $$$i$$$.\n           Then you must begin another interaction.\n        </li>\n      </ul>\n  </li>\n</ul>\n<p>\n  As usual, if the memory limit is exceeded, or your program gets a runtime\n  error, you will receive the appropriate judgment. Also, if your program\n  continues to wait for the judge after receiving a $$$-1$$$, your program\n  will time out, resulting in a Time Limit Exceeded error. Notice that it is\n  your responsibility to have your program exit in time to receive a Wrong\n  Answer judgment instead of a Time Limit Exceeded error.\n</p><p>\n  Be advised that the judge uses the same source of randomness each time, so\n  in the absence of other errors (e.g. Time Limit Exceeded, Memory Limit\n  Exceeded), submitting the exact same code twice will yield the same outcome\n  twice.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$\\mathbf{T} = 1000$$$.<br/>\n$$$\\mathbf{N} = 100$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$\\mathbf{K} = 16500$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\n\n$$$\\mathbf{K} = 12500$$$.<br/>\n</p>\n\n<h4>Test Set 3 (Visible Verdict)</h4>\n<p>\n\n$$$\\mathbf{K} = 11500$$$.<br/>\n</p>\n\n\n<h3>Testing Tool</h3>\n<p>\n  You can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use our <a href=\"https://storage.googleapis.com/coding-competitions.appspot.com/interactive_runner.py\">interactive runner</a>\n  for that. For more information, read the instructions in comments in that\n  file, and also check out the\n  <a href=\"/codejam/faq#interactive-problems\" target=\"_blank\">Interactive Problems section</a>\n  of the FAQ.\n</p><p>\n  Instructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it is <b>NOT</b>\n  the real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check the\n  <a href=\"/codejam/faq#coding\" target=\"_blank\">Coding section</a>\n  of the FAQ to make sure that you are using the same compiler as us.\n</p><p>\n<a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0NTR7Q0_EFojOfBnLWCMX6wb1mzYlFzn4GVKChYMuP6c12miSPDDof_UBaFucn80Yd0nncOmKhE5PFkAssuZjz/local_testing_tool.py3?dl=1\" download=\"testing_tool.py\">Download testing tool</a>\n</p>\n\n\n  <div class=\"sample-interaction-wrapper\">\n    <div class=\"sample-interaction-header\">\n      <div class=\"sample-interaction-header-text\">Sample Interaction</div>\n    </div>\n    <div class=\"sample-interaction-content\">\n      <div class=\"sample-interaction-judge-solution-labels\">\n        <div class=\"sample-interaction-judge-label\">Judge</div>\n        <div class=\"sample-interaction-solution-label\">Solution</div>\n      </div>\n      \n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Number of cases, number of boxes per case, number of interactions allowed across all cases<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">2 4 8\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 1<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1 4 3 2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge gives this non-sorted list.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">1 2 3 2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution assigns color 1 to the first box, color 2 to the second and fourth boxes, and color 3 to the third box.<br>\nThe judge trivially assigns the balls in the boxes of color 1 and 3 back to their original box, and randomly chooses whether to swap the balls in the second and fourth boxes. In this case, it does not swap them.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">0\n1 4 3 2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">1 2 3 2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution does the same thing as before.<br>\nThis time the judge does happen to swap the 4 and the 2.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge indicates that this test case was solved, and immediately begins the next case.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 2<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">2 1 4 3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">4 4 4 4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution assigns all boxes color 4. Notice that it's OK to not have colors 1, 2, or 3.<br>\nThe judge chooses a new random order for the balls. Wow, what luck, they come out in order!<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge indicates that this test case was solved, and sends no further output, because this was the last test case.<br>\nContestant solution should exit (with no error) to avoid a Time Limit Exceeded error.<br>\n</div>\n\n    </div>\n  </div>\n\n\n<p>\n  Note that the sample interaction does not satisfy the constraints of any of\n  the test sets. It is only presented to clarify the input and output format.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":8},{"type":1,"type__str":"VISIBLE","value":10},{"type":1,"type__str":"VISIBLE","value":3}],"title":"Revenge of GoroSort","trial_input_type":2,"trial_input_type__str":"JUDGE_CODE"},{"analysis":"<h3>Introduction</h3>\n<p>\n  This problem describes an\n  <a href=\"https://en.wikipedia.org/wiki/Impartial_game\" target=\"_blank\">impartial game</a> which can be analyzed\n  using the <a href=\"https://en.wikipedia.org/wiki/Sprague%E2%80%93Grundy_theorem\" target=\"_blank\">Sprague-Grundy\n  theorem</a>.\n</p>\n<p>\n  However, the number of possible states in the game is quite big. There can be $$$2^{\\mathbf{N}}$$$ sets\n  of blue vertices, and even after we use the Sprague-Grundy theorem to reduce the problem to\n  consider only connected sets of vertices, the number of states is still big. For example,\n  a star which has the center vertex connected to $$$\\mathbf{N}-1$$$ leaves has $$$2^{\\mathbf{N}-1}+\\mathbf{N}-1$$$\n  connected sets of vertices.\n</p>\n<p>\n  We could go a bit further and notice that isomorphic subtrees can only be considered once, which\n  reduces the number of states much more. We do not know the exact number, but the worst trees\n  we were able to find had between 7 and 8 million non-isomorphic connected subtrees for\n  $$$\\mathbf{N}=40$$$. This is still quite hard to process within the time limit given that the processing\n  for each state becomes quite expensive, with tree isomorphism involved.\n</p>\n<p>\n  So how could we make things simpler for ourselves?\n</p>\n<h3>Test Set 1</h3>\n<p>\n  One approach is to try to construct a concrete tree by hand that is winning for the second\n  player. The game for this problem was intentionally chosen in such a way that this is not easy:\n  for example, every chain (a tree where each vertex is connected to the previous one,\n  $$$1-2-3-\\dots-\\mathbf{N}$$$) is winning for the first player, as they can take either 1 or 2\n  middle vertices and then make symmetric moves.\n</p>\n<p>\n  However, it turns out that for even values of $$$\\mathbf{N}$$$ there are several relatively simple\n  constructions. For example, consider a starlike tree consisting of the center vertex $$$1$$$\n  plus $$$\\mathbf{N}-3$$$ chains attached to it, one chain with 3 edges ($$$1-2-3-4$$$) and all other\n  chains with 1 edge ($$$1-5, 1-6, \\dots, 1-\\mathbf{N}$$$).\n</p>\n<p align=\"center\">\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0nWWK60ZD_LV3Mm6FUoH8MOT9xc-SBeCdeMiPZiwcagOCmerMSuXr_OY5wKjP5BrO9d2S5Wr7dOLDayRCSYQTc7V4oY323X5g1dg/win_as_second_analysis_1.png\" alt=\"Illustration of the solution for Test Set 1.\"/>\n</p>\n<p>\n  The number of chains with 1 edge is even, so if the first player takes the endpoint of one of them,\n  we can take another one and arrive at a smaller starlike tree with the same property, unless there\n  is just one left, in which case we simply have a single chain with 4 edges and 5 vertices and can\n  win by taking one or three middle vertices of it.\n</p>\n<p>\n  If the first player takes the center vertex together with some neighbors, then we are left with\n  one chain with 2 or 3 vertices, and some number of isolated vertices.\n  We can choose either to eliminate the chain, or to\n  reduce it to an isolated vertex, in such a way that the number of resulting isolated vertices\n  is even and we will win.\n</p>\n<p>\n  If the first player takes two vertices of the longer chain together with the center vertex,\n  then we are left with an odd number of isolated vertices, so we can take one of them and win.\n</p>\n<p>\n  If the first player makes the longer chain shorter, then we can take the center vertex\n  together with some neighbors in such a way that an even number of isolated vertices remains.\n</p>\n<p>\n  If the first player makes a move in the middle of the longer chain such that we have\n  a star plus a separate isolated vertex, then we can again take the center together with some\n  of its neighbors in such a way that an even number of isolated vertices remains.\n</p>\n<p>\n  Finally, if the first player makes a move in the middle of the longer chain such that we have\n  a star plus a chain with 2 vertices, then we remove one of the leaves of the star.\n  If we and the first\n  player keep removing star leaves with each move, then after one of our moves only one leaf\n  will be left, so we will have two chains with 2 vertices each and we can do symmetric moves to\n  win. And if the first player tries taking the center of the star, or do something to the chain\n  with 2 vertices, then we can always get an even number of isolated vertices after our move.\n</p>\n<p>\n  We were not able to come up with a similar explicit construction for odd values of $$$\\mathbf{N}$$$.\n  Also, even for even values of $$$\\mathbf{N}$$$ coming up with this construction was not required to solve\n  the problem. You can find an alternative approach in the next section.\n</p>\n<h3>Test Set 2</h3>\n<p>\n  What can we do when $$$\\mathbf{N}$$$ is odd, or when we cannot come up with the above\n  construction for even $$$\\mathbf{N}$$$?\n</p>\n<p>\n  The key idea is to consider some very restricted class of trees, so that:\n</p>\n<ul>\n  <li>\n    The trees in the class are diverse enough so that some of them are winning for the\n    second player&nbsp;&mdash; as we have seen above, chains are not diverse enough.\n  </li>\n  <li>\n    The trees in the class are uniform enough so that we can implement the nim-value computation\n    based on the Sprague-Grundy theorem without having to deal with arbitrary tree isomorphism.\n  </li>\n  <li>\n    The number of subtrees of the trees in the class is small enough so that the number of\n    states that the nim-value computation needs to process is small.\n  </li>\n</ul>\n<p>\n  We have found that many classes of trees work, for example:\n</p>\n<ul>\n  <li>\n    Starlike trees with at most 5 chains attached to the center vertex.\n  </li>\n  <li>\n    Chains with at most two additional chains attached at some points of the main chain.\n  </li>\n  <li>\n    Starlike trees with all chains having length 1 except at most 3 (generalizing the Test Set 1\n    construction).\n  </li>\n</ul>\n<p>\n  Having chosen such a class, we can then quickly implement the nim-value computation, and then\n  either do an exhaustive search over all trees in the class, or keep generating random\n  trees in the class until we find at least one example for each value of $$$\\mathbf{N}$$$\n  between 30 and 40.\n</p>\n<p>\n  It was also possible to choose a class of trees with enough diversity and fast enough nim-value\n  computation, but that would still require to implement general tree isomorphism. This would\n  of course complicate the implementation a bit more, but still allow to solve the problem.\n  One such class is very narrow trees where vertex $$$i$$$ is connected either to vertex $$$i-1$$$\n  or to vertex $$$i-2$$$.\n</p>\n<p>\n  Having found the winning tree for each value of $$$\\mathbf{N}$$$, we can then hardcode them in the\n  solution we submit. We still need\n  the nim-value computation code as part of the solution in order to actually play the game\n  after printing the tree. This was, in fact, one of the reasons for making this problem\n  interactive: had we just required printing a tree for a given $$$\\mathbf{N}$$$, the submitted solutions\n  would likely just consist of 10 constants, and it might be possible to just find a solution in a\n  few guesses, at least for Test Set 1.\n</p>\n<p>\n  Of course, it might happen that you choose a class of trees that does not give a solution\n  to all possible cases. However, given the diversity of classes that work in this problem, it\n  is most likely possible to adjust your class slightly in such a way that you do not need\n  to complicate the nim-value code too much, but that allows to find a solution. Of course,\n  doing this quickly required a certain intuition or \"feeling\" of the problem.\n</p>\n<h3>How does the judge work?</h3>\n<p>\n  While the contestants had the luxury of choosing a class of trees where finding nim-values\n  is quick, they did not have to do it, and therefore the judge had to deal with arbitrary trees.\n</p>\n<p>\n  The judge had a very well-optimized computation of nim-values for the general case, using\n  tree isomorphism to reduce the number of states it has to process. In the worst case we found\n  for $$$\\mathbf{N}=40$$$, it could find the nim-values for all states in about 70 seconds\n  (this was optimized about 20x from our first version). However, we were not sure that\n  the case we found is truly the worst (and this was another reason for making this problem\n  interactive), and we also did not want the contestants to have to wait for a long time for\n  the verdict.\n</p>\n<p>\n  Therefore we have introduced additional logic in the judge when considering the very first\n  move of the game. We iterated over possible first moves in the order of increasing size of\n  the largest connected component remaining after the move, and stopped iteration in two cases:\n</p>\n<ul>\n  <li>\n    If we find a move that leads to a losing position. Then we can make this move and win, and\n    do not need to consider other options.\n  </li>\n  <li>\n    If we have visited 500000 different states during our search, and have already processed\n    at least one first move fully. Then we stopped processing the current first move and made\n    our solution only choose between the first moves already processed.\n  </li>\n</ul>\n<p>\n  The order of checking the first moves ensured that only a few states would need to be visited\n  to check the first option for the first move, because all connected components would have a size\n  of at most 20 after it, therefore we would likely process quite a few first moves before\n  we run out of the 500000 states budget. And for the values of $$$\\mathbf{N}$$$ up to 33 or so, we would\n  actually process all options for the first move. This allowed us to be relatively confident\n  that we would catch most incorrect solutions, but still have the judge finish in 4 seconds\n  per case.\n</p>\n<p>\n  After the first move, the judge always knew the nim-value exactly and played optimally.\n</p>\n<p>\n  The judge had to make another important decision: when it found itself in a losing position\n  (which is the most important case to consider, as in the other case it could guarantee a win\n  using the nim-values), which move should it do?\n</p>\n<p>\n  Initially the judge would make a random move in such situation. But then we noticed that even for\n  the Test Set 1 solution described above, making random moves might not be enough to catch all\n  bugs, since there are many bugs that would only be caught with a specific first move.\n  Therefore, we have changed the behavior of the judge for choosing the first move: it tried\n  to make such moves that would lead to different situations for the solution to handle after the\n  first move in different games.\n</p>\n<p>\n  Two situations were considered different if they led to non-isomorphic configurations, with\n  the additional step of collapsing $$$2K+1$$$ copies of the same subtree to 1 copy, and\n  $$$2K$$$ copies of the same subtree to 2 copies, to avoid the judge wasting the games\n  exploring different ways to remove leaves from a star. After the first move, if the judge was\n  still in a losing position, it would make fully random moves.\n</p>\n<p>\n  Of course, this still left a possibility that some incorrect solutions would win all games\n  against the judge, as it did not visit all possible states&nbsp;&mdash; there were at least 7\n  million states to visit potentially, but the judge had only 50 games, each visiting at most\n  40 states. However, we hope that the chances of this happening were quite low.\n</p>","id":"0000000000b4518a","statement":"<h3>Problem</h3>\n<p>\n  Ueli and Vreni are playing a game. The game's board is a\n  <a href=\"https://en.wikipedia.org/wiki/Tree_(graph_theory)\" target=\"_blank\">tree</a> with $$$\\mathbf{N}$$$ vertices,\n  all initially colored blue.\n  They alternate turns, with Ueli going first. In each turn, a player must choose a\n  blue vertex, together with any subset (possibly none or all) of its blue neighbors,\n  and color all those vertices red. If at the start of a players' turn, all vertices are\n  red, then that player loses the game and the other player wins the game.\n</p><p>\n  In the example game below, Ueli colored vertex $$$3$$$ red in their first turn.\n  Then, Vreni chose vertex $$$2$$$ for their turn and colored both it and its neighbor\n  (vertex $$$1$$$) red. Because all vertices are now red, Ueli loses and Vreni wins.\n</p><p align=\"center\">\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1c_b0W1tiOeSesnQrZDSI50yFIEH1DAYYb_vNtxW_tzv97Z50ZN_kI0FQQSifHPr2FOR1HWdV1YsDn-cy2O-VR_wUjuXVVdoUI/win_as_second_example_1.png\" alt=\"Illustration of Sample Case #1 Game #1.\"/>\n</p><p>\n  Ueli and Vreni have noticed that it is much easier for Ueli to win this game because he has the\n  first turn. Therefore they have adopted the following procedure: first, Ueli chooses an\n  integer $$$\\mathbf{N}$$$. Then, Vreni chooses any tree with $$$\\mathbf{N}$$$ vertices. And then they start playing\n  as described above, with Ueli taking the first turn.\n</p><p>\n  Vreni is hopeful that being able to choose the tree can help her overcome the disadvantage\n  of going second. Can you demonstrate how Vreni can win games in this setup?\n</p>\n\n<h3>Input and output</h3>\n<p>\n  This is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of our\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq\" target=\"_blank\">FAQ</a>.\n</p>\n<p>\n  Initially, your program should read a single line containing an integer,\n  $$$\\mathbf{T}$$$, the number of test cases. Then, $$$\\mathbf{T}$$$ test cases must be processed.\n</p>\n<p>\n  For each test case, your program must first read a line containing a single integer $$$\\mathbf{N}$$$,\n  the number of vertices that Ueli has chosen.\n  Then, your program must output $$$\\mathbf{N}-1$$$ lines describing the edges of the tree Vreni\n  should choose. The nodes of the tree are numbered $$$1$$$ through $$$\\mathbf{N}$$$.\n  Each line must represent a distinct edge of the tree with $$$2$$$ integers between\n  $$$1$$$ and $$$\\mathbf{N}$$$: the two vertices the edge connects.\n  The edges must represent a tree.\n  The two integers within a line may be in either order, and the $$$\\mathbf{N}-1$$$ lines themselves may\n  be in any order.\n</p>\n<p>\n  After that, your program must read a line containing a single integer $$$\\mathbf{M}$$$, the number of games\n  that you need to play on this tree. These games are played independently; in other words,\n  all vertices of the tree are blue at the start of each game.\n</p>\n<p>\n  For each of the $$$\\mathbf{M}$$$ games, you need to process some number of exchanges until the game is\n  over. Each exchange consists of a turn from each player.\n</p><p>\n  For each exchange, your program must read two lines describing Ueli's turn first.\n  The first of those lines will contain an\n  integer $$$\\mathbf{K}$$$, denoting the number of blue vertices to be colored red.\n  The second of those lines will contain $$$\\mathbf{K}$$$ distinct integers $$$\\mathbf{A_1}, \\mathbf{A_2}, \\dots, \\mathbf{A_K}$$$\n  describing the blue vertices to be colored red. $$$\\mathbf{K}$$$ will be at least 1, and each $$$\\mathbf{A_i}$$$\n  will be between 1 and $$$\\mathbf{N}$$$, inclusive. Vertices $$$\\mathbf{A_2}, \\mathbf{A_3}, \\dots, \\mathbf{A_K}$$$ will all be\n  neighbors of vertex $$$\\mathbf{A_1}$$$.\n</p>\n<p>\n  After that, your program must output Vreni's choice for their turn in the same format:\n  the first line with the number of blue vertices to be colored red, followed by the second\n  line with the numbers of those vertices, in such an order that all vertices\n  except the first one are neighbors of the first one.\n</p>\n<p>\n  If all vertices are red after Vreni's turn, it means that Vreni has won and this game is over.\n  The next game starts immediately if there is one. If this was the last game for this test case,\n  then the next test case starts immediately if there is one. If this was the last test case,\n  the judge will send no further input to your program, and the program must send no further output.\n</p>\n<p>\n  On the other hand, if all vertices are red after Ueli's move,\n  it means that Vreni has lost and therefore your program did not pass the test case.\n  In this case, instead of starting a new exchange by printing the last move\n  that colors all remaining blue vertices red, the judge will print a single number $$$-1$$$\n  and will not print any further output, and will not process any further games or test cases.\n</p>\n<p>\n  If the judge receives an invalidly formatted or invalid line (like outputting an\n  unexpected number of integers, or integers out of range, or outputting a set of edges\n  that do not form a tree, or trying to color a vertex\n  that is already red, or trying to color a vertex that is not a neighbor of the first\n  vertex colored in this turn) from your program at any moment, the judge\n  will also print a single number $$$-1$$$ and will not print any further output.\n  If your program continues to wait for the judge after\n  receiving a $$$-1$$$, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\n</p>\n<p>\n  The judge is deterministic. In other words, if you make two attempts that print the\n  same numbers, you will get the same inputs from the judge. However, of course the judge can make\n  different moves in different games on the same tree.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 60 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{M} \\le 50$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$\\mathbf{T}=1$$$.<br/>\n$$$\\mathbf{N}=30$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{T} \\le 10$$$.<br/>\n$$$31 \\le \\mathbf{N} \\le 40$$$.<br/>\nNo two test cases use the same value of $$$\\mathbf{N}$$$.<br/>\n</p>\n\n\n<h3>Testing Tool</h3>\n<p>\n  You can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use our <a href=\"https://storage.googleapis.com/coding-competitions.appspot.com/interactive_runner.py\">interactive runner</a>\n  for that. For more information, read the instructions in comments in that\n  file, and also check out the\n  <a href=\"/codejam/faq#interactive-problems\" target=\"_blank\">Interactive Problems section</a>\n  of the FAQ.\n</p><p>\n  Instructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it is <b>NOT</b>\n  the real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check the\n  <a href=\"/codejam/faq#coding\" target=\"_blank\">Coding section</a>\n  of the FAQ to make sure that you are using the same compiler as us.\n</p><p>\n<a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0Tt8uGLovUyT-7AikmlVcUxnS8fpNQOOu82q2spredh_E5aeU7I0bDe-YXeMDfQUaluA-AmccW_5ID4GjhuDHI/local_testing_tool.py3?dl=1\" download=\"testing_tool.py\">Download testing tool</a>\n</p>\n\n<p>\n  Note that the testing tool just makes random choices for Ueli unless it can win in one turn.\n  Therefore, it might be easier to win against the testing tool than against the real judge, which\n  will try harder to win.\n</p>\n\n\n  <div class=\"sample-interaction-wrapper\">\n    <div class=\"sample-interaction-header\">\n      <div class=\"sample-interaction-header-text\">Sample Interaction</div>\n    </div>\n    <div class=\"sample-interaction-content\">\n      <div class=\"sample-interaction-judge-solution-labels\">\n        <div class=\"sample-interaction-judge-label\">Judge</div>\n        <div class=\"sample-interaction-solution-label\">Solution</div>\n      </div>\n      \n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Number of cases<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 1<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge gives $$$\\mathbf{N}=3$$$.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">1 2\n1 3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution outputs a tree with 3 vertices.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">A single game will be played on this tree.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 1, Game 1 (illustrated above)<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1\n3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge colors the third vertex red. Note that the judge could have won immediately by coloring all vertices red, and therefore -1 would also be a possible output from the judge here.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">2\n1 2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution colors the two remaining vertices red and wins, so we move to the next test case since there was just one game to play in the first test case.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 2<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge gives $$$\\mathbf{N}=4$$$.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">1 2\n2 3\n2 4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution outputs a tree, pictured below.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Two games will be played on this tree.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 2, Game 1 (illustrated below)<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">3\n2 1 3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge colors the first three vertices red. Note that vertex 2 must be printed first here.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">1\n4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution colors the remaining vertex red and wins, so we move to the next game.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Case 2, Game 2 (illustrated below)<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">2\n2 3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge now makes a better first turn, coloring the two middle vertices red.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">1\n1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution colors the first vertex red.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">-1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">The judge can now win by coloring the last vertex red, so the solution is incorrect.<br>\n</div>\n\n    </div>\n  </div>\n\n\n<p>\n  Note that the sample interaction does not satisfy the constraints of either test set,\n  as its $$$\\mathbf{N}$$$ values are too small. It is only presented to clarify the input and output format.\n</p><p>\n  Below is an illustration of Case #2, Game #1 at the beginning and after each turn:\n</p><p align=\"center\">\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1Mw6cyEglwKZCFtycReTlpxh0V8Rrvdkg2orY4iDB4mbwesujt6yQ4eHk5su258x8LJ3RG6UT0dlTJ4N0kN3ryeeuJo0I4ojp8/win_as_second_example_2.png\" alt=\"Illustration of Sample Case #2 Game #1.\"/>\n</p><p>\n  Below is an illustration of Case #2, Game #2 at the beginning and after each turn:\n</p><p align=\"center\">\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1coI_Jl5JPlYkCh6zkCnQjDOjZLjOjlLFUz0QOrX7scs1mgGB7TvIwG1rXUbDEQLWykwn27eCEvpLekpWvbnjWXTdIWMQXT74K/win_as_second_example_3.png\" alt=\"Illustration of Sample Case #2 Game #2.\"/>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":13},{"type":2,"type__str":"HIDDEN","value":16}],"title":"Win As Second","trial_input_type":2,"trial_input_type__str":"JUDGE_CODE"},{"analysis":"<h3>Test Set 1</h3>\n<p>\n  Given the lower limits for $$$\\mathbf{N}$$$, we can check all possible contiguous subsets (as long as we check\n  each one quickly). One way is to iterate through all possible starting indices for the contiguous\n  subset. Then, for each starting index, we can loop through all possible sizes in order.\n</p><p>\n  We can keep track of the counts of each color as well as the number of hat colors have counts that\n  are invalid (not $$$\\mathbf{0}$$$ and not in the acceptable range for that color). Note that when we extend our\n  subset, only the hat color that the newly added child has is affected. If this changed whether or\n  not this color is valid, we update the count of valid and invalid colors as needed. Then, if this\n  count is equal to $$$\\mathbf{C}$$$, we can increment our total answer (as long as the subset is of length at\n  least $$$2$$$ and at most $$$\\mathbf{N} - 1$$$).\n</p><p>\n  Because checking each contiguous subset is done in $$$O(1)$$$ time and there are $$$O(\\mathbf{N}^2)$$$\n  subsets to check, our time complexity for Test Set 1 is $$$O(\\mathbf{N}^2)$$$.\n</p>\n<h3>Test Set 2</h3>\n<p>\n  For Test Set 2, $$$\\mathbf{N}$$$ is too large to check each contiguous subset separately. We can speed this up\n  by using a <a href=\"https://en.wikipedia.org/wiki/Segment_tree\" target=\"_blank\">Segment Tree</a>\n  to check all possible subset lengths at once (for each starting index). We can remove the cyclic\n  part of the problem by appending the array to itself.\n</p><p>\n  Given a starting index, $$$S$$$,\n  each color has two (possibly empty) ranges of ending indices that are valid for this color (meaning\n  the number of hats of this color is either 0 or in the acceptable range). If we use add $$$1$$$ to\n  our segment tree for each value in these ranges and for all colors, we can count the number\n  values (ending indices) in our segment tree for the range $$$[S + 1, S + \\mathbf{N} - 2]$$$ that have a\n  value of exactly $$$\\mathbf{N}$$$. This count will tell us how many contiguous subsets are valid for our current start index.\n</p><p>\n  Now, all we need to do is update our segment tree when moving the starting index to the right.\n  Notice that moving our starting index to the right by one will only affect the valid end index\n  ranges for the hat color of the child being removed (the one that previously was our starting index).\n  If we precompute for each position, where is the next occurrence of that child's hat color, we can compute how\n  the valid ranges for this color will move in $$$O(1)$$$. The exact implementation of this is left\n  as an exercise to the reader.\n</p><p>\n  Given that our segment tree operations each take $$$O(\\log \\mathbf{N})$$$ time, we can count the number\n  of contiguous subsets for each starting index and move the starting index to the right both in\n  $$$O(\\log \\mathbf{N})$$$ time. This gives us a final time complexity of $$$O(\\mathbf{N} \\log \\mathbf{N})$$$.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3gRxpRHNhRZaNrY2qfZw3v4j2lGg8vkm2ijcCKNinWPNMVz78IbCCTpYOZ0YhFCWziQ2vCRmJF/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000b45244","statement":"<h3>Problem</h3>\n<p>\nIn the game \"Duck, Duck, Goose\", all players but one sit on the floor and form a circle. The\nremaining player walks around the circle calling each player \"duck\" until they select one\nsitting player and, while touching their head, call them \"goose\" instead.\nAt that point, the goose chases the selecting player and our interest in the game fades.\n</p><p>\nIn the new game \"Duck, Duck, Geese\", the walking player instead chooses a contiguous subset of\nat least two (but not all) sitting players to be \"geese\"! Furthermore, each sitting player is\nwearing a hat. Each hat is one of $$$\\mathbf{C}$$$ possible colors, numbered $$$1$$$ through $$$\\mathbf{C}$$$.\n</p><p align=\"center\">\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1-D4XkYIswtcDX02x3NGQs2nZR3sw0gzQO7PGY72udvIeBLn-7Vbo7pk3Bq_ZJpNKo7XzRT8QHoWkYwxPODQbCJA/duck_duck_geese.png\"\n       alt=\"Illustration of Sample Case #2. 5 children seated on a grey mat in a circle.\n            In clockwise order (starting from the bottom-right child), the children have hats\n            of colors yellow, blue, yellow, blue, and blue.\"/>\n</p><p>\nFor each color $$$i$$$, the quantity of selected geese wearing a hat of color $$$i$$$\nmust be either $$$0$$$ or between $$$\\mathbf{A_i}$$$ and $$$\\mathbf{B_i}$$$, inclusive.\n</p><p>\nCan you help count the number of choices that fulfill these requirements? Two choices are\nconsidered different if there is some player that is included in one choice but not the other.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case starts with a line containing two integers $$$\\mathbf{N}$$$ and $$$\\mathbf{C}$$$: the number of sitting\nplayers and hat colors, respectively. Then, $$$\\mathbf{C}$$$ lines follow.\nThe $$$i$$$-th of these lines contains two integers $$$\\mathbf{A_i}$$$ and $$$\\mathbf{B_i}$$$, as explained above.\nThe last line of a test case contains $$$\\mathbf{N}$$$ integers\n$$$\\mathbf{P_1}, \\mathbf{P_2}, \\dots, \\mathbf{P_N}$$$ representing that the $$$j$$$-th sitting player in clockwise\norder (starting from an arbitrary one) is wearing a hat of color $$$\\mathbf{P_j}$$$.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the number of sets of\nat least $$$2$$$ and at most $$$\\mathbf{N}-1$$$ contiguously sitting players that fulfill all the color\nrequirements.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$2 \\le \\mathbf{C} \\le \\mathbf{N}$$$.<br/>\n$$$0 \\le \\mathbf{A_i} \\le \\mathbf{B_i} \\le \\mathbf{N}$$$, for all $$$i$$$.<br/>\n$$$1 \\le \\mathbf{P_j} \\le \\mathbf{C}$$$, for all $$$j$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$3 \\le \\mathbf{N} \\le 1000$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\n\n$$$3 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2BHU0EdzUc3F4PtPCKFA-5IGY7awyfmbOnVqrox_WDqBupdV1HigATHih_flALT7cgxnDh8_a6fjbaN9k5kyEkv8sP25UTNxEp2Imj6V0/duck_duck_geese_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3 2\n1 1\n1 1\n1 1 2\n5 2\n1 1\n1 2\n1 2 1 2 2\n3 3\n1 2\n1 2\n2 2\n1 1 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1yBrwIDqAmDYj5J5T21_PKeAznV03dOi9MmjrcJ4f5fNmGk3CHJqPMFIdzy7xDbmP8SuNImjVaqwXEjyVOgjYbeuvIids4H6aulDQFPBOy/duck_duck_geese_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 9\nCase #3: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the total number of players chosen as geese must be $$$2$$$. There are only\n  three possible ways to select $$$2$$$ players. The following color configurations are possible:\n  $$$[1, 1]$$$, $$$[1, 2]$$$, and $$$[2, 1]$$$. The first one has two players wearing\n  hats of color $$$1$$$, so it is not valid, but the other two are valid. Therefore the answer is\n  $$$2$$$.\n</p><p>\n  Sample Case #2 is the one illustrated in the statement, with color $$$1$$$ being yellow and\n  color $$$2$$$ being blue. The total number of players chosen as geese in this case\n  must be between $$$2$$$ and $$$3$$$, because selecting $$$4$$$ geese would require at\n  least one color to be out of bounds.\n  For cases with $$$2$$$ geese, the only requirement is that we do not select $$$2$$$ geese both\n  wearing hats of color $$$1$$$; all $$$5$$$ such selections are valid.\n  If choosing $$$3$$$ geese, the\n  options are $$$[1, 2, 1]$$$,  $$$[2, 1, 2]$$$, $$$[1, 2, 2]$$$,  $$$[2, 2, 1]$$$, or\n   $$$[2, 1, 2]$$$. All but the first one are valid, adding another $$$4$$$ valid options,\n  for a total of $$$9$$$.\n</p><p>\n  In Sample Case #3, notice that there can be hat colors that nobody is wearing. In this case,\n  since there is only $$$1$$$ player wearing hat color $$$3$$$ and $$$1$$$ is not in range,\n  the only valid way is to pick $$$0$$$ players wearing that hat color.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":12},{"type":2,"type__str":"HIDDEN","value":13}],"title":"Duck, Duck, Geese","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000008779b4","type":1,"type__str":"SPECTATOR"},"title":"Round 3 2022","ui_appearance":0,"ui_appearance__str":"APPEARANCE_TYPE_DEFAULT"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
