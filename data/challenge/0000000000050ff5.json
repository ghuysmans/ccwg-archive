{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1535271300000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000050ff5","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"Thanks to everyone who participated!  <br> <br> <br>\n  \nCast   <br> <br>\n  \nProblem A (Yogurt): Written Xuan'ang Zhao and prepared by Kevin Sun and Jonathan Irvin Gunawan.   <br>\n\nProblem B (Milk Tea): Written by Yiming Li and prepared by Shang-En Huang and Jonathan Irvin Gunawan.   <br>\n\nProblem C (Board Game): Written by Yiming Li  and prepared by Shang-En Huang and Jonathan Irvin Gunawan.   <br>\n <br> <br>\nSolutions and other problem preparation and review by Ian Tullis, Jonathan Irvin Gunawan, Lalit Kundu and Satyaki Upadhyay.   <br>\n <br> <br>\nAnalysis authors:   <br> <br>\n\nYogurt: Shimi Zhang  <br>\nMilk Tea: Kevin Tran  <br>\nBoard Game: Yiming Li  <br>\n","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1535260500000,"tasks":[{"analysis":"<h2>Yogurt: Analysis</h2>\n\n<p>\n  Intuitively, if Lucy wants to maximize the amount of yogurt she consumes, she should consume as\n  many cups as possible each day, and always choose a cup that is closest to expiring.\n</p>\n\n<h3>Small dataset</h3>\n<p>\n  We can directly implement the above strategy to solve the Small dataset, in which Lucy can only\n  consume one cup per day. On each day, we scan the list for the smallest unselected cup that has\n  not expired, consume it, and remove it from the list. Since we make up to <b>N</b> passes through\n  a list with up to <b>N</b> items, the time complexity is O(<b>N</b><sup>2</sup>).\n</p>\n<h3>Large dataset</h3>\n<p>\n  To improve the above strategy to solve the Large dataset, we can first sort the cups in\n  non-decreasing order of time until expiration. Then, on each day, we remove all expired cups from\n  the beginning of the list and then consume the next <b>K</b>. Since we only handle each cup in the\n  sorted list once, the initial sorting step determines the overall time complexity, which is\n  O(<b>N</b> log <b>N</b>).\n</p>\n\n<p>\n  But we can do even better! Notice that there are only <b>N</b> cups, and since <b>K</b> &ge; 1,\n  Lucy could consume or discard all of them in at most <b>N</b> days. So any <b>A<sub>j</sub></b>\n  &ge; <b>N</b> can be replaced with <b>N</b>. Then, we can count how may cups will expire on each\n  day, and then proceed backwards from the <b>N</b>th day to the first day. On each day, Lucy\n  consumes at most <b>K</b> cups, and moves any remaining cups from that day to the previous day,\n  since it is safe to consume them earlier. (Any extra cups left over on day 1 must be discarded.)\n  We make one forward pass through the data to count the cups and one reverse pass to answer the\n  question, so this strategy is O(<b>N</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2jsDjaVa-R9id84PXIg6YwpTJxSddnht1LxQPVJ_1_8RPZKdZ4xVlbzTUIlBBPU3cWYYKrNg/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000000510f1","statement":"<h3>Problem</h3>\n<p>\n  Yogurt can be a nutritious part of an appetizer, main course, or dessert, but\n  it must be consumed before it expires, and it might expire quickly! Moreover,\n  different cups of yogurt might expire on different days.\n</p><p>\n  Lucy loves yogurt, and she has just bought <b>N</b> cups of yogurt, but she\n  is worried that she might not be able to consume all of them before they\n  expire. The i-th cup of yogurt will expire <b>A<sub>i</sub></b> days from\n  today, and a cup of yogurt cannot be consumed on the day it expires, or on any\n  day after that.\n</p><p>\n  As much as Lucy loves yogurt, she can still only consume at most <b>K</b>\n  cups of yogurt each day. What is the largest number of cups of yogurt that\n  she can consume, starting from today?\n</p>\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow. Each test case starts with one line containing\n  two integers <b>N</b> and <b>K</b>, as described above. Then, there is one\n  more line with <b>N</b> integers <b>A<sub>i</sub></b>, as described above.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>,\n  where <code>x</code> is the test case number (starting from 1) and\n  <code>y</code> is the maximum number of cups of yogurt that Lucy can consume,\n  as described above.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1 GB.<br/>\n  1 &le; <b>K</b> &le; <b>N</b>.<br/>\n  1 &le; <b>A<sub>i</sub></b> &le; 10<sup>9</sup>, for all i.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  1 &le; <b>N</b> &le; 1000.<br/>\n  <b>K</b> = 1.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  1 &le; <b>N</b> &le; 5000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2BXgNLrZyBzCl3UBctuTKCySC932JiEHTiEwX1KoQdOpQhiThud3VA0uo8HDNL3K2Qx2fuP3930TlZOsz12CGQwl8Y/yogurt_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2 1\n1 1\n5 1\n3 2 3 2 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1ErK_OEvVaX3zuXs6iNfPFJ7uRkCpxwu6T4MjNrzHm02F8a3vnmmz5ynXCNI3_QBqiufNvS8ZfORfwgVETBhW4-Bm16g/yogurt_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, each of the two cups of yogurt will expire in one day.\n  Today, Lucy can consume one of them, but she can only consume at most one cup\n  each day, so she cannot consume both. Tomorrow, Lucy cannot consume the\n  remaining cup of yogurt, because it will have expired.\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U28dZrc9EEbJF6d-6TF1C1luH1eCaJEhVReAAW46wnhtkywmJFM6_utiTYwbm4MTfiW0wdza1VN8Tk39CyL343cX5cS/yogurt_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">2\n2 2\n1 1\n6 2\n1 1 1 7 7 7\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2mO3VxKutwLN7ZmqTWfaEwXExBqd7fgorx0gFypmp2KYgQBfkaJe4iE1-N4uP3PuO1Vj9pb7Pnh4FWt2STjnie_XIEeQ/yogurt_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 2\nCase #2: 5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, Lucy can consume up to two cups each day, so she can\n  consume all of the yogurt.\n</p>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":10}],"title":"Yogurt","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Board Game: Analysis</h2>\n<h3>Small dataset</h3>\n<p>\n  Bahu needs to determine the best possible card distribution given that Bala\n  will choose a distribution uniformly at random. In the Small dataset,\n  <b>N</b> = 3, so there are only 9! / 3! / 3! / 3! = 1680 different ways for a\n  player to distribute their cards. (If there are multiple cards with the same\n  strength value, some of these distributions may be practically equivalent,\n  but we will treat them as different for simplicity.) We can enumerate all\n  1680 possible distributions U<sub>i</sub> for Bahu, and all 1680 possible\n  distributions A<sub>j</sub> for Bala. (These variables are named after the\n  last letters of the players' names.) For each U<sub>i</sub>, we find the\n  fraction of all A<sub>j</sub>s that lose against that U<sub>i</sub>. The\n  largest such fraction is our answer. The time complexity is on the order of\n  1680<sup>2</sup> times a small constant factor.\n</p>\n\n<h3>Large dataset</h3>\n<p>\n  In the Large dataset, it is possible that <b>N</b> = 5. In that case, there\n  are 15! / 5! / 5! / 5! = 756756 different distributions. We cannot use the\n  above strategy with a 756756<sup>2</sup> time factor.\n</p><p>\n  Only the sums of the cards in the three battlefields matter; let them be U1,\n  U2, U3 for Bahu and A1, A2, A3 for Bala. Then Bahu wins if at least two of\n  the following inequalities are satisfied: U1 &gt; A1, U2 &gt; A2, U3 &gt; A3.\n</p><p>\n  We can deal with the \"at least two\" part of that criterion by using the\n  <a href=\"https://en.wikipedia.org/wiki/Inclusion%E2%80%93exclusion_principle\" target=\"_blank\">inclusion-exclusion principle</a>. Then, for each\n  U<sub>i</sub>:\n</p><p>\n  The number of A<sub>j</sub>s satisfying the above criterion =<br/>\n  The number of A<sub>j</sub>s satisfying U1 &gt; A1 and U2 &gt; A2 +<br/>\n  The number of A<sub>j</sub>s satisfying U1 &gt; A1 and U3 &gt; A3 +<br/>\n  The number of A<sub>j</sub>s satisfying U2 &gt; A2 and U3 &gt; A3 -<br/>\n  2 &times; the number of A<sub>j</sub>s satisfying U1 &gt; A1 and U2 &gt; A2\n  and U3 &gt; A3.\n</p><p>\n  The last of those quantities is the most difficult one to calculate. Here we\n  need another observation that there are only 15 choose 5 = 3003 different\n  possibilities for all U1, U2, U3. We can label these possibilities 1 through\n  3003.\n</p><p>\n  This is a 3-dimensional query, but we can remove 1 dimension by processing\n  the Us in increasing order of U1 and also preprocessing As in increasing order\n  of A1. After that, we can create a 2-dimensional segment tree\n  to store all (A2, A3)s that have A1 &lt; U1. We can find all (A2, A3)s such\n  that U2 &gt; A2 and U3 &gt; A3 in log 3003 &times; log 3003 time complexity.\n  The other 3 quantities in the equation above can also be found in a similar\n  way. The overall time complexity is on the order of 756756 &times; log 3003\n  &times; log 3003 times a small constant factor, which is fast enough to\n  solve this dataset.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3d9672phPfqqRwV2F39VtYAwjNgUNAQmzkB6LLmxhNCEyT19oIkUrOdIQ_qfy-VO0BZyiIGw/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000051184","statement":"<h3>Problem</h3>\n<p>\n  Bahu is playing a board game with Bala. Each player has <b>3 * N</b>\n  army cards with various <i>strength values</i>. There are 3\n  battlefields in the game. Each player must distribute their cards\n  among the battlefields, face down, such that each battlefield gets exactly\n  <b>N</b> of their cards.\n</p><p>\n  When the game begins, all cards will be revealed. For each battlefield,\n  each player sums up the strength values of their <b>N</b> cards in that\n  battlefield, and then the players compare those totals. If one player has a\n  higher total, that player wins that battlefield. If the totals are the same,\n  Bala wins that battlefield; this is his special advantage.\n</p><p>\n  The overall winner of the game is the player who wins the most battlefields.\n  (Since there are <b>3</b> battlefields, it is guaranteed that there will not\n  be an overall tie.)\n</p><p>\n  Bala thinks that his advantage is enough to make him win, so he just randomly\n  shuffles his cards and puts the first <b>N</b> on the first battlefield, the\n  next <b>N</b> on the second battlefield, and the last <b>N</b> on the third\n  battlefield.\n</p><p>\n  Even though Bahu is at a disadvantage, he is still going to try to win! Find\n  the probability that he will win if he distributes his cards optimally. Note\n  that all Bala's cards are faced down so Bahu must choose the distribution of\n  his cards before seeing the distribution of Bala's cards.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow; each consists of three lines. The first line\n  contains an integer <b>N</b>, as described above. The second line contains\n  <b>3 * N</b> integers <b>A<sub>0</sub></b>, <b>A<sub>1</sub></b>, ... ,\n  <b>A<sub>3*N-1</sub></b>, representing the strength values of Bahu's\n  cards. The third line consists of <b>3 * N</b> integers <b>B<sub>0</sub></b>,\n  <b>B<sub>1</sub></b>, ... , <b>B<sub>3*N-1</sub></b>, representing the\n  strength values of Bala's cards.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>,\n  where <code>x</code> is the test case number (starting from 1) and\n  <code>y</code> is the probability described above. <code>y</code> will be\n  considered correct if it is within an absolute or relative error of\n  10<sup>-6</sup> of the correct answer. See the\n  <a href=\"https://codingcompetitions.withgoogle.com/kickstart/faq\" target=\"_blank\">FAQ</a>\n  for an explanation of what that means, and what formats of real numbers we\n  accept.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 60 seconds per test set.<br/>\n  Memory limit: 1 GB.<br/>\n  1 &le; <b>A<sub>i</sub></b> &le; 10<sup>6</sup>, for all i.<br/>\n  1 &le; <b>B<sub>i</sub></b> &le; 10<sup>6</sup>, for all i.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  <b>N</b> = 3.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  3 &le; <b>N</b> &le; 5.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U38EMsFuTArXrHzfFmbz1FFvVOQ_fweRtdq6zW4omiUiWnjOK8-AZ1CAmB6Qo0z2Mafs4F2jXWixwze9gIsWqAh8Q-YiRCfCQ/board_game_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3\n2 2 2 2 2 2 2 3 3\n2 2 2 2 2 2 2 2 2\n3\n2 2 2 2 2 2 2 3 3\n2 2 2 2 2 2 2 2 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U35FHVzFcOhM16ZEarsq6uOG13M9o9nUaJ9jJRSbvkd4_TEGSIsBbDwb8xi7opK-Zp8GxMYlknLO3vpf-5q9Fundrv7rOx6U7A/board_game_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1.000000000\nCase #2: 0.333333333\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn Sample Case #1, Bahu can put cards (2, 2, 2) in first battle field, (2, 2, 3) in second battle field and (2, 2, 3) in third battle field. As all Bala's cards are 2, Bala wins the first battle field and Bahu wins the second and third battle field.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":10}],"title":"Board Game","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  For the Small dataset, there are only 2<sup><b>P</b></sup> different combinations of options\n  available. Since <b>P</b> is at most 10, there are only 1024 possible combinations. Take the\n  combination that gives the fewest mistakes that isn't forbidden.\n</p>\n<p>\n  For the Large dataset, first notice that there are at most 100 forbidden combinations. One approach is to generate the 101 combinations\n  that cause the fewest complaints and take the best one that is not forbidden (there is at least\n  one combination that is not forbidden in the top 101).\n</p>\n<p>\n  To generate these combinations, begin by noticing that in terms of the number of complaints you will get,\n  each of the options can be considered separately.\n  To help us later, preprocess for each option, how many complaints we would get if we were to get the milk tea with that option and without it. We will now build up the best combinations one option at a time.\n</p>\n<p>\n  Let T<sub>k</sub> denote the top 101 combinations that generate the fewest complaints when we consider\n  only the first k options, represented as a binary string (tiebreaking arbitrarily).\n\n  The key idea is to note that each combination in T<sub>k+1</sub> has a combination from T<sub>k</sub> as a prefix.\n</p>\n<p>\n  This is easy to show by contradiction.\n  Take any string S from T<sub>k+1</sub> and remove the last bit to get the prefix S'.\n  Suppose for a contradiction that S' is not T<sub>k</sub>.\n  Taking any string in T<sub>k</sub> and appending the removed bit will give a combination that generates strictly fewer (when\n  considering the tiebreak) complaints. This gives 101 strings that generate fewer complaints, which contradicts S being in T<sub>k+1</sub>.\n<p>\n  So the final algorithm is as follows:\n  <ol>\n    <li>T<sub>0</sub> is the empty set.</li>\n    <li>To generate T<sub>k</sub> (for k &gt; 0), take each string in T<sub>k-1</sub> and try appending both a 0 and a 1. This will give at most 202 potential answers, of which we keep the best 101 (in general, we keep the top <b>M</b>+1).</li>\n    <li>Take the best combination from T<sub><b>P</b></sub> that isn't forbidden.</li>\n  </ol>\n  Naively, this can be done in O(<b>P</b><sup>2</sup><b>M</b>), but can also be done faster in O(<b>PM</b>).\n  In total, the algorithm takes O(<b>PN</b> + <b>P</b><sup>2</sup><b>M</b>) or O(<b>PN</b> + <b>PM</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1apQt7HDQzB38S-31P3Y9anj7fWmQtFW3AUF4Trzo2HJRawO_YfpH-nRMEMiqR5MkaeRuEMA/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000051185","statement":"<h3>Problem</h3>\n<p>\n  The milk tea in China is very delicious. There are many binary (\"either-or\")\n  options for customizing a milk tea order, such as \"with ice\"/\"no ice\",\n  \"with sugar\"/\"no sugar\", \"with bubbles\"/\"no bubbles\",\n  \"with pudding\"/\"no pudding\", and so on. A customer's preferences for their\n  milk tea can be represented as a binary string. For example, using the four\n  properties above (in the order they are given), the string <code>1100</code>\n  means \"with ice, with sugar, no bubbles, no pudding\".\n</p><p>\n  Today, Shakti is on duty to buy each of his <b>N</b> friends a milk tea, at\n  a shop that offers <b>P</b> binary options. But after collecting everyone's\n  preferences, Shakti found that the order was getting too complicated, so\n  Shakti has decided to buy the same type of milk tea for everyone. Shakti\n  knows that for every friend, for every preference that is not satisfied, they\n  will complain once. For example, if two of the friends have preferences for\n  types <code>101</code> and <code>010</code>, and Shakti chooses type\n  <code>001</code>, then the first friend will complain once and the second\n  friend will complain twice, for a total of three complaints.\n</p><p>\n  Moreover, there are <b>M</b> different forbidden types of milk tea that the\n  shop will not make, and Shakti cannot choose any of those forbidden types.\n</p><p>\n  What is the smallest number of complaints that Shakti can get?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow. Each test case starts with a line containing 3\n  integers <b>N</b>, <b>M</b>, and <b>P</b>, as described above. Then, there\n  are <b>N</b> more lines, each of which contains a binary string; these\n  represent the preferences of the <b>N</b> friends. Finally, there are\n  <b>M</b> more lines, each of which contains a binary string; these represent\n  the forbidden types of milk tea that the shop will not make. Binary strings\n  consist only of <code>0</code> and/or <code>1</code> characters.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>,\n  where <code>x</code> is the test case number (starting from 1) and\n  <code>y</code> is the minimum number of complaints that Shakti can get, per\n  the rules described above.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 30 seconds per test case.<br/>\n  Memory limit: 1 GB.<br/>\n  All of the forbidden types of milk tea are different.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  1 &le; <b>N</b> &le; 10.<br/>\n  1 &le; <b>M</b> &le; min(10, 2<sup><b>P</b></sup> - 1).<br/>\n  1 &le; <b>P</b> &le; 10.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  1 &le; <b>N</b> &le; 100.<br/>\n  1 &le; <b>M</b> &le; min(100, 2<sup><b>P</b></sup> - 1).<br/>\n  1 &le; <b>P</b> &le; 100.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U20EGW7gvch-zFtMzmNBlLp62x-e596p9ct-owu7lSOqwJ8tRkj88ODkjMe1cNOf4oIRcEfycJEDBwu8j40H3-S0brPugQ/milk_tea_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3 1 4\n1100\n1010\n0000\n1000\n2 4 4\n1111\n1111\n1111\n0111\n1011\n1101\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U26dUktyuhBuwYQ-Mo8Wwv_7bSYU6JOiWcTxof3FWH_99x9q0_f8uM--041dHjYiTK5rpB39g30NqyBiB3DFegrCiwELef8/milk_tea_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4\nCase #2: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, there are 3 friends, and they want milk teas of types\n  <code>1100</code>, <code>1010</code>, and <code>0000</code>. If Shakti could\n  choose type <code>1000</code>, then each friend would complain once,\n  for a total of 3 complaints. However, type <code>1000</code> is not available\n  in the shop. So, given these constraints, an optimal solution is to choose\n  type <code>1100</code>. Then, his friends will complain 0, 2, and 2 times,\n  respectively, for a total of 4 complaints.\n</p><p>\n  In Sample Case #2, Shakti's best option is to choose type <code>1110</code>.\n  Each friend will complain once, for a total of 2 complaints. Notice that\n  different friends might have the same preferences. Also notice that the\n  limits for both the Small and Large datasets guarantee that there is always\n  at least one possible type of milk tea that is not forbidden.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":10}],"title":"Milk Tea","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000050ff5","type":1,"type__str":"SPECTATOR"},"title":"Round E"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
