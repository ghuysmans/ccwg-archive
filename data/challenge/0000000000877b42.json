{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1651318200000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000877b42","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Round 1C started with <i>Letter Blocks</i> which had contestants trying to stack towers of blocks into one megatower while adhearing to certain guidelines. Next, <i>Squary</i> tested contestants' mathematical skills as they tried to make a list of numbers \"squary\". Finally, <i>Intranets</i> truly put contestants to the test and had an extremely hard Test Set 2 asking for the probability that a network using a suboptimal routing algorithm would be broken up into a certain number of sub-networks.</p>\n\n<p>\nThe first perfect score took just over an hour, which was longer than both of the other Round 1s.\nThis gave <b>Laurie666</b> first place in the round. <b>VArtem</b> and <b>square1001</b> came in\nsecond and third place, respectively. Ultimately, 8 coders managed a perfect score.\nThe unofficial cutoff to advance to Round 2 is 34 points.\n</p>\n\n<p>\nThis wraps up our Round 1s for the year. We'll finalize the results in the coming\ndays. In the meantime, you can keep improving your skills by practicing on this round's or\nany past round's problems in the\n<a href=\"https://codingcompetitions.withgoogle.com/codejam/archive\" target=\"_blank\">archive</a>.\n</p><p>\nIf you placed in the top 1500, we will see you again in about 2 weeks as you join\n3000 participants coming from the other Round 1s to compete in Round 2. Don't forget\nto check your local time in the\n<a href=\"https://codingcompetitions.withgoogle.com/codejam/schedule\" target=\"_blank\">schedule</a>\npage. If you didn't earn enough points to advance, we hope you had a wonderful time\nwith our first 14 problems of the year. You are invited to follow along for the rest of the season,\nand we hope to see you again next year!\n</p>\n<hr>\n<p>\n  <b>Cast</b>\n</p>\n<p>\n  Letter Blocks: Written and prepared by Yeabkal Wubshit.\n</p><p>\n  Squary: Written by Onufry Wojtaszczyk. Prepared by Petr Mitrichev and Swapnil Gupta.\n</p><p>\n  Intranets: Written by Yui Hosaka. Prepared by Mahmoud Ezzat.\n</p><p>\nSolutions and other problem preparation and review by Abhilash Tayade, Aditya Mishra, Akul Siddalingaswamy, Anushi Maheshwari, Arjun Sanjeev, Chu-ling Ko, Hsin-Yi Wang, Ian Tullis, Ikumi Hide, Liang Bai, Mahmoud Ezzat, Md Mahbubul Hasan, Mohammad Abu Aboud, Nour Yosri, Pablo Heiber, Priyam Khandelwal, Ritesh Kumar, Shantam Agarwal, Timothy Buzzelli, Ulises Mendez Martinez, Yan Li, Yang Xiao, Yeabkal Wubshit, and Yui Hosaka.\n</p><p>\nAnalysis authors:\n</p><ul>\n  <li>Letter Blocks: Jakub Kuczkowiak.</li>\n  <li>Squary: Arjun Sanjeev.</li>\n  <li>Intranets: Dafeng Xu and Yui Hosaka.</li>\n</ul>\n","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1651309200000,"tasks":[{"analysis":"<p>\n  The\n  <a href=\"https://en.wikipedia.org/wiki/Multinomial_theorem\" target=\"_blank\">multinomial expansion\n  </a> for the power of 2 is the key to solving this problem.  The expansion of the\n  square of the sum of elements $$$X_1, X_2, \\ldots, X_n$$$ in the list $$$X$$$ looks like:\n</p>\n<p>\n  $$$$\\begin{align}\n  \\text{square of sum} &= (X_1 + X_2 + X_3 + \\ldots + X_N)^2 \\\\\n  &= X_1^2 + X_2^2 + X_3^2 + \\ldots + X_N^2 +\n  2 \\cdot X_1 \\cdot X_2 + 2 \\cdot X_2 \\cdot X_3 + 2 \\cdot X_1 \\cdot X_3 + \\ldots + 2 \\cdot X_{N-1} \\cdot X_N \\\\\n  &= \\text{sum of squares} + 2 \\cdot \\text{sum of pairwise products}\n  \\end{align}$$$$\n</p>\n<p>\n  Let $$$S(X)$$$ be the sum of elements, $$$SQ(X)$$$ be the sum of squares of elements, and\n  $$$SP(X)$$$ be the sum of all pairwise products of elements of the list $$$X$$$. We can now\n  rewrite the above equation as:\n</p>\n<p>\n  $$$$\n  S(X)^2 = SQ(X) + 2 \\cdot SP(X)\n  $$$$\n</p>\n<p>\n  We can also observe the following about how the above values change when an additional element\n  $$$n$$$ is added to the list $$$X$$$:\n  $$$$\\begin{align}\n  S(X + [n]) &= S(X) + n \\\\\n  SQ(X + [n]) &= SQ(X) + n^2 \\\\\n  SP(X + [n]) &= SP(X) + n \\cdot S(X)\n  \\end{align}$$$$\n</p>\n<p>\n  Our task is to achieve $$$S(E')^2 = SQ(E')$$$, where $$$E'$$$ is the extended list\n  that we get by adding extra elements to $$$\\mathbf{E}$$$.  In other words, we want to make $$$SP(E') = 0$$$.\n</p>\n\n<h3>\n  Test Set 1: $$$\\mathbf{K} = 1$$$\n</h3>\n<p>\n  If we are allowed only a single addition, we must choose an element $$$n$$$ such that\n  $$$SP(\\mathbf{E} + [n]) = 0$$$.\n  $$$$\\begin{align}\n  SP(\\mathbf{E} + [n]) = 0 \\\\\n  \\implies SP(\\mathbf{E}) + n \\cdot S(\\mathbf{E}) = 0 \\\\\n  \\implies n \\cdot S(\\mathbf{E}) = -SP(\\mathbf{E})\n  \\end{align}$$$$\n\n  If $$$S(\\mathbf{E}) \\neq 0$$$, we can get a squary list whenever $$$-SP(\\mathbf{E}) / S(\\mathbf{E})$$$ is an integer,\n  which happens if and only if $$$S(\\mathbf{E})$$$ divides $$$SP(\\mathbf{E})$$$. In that case,\n  $$$-SP(\\mathbf{E}) / S(\\mathbf{E})$$$ is our answer.\n</p>\n<p>\n  If $$$S(\\mathbf{E}) = 0$$$, then $$$S(\\mathbf{E} + [n]) = n$$$.  Since we want\n  $$$S(\\mathbf{E} + [n])^2 = SQ(\\mathbf{E} + [n])$$$, we need $$$SQ(\\mathbf{E} + [n]) = n^2$$$.  This is possible only if\n  $$$SQ(\\mathbf{E}) = 0$$$, that is, if all elements in $$$\\mathbf{E}$$$ are zeros. In this case, we can choose any\n  value as our answer. But if any element in $$$\\mathbf{E}$$$ is not zero, it is impossible to get a squary\n  list with only one addition.\n</p>\n\n<h3>\n  Test Set 2: $$$\\mathbf{K} > 1$$$\n</h3>\n<p>\n  At first, the search space might seem hopelessly broad here. But we can observe (or surmise and\n  then confirm) that it is always possible to get a squary list by adding only two elements:\n  <ul>\n    <li>$$$n_1 = 1 - S(\\mathbf{E})$$$</li>\n    <li>$$$n_2 = -SP(\\mathbf{E} + [n_1])$$$</li>\n  </ul>\n</p>\n<p>\n  After adding $$$n_1$$$, we have\n  $$$$\\begin{align}\n  S(\\mathbf{E} + [n_1]) = 1\n  \\end{align}$$$$\n\n  After adding $$$n_2$$$, we have\n  $$$$\\begin{align}\n  SP(\\mathbf{E} + [n_1, n_2]) &= SP(\\mathbf{E} + [n_1]) + n_2 \\cdot S(\\mathbf{E} + [n_1]) \\\\\n                     &= SP(\\mathbf{E} + [n_1]) + (-SP(\\mathbf{E} + [n_1])) \\cdot 1 \\\\\n                     &= 0\n  \\end{align}$$$$\n\n  Thus, the two numbers satisfy the condition $$$SP(E') = 0$$$.  We can also see that since the\n  numbers in the original list are each of magnitude no greater than $$$10^3$$$,\n  $$$|n_1| \\leq 10^6 + 1$$$, and $$$|n_2| \\leq 2 \\cdot 10^{12}$$$, both well within the limits.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1wOyYaCql1YQvw6oJM4OjSr2HsA3_W-xAl3r1H2S7S14PuaHxi2dMuqYM_PbR_y82z6P1N5JRV/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000afdf76","statement":"<h3>Problem</h3>\n<p>\nAddition and squaring do not commute. That is, the square of the sum of all elements of a list of\nintegers is not necessarily equal to the sum of the squares of those same elements. However, this\nis true for some lists; one example is $$$[3, -2, 6]$$$, because\n$$$(3 + (-2) + 6)^2 = 49 = 3^2 + (-2)^2 + 6^2$$$. Let us call these lists <i>squary</i>.\n</p>\n<p align=\"center\">\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1-f9uImofEuQFsYrrceUlJAH5jioKooP6WD18lIrJpYWvRzdRBBhTDnK_LJ0jRVdu8xajtZZ8Nog/squary.png\" alt=\"Image showing that (3 + (-2) + 6)^2 = 3^2 + (-2)^2 + 6^2.\"/>\n</p>\n<p>\nGiven a (not necessarily squary) list of relatively small integers, we want to know whether it is\npossible to add at least $$$1$$$ and at most $$$\\mathbf{K}$$$ more elements such that the final list is squary.\nEach added element must be an integer between $$$-10^{18}$$$ and $$$10^{18}$$$, inclusive, and\nthese do not have to be distinct from each other or from the initial list's elements.\n</p>\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case is described in two lines. The first line contains two integers $$$\\mathbf{N}$$$ and $$$\\mathbf{K}$$$,\nthe number of elements of the initial list and the maximum number of elements you may\nadd, respectively. The second line contains $$$\\mathbf{N}$$$ integers $$$\\mathbf{E_1}, \\mathbf{E_2}, \\dots, \\mathbf{E_N}$$$,\nrepresenting the $$$\\mathbf{N}$$$ elements of the initial list.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1). If it is possible to add at least $$$1$$$\nand at most $$$\\mathbf{K}$$$ elements (each an integer between $$$-10^{18}$$$ and $$$10^{18}$$$, inclusive) to\nthe initial list such that the square of the sum of its elements equals the sum of the squares of\nits elements, $$$y$$$ should be $$$z_1~z_2~\\dots~z_r$$$, where $$$1 \\le r \\le \\mathbf{K}$$$ and the\n$$$z_i$$$ values are the additional elements. If there is no way to accomplish this, $$$y$$$ should\nbe <code>IMPOSSIBLE</code>.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n  $$$1 \\le \\mathbf{N} \\le 1000$$$.<br/>\n  $$$-1000 \\le \\mathbf{E_i} \\le 1000$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\nTime limit: 5 seconds.<br/>\n\n$$$\\mathbf{K} = 1$$$.\n<div style=\"display: none\">1</div>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\nTime limit: 10 seconds.<br/>\n\n$$$2 \\le \\mathbf{K} \\le 1000$$$.\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U08jJKHJaVaMyWUE0NSGxlB7f3YVcpEeAZnjMfzm8jXsqDBbreLnaDYz0JzNAPXIelO2T0pT0CJ_6O9yHl2ucQj--vxil8/squary_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n2 1\n-2 6\n2 1\n-10 10\n1 1\n0\n3 1\n2 -2 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0fK54R1HLzfCeCcbuloOdWyrE2dFLmmZJDLc6ne7Jjycv4_G54llDzlRxDrmfRFlB2DDPuM7CwrE71JXIe_RDZcTxTEmBr/squary_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: IMPOSSIBLE\nCase #3: -1000000000000000000\nCase #4: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, we can end up with the example list given in the problem statement.\n</p><p>\n  In Sample Case #2, we have to add exactly one element. If we call that element $$$x$$$, the\n  sum of the entire list is $$$x$$$ and its square is $$$x^2$$$. The sum of the squares\n  of all elements, on the other hand, is $$$x^2 + 10^2 + (-10)^2 = x^2 + 200 \\neq x^2$$$, so\n  the case is impossible.\n</p><p>\n  In Sample Case #3, any integer in the $$$[-10^{18}, 10^{18}]$$$ range is a valid answer.\n</p><p>\n  In Sample Case #4, notice that the input might contain duplicate elements, and that it is valid\n  to create even more duplicates with the elements you choose to add.\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1bm0t_C1d4oSQ3-o1mLvIfIykSHzX057rjJ5GXkaJwRdre0VFm8RKNYXMkxvrkf_hX5lC_bRuc3pSV81CvsODWN4WN-YY/squary_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">3\n3 10\n-2 3 6\n6 2\n-2 2 1 -2 4 -1\n1 12\n-5\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0zx-BbmgbkAvVB2EyTx8G9MZqdyXPfktPxGdYdDRDa7ofqwS5T1DTaD0FjatIi5Cj4cJbRuHgG010O3EdXHIG6CRm_TYfR/squary_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 0\nCase #2: -1 15\nCase #3: 1 1 1 1 1 1 1 1 1 1 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Case #1 of the additional samples, we are given the example list from the problem statement,\n  which is already squary, but we need to add at least one element to it. Adding a $$$0$$$ keeps\n  the list squary.\n</p><p>\n  In Case #3 of the additional samples, we present one of multiple possible valid answers. Notice\n  that it is permissible to add fewer than $$$\\mathbf{K}$$$ elements; here $$$\\mathbf{K}$$$ is $$$12$$$ but we have only\n  added $$$11$$$ elements.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":9},{"type":1,"type__str":"VISIBLE","value":22}],"title":"Squary","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Let us first notice that this problem is equivalent to finding an order in which partial strings\n  should be concatanted such that occurrences of the same letter appear together.\n</p>\n\n<h3>\n  Test Set 1\n</h3>\n\n<p>\n  Since $$$\\mathbf{N}$$$ is at most $$$6$$$, the number of permutations of these strings is at most\n  $$$6! = 720$$$.\n</p>\n<p>\n  We can therefore generate all permutations and for each of them we need to verify the final string\n  which results of concatenating the input strings in that particular order.\n</p>\n<p>\n  Let us take a look at the string <code>CCCABDAEEF</code>. To verify the string it is enough to:\n  <li>\n    Get a set of letters: {A, B, C, D, E, F}\n  </li>\n  <li>\n    Create a grouped represantation of a string: <code>\"CABDAEF\"</code>\n  </li>\n  <li>\n    The string is good if and only if the lengths coincide.\n  </li>\n</p>\n<p>\n  If for at least one permutation the size matches, we can print out this string. Otherwise,\n  it's impossible.\n</p>\n<p>\n  The time complexity of this solution is $$$O(\\mathbf{N!}\\times\\sum_{i=1}^N |\\mathbf{S_i}|)$$$, which means $$$\\mathbf{N!}$$$\n  times the sum of the lengths of the input strings, because there are $$$\\mathbf{N!}$$$ permutations and the\n  verification of the final string takes linear time.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  In this test set $$$\\mathbf{N}$$$ can be $$$100$$$, so $$$\\mathbf{N!}$$$ is too large to enumerate all permutations.\n</p>\n<p>\n  First of all, we can verify that each of the strings $$$\\mathbf{S_i}$$$ meets the requirements from the task.\n  This can be done by applying the verification method described in the section above for each $$$\\mathbf{S_i}$$$\n  individually. If the verification fails for one of the input strings, then it will certainly fail\n  for any permutation of them and therefore we output <code>IMPOSSIBLE</code>.\n</p>\n<p>\n  Let us call middle letters all letters other than the first and last consecutive segment of\n  letters. Next, let us notice that if the string $$$\\mathbf{S_i}$$$ has more than $$$2$$$ distinct letters,\n  then:\n  <li>\n    If a letter is a middle letter in more than one input string, then those occurrences will not be\n    together in the final string regardless of the order in which we concatenate them. Therefore,\n    this case is impossible.\n  </li>\n  <li>\n    If the middle letters exist in a single input string, they don't influence the outcome as those\n    occurrences will be together in the final string regardless of the order in which we\n    concatenate. Therefore, in this case we can assume the input string is simply two letters long\n    removing everything except the first and last letter of it.\n  </li>\n  Therefore, for each middle letter we can count in how many strings it appears and if the answer is\n  more than $$$1$$$ for any of them, we can print out <code>IMPOSSIBLE</code>.\n</p>\n<p>\n  Since we also verified each string already, we know that each letter appears only in\n  $$$1$$$ block inside each $$$\\mathbf{S_i}$$$.\n</p>\n<p>\n  After this step the problem is now simplified into strings of two forms:\n  <li>\n    $$$X$$$: Represents the string consisting of only one block of letter $$$X$$$.\n  </li>\n  <li>\n    $$$XY$$$: Reperesents the string starting with a block of $$$X$$$ letters and ending with a\n    block of $$$Y$$$ letters.\n  </li>\n  If there are two strings of the form $$$X$$$ for the same letter, we can concatenate them as they\n  can't be separated by other strings in the final solution. If there are two strings of the form\n  $$$X_1Y_1$$$ and $$$X_2Y_2$$$, then the answer is <code>IMPOSSIBLE</code> if $$$X_1 = X_2$$$\n  (due to $$$Y_1$$$) or $$$Y_1 = Y_2$$$ (due to $$$X_2$$$), because it means that in any ordering,\n  there would be at least one block of a different letter between letters $$$X_1$$$ and $$$Y_1$$$.\n</p>\n<p>\n  Therefore for each string $$$\\mathbf{S_i}$$$, we can create the following mappings using sets:\n  <li>\n    If $$$\\mathbf{S_i}$$$ is of the form $$$X$$$, then insert $$$\\mathbf{S_i}$$$ into $$$single[X]$$$.\n  </li>\n  <li>\n    If $$$\\mathbf{S_i}$$$ is of the form $$$XY$$$, then insert $$$\\mathbf{S_i}$$$ into both $$$starts[X]$$$ and $$$ends[X]$$$.\n  </li>\n  In other words, $$$single[X]$$$, $$$starts[X]$$$ and $$$ends[X]$$$ must all contain exactly\n  $$$1$$$ element for each letter $$$X$$$. If the element already exists, we return\n  <code>IMPOSSIBLE</code>.\n</p>\n\n<h5>\n  Starting string\n</h5>\n<p>\n  Let us consider starting string as the input string which is not forced by any previous strings in\n  the final answer. When can the given string $$$\\mathbf{S_i}$$$ be a starting string?\n  <li>\n    If $$$\\mathbf{S_i}$$$ is of the form $$$X$$$, then there must be no other strings ending with letter $$$X$$$,\n    i.e. $$$ends[X] = \\mathbf{S_i}$$$.\n  </li>\n  <li>\n    If $$$\\mathbf{S_i}$$$ is of the form $$$XY$$$, then $$$starts[X] = \\mathbf{S_i}$$$ and $$$ends[X] = null$$$ and\n    $$$single[X] = null$$$.\n  </li>\n  With these two conditions, we consider a set of candidates $$$C$$$ containing all such starting\n  strings.\n</p>\n<h5>\n  Extending the block\n</h5>\n<p>\n  Let us consider we already built the partial answer $$$A$$$ which ends with letter $$$c$$$. If\n  there exists a string at $$$single[c]$$$, it is the last chance to append it, because otherwise it\n  would be separated by at least one block of another letter. Similarly, if there exists a string at\n  $$$starts[c]$$$, we must extend it now for the same reason.\n</p>\n<h5>\n  How to choose the starting string?\n</h5>\n<p>\n  It turns out that for starting a new block, we can choose an arbitrary candidate from the\n  candidates set.\n</p>\n<p>\n  $$$Proof$$$: Let us assume that we picked string $$$\\mathbf{S_i}$$$ as the starting string but the optimal\n  solution started the block with $$$\\mathbf{S_j}$$$. Let us consider the swapped optimal solution in which we\n  swap these blocks.\n</p>\n<p>\n  Let $$$\\mathbf{S_i}$$$ start with letter $$$a$$$ and $$$\\mathbf{S_j}$$$ with letter $$$b$$$. Then:\n</p>\n<p>\n  <li>\n    Optimal = |b..X|a....Y|\n  </li>\n  <li>\n    Optimal (swapped) = |a....Y|b..X|\n  </li>\n</p>\n<p>\n  Let us consider what happens after swapping:\n  <li>\n    Middle letters of these blocks: Any letters between $$$b$$$ and $$$a$$$ can't be\n    after $$$a$$$ and any letters after $$$a$$$ can't be before $$$a$$$. Therefore after swap they\n    also remain fine.\n  </li>\n  <li>\n    Letters $$$b$$$: Optimal solution can't have any $$$b$$$ letters after $$$a$$$. Therefore this\n    swap is okay.\n  </li>\n  <li>\n    Letters $$$a$$$: Since $$$\\mathbf{S_i}$$$ belongs to the candidate set, therefore $$$ends[a] = \\mathbf{S_i}$$$ or\n    $$$ends[a] = null$$$. It means, that there are either no strings ending in $$$a$$$ or\n    $$$\\mathbf{S_i}$$$ is the only string ending with $$$a$$$. Therefore $$$X$$$ can't end with $$$a$$$ and the\n    swap remains correct.\n  </li>\n</p>\n<h5>\n  Final solution\n</h5>\n<p>\n  Repeat:\n</p>\n<li>\n  1. Pick an arbitrary string from the candidate's set and start the block with it.\n</li>\n<li>\n  2. Let e = last letter of the current solution. If starts[e] != null, add starts[e] to current\n  solution and repeat step 2. Otherwise goto step 1.\n</li>\n<li>\n  3. If candidate's set is empty, print solution. Otherwise, print <code>IMPOSSIBLE</code>.\n</li>\n\n<p>\n  Time complexity:\n  $$$O(\\mathbf{N}\\times\\sum_{i=1}^N |\\mathbf{S_i}|)$$$, since we are touching each candidate only once.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1zWerZJBP9-nkpsPCXQrqbSDYAn7EQE3sWjvhTILydNzaaa9nYfejV5PYUrEBOmpo2qNf9ZReU/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000afe6a1","statement":"<h3>Problem</h3>\n<p>\nIt is a rainy day, so you are indoors building towers of letter blocks. A letter block is a wooden\ncube that has a letter printed on one of its sides. The font used for the letters makes the blocks\nhave a clear orientation: that is, there is only one side that can be pointed down (toward the\nfloor) and one side that can be pointed up (toward the ceiling).\n</p><p>\nYou have built multiple separate towers so far. Now you want to combine all of them into a single\nmegatower by choosing one of your towers as the base, then picking up another tower (without\nchanging the order of its blocks) and stacking the whole thing on top of that, and so\non, until all towers have been used.\n</p><p>\nAs an additional constraint for the megatower, for any two blocks that have the same letter, all\nblocks between them must also have that letter. That is, each letter of the alphabet that appears\nin the megatower needs to appear in one contiguous group (of one or more blocks).\n</p><p>\nFor example, consider the following three possible megatowers. (These are separate examples,\nnot built from the same original towers. Also note that the different block sizes are just for fun\nand are not part of the problem.)\n</p><p align=\"center\">\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3x7ryURfdWEPkPAFvraRNegK32Mw272m_44c4x9NEifkyLAYmoWQfJ7GKKwjY-BoGLo9YtZmrpf9IL950Klp0/letter_blocks.png\" alt=\"Towers of ABCCC, AAA, and ACBCC.\"/>\n</p><p>\nThe leftmost two megatowers are valid, since each letter appears in a contiguous group. However,\nthe rightmost megatower is not valid, because there is a <code>B</code> in between two\n<code>C</code>s.\n</p><p>\nGiven the towers that you have built so far, can you stack them all up into a valid megatower?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case is described by two lines. The first line consists of a single integer $$$\\mathbf{N}$$$,\nthe number of towers that are currently built. The second line consists of $$$\\mathbf{N}$$$ strings\n$$$\\mathbf{S_1}, \\mathbf{S_2}, \\dots, \\mathbf{S_N}$$$ representing the towers. Each of these strings consists of only\nuppercase letters. The $$$i$$$-th letter of each of\nthese strings is the letter on the $$$i$$$-th block from the bottom in the represented tower.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is a string representing a\nvalid megatower as described above, or the word <code>IMPOSSIBLE</code> if no valid megatower\ncan be built. (Notice that the string <code>IMPOSSIBLE</code> can never itself represent a valid\nmegatower, since the two <code>I</code>s have other letters in between.)\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 5 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le $$$ the length of $$$\\mathbf{S_i} \\le 10$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N} \\le 6$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N} \\le 100$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3w76oubkcSaSdV772wtpKaEPxTrMpwJbXQFBTOQ5PteDRo7Aq9A3a73vx7ljjIKFQ0_4Oo252Qni2dHxzuHnVZE7LPcDA9cixdeKrD/letter_blocks_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">6\n5\nCODE JAM MIC EEL ZZZZZ\n6\nCODE JAM MIC EEL ZZZZZ EEK\n2\nOY YO\n2\nHASH CODE\n6\nA AA BB A BA BB\n2\nCAT TAX\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U05siY0_v6QCFqA5XB9fp5fi9_6w2OMeZlZqWw3NdWMxbLl0cpxuRQz4I70QHBfxJzlYRlRc_jQaI13VbR2Dg_hymFzZt3JAgtj7pewPg/letter_blocks_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: ZZZZZJAMMICCODEEEL\nCase #2: IMPOSSIBLE\nCase #3: IMPOSSIBLE\nCase #4: IMPOSSIBLE\nCase #5: BBBBBAAAAA\nCase #6: IMPOSSIBLE\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, <code>JAMMICCODEEELZZZZZ</code> and <code>ZZZZZJAMMICCODEEEL</code> are the\n  only two valid outputs.\n</p><p>\n  In Sample Case #2, recall that <i>all</i> towers must be used in the megatower, so even though\n  the first five towers together would form a valid megatower (as in Sample Case #1), the\n  additional <code>EEK</code> makes the case impossible. No matter how the <code>EEL</code> and\n  <code>EEK</code> towers are stacked relative to each other, there will be at least two\n  non-contiguous groups of <code>E</code>s.\n</p><p>\n  In Sample Case #3, no matter how you stack the towers, either the two <code>O</code>s are\n  not contiguous or the two <code>Y</code>s are not contiguous.\n</p><p>\n  In Sample Case #4, there are non-<code>H</code> letters in between the <code>H</code>s of\n  <code>HASH</code>, so this case is also impossible.\n</p><p>\n  In Sample Case #5, this answer is the only valid one. Also notice that the towers are not\n  necessarily all distinct.\n</p><p>\n  In Sample Case #6, no matter how you stack the towers, the two <code>A</code>s cannot\n  be contiguous.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":10},{"type":1,"type__str":"VISIBLE","value":15}],"title":"Letter Blocks","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  We use terminology for\n  <a href=\"https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)\" target=\"_blank\">graphs</a>.\n  The vertices are the $$$\\mathbf{M}$$$ machines and the edges are the $$$\\binom{\\mathbf{M}}{2}$$$ links.\n</p>\n\n<h3>\n  Test Set 1\n</h3>\n<p>\n  Let's consider the process of assigning priorities to the edges one by one, from the highest\n  priority to the lowest. For simpicity, we number the $$$i$$$-th highest priority as priority\n  $$$i$$$ so that the smaller the number, the higher the priority.\n</p>\n<p>\n  Suppose we have assigned the highest $$$i$$$ priorities to $$$i$$$ edges, and we need to\n  assign the priority $$$(i+1)$$$ to a new edge. How can we do?\n</p>\n<p>\n  We have three types of choices. Suppose the new edge with the priority $$$(i+1)$$$ is $$$(u,v)$$$.\n  Let $$$S_i$$$ be the set of vertices that the edges with highest $$$i$$$ priorities connect with.\n</p>\n<ol>\n  <li>\n    If the vertices $$$u$$$ and $$$v$$$ don't occur in the previously assigned edges. I.e.\n    $$$u\\notin S_i, v\\notin S_i$$$, the number of such edges is $$$\\binom{\\mathbf{M}-|S_i|}{2}$$$. In this\n    case, $$$u$$$ and $$$v$$$ form a new intranet. So, the number of intranets increase by\n    $$$1$$$, and $$$|S_{i+1}|$$$ equals $$$|S_i|+2$$$.\n  </li>\n  <li>\n    If $$$u\\in S_i, v\\notin S_i$$$, the number of such edges is $$$|S_i|\\cdot (\\mathbf{M}-|S_i|)$$$. In \n    this case, $$$v$$$ joins the intranet in which $$$u$$$ is located. So, the number of intranets \n    does not change, and $$$|S_{i+1}|$$$ equals $$$|S_i|+1$$$.\n  </li>\n  <li>\n    If $$$u\\in S_i, v\\in S_i$$$, the number of such edges is $$$\\binom{|S_i|}{2}-i$$$. In this\n    case, the edge is not activated. So, the number of intranets do not change,\n    and $$$|S_{i+1}|$$$ equals $$$|S_i|$$$.\n  </li>\n</ol>\n\n<p>\n  Then, we can use a dynamic programming approach to solve Test Set 1. Let $$$\\text{dp}(i,j,k)$$$\n  denote the probability that we assign the highest $$$i$$$ priorities to the edges, the set of\n  vertices introduced by these $$$i$$$ edges has the size of $$$j$$$, and $$$k$$$ intranets have\n  been formed. The transition function can be deduced from the discussion above.\n  The time complexity is $$$O(\\mathbf{M}^4)$$$ and it is enough to pass Test Set 1.\n</p>\n<p>\n  We can speed this up to $$$O(\\mathbf{M}^2)$$$ by dropping $$$i$$$ from the keys. Let $$$\\text{dp}(j,k)$$$\n  denote the probability that after assigning the highest $$$i$$$ priorities for some $$$i$$$,\n  the set of vertices introduced by these $$$i$$$ edges has the size of $$$j$$$,\n  and $$$k$$$ intranets have been formed.\n  The transition is to assign the highest priority\n  <strong>among the edges of the types 1 and 2 above</strong>.\n  The probability of there being a new intranet is\n  $$$\\frac{\\binom{\\mathbf{M}-|S_i|}{2}}{\\binom{\\mathbf{M}-|S_i|}{2} + |S_i|\\cdot (\\mathbf{M}-|S_i|)}$$$\n  as we are no longer interested in priorities of the edges of the type 3 above.\n</p>\n\n<h3>\n  Observing the graph\n</h3>\n<p>\n  From the solution for Test Set 1, we see that each intranet corresponds to a pair of vertices\n  $$$(u, v)$$$ such that both $$$u$$$ and $$$v$$$ activate the edge $$$(u, v)$$$.\n  This fact can also be proved directly, and we describe here.\n</p>\n<p>\n  Let's fix an assignment of priorities and consider the directed graph\n  where the vertices are the machines and the edges are $$$(u, v)$$$ such that machine $$$u$$$ uses\n  the links connecting machines $$$u$$$ and $$$v$$$.\n  Since this graph is a functional graph (each vertex has outdegree $$$1$$$),\n  each connected component contains exactly one cycle (and possibly some chains of nodes leading\n  into the cycle).\n</p>\n<p>\n  A crucial observation is that the length of a cycle cannot be $$$3$$$ or more.\n  Assume the contrary: that vertices $$$u_1, \\ldots, u_c$$$ ($$$c \\ge 3$$$)\n  form a cycle in this order,\n  and let the priority of the link connecting $$$u_i$$$ and $$$u_{i+1}$$$ be $$$p_i$$$\n  (indices are modulo $$$c$$$).\n  Note that those links are distinct.\n  Since machine $$$u_i$$$ uses the link with highest priority, we have $$$p_i \\lt p_{i-1}$$$.\n  This gives us $$$p_1 \\gt p_2 \\gt \\cdots \\gt p_c \\gt p_1$$$, a contradiction.\n  As a self loop is also impossible, we conclude that every cycle in the graph has length $$$2$$$.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n<p>\n  Let's call the set of edges activated by both of their endpoints an <em>active matching</em>\n  as they form a\n  <a href=\"https://en.wikipedia.org/wiki/Matching_(graph_theory)\" target=\"_blank\">matching</a>.\n  Now the problem is to compute the probability that the size of the active matching is exactly $$$\\mathbf{K}$$$.\n</p>\n<p>\n  For a matching $$$X$$$, let $$$f(X)$$$ be the probability that the active matching is $$$X$$$.\n  Since it is not easy to compute $$$f(X)$$$ directly, we apply\n  <a href=\"https://en.wikipedia.org/wiki/Inclusion%E2%80%93exclusion_principle\" target=\"_blank\">inclusion&dash;exclusion principle</a>\n  technique and so let $$$g(X)$$$ be the probability that the active matching\n  <strong>contains</strong> $$$X$$$, that is, $$$g(X) = \\sum_{Y \\supseteq X} f(Y)$$$.\n  By inverting this, we have\n  $$$f(X) = \\sum_{Y \\supseteq X} (-1)^{\\lvert Y \\rvert - \\lvert X \\lvert} g(Y)$$$.\n  Our answer is then calculated as follows:\n  $$$$\\sum_{\\lvert X \\rvert = \\mathbf{K}} f(X)\n  = \\sum_{\\lvert X \\rvert = \\mathbf{K}} \\sum_{Y \\supseteq X} (-1)^{\\lvert Y \\rvert - \\lvert X \\lvert} g(Y)\n  = \\sum_{\\lvert Y \\rvert \\ge \\mathbf{K}} \\binom{\\lvert Y \\rvert}{\\mathbf{K}} (-1)^{\\lvert Y \\rvert - \\mathbf{K}} g(Y)\n  = \\sum_{i \\ge \\mathbf{K}} \\binom{i}{\\mathbf{K}} (-1)^{i-\\mathbf{K}} \\sum_{\\lvert X \\rvert = i} g(X)$$$$\n</p>\n<p>\n  All that remains is to compute $$$g(X)$$$.\n  Of course, this depends only on $$$\\lvert X \\rvert$$$, and we want to compute it when\n  $$$\\lvert X \\rvert = i$$$, for each $$$i = \\mathbf{K}, \\mathbf{K} + 1, \\ldots, \\mathbf{M}$$$.\n  There are $$$i!$$$ possible orders of priorities assigned to $$$X$$$.\n  Let's fix one of them and let the edges in $$$X$$$ be\n  $$$(u_1, v_1), (u_2, v_2), \\ldots, (u_i, v_i)$$$ from the lowest priority to the highest.\n  Then the condition that the active matching contains $$$X$$$ is equivalent to,\n  for each $$$j = 1, 2, \\ldots, i$$$, edge $$$(u_j, v_j)$$$ has the highest priority among edges\n  touching at least one of $$$u_1, v_1, \\ldots, u_j, v_j$$$.\n  Hence we have\n  $$$$g(X) = i! \\prod_{j=1}^i \\frac{1}{\\binom{\\mathbf{M}}{2} - \\binom{\\mathbf{M}-2j}{2}}.$$$$\n<p>\n  Here we note that the denominators can be factorized to see that they are not divisible by\n  $$$10^9+7$$$.\n  The number matchings of size $$$i$$$ is $$$\\frac{1}{i! 2^i} \\frac{\\mathbf{M}!}{(\\mathbf{M}-2i)!}$$$,\n  and this completes the $$$O(\\mathbf{M})$$$ time solution (the divisions can be done efficient\n  by using the factorization, though this is not necessary).\n</p>\n<p>\n  In fact, we can find the answers for $$$K = 1, \\ldots, \\lfloor \\frac{\\mathbf{M}}{2}\\rfloor$$$\n  at the same time in $$$O(\\mathbf{M} \\log \\mathbf{M})$$$ time:\n  The transformation from $$$g$$$ to $$$f$$$ can be represented by a convolution and we can use FFT.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2oDIrdPMpin3HsCiPTF3eZESqZEahn6ktcw0OD7B1EFmOaiygc41HoeGfUZHE3KZk4nn2oztpI/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000afeb38","statement":"<h3>Problem</h3>\n<p>\n  Apricot Rules LLC is developing a new simplified networking protocol and wants to show off their\n  routing algorithm. In their design, a network consists of $$$\\mathbf{M}$$$ machines numbered from $$$1$$$ to\n  $$$\\mathbf{M}$$$, and each pair of machines is connected by a direct link. Each of the links is given a unique\n  integer priority value between $$$1$$$ and $$$(\\mathbf{M} \\times (\\mathbf{M} - 1) / 2)$$$ and each machine routes traffic according\n  to those priorities.\n</p><p>\n  Unfortunately, the routing algorithm is too aggressive and will route all traffic from a machine\n  through the highest priority link connected to it. This may make some groups of machines\n  isolated from others.\n</p><p>\n  Formally, we say that a machine $$$m$$$ uses a link $$$\\ell$$$ if (and only if) $$$\\ell$$$ is the highest\n  priority link connected to $$$m$$$. We also say that a link is <i>active</i> if it is used by at\n  least one of the two machines it connects. Given the link priorities, the original network becomes\n  partitioned into disjoint intranets. Two machines belong to the same intranet if and only if there\n  is some path between them using only active links.\n</p>\n<p align=\"center\">\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U10-01ejNXzxongpqVCwBWmgi07OzdB9DB6gUHmNXD08I9Iei3O9oMnwbPV3jCF3e0VBE6Oosucm6YGXw/intranets.png\" alt=\"Example with 2 intranets. Active edges are (1, 2) and (3, 4) with weights 6 and 5 respectively.\" style=\"margin: 0 1rem;\"/>\n  <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1dAChMwpsGV3nqVFtPMxJRPuzKUfqxWsStgl0VfgGc7vKmXiDAw5seAX1sSuyk6Kdl2d-o4npnh21zJFs/intranets2.png\" alt=\"Example with 1 intranet. Active edges are (1, 2), (2, 3), and (3, 4) with weights 6, 5, and 4 respectively.\" style=\"margin: 0 1rem;\"/>\n</p>\n<p>\n  For example, as seen in the left image above, only the links with priorities $$$6$$$ and $$$5$$$\n  are active. This creates two disjoint intranets. However, in the example on the right, three links\n  are active, which results in one intranet consisting of all $$$4$$$ machines.\n</p>\n<p>\nAs part of the quality assurance team at Apricot Rules LLC, you are investigating the extent\nof the problem. You are interested in knowing the probability of there\nbeing exactly $$$\\mathbf{K}$$$ intranets if the priorities are assigned uniformly at random from among the\n$$$(\\mathbf{M} \\times (\\mathbf{M} - 1) / 2)!$$$ ways of doing so.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case is described in a single line containing two integers $$$\\mathbf{M}$$$ and $$$\\mathbf{K}$$$: the\nnumber of machines and the target number of intranets, respectively.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the sought probability\ncomputed modulo the prime $$$10^9+7$$$ ($$$1000000007$$$), which is defined precisely as follows.\nRepresent the probability as as an irreducible fraction $$$p/q$$$ (with $$$p$$$ and $$$q$$$ being\nnon-negative integers that minimize $$$p+q$$$). Then, $$$y$$$ must equal\n$$$p \\cdot q^{-1} \\bmod {10^9+7}$$$&NoBreak;, where $$$q^{-1}$$$ is the\n<a href=\"https://en.wikipedia.org/wiki/Modular_multiplicative_inverse\" target=\"_blank\">modular multiplicative inverse</a>\nof $$$q$$$ with respect to the modulus $$$10^9+7$$$. It can be shown that under the constraints of\nthis problem, such a number $$$y$$$ always exists and is unique.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 50$$$.<br/>\n$$$1 \\le \\mathbf{K} \\le \\mathbf{M} / 2$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n$$$2 \\le \\mathbf{M} \\le 50$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\nTime limit: 60 seconds.<br/>\n\n$$$2 \\le \\mathbf{M} \\le 5 \\times 10^5$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2DhlzghtrYDdIsDjA7WFHeS28rn3_D-gT0HZY4zm0P4_26RjTAliDj8JX4vyDbx8qV7fp5JWH8XcY_iSUuz7SgX3lcgZO4Zvk/intranets_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n5 2\n5 1\n6 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1-ygHDKgn8CnwRnKkmP-QdvpPoDhe5ATG4W22og2ZgprPg-YUaqHkpINXocPckmBL2unyM99ZvtLb2jwCqWfVrbxMQJTJGgYAr/intranets_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 428571432\nCase #2: 571428576\nCase #3: 47619048\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn Sample Case #1, consider the following situation.\nLet's call $$$\\mathbf{M} = 5$$$ machines $$$1, 2, 3, 4, 5$$$ and\ndenote the link connecting machine $$$a$$$ and machine $$$b$$$ by $$$(a, b)$$$.\nAssume that the priorities of links\n$$$(1, 2), (1, 3), (1, 4), (1, 5), (2, 3), (2, 4), (2, 5), (3, 4), (3, 5), (4, 5)$$$ are\n$$$9, 8, 7, 6, 5, 4, 3, 2, 1, 10$$$, respectively.\nThen machines $$$1$$$ and $$$2$$$ use link $$$(1, 2)$$$, machine $$$3$$$ uses link $$$(1, 3)$$$,\nand machines $$$4$$$ and $$$5$$$ use link $$$(4, 5)$$$.\nThus three links $$$(1, 2), (1, 3), (4, 5)$$$ are active,\nand there are two intranets $$$\\{1, 2, 3\\}$$$ and $$$\\{4, 5\\}$$$.\nSince $$$\\mathbf{K} = 2$$$, this situation counts the answer.\n</p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1Xs8Cw-4MDSnttQu0GkR0jEQExE5eNqhWiyeTHBSUuqNi6crB4nN3ga473fL4uc0OqamlvsY4gzwE2EFw/intranets3.png\" alt=\"Intranets sample case #1 example. 5 nodes with active edges (1, 2), (1, 3), and (4, 5) having weights 9, 8, and 10 respectively.\"/></p>\n<p>\nWe can find that there are $$$1555200$$$ ways to assign the priorities\nto have exactly $$$2$$$ intranets among $$$10! = 3628800$$$ ways, so the probability is $$$3/7$$$.\n</p><p>\nIn Sample Case #2, the probability is $$$4/7$$$.\n</p><p>\nIn Sample Case #3, the probability is $$$1/21$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":17},{"type":2,"type__str":"HIDDEN","value":27}],"title":"Intranets","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000877b42","type":1,"type__str":"SPECTATOR"},"title":"Round 1C 2022","ui_appearance":0,"ui_appearance__str":"APPEARANCE_TYPE_DEFAULT"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
