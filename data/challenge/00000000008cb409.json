{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1663531200000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"00000000008cb409","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Thank you for participating in Kick Start 2022 Round F!</p>\n<hr>\n<p><b>Cast</b></p>\n<p>Sort the Fabrics: Written by Ryan Moore and prepared by Shubham Avasthi.</p>\n<p>Water Container System: Written by Anurag Singh and prepared by Chu-ling Ko.</p>\n<p>Story of Seasons: Written by Chu-ling Ko and prepared by Chun-nien Chan.</p>\n<p>Scheduling a Meeting: Written by Adilet Zhaxybay and prepared by Viktoriia Kovalova.</p>\n<p>Solutions, other problem preparation, reviews and contest monitoring by\nAdilet Zhaxybay, Aman Singh, Anurag Singh, Anushi Maheshwari, Ashutosh Bang, Bakuri Tsutskhashvili, Bartosz Kostka, Bohdan Pryshchenko, Brijesh Panara, Chu-ling Ko, Chun-nien Chan, Cristhian Bonilha, Deepanshu Aggarwal, Diksha Saxena, Gagan Kumar, Hana Joo, Jackie Cheung, Jimmy Dang, Krists Boitmanis, Lizzie Sapiro Santor, Lucas Maciel, Pratibha Jagnere, Priyam Khandelwal, Rahul Goswami, Rohan Garg, Ryan Moore, Sachin Yadav, Sadia Atique, Sanyam Garg, Shubham Avasthi, Sourabh Pukale, Surya Upadrasta, Swapnil Gupta, Tarun Khullar, Teja Vardhan Reddy Dasannagari, Umang Goel, Viktoriia Kovalova, Vinamra Bathwal, Vinay Khilwani, Vishal Som, Wei Zhou, Yang Zheng.</p>\n<p>Analysis authors:</p><ul>\n<li>Sort the Fabrics: Sadia Atique</li>\n<li>Water Container System: Krists Boitmanis</li>\n<li>Story of Seasons: Chu-ling Ko</li>\n<li>Scheduling a Meeting: Adilet Zhaxybay</li>\n</ul>\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1663520400000,"tasks":[{"analysis":"<p>\n  Let us denote the fabric array sorted by Ada as $$$Ad$$$, and the one sorted by Charles as $$$Ch$$$.\n</p>\n<h4>\n  Test Set 1\n</h4>\n<p>\n  The maximum number of fabrics here is $$$2$$$.\n</p>\n<p>\n<b>One fabric</b>\n</p>\n<p>\n  When there's only one fabric, the answer is always 1.\n</p>\n<p>\n<b>Two fabrics</b>\n</p>\n<p>\n  When there are two fabrics, the answer is either 0 or 2.\n</p>\n<p>\n  If the two fabrics have the same color and the same durability, the sort will be done by the unique\n  identifier, leading to the same ordering of the fabrics in both $$$Ad$$$ and $$$Ch$$$; hence the answer is 2.\n</p>\n<p>\n  If the two fabrics have the same color, then $$$Ad$$$ would be sorted in the ascending order of the\n  unique identifier. We need to check, if the smaller unique index has the smaller durability of the\n  two fabrics or not. If yes, then the fabrics in $$$Ch$$$ will be in the same order as $$$Ad$$$, and the\n  answer is 2; otherwise the answer is 0.\n</p>\n<p>\n  If the two fabrics have the same durability, then $$$Ch$$$ would be sorted in the ascending order of the\n  unique identifier. We need to check, if the smaller unique index has the lexicographically\n  smaller color of the two fabrics, or not. If yes, then the fabrics in $$$Ad$$$ will be in the same\n  order as $$$Ch$$$, and the answer is 2; otherwise the answer is 0.\n</p>\n<p>\n  If the two fabrics have different colors and durabilities and if the less durable fabric also\n  has the lexicographically smaller color, then in both $$$Ad$$$ and $$$Ch$$$, the sorted array will\n  have the same order of fabrics, and the answer will be 2. If that is not the case, the answer is 0.\n</p>\n<p>\n  In all of the approaches discussed above, the time complexity is $$$O(1)$$$, which is sufficient\n  for Test Set 1.\n</p>\n<p>\n<h4>\n  Test Set 2\n</h4>\n<p>\n  We can create two instances of the fabric array,\n  and sort one of them to create $$$Ad$$$, and another one to create $$$Ch$$$.\n  Now, we can compare the two arrays, and the number of fabrics that have the same index in both of\n  them is the required answer.\n</p>\n<p>\n  Here, the time complexity of sorting by ascending durability is $$$O(\\mathbf{N}\\log\\mathbf{N})$$$, and the time\n  complexity of sorting by ascending color is $$$O(\\mathbf{N}\\log\\mathbf{N}\\times\\max|\\mathbf{C_i}|)$$$. Running a loop\n  over $$$Ad$$$ and $$$Ch$$$ is $$$O(\\mathbf{N})$$$. So, the total time complexity is\n  $$$O(\\mathbf{N}\\log\\mathbf{N}\\times\\max|\\mathbf{C_i}|)$$$, which is sufficient for Test Set 2.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U312IONMo5TmNEF2Ju0XFUOafIv3xoxMgycUEtc-WowFQjz1YTcwG7RpDdEup4rglyN0BUmZFjQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000beefbb","statement":"<h3>Problem</h3>\n<p>\nA fabric is represented by three properties:\n<ul>\n  <li>Color ($$$\\mathbf{C}$$$), a string consisting of lowercase letters of the English alphabet, representing\n    the color of the fabric.</li>\n  <li>Durability ($$$\\mathbf{D}$$$), an integer representing the durability of the fabric.</li>\n  <li>Unique identifier ($$$\\mathbf{U}$$$), an integer representing the ID of the fabric.</li>\n</ul>\n</p>\n<p>\nAda and Charles work at the Kick Start fabric factory. Each day they receive $$$\\mathbf{N}$$$\n  fabrics, and one of them has to sort it. They sort it using the following criteria:\n  <ul>\n    <li>Ada sorts in lexicographically increasing order by color ($$$\\mathbf{C}$$$).</li>\n  <li>Charles sorts in ascending order by durability ($$$\\mathbf{D}$$$).</li>\n  <li>They break ties by sorting in ascending order by the unique identifier ($$$\\mathbf{U}$$$).</li>\n  </ul>\n</p>\n<p>\n  Given $$$\\mathbf{N}$$$ fabrics, count the number of fabrics which end up in the same position regardless of\n  whether Ada or Charles sort them.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.<br/>\nEach test case begins with one line consisting of an integer $$$\\mathbf{N}$$$ denoting the number of fabrics. Then\n$$$\\mathbf{N}$$$ lines follow, each line with a string $$$\\mathbf{C_i}$$$, an integer $$$\\mathbf{D_i}$$$, and an integer $$$\\mathbf{U_i}$$$: the color, the\ndurability and the unique identifier of the $$$i$$$-th fabric respectively.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the number of fabrics which\nend up in the same position regardless of whether a worker sorts them by color or by durability.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le$$$ length of string $$$\\mathbf{C_i}$$$ $$$\\le 10$$$.<br/>\nString $$$\\mathbf{C_i}$$$ consists of only lowercase letters of the English alphabet.<br/>\nNo two fabrics have same $$$\\mathbf{U_i}$$$.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n$$$1 \\le \\mathbf{N} \\le 2$$$.<br/>\n$$$1 \\le \\mathbf{D_i} \\le 2$$$.<br/>\n$$$1 \\le \\mathbf{U_i} \\le 2$$$.<br/>\n</p>\n<h4>Test Set 2</h4>\n<p>\n\n$$$1 \\le \\mathbf{N} \\le 10^3$$$.<br/>\n$$$1 \\le \\mathbf{D_i} \\le 10^2$$$.<br/>\n$$$1 \\le \\mathbf{U_i} \\le 10^3$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0k8AHOTMGngG59G-nFgAqFREOmWovWrMPDXRcAE23j4A-_sXqFB78wfUoC745-yG6rkPDQRubSpLVgVTNKE73CIereVPnoS63z0TDxnPzQ/sort_the_fabrics_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n2\nblue 2 1\nyellow 1 2\n2\nblue 2 1\nbrown 2 2\n1\nred 1 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2n3sSs9IHl0hVm9jHQvkQhsFwn-yJNosLlRxmbqsFL0-CdiUX3IOa7V7jyj0zS2Zj0oUwRUftWCE4IwRgkVuwOojwJmPWrmeBrWHhdupIivw/sort_the_fabrics_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0\nCase #2: 2\nCase #3: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    In Sample Case #1, when sorted by color, the order of fabrics represented by the unique\n    identifier is $$$1$$$ and $$$2$$$. When sorted by durability, the order of fabrics is\n    $$$2$$$ and $$$1$$$. Therefore, $$$0$$$ fabrics have the same position when sorted by\n    color or durability.\n  </p>\n  <p>\n    In Sample Case #2, when sorted by color, the order of fabrics represented by the unique\n    identifier is $$$1$$$ and $$$2$$$. When sorted by durability, the order of fabrics is\n    also $$$1$$$ and $$$2$$$. Therefore, $$$2$$$ fabrics have the same position.\n    Notice that both fabrics have the same durability, so when Charles sorts them he\n    decides that fabric $$$1$$$ comes first because it has a smaller identifier.\n  </p>\n  <p>\n    In Sample Case #3, since there is only $$$1$$$ fabric, the position remains the same whether\n    the fabrics are sorted by color or durability.\n  </p>\n</sampleio>\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U12vY3UXjlsqAngH9uiKL9dR7y7QiNt1j1VKuLB-Po2H2p0DDyOM1wX6yIC6nJmbt1AfnJmnVOWzneYn_FueJOKtzZguxDmMOXdd5kQV8kG/sort_the_fabrics_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">1\n5\nblue 1 2\ngreen 1 4\norange 2 5\nred 3 6\nyellow 3 7\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2npV0GZB-oTwkM8b7GIecdfs6_2aGP7Iu6yyVrqrN_0SQyNJ1ugvu8xRQsn8IFhv_aQm7UhCWRBF6h57CRmQVgmSyACMb-OPPHrH4pmP8JWA/sort_the_fabrics_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    In Sample Case #1, the order is the same for both when sorted by color or durability. So the\n    answer is $$$5$$$.\n  </p>\n</sampleio>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":4},{"type":1,"type__str":"VISIBLE","value":8}],"title":"Sort the Fabrics","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  For each type of seeds $$$i$$$, let us use $$$deadline_i$$$ to represent the latest day it\n  should be planted to earn profits, where $$$deadline_i$$$ is calculated as\n    $$$$deadline_i = \\mathbf{D} - \\mathbf{L_i}.$$$$\n  Which means if one seed of type $$$i$$$ is planted on or before $$$deadline_i$$$, it can\n  mature and let us earn $$$\\mathbf{V_i}$$$ eventually. Otherwise it cannot. In other words, for each type $$$i$$$, if the\n  current day is already later than $$$deadline_i$$$, then all seeds of type $$$i$$$ are not worthy\n  to plant anymore.\n</p>\n\n<h3>\n  Test Set 1\n</h3>\n\n<p>\n  Since each vegetable has one seed and we can plant only one seed per day, we should plant one\n  seed everyday from the day one, until there is no seed available or worth to\n  plant. Since $$$\\mathbf{N}$$$ is very small in this case, we can use brute force search with dynamic programming\n  to implement it.\n</p>\n\n<p>\n  We can maintain a set $$$S$$$ that contains the types of seeds that are not planted yet. And on each day\n  $$$d$$$, we will try to plant every type $$$i$$$ from $$$S$$$. If $$$deadline_i \\leq d$$$, then we can\n  earn $$$\\mathbf{V_i}$$$ from this day's work, otherwise we earn $$$0$$$. And then we go on to the next day\n  $$$d$$$ with remaining types $$$S-\\{i\\}$$$ to see what maximum profit we can earn. Formally, we\n  have the recursive function as below:\n    $$$$ Profit(d, S) = MAX_{i \\in S}(Earn(d, i)+Profit(d+1, S-\\{i\\})), $$$$\n  where $$$Earn(d, i) = \\mathbf{V_i}$$$ if $$$d \\le deadline_i$$$ otherwise $$$Earn(d, i) = 0$$$. \n  Note that if $$$d$$$ is larger than $$$\\mathbf{D}$$$ or if $$$S$$$ is empty, then $$$Profit(d, S)$$$ should directly\n  return $$$0$$$. Then $$$Profit(1, \\{1, \\dots, N\\})$$$ is the answer of the problem.\n</p>\n\n<p>\n  We can use dynamic programming for the search. That is, prepare a table to store the answer of\n  every state $$$(d, S)$$$. Note that the value of $$$d$$$ is actually implied by the associated $$$S$$$\n  that $$$d = \\mathbf{N} - |S| + 1$$$. Therefore the total number of states equals to the number of\n  combinations of $$$S$$$, which is $$$O(2^\\mathbf{N})$$$. And in each searching state, we iterate through\n  all the available types in $$$S$$$, which is an $$$O(\\mathbf{N})$$$ operation. Therefore, the time\n  complexity of this solution is $$$O(\\mathbf{N} \\times 2^\\mathbf{N})$$$.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  Instead of searching for all possible combinations, we can use greedy strategy on this problem.\n  For simplicity, let us still use the limits that $$$\\mathbf{X} = 1$$$ and $$$\\mathbf{Q_i} = 1$$$ for all $$$i$$$.\n</p>\n\n<p>\n  We might not know which type to plant on day $$$1$$$ in order to achieve the optimal solution,\n  but we can find out which type to plant on day $$$\\mathbf{D}-1$$$. We just need to gather all types that\n  have $$$deadline_i \\geq \\mathbf{D}-1$$$ and choose the one with the maximum $$$\\mathbf{V_i}$$$ to plant on day $$$\\mathbf{D}-1$$$.\n</p>\n\n<p>\n  Let us prove that this is always the best choice. Say type $$$g$$$ is the one we select for day $$$\\mathbf{D}-1$$$ in\n  our greedy strategy, we need to prove that for any other schedule that does not plant type $$$g$$$ on\n  day $$$\\mathbf{D}-1$$$, we can always achieve better or the same profit by modifying it to plant $$$g$$$ on day\n  $$$\\mathbf{D}-1$$$:\n</p>\n\n<ul>\n  <li>\n    If a schedule does nothing on day $$$\\mathbf{D}-1$$$, and the seed $$$g$$$ does not exist in this\n    schedule: We can put $$$g$$$ in day $$$\\mathbf{D}-1$$$ of this schedule to increase the total\n    profit by $$$\\mathbf{V_g}$$$.\n  </li>\n  <li>\n    If a schedule does nothing on day $$$\\mathbf{D}-1$$$, but seed $$$g$$$ is scheduled to be planted on some\n    other day $$$d$$$: We can move $$$g$$$ from day $$$d$$$ to day $$$\\mathbf{D}-1$$$ of this schedule and\n    the total profit will stay the same.\n  </li>\n  <li>\n    If a schedule plant other seed $$$o$$$ on day $$$\\mathbf{D}-1$$$, and the seed $$$g$$$ does not exist in\n    this schedule: We can replace seed $$$o$$$ with seed $$$g$$$ on day $$$\\mathbf{D}-1$$$ to increase the\n    total profit by $$$\\mathbf{V_g}-\\mathbf{V_o}$$$. Since $$$g$$$ is the one with maximum value among the non-expired\n    seeds in day $$$\\mathbf{D}-1$$$, we have that $$$\\mathbf{V_g}-\\mathbf{V_o} \\geq 0$$$.\n  </li>\n  <li>\n    If a schedule plant other seed $$$o$$$ on day $$$\\mathbf{D}-1$$$, but the seed $$$g$$$ is scheduled to\n    be planted on some other day $$$d$$$: We can exchange seed $$$o$$$ and seed $$$g$$$ so that $$$o$$$\n    is planted on day $$$d$$$ and $$$g$$$ is planted on day $$$\\mathbf{D}-1$$$, and the total profit will\n    stay the same.\n  </li>\n</ul>\n\n<p>\n  Therefore, we are sure that planting the type with maximum $$$\\mathbf{V}$$$ among all non-expired types of\n  day $$$\\mathbf{D}-1$$$ is always the best. And for day $$$\\mathbf{D}-2$$$, $$$\\mathbf{D}-3$$$, $$$\\dots$$$, to day $$$1$$$,\n  we do the same for each of them because they can be seen as a smaller problem of the original one.\n</p>\n\n<p>\n  To implement this, we can sort the types by their deadline, and maintain a max-heap to store the\n  types with their values. Then we iterate from day $$$\\mathbf{D}-1$$$ to day $$$1$$$, put all the types\n  whose deadline is equal to the current day into the max-heap, and take the one with the\n  maximum value from the heap to assign for the current day.\n</p>\n\n<p>\n  This strategy can also be used on the case that $$$\\mathbf{X} > 1$$$ and $$$\\mathbf{Q_i} > 1$$$. For each day\n  with $$$\\mathbf{X}$$$ slots, we first insert all types that has deadline equal to the current day, then\n  repeatedly take one type from the heap to assign for the current day until the heap is empty or\n  the $$$\\mathbf{X}$$$ slots are filled.\n</p>\n\n<p>\n  In this implementation, we insert each type to the heap on the days equal to their deadline, so we totally insert\n  the heap $$$O(\\mathbf{N})$$$ times. We pop out each type whenever they are used up, so we totally pop the\n  heap $$$O(\\mathbf{N})$$$ times. We access the top from the heap on each new day and whenever a previous\n  type is used up, so the number of times we access the top of the heap is $$$O(\\mathbf{D}+\\mathbf{N})$$$. Therefore\n  the total time complexity we spend on operating the heap is $$$O((\\mathbf{D}+\\mathbf{N})\\times \\log\\mathbf{N})$$$. And\n  we spent $$$O(\\mathbf{N}\\times \\log\\mathbf{N})$$$ time on sorting the types by their deadline. Therefore the total\n  time complexity of this implementation is $$$O((\\mathbf{D}+\\mathbf{N})\\times \\log\\mathbf{N})$$$.\n</p>\n\n<h3>\n  Test Set 3\n</h3>\n\n<p>\n  In the implementation of Test Set 2, we iterate through all $$$\\mathbf{D}$$$ days to fill the slots. In this\n  case with $$$\\mathbf{D}$$$ up to $$$10^{12}$$$, we are not able to iterate through all of them. However,\n  only the days that new types are added to the heap need our attention, otherwise every day is\n  just some slots to fill.\n</p>\n\n<p>\n  Therefore, we can divide these $$$\\mathbf{D}$$$ days into several segments, where the end of each segment is\n  the deadline of some types. Then the number of slots of each segment is the length of the segment\n  times $$$\\mathbf{X}$$$. Then we iterate through the segments from the latest one, put all types with associated\n  deadline into the heap, and take the most expensive ones from the heap to fill the slots of the\n  current segment.\n</p>\n\n<p>\n  In this implementation, the number of segments is $$$O(\\mathbf{N})$$$. The number of times we insert and\n  pop the heap is the same as the implementation\n  of Test Set 2, which is $$$O(\\mathbf{N})$$$. And we access the top of the heap when we process each new\n  segment and whenever a previous type is used up, so the number of time we access the top is $$$O(\\mathbf{N})$$$.\n  Therefore the total time complexity we spend on operating the heap is $$$O(\\mathbf{N} \\times \\log\\mathbf{N})$$$.\n  With the $$$O(\\mathbf{N} \\times \\log\\mathbf{N})$$$ time we spent on sorting the deadlines and $$$O(\\mathbf{N})$$$ time\n  we spent on building the segments, the total time complexity of this solution is $$$O(\\mathbf{N} \\times \\log\\mathbf{N})$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1JHzQvoWyMu7aQrxEMVoIoL6spg3PcS7MhxB-TAamWl9oRaYrbohbjMzJWYg0TjSqTIWB5ar-2/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000bef319","statement":"<h3>Problem</h3>\n\n<p>\n  You are a super farmer with some vegetable seeds and an infinitely large farm. In fact, not only\n  are you a farmer, but you are also secretly a super programmer! As a super programmer, you hope\n  to maximize the profit of your farming using your programming skills.\n</p>\n\n<p>\n  Since your daily energy is limited, you can plant at most $$$\\mathbf{X}$$$ seeds each day. In the\n  beginning, you have $$$\\mathbf{N}$$$ kinds of vegetable seeds. The number of seeds of the $$$i$$$-th kind of\n  vegetable is $$$\\mathbf{Q_i}$$$, and each seed of this kind needs $$$\\mathbf{L_i}$$$ days to mature from the day it is\n  planted. Once it matures, you can sell it for $$$\\mathbf{V_i}$$$ dollars. Assume that no energy or time is\n  required for harvesting and selling vegetables. Also, your\n  farm is infinitely large so the growing vegetables do not crowd out each other.\n</p>\n\n<p>\n  Notice that although the area of your farm is infinite, the number of days that you can plant seeds\n  is limited. The warm season only lasts $$$\\mathbf{D}$$$ days, and after that, the harsh winter comes. Any\n  vegetable that has not matured yet will die immediately and cannot be turned into profit. The remaining\n  seeds that were not planted cannot be turned into profit either.\n</p>\n\n<p>\n  As a super farmer and a super programmer, you want to come up with a perfect planting plan that will\n  maximize your profit. Find the total amount of profit you will earn.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.<br/>\n  The first line of each test case contains three integers $$$\\mathbf{D}$$$, $$$\\mathbf{N}$$$, and $$$\\mathbf{X}$$$: the number of days of\n  the warm season, the number of kinds of vegetable seeds you have to start with, and the maximum number\n  of seeds you can plant each day, respectively. <br/>\n  The next $$$\\mathbf{N}$$$ lines describe the seeds. The $$$i$$$-th\n  line contains three integers $$$\\mathbf{Q_i}$$$, $$$\\mathbf{L_i}$$$, and $$$\\mathbf{V_i}$$$: the quantity of this kind of seed, the\n  number of days it needs to mature, and the value of each matured plant, respectively.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\n  where $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the maximum amount of money\n  you can earn by optimizing your farming plan.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{V_i} \\le 10^6$$$, for all $$$i$$$.<br/>\n$$$1 \\le \\mathbf{L_i} \\le \\mathbf{D}$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n$$$2 \\le \\mathbf{D} \\le 1000$$$.<br/>\n$$$1 \\le \\mathbf{N} \\le 15$$$.<br/>\n$$$\\mathbf{X} = 1$$$.<br/>\n$$$\\mathbf{Q_i} = 1$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 60 seconds.<br/>\n\n$$$2 \\le \\mathbf{D} \\le 10^5$$$.<br/>\n$$$1 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n$$$1 \\le \\mathbf{X} \\le 10^9$$$.<br/>\n$$$1 \\le \\mathbf{Q_i} \\le 10^6$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 3</h4>\n<p>\nTime limit: 60 seconds.<br/>\n\n  $$$2 \\le \\mathbf{D} \\le 10^{12}$$$.<br/>\n  $$$1 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n  $$$1 \\le \\mathbf{X} \\le 10^9$$$.<br/>\n  $$$1 \\le \\mathbf{Q_i} \\le 10^6$$$, for all $$$i$$$.<br/>\n  $$$\\mathbf{D} \\times \\mathbf{X} \\le 10^{18}$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U15kV0oFyZFk4OGnOA7kSlDpgyL2aSI4sI5PRZUC_mmpvy0tvb9Y3Al4Xx38noy_hxRZCvQO_dw4Y-GfmmhSrab62Zd2V6iqOXYJ4o1g7sQ/story_of_seasons_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5 4 1\n1 2 3\n1 3 10\n1 4 5\n1 2 2\n5 1 1\n1 1 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0CbtyPdGbbihAm_TT_95MIC5I4sZLPBFjdh3HcD0Ky-MdGC4CfIiLw4w4dTdW3sLWe4BSo7RVoZbZidjUjnaRECC75O6fQ8nFH3QEIX22_Dw/story_of_seasons_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 18\nCase #2: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn Sample Case #1, there are $$$\\mathbf{D} = 5$$$ days, $$$\\mathbf{N} = 4$$$ kinds of vegetables and you\ncan plant at most $$$\\mathbf{X} = 1$$$ seed each day. Supposing the $$$4$$$ kinds of vegetables are\nspinach, pumpkin, carrot and cabbage, we have that\n<ul>\n  <li> Spinach needs $$$2$$$ days to grow, each matured one is worth $$$3$$$ dollars, and you start with $$$1$$$ spinach seed.</li>\n  <li> Pumpkin needs $$$3$$$ days to grow, each matured one is worth $$$10$$$ dollars, and you start with $$$1$$$ pumpkin seed.</li>\n  <li> Carrot needs $$$4$$$ days to grow, each matured one is worth $$$5$$$ dollars, and you start with $$$1$$$ carrot seed.</li>\n  <li> Cabbage needs $$$2$$$ days to grow, each matured one is worth $$$2$$$ dollars, and you start with $$$1$$$ cabbage seed.</li>\n</ul>\n<br>\nThe maximum profit you can make is $$$18$$$ dollars. One of the schedules you can use is:\n<ul>\n  <li> Day 1: plant $$$1$$$ carrot</li>\n  <li> Day 2: plant $$$1$$$ pumpkin</li>\n  <li> Day 3: plant $$$1$$$ spinach</li>\n  <li> Day 4: plant $$$1$$$ cabbage</li>\n  <li> Day 5: do nothing</li>\n</ul>\n<br>\nAnd with this schedule, the vegetables will mature and turn into profit as following days:\n<ul>\n  <li> Day 1: nothing harvested</li>\n  <li> Day 2: nothing harvested</li>\n  <li> Day 3: nothing harvested</li>\n  <li> Day 4: nothing harvested</li>\n  <li> Day 5: $$$1$$$ spinach, $$$1$$$ pumpkin and $$$1$$$ carrot harvested, you earn $$$18$$$ dollars</li>\n</ul>\n<br>\nNote that the cabbage is supposed to mature on day $$$6$$$, but it will actually die because of the winter.\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3kwZ8z7_r-nAeHoFK8gV8OwznQDeJEWHx2P4wDi-uuu8ZMrWsib7M7n-7HA0g7nMHqT5ixkP7NRBLldY_GQOLT4Zk32-7xpSOSoF0lAmCl/story_of_seasons_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">1\n5 3 4\n5 2 3\n2 3 10\n2 4 5\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0ko6BE_r0a2FbB07XQsBvaWrJPulpmYwi7liCR5TDXovzc4BZX4TJp_ghFSjXShy4RkFckg5yEujYmRPYeg8RuUfP5cw4bmmj6CvBHW-rq7w/story_of_seasons_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 45</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn Additional Sample Case #1, there are $$$\\mathbf{D} = 5$$$ days, $$$\\mathbf{N} = 3$$$ kinds of vegetables and you\ncan plant at most $$$\\mathbf{X} = 4$$$ seeds each day. Supposing the $$$3$$$ kinds of vegetables are\nspinach, pumpkin and carrot, we have that\n<ul>\n  <li> Spinach needs $$$2$$$ days to grow, each matured one is worth $$$3$$$ dollars, and you start with $$$5$$$ spinach seeds.</li>\n  <li> Pumpkin needs $$$3$$$ days to grow, each matured one is worth $$$10$$$ dollars, and you start with $$$2$$$ pumpkin seeds.</li>\n  <li> Carrot needs $$$4$$$ days to grow, each matured one is worth $$$5$$$ dollars, and you start with $$$2$$$ carrot seeds.</li>\n</ul>\n<br>\nThe maximum profit you can make is $$$45$$$ dollars. One of the schedules you can use is:\n<ul>\n  <li> Day 1: plant $$$1$$$ pumpkin, $$$2$$$ carrots and $$$1$$$ spinach</li>\n  <li> Day 2: plant $$$2$$$ spinach and $$$1$$$ pumpkin</li>\n  <li> Day 3: plant $$$2$$$ spinach</li>\n  <li> Day 4: do nothing</li>\n  <li> Day 5: do nothing</li>\n</ul>\n<br>\nAnd with this schedule, the vegetables will mature and turn into profit as following days:\n<ul>\n  <li> Day 1: nothing harvested</li>\n  <li> Day 2: nothing harvested</li>\n  <li> Day 3: $$$1$$$ spinach harvested, you earn $$$3$$$ dollars</li>\n  <li> Day 4: $$$2$$$ spinach and $$$1$$$ pumpkin harvested, you earn $$$16$$$ dollars</li>\n  <li> Day 5: $$$2$$$ spinach, $$$1$$$ pumpkin and $$$2$$$ carrots harvested, you earn $$$26$$$ dollars</li>\n</ul>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":9},{"type":1,"type__str":"VISIBLE","value":12},{"type":1,"type__str":"VISIBLE","value":14}],"title":"Story of Seasons","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Because of the <a href=\"https://en.wikipedia.org/wiki/Communicating_vessels\" target=\"_blank\">\n  Communicating vessels</a> principle, all containers in the same level are filled up equally, and\n  containers of level $$$i$$$ will start filling up only when all containers of level $$$i-1$$$ are\n  full. This principle is also evident from the example in the problem statement, which we repeat\n  here. The first liter of water added flows down to container $$$1$$$ filling it up completely.\n  Since the first level consisting of just the root container is now filled completely, the\n  second liter of water starts filling both containers of the second level equally. The same effect\n  would have been achieved if we were to add water to any container other than container $$$3$$$.\n  The third liter of water fills up the second level completely, and only then the sole container\n  in the third level is filled up with the fourth and final liter of water.\n</p>\n<p align=\"center\">\n  <img\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1v2F7DOc8BKUt2BzW25-vSi_F3yvG6I_motat2RtaWHtBFC-YR6tNLo6v7ncH2ZUAYnn_kszIq-6cNxxXHUlf7vxKztPFQfXNL/water_container_flow.png\"\n    width=\"100%\"\n    alt=\"Image describing the flow of water in the water container system\"\n  />\n</p>\n<p>\n  As we can see, it does not even matter, which containers are used for adding more water to the\n  system. All we need to know is the final volume of water in the system, which is $$$\\mathbf{Q}$$$ liters, and\n  the number of containers $$$C_i$$$ in each level. Then the number of containers at level $$$i$$$\n  or below is $$$S_i=\\sum_{j=1}^i C_j$$$, and the answer is the largest $$$S_i$$$ such that\n  $$$S_i \\le \\mathbf{Q}$$$.\n</p>\n\n<h3>\n  Test Set 1\n</h3>\n\n<p>\n  Since we are dealing with a perfect binary tree in this test set, $$$C_i=2^{i-1}$$$, and the\n  solution boils down to the following simple loop. We just add powers of $$$2$$$ to the answer\n  as long as it does not exceed the limit $$$\\mathbf{Q}$$$.\n</p>\n\n<pre>\n  int solve(int Q) {\n    int ans = 0;\n    int C = 1;\n    while (ans + C &lt;= Q) {\n      ans += C;\n      C *= 2;\n    }\n    return ans;\n  }\n</pre>\n\n<p>\n  The time complexity of this solution is proportional to the depth of the tree, which is\n  $$$O(\\log \\mathbf{N})$$$.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  Here we have an arbitrary rooted tree, so we must make the extra effort to count the number of\n  containers $$$C_i$$$ in each level using any tree traversal algorithm, for example,\n  <a href=\"https://en.wikipedia.org/wiki/Depth-first_search\" target=\"_blank\">Depth-first search</a>.\n  Otherwise, the logic remains the same.\n</p>\n\n<pre>\n  int solve(int Q, vector&lt;int&gt; C) {\n    int ans = 0;\n    int level = 1;\n    while (level &lt; C.size() &amp;&amp; ans + C[level] &lt;= Q) {\n      ans += C[level];\n      level++;\n    }\n    return ans;\n  }\n</pre>\n\n<p>\n  The time complexity of this solution is $$$O(\\mathbf{N})$$$ because of the Depth-first search.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2jLrX9pHDQflZGQ57YaazKuNq2OJKSeN0UHWA1NImMU19Uw-r9zwrd2WbRsejJRhuVgzHFVVpo/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000bef79e","statement":"<h3>Problem</h3>\n<p>\n  There is a water container system with $$$\\mathbf{N}$$$ identical containers, which can be\n  represented as a tree, where each container is a vertex. The containers are\n  connected to each other with $$$\\mathbf{N}-1$$$ bidirectional pipes. Two containers\n  connected to each other are always placed on adjacent levels. Formally, if two\n  containers $$$a$$$ and $$$b$$$ are connected to each other, then $$$|level_a -\n  level_b | = 1$$$. Container $$$1$$$ is placed at the bottommost level. Each\n  container is connected to exactly one container on the level below (the only\n  exception is container $$$1$$$, which has no connections below it), but can be\n  connected to zero or more containers on the level above. The maximum capacity\n  of each container is $$$1$$$ liter, and initially all the containers are\n  empty. Assume that the pipe has a capacity of $$$0$$$ liters. In other words,\n  they do not store any water, but only allow water to pass through them in any\n  direction.\n</p>\n<p>\n  Consider the following diagram which is an example of a water container\n  system:\n</p>\n<p align=\"center\">\n  <img\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2z0rM2mBCTSCtg6ikpT9T5DeGE1c38s_qeK9otlAtlHTOdsITt8_wpIQeNgyd5u5iJLDQps8Y0tWL4ibx76Y_AeVjWsVzoP8sxs_Tuodtdhv-Ma4J3Cg/water_container_problem_statement.png\"\n    width=\"50%\"\n    alt=\"Image of the water container system for the problem statement\"\n  />\n</p>\n<p>\n  The first level of the system consists of a single container, container\n  $$$1$$$ (root). Container $$$1$$$ is connected to container $$$2$$$ and\n  container $$$3$$$, which are present in the above level, level $$$2$$$.\n  Container $$$2$$$ is also connected to container $$$4$$$, which is present at\n  level $$$3$$$.\n</p>\n<p>\n  You are given $$$\\mathbf{Q}$$$ queries. Each query contains a single integer $$$i$$$ which\n  represents a container. For each query, add an additional $$$1$$$ liter of\n  water in container $$$i$$$.\n</p>\n<p>\n  The following diagram illustrates the flow of the water in the system in\n  different conditions:\n</p>\n<p align=\"center\">\n  <img\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1v2F7DOc8BKUt2BzW25-vSi_F3yvG6I_motat2RtaWHtBFC-YR6tNLo6v7ncH2ZUAYnn_kszIq-6cNxxXHUlf7vxKztPFQfXNL/water_container_flow.png\"\n    width=\"100%\"\n    alt=\"Image describing the flow of water in the water container system\"\n  />\n</p>\n<p>\n  In step $$$1$$$, after adding $$$1$$$ liter of water in container $$$3$$$, the\n  water flows downward because the water containers at the lower level are still\n  empty.<br />\n  In step $$$2$$$, after adding $$$1$$$ liter of water in container $$$3$$$, the\n  water flows downward, but as the container $$$1$$$ is already filled\n  completely, the water is distributed evenly between water containers $$$2$$$\n  and $$$3$$$.<br />\n  In step $$$3$$$, after adding $$$1$$$ liter of water in container $$$3$$$, the\n  water containers $$$2$$$ and $$$3$$$ are completely filled. <br />\n  In step $$$4$$$, after adding $$$1$$$ liter of water in container $$$3$$$, the\n  water is pushed up to water container $$$4$$$, which is then completely\n  filled.<br />\n</p>\n<p>\n  As illustrated in the example above, containers at the same level will have\n  the same amount of water. Find the number of water containers that are\n  completely filled after processing all the queries.\n</p>\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow.<br />\n  The first line of each test case contains the two integers $$$\\mathbf{N}$$$ and $$$\\mathbf{Q}$$$, where\n  $$$\\mathbf{N}$$$ is the number of containers and $$$\\mathbf{Q}$$$ is the number of queries.<br />\n  The next $$$\\mathbf{N}-1$$$ lines contain two integers $$$i$$$ and $$$j$$$ ($$$1 \\le\n  i, j \\le \\mathbf{N}$$$, and $$$i &ne; j$$$) meaning that the $$$i$$$-th water\n  container is connected to the $$$j$$$-th water container.<br />\n  Each of the next $$$\\mathbf{Q}$$$ lines contain a single integer $$$i$$$ ($$$1 \\le i \\le\n  \\mathbf{N}$$$) that represents the container to which $$$1$$$ liter of water should\n  be added.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the test case number\n  (starting from 1) and $$$y$$$ is the number of water containers that are\n  completely filled after processing all the queries.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n  $$$1 \\le \\mathbf{Q} \\le \\mathbf{N}$$$.<br />\n  It is guaranteed that the given water container system is a tree.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  $$$1 \\le \\mathbf{N} \\le 65535$$$.<br />\n  The water container system is a\n  <a\n    href=\"https://en.wikipedia.org/w/index.php?title=Binary_tree#Types_of_binary_trees\"\n    target=\"_blank\"\n  >\n    perfect binary tree</a\n  >.\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 60 seconds.<br/>\n\n  $$$1 \\le \\mathbf{N} \\le 10^4$$$.<br />\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0-SElNiE5xpsfRa1lys1Su8PUcp85CNHGvEcfKDMSTSqIEHBWieYZMfo0FA8UYddDuw8voVHxo5Kf4pvborfvqkuVOAuTn8c8gKcR9TlCia9ovJ3FQ/water_container_system_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n1 1\n1\n3 2\n1 2\n1 3\n1\n2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1h6v8L3ShEx6LxLNvN8xhuwtEvCB-UzcSEh3e6vlVfP5V_GyLiM5qYXIDiW4SZlSB2PL5Yjhabtkahvxn5QukskRW5hjG7H-wwekXozuqsOdfojm0sTQ/water_container_system_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 1</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, there is $$$\\mathbf{N} = 1$$$ water container. The number of\n  completely filled water containers after adding $$$1$$$ liter of water in\n  container $$$1$$$ is $$$1$$$.\n</p>\n<p>\n  In Sample Case #2, there are $$$\\mathbf{N} = 3$$$ water containers. The number of\n  completely filled water containers after processing all the queries is\n  $$$1$$$.\n</p>\n<p align=\"center\">\n  <img\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1OEHiWKWh9curlMXI0MJ32AqbNb4rimLH4Lc8gPza90uy3b0mU79QN8uhL8AlBwWNhep0uQ7bldNCbIuIVSlEdNDWy-7h_7dP4u9KFBJ71KEs3/water_container_sample_test_1.png\"\n    width=\"100%\"\n    alt=\"Image describing the flow of water in the test set 1\"\n  />\n</p>\n<p>\n  After adding $$$1$$$ liter of water in container $$$1$$$: container $$$1$$$\n  is completely filled, and the remaining containers are empty.<br />\n  After adding $$$1$$$ liter of water in container $$$2$$$: container $$$1$$$\n  is completely filled, and containers $$$2$$$ and $$$3$$$ are partially\n  filled.\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1r3-0EJFVNB0I0GbAB7ymhc1c2lg1wRUmwzfwwtumYXWbDRp8YGcAoW1s-qsVg5QqolcWwvdpgwvl1V3GTbmYHImR_mcC1I_XJGTSIALK_odyWaz01/water_container_system_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">2\n4 4\n1 2\n1 3\n2 4\n3\n3\n3\n3\n5 2\n1 2\n5 3\n3 1\n2 4\n4\n5\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3OMAms_L-QEe_Jv6uc1Ad87wqox9unE2LA02ZAvO89hUzkbouHToyuuKGYI9t5bNK3OV-5aeol6xIh0aA5mh3vjgCOw0KLtvTfGjf3XYeNo-d-5G5eoQ/water_container_system_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 4\nCase #2: 1</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1, there are $$$\\mathbf{N} = 4$$$ water containers. The number of\n  completely filled water containers after processing all the queries is\n  $$$4$$$, which is already explained in the problem statement.\n</p>\n<p>\n  In Sample Case #2, there are $$$\\mathbf{N} = 5$$$ water containers. The number of\n  completely filled water containers after processing all the queries is\n  $$$1$$$.\n</p>\n<p align=\"center\">\n  <img\n    src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1V3_AVRjU2Q9dInHpV7FVfhVHqO_y_EUuqdwi7p7nB8byT6DiVQfkk3j1s3lnH814T4-lgPQH32CypMgmJzpkRsOJw3Iv13PxgppEzae52OXsS/water_container_sample_test_2.png\"\n    width=\"100%\"\n    alt=\"Image describing the flow of water in the test set 2\"\n  />\n</p>\n<p>\n  After adding $$$1$$$ liter of water in container $$$4$$$: container $$$1$$$\n  is completely filled, and the remaining containers are empty.<br />\n  After adding $$$1$$$ liter of water in container $$$5$$$: container $$$1$$$\n  is completely filled, containers $$$2$$$ and $$$3$$$ are partially filled,\n  and the remaining containers are empty.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":6},{"type":1,"type__str":"VISIBLE","value":9}],"title":"Water Container System","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n\n<p>\n  In Test Set 1, we can simply try all possible options to schedule a new\n  meeting. We can try all possible start times for a new meeting, for each Tech\n  Lead calculate how many of their scheduled meetings overlap with our proposed\n  meeting time, and then pick $$$\\mathbf{K}$$$ smallest of these values. Output the minimum\n  for all the possible start times as the final answer.\n</p>\n\n<p>\n  This can be done in $$$O(\\mathbf{D} \\times (\\mathbf{M} + \\mathbf{N} \\log \\mathbf{N}))$$$ time complexity,\n  or similar, which is fast enough for this test set.\n</p>\n\n<p>\n  Note that limits in Test Set 1 are very permissive, and thus it is possible\n  to pass it with even slower solutions. For example, we can try all possible\n  starting times and all possible subsets of Tech Leads who will attend the\n  meeting, and for each such option count how many already scheduled meetings\n  overlap with the given time slot and have to be canceled. This will result\n  in a solution with $$$O(\\mathbf{D} \\times 2^\\mathbf{N} \\times \\mathbf{M})$$$ overall time complexity.\n</p>\n\n<h3>Test Set 2</h3>\n\n<p>In Test Set 2, the limits are higher, so we will need a smarter solution.</p>\n\n<p>\n  There are many possible ways to solve this problem, and we list some of them\n  below. All approaches in this analysis use the following techniques and\n  observations:\n</p>\n\n<ol>\n  <li>\n    We will again try all possible start times for a new meeting, but now in a\n    sliding window fashion. This means that first we will try the range of\n    $$$(0, \\mathbf{X})$$$ hours, then $$$(1, \\mathbf{X} + 1)$$$, and so on.\n  </li>\n  <li>\n    We will maintain the number of current meetings for each Tech Lead as\n    meetings enter and exit our sliding window.\n  </li>\n  <li>\n    To minimize the number of cancelled meetings we need to meet with $$$\\mathbf{K}$$$ Tech\n    Leads having the smallest number of current meetings. Sum of their numbers\n    of meetings will be the answer for the current window.\n  </li>\n</ol>\n\n<h4>Approach #1. Data structures and binary search.</h4>\n\n<p>Let us maintain two helper arrays:</p>\n\n<ul>\n  <li>\n    Number of Tech Leads that have exactly $$$i$$$ meetings in the current\n    window, for each $$$i$$$. Note that if you take a prefix sum $$$SUM(0, j)$$$\n    over this array, you will find the total number of people with less than or\n    equal to $$$j$$$ meetings for some $$$j$$$.\n  </li>\n  <li>\n    Sum of number of meetings for everyone with exactly $$$i$$$ meetings in the\n    current window, for all $$$i$$$. Note that if you take a prefix sum\n    $$$SUM(0, j)$$$ over this array, you will find the total number of meetings\n    for everyone with less than or equal to $$$j$$$ meetings for some $$$j$$$.\n  </li>\n</ul>\n\n<p>\n  To be able to quickly take prefix sums over these arrays, we will keep the\n  values in a data structure like segment tree or\n  <a href=\"https://en.wikipedia.org/wiki/Fenwick_tree\" target=\"_blank\"\n    >Fenwick tree</a\n  >.\n</p>\n\n<p>\n  Armed with these data structures and helper arrays, in each window we can use\n  binary search to find the biggest number of meetings among $$$\\mathbf{K}$$$ Tech Leads we\n  will meet with, and then the sum of the number of their meetings.\n</p>\n\n<p>\n  Time complexity of this solution will be $$$O(\\mathbf{D} + \\mathbf{N} + \\mathbf{M} \\log \\mathbf{M} + \\mathbf{D}\\\n  {\\log} ^ {2} {\\mathbf{M}})$$$ (which you can also optimize to $$$O(\\mathbf{D} + \\mathbf{N} + \\mathbf{M}\n  \\log \\mathbf{M} + \\mathbf{D} \\log \\mathbf{M})$$$ if you replace binary search with some kind of\n  smart segment tree descent).\n</p>\n\n<h4>Approach #2. Rebalancing sets.</h4>\n\n<p>\n  Another elegant solution is to store the number of the current meetings for\n  each Tech Lead in a data structure that allows to extract the minimum and the\n  maximum value, and remove an arbitrary value from it, like a tree-based set.\n  We will keep two of these data structures: one containing $$$\\mathbf{K}$$$ Tech Leads with\n  the minimum number of meetings in the current window, and another with $$$\\mathbf{N}\n  - \\mathbf{K}$$$ other Tech Leads. We will update these data structures as the\n  meetings come and go: as a meeting starts or ends, we remove an old entry for\n  the corresponding Tech Lead in the data structure, insert a new entry with an\n  updated meetings count, and rebalance two data structures so that one of them\n  again has $$$\\mathbf{K}$$$ smallest values (to achieve this, we may need to exchange the\n  biggest value from one data structure with the smallest value in the second\n  one). In addition, we will also maintain the sum of the number of meetings in\n  the data structure that holds $$$\\mathbf{K}$$$ smallest values.\n</p>\n\n<p>\n  It can be noted that with careful implementation each meeting will trigger\n  only a constant number of operations to keep two data structures balanced, and\n  the total time complexity of this solution will be $$$O(\\mathbf{D} + \\mathbf{N} + \\mathbf{M} \\log\n  \\mathbf{N})$$$.\n</p>\n\n<h4>Approach #3. Linear solution.</h4>\n\n<p>\n  Finally, the \"linear\" $$$O(\\max(\\mathbf{D}, \\mathbf{N}, \\mathbf{M}))$$$ solution to this problem\n  exists. This is possible if you carefully maintain the following values:\n</p>\n\n<ul>\n  <li>Number of the current meetings for each Tech Lead.</li>\n  <li>\n    Number of Tech Leads with exactly $$$i$$$ current meetings for all $$$i$$$.\n  </li>\n  <li>\n    Value of maximum number of meetings among $$$\\mathbf{K}$$$ Tech Leads we will meet with.\n  </li>\n  <li>\n    Number of Tech Leads with that maximum number of meetings among $$$\\mathbf{K}$$$ Tech\n    Leads we will meet with.\n  </li>\n  <li>\n    Sum of the meetings of all $$$\\mathbf{K}$$$ Tech Leads we will meet with (which is also\n    the sum of $$$\\mathbf{K}$$$ smallest numbers of current meetings).\n  </li>\n</ul>\n\n<p>\n  It can be noted that with each starting or ending meeting, all these values\n  can be recalculated in $$$O(1)$$$ time (in fact, most of these values change\n  at most by one), and we can achieve a solution with total linear time\n  complexity.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2fzbZPYGroq8jJIPilDt22zR2pIVPJrjAMXzTQW0gwpcml0DfBQWCDsQ6zHyVvFv62O4bfJkgM/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000bef943","statement":"<h3>Problem</h3>\n<p>\n  Scheduling meetings at Google is not an easy task. Even with the help of\n  Google Calendar, Ada has a lot of difficulty with it!\n</p>\n\n<p>\n  Ada works as a Software Engineer at Google, and needs to get approval for\n  her new project. In order to get an approval, she needs to meet with at least\n  $$$\\mathbf{K}$$$ of $$$\\mathbf{N}$$$ Tech Leads.\n</p>\n\n<p>\n  Ada has access to the calendars of all $$$\\mathbf{N}$$$ Tech Leads. For each Tech Lead, Ada can see\n  all their scheduled meetings. The timeline in this problem can be viewed as $$$\\mathbf{D}$$$ consecutive\n  hours, and all meetings are in $$$[0, \\mathbf{D}]$$$ hours range, with both ends being integer numbers.\n  Scheduled meetings, even for the same person, can overlap (people are\n  notorious for this at Google!).\n</p>\n\n<p>\n  Ada needs to schedule an $$$\\mathbf{X}$$$-hour-long meeting in the interval of $$$[0,\n  \\mathbf{D}]$$$ hours, with both ends being integer numbers as well. At least $$$\\mathbf{K}$$$ of $$$\\mathbf{N}$$$ Tech Leads\n  should be present for the whole meeting, that is their calendar should be\n  completely free for the entire meeting duration.\n</p>\n\n<p>\n  Unfortunately, it might be the case that it is already impossible to find a\n  slot to schedule such an $$$\\mathbf{X}$$$-hour-long meeting. In that case, Ada will need to\n  persuade some Tech Leads to cancel their existing meetings.\n</p>\n\n<p>\n  What is the minimum number of scheduled meetings that need to be\n  canceled so that Ada can meet with at least $$$\\mathbf{K}$$$ Tech Leads?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n</p>\n\n<p>\n  The first line of each test case contains four integers $$$\\mathbf{N}$$$, $$$\\mathbf{K}$$$, $$$\\mathbf{X}$$$, $$$\\mathbf{D}$$$. $$$\\mathbf{N}$$$ represents\n  the number of Tech Leads, $$$\\mathbf{K}$$$ is the minimum number of Tech Leads Ada needs to meet, $$$\\mathbf{X}$$$ is the\n  length of the meeting that needs to be set up, and $$$\\mathbf{D}$$$ is the upper bound of the\n  $$$[0, \\mathbf{D}]$$$ hour range representing the timeline of the problem — no meeting can end\n  after $$$\\mathbf{D}$$$.\n</p>\n\n<p>\n  The second line of each test case contains an integer $$$\\mathbf{M}$$$, representing the number of\n  scheduled meetings.\n</p>\n\n<p>\n  $$$\\mathbf{M}$$$ lines follow. The $$$i$$$-th of these contains three integer numbers $$$\\mathbf{P_i}$$$, $$$\\mathbf{L_i}$$$,\n  and $$$\\mathbf{R_i}$$$. These numbers represent that a Tech Lead $$$\\mathbf{P_i}$$$ has a scheduled meeting between\n  the hours $$$\\mathbf{L_i}$$$ and $$$\\mathbf{R_i}$$$, not including the endpoints (that is, the meeting can be seen as an\n  $$$(\\mathbf{L_i}, \\mathbf{R_i})$$$ interval).\n</p>\n\n<p>\n  Note that all $$$\\mathbf{M}$$$ meetings in the test case are independent, even\n  if some of them have the same starting and ending time.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the test case number\n  (starting from 1) and $$$y$$$ is the minimum number of scheduled meetings that needs to be\n  canceled so that Ada can schedule an $$$\\mathbf{X}$$$-hour-long meeting with at least $$$\\mathbf{K}$$$ Tech Leads.\n</p>\n\n<h3>Note on the Time Format</h3>\n\n<p>\n  The timeline of this problem can be seen as\n  an $$$[0, \\mathbf{D}]$$$ interval — that is, $$$\\mathbf{D}$$$ consecutive\n  hours, where $$$\\mathbf{D}$$$ can be bigger than $$$24$$$.\n</p>\n\n<p>\n  A meeting in the interval $$$(L, R)$$$ means the meeting starts at the beginning of\n  the $$$L$$$-th hour, and ends at the beginning of the\n  $$$R$$$-th hour, covering the whole time\n  period in between, without any gaps (i.e. the interval is continuous). Endpoints are not included\n  in an $$$(L, R)$$$ interval. For Tech Leads attending\n  Ada's scheduled meeting, Ada's new meeting can border some of their other non-canceled meetings —\n  that is, it can start right when another meeting ends, or end right when another meeting starts,\n  or both. A Tech Lead cannot attend Ada's meeting if they have any other non-canceled meetings\n  overlapping with Ada's meeting at any point.\n</p>\n\n<p>\n  See explanation of the sample test cases for more clarity.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 40 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n  $$$1 \\le \\mathbf{P_i} \\le \\mathbf{N}$$$, for all $$$i$$$.<br />\n  $$$0 \\le \\mathbf{L_i} < \\mathbf{R_i} \\le \\mathbf{D}$$$, for all $$$i$$$.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{X} \\le \\mathbf{D} \\le 8$$$.<br />\n  $$$1 \\le \\mathbf{K} \\le \\mathbf{N} \\le 10$$$.<br />\n  $$$0 \\le \\mathbf{M} \\le 20$$$.\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$1 \\le \\mathbf{X} \\le \\mathbf{D} \\le 10^5$$$.<br />\n  $$$1 \\le \\mathbf{K} \\le \\mathbf{N} \\le 10^5$$$.<br />\n  $$$0 \\le \\mathbf{M} \\le 10^5$$$.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0svgE9Nh74AlVSFydgt-J0zcA7DJga4Mqfa9DSgfeq_YE3vo2l9Q-Xo9D8-hIVfRUN1PKmS5xOLUIWcTvkU-14TqQ8LUG8lZ_l1RdkrC1E9V1U9g/scheduling_a_meeting_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3 2 2 6\n5\n1 3 5\n2 1 3\n2 2 6\n3 0 1\n3 3 6\n3 3 2 6\n5\n1 3 5\n2 1 3\n2 2 6\n3 0 1\n3 3 6\n3 2 3 6\n5\n1 3 5\n2 1 3\n2 2 6\n3 0 1\n3 3 6\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1aERpe36lXB9n855OKRZvS4Ua2OSJnzFppsTmbgY7dNegbRCTFshtgVhzKH1D-s_Ll9bPI-Oa7wFQfqC2cGw3kD9oKnBR0EvRd0vSfiJz-LQgvXfw/scheduling_a_meeting_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0\nCase #2: 2\nCase #3: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n </sampleio>\n\n<p>\n  The meetings scheduled in all three sample test cases look as following:\n</p>\n\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2kGqqH1wm6ZidtycI_OLBrUZe4NQkcOXOAlWixUiDgp-kf8MkhGEh9YbnxdEuLiPhNOAsvxDoPdiazizO1U8ndDN9RhHQvrmVW/scheduling_a_meeting.svg\"\n     alt=\"Sample visualization\" />\n\n<p>\n  In Sample Case #1, Ada needs to schedule a two-hour-long meeting with at least two\n  Tech Leads. She can schedule such a meeting between hours $$$1$$$ and $$$3$$$ with Tech Leads\n  $$$\\#1$$$ and $$$\\#3$$$. In this case, no existing meetings need to be canceled.\n</p>\n\n<p>\n  In  Sample Case #2, Ada needs to schedule a two-hour-long meeting with all three Tech Leads.\n  She can schedule such a meeting in the interval $$$[0, 2]$$$, which will require meetings $$$2$$$\n  and $$$4$$$ to be canceled. Another option is to schedule a meeting in the interval $$$[1, 3]$$$.\n  Both options require two meetings to be canceled, which is the minimum number possible.\n</p>\n\n<p>\n  In  Sample Case #3, Ada needs to schedule a three-hour-long meeting with at least two Tech\n  Leads. She can schedule this meeting in the interval $$$[0, 3]$$$, and meet with\n  Tech Leads $$$\\#1$$$ and $$$\\#3$$$. This will require meeting $$$4$$$ to be canceled,\n  and this is the optimal solution here.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":10},{"type":1,"type__str":"VISIBLE","value":28}],"title":"Scheduling a Meeting","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000008cb409","type":1,"type__str":"SPECTATOR"},"title":"Round F 2022","ui_appearance":0,"ui_appearance__str":"APPEARANCE_TYPE_DEFAULT"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
