{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1413187200000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000434d9f","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1413176400000,"tasks":[{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1VULbgiVPBoqMmy28PaC4JHHCwKLCU0xUDCEfEDMGoBxd00ExEs9c7PDQnPzKkX4jNWG93i_hF/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000434a77","statement":"<h3>Problem</h3>\n<p>\nAlice is a smart student who is very good at math.\nShe is attending a math class.\nIn this class, the teacher is teaching the students how to use a calculator.\nThe teacher will tell an integer to all of the students, and the students must type that exact number into their calculators.\nIf someone fails to type the number, he or she will be punished for failing such an easy task!\n</p>\n\n<p>\nUnfortunately, at the beginning of the class, Alice finds that her calculator is broken!\nShe finds that some of the number buttons are totally broken, and only the \"multiply\" and \"equals\" operator buttons are available to use.\nSo she can only use these buttons to get the number quickly.\n</p>\n\n<p>\nFor instance, the teacher may say the number \"60\", while Alice's calculator can only type \"1\", \"2\" and \"5\".  She could push the following buttons:\n<ul>\n<li>Button \"15\" (2 clicks)</li>\n<li>Button \"multiply\" (1 click)</li>\n<li>Button \"2\" (1 click)</li>\n<li>Button \"multiply\" (1 click)</li>\n<li>Button \"2\" (1 click)</li>\n<li>Button \"equals\" (1 click)</li>\n</ul>\n\nThis method requires 7 button clicks. However, if Alice uses \"12*5=\", only 5 clicks are needed.\n\nOf course Alice wants to get the integer as fast as possbile, so she wants to minimize the number of button clicks.\nYour task is to help her find a way to get the required number quickly.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives a number <b>T</b>, the number of integers the teacher says.  <b>T</b> test cases follow.\n</p>\n\n<p>\nEach case contains two lines. The first line contains ten numbers each of which is only 0 or 1. the <b>i</b>th number (starting from 0) is \"1\" if the number <b>i</b> can be clicked, or \"0\" if it is broken. The second line contains only one number <b>X</b>, the integer the teacher tells everyone.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\",\nwhere x is the test case number (starting from 1) and\ny is the minimum number of button clicks needed, or \"Impossible\" if it is not possible to produce the number.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds per test set.<br/>\nMemory limit: 1 GB.<br/>\n1 &le; <b>T</b> &le; 100.<br/>\n</p>\n\n<h4>Small dataset (Test Set 1 - Visible)</h4>\n<p>\n1 &le; <b>X</b> &le; 100.<br/>\n</p>\n\n<h4>Large dataset (Test Set 2 - Hidden)</h4>\n<p>\n1 &le; <b>X</b> &le; 10<sup>6</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0zyjHW3q7ePJl-f5I6jT5h1M-hZFPE9lR9BwSaZujeBhj1GWFnzReq3iVJgDA0G14Gln32ReEgeOxuZv0RMvWTs29ttNPvgNAig48Ktb10Dw/broken_calculator_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n0 1 1 0 0 1 0 0 0 0\n60\n1 1 1 1 1 1 1 1 1 1\n128\n0 1 0 1 0 1 0 1 0 1\n128\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0a-ZVjd6buTfngsd7xTIPw6bgPQ9dCOMfXtJXdjZ2QgWv3JTeoYfuQaaZ445UjUj098kNOWUJrXXuT89gmTbP7sJa3dJa5qKkRlxyG50MtRpM/broken_calculator_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 5\nCase #2: 4\nCase #3: Impossible\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n\n<p>\nThe first sample case is explained in problem statement.\n</p>\n\n<p>\nIn the second case, all digits are available, so Alice can just press \"1\", \"2\", \"8\" and then \"equals\" to get the result.\nPlease note that she still needs to press \"equals\" in the last step, even though there are no calculations.\n</p>\n\n<p>\nFor the last case, it's impossible since Alice cannot input any even numbers.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":16}],"title":"Broken Calculator","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1K8u0FNg2dPe-FDEugqD-pWDFBdjNe-e6jSrnlD6XztzhcXSR7CGZS06JEsirz8SU-u-ad-uKf/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000434ba3","statement":"<h3>Problem</h3>\n\n<p>Tetris is a famous video game that almost everyone has played it. In this\nproblem, you need to simulate a simplified version of it.</p>\n\n<p>In our version, the game is played in a <b>W</b> by <b>H</b> field with gravity. At the\nbeginning, the field is empty. Then the tetrominos start to fall from above top\nof the field to bottom of the field, one by one. Each tetromino will stop as\nsoon as it touches some other tetrominos or bottom of the field.</p>\n<p>One interesting feature of the game is called \"line clearing\". A line will be\ncleared as soon as it is filled by tetrominos. More than one line may be cleared\nat a time. For example:</p>\n<pre><code>  |..............|      |..............|      |..............|\n  |.............o|      |..............|      |..............|\n  |.............o|      |..............|      |..............|\n  |.............o|      |..............|      |..............|\n  |.............o|      |..............|      |..............|\n  |..xx..........| --&gt;  |..xx..........| --&gt;  |..............|\n  |xxxxxxxxxxxxx.|      |xxxxxxxxxxxxxo|      |..............|\n  |xxxxxxxxxxxxx.|      |xxxxxxxxxxxxxo|      |..xx..........|\n  |xx..xxxxxxxxx.|      |xx..xxxxxxxxxo|      |xx..xxxxxxxxxo|\n  |xxxxxxxxxxx...|      |xxxxxxxxxxx..o|      |xxxxxxxxxxx..o|\n  ----------------      ----------------      ----------------\n\n  Falling               Stopped               Cleared 2 lines\n</code></pre>\n<p>Note that in this simplified version, the \"floating\" tetromino blocks won't\ncontinue to fall after lines are cleared. This is why the top-most two squares\nwill keep in such position. Consequently, cascade clearing won't happen, even though it\nwould happen in the original version of Tetris.</p>\n\n<p>The game ends when all the given tetrominos are placed, or the current\ntetromino cannot be placed due to the height limit of the field is reached.</p>\n\n<p>In this problem, each tetromino will has its type, rotation and falling position\ntold by the input. They will start to fall from the <b>above</b> of the field. Your goal is to\nsimulate and get the final result of each play.</p>\n\n<h3>Input</h3>\n<p>We have 7 types of tetromino:</p>\n<pre><code>1   2   3   4   5   6   7\n\nx    x  x    x  xx  x    x\nxx  xx  x    x  xx  x   xxx\n x  x   xx  xx      x\n                    x\n</code></pre>\n<p>Rotation of a tetromino is represented by a number <b>r</b>. <b>r</b> can be 0, 1, 2 or 3.\nRotation is counterclockwise.\nFor example:</p>\n<pre><code>r=0   r=1  r=2   r=3\n\n  x     x   xxx   x\n xxx   xx    x    xx\n        x         x\n\n x     xx   x     xx\n xx   xx    xx   xx\n  x          x\n</code></pre>\n\n<p>The horizontal falling position is represented by a number <b>x</b>. It is the\ncoordinate of the lower left square of a tetromino's bounding box. Here <b>x</b>\nstarts from 0.</p>\n\n<p>The first line of the input gives the number of test cases, <b>T</b>.\nFor each test case, the first line of input has 3 integers, <b>W, H, N</b>. <b>W</b> is the\nwidth, <b>H</b> is the height and <b>N</b> is the number of blocks that are going to fall.</p>\n\n<p>Then <b>N</b> lines below, each line has 3 integers, <b>t<sub>i</sub>, r<sub>i</sub>, x<sub>i</sub></b>. <b>t<sub>i</sub></b> tells the tetromino\ntype. <b>r<sub>i</sub></b> is the rotation of this tetromino. <b>x<sub>i</sub></b> is the horizontal falling position\nof this tetromino. It is guaranteed that <b>x<sub>i</sub></b> will make the tetromino inside\nthe field, horizontally.</p>\n\n\n<h3>Output</h3>\n<p>For each test case, first output one line containing \"Case #i:\", where <b>i</b> is the\ntest case number (starting from 1). And then, if the game ends before the <b>N</b>\nblocks, output \"Game Over!\"(without quotes). Otherwise, output the game field's\nfinal state, which should have <b>H</b> lines, each has <b>W</b> characters. Each character\ncan be '.' or 'x'.</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds per test set.<br/>\nMemory limit: 1 GB.<br/>\n1 &lt;= <b>T</b> &lt;= 100 <br>\n1 &lt;= <b>t<sub>i</sub></b> &lt;= 7<br>\n0 &lt;= <b>r<sub>i</sub></b> &lt; 4\n</p>\n\n<h4>Small dataset (Test Set 1 - Visible)</h4>\n<p>\n4 &lt;= <b>W</b> &lt;= 20 <br>\n1 &lt;= <b>H</b> &lt;= 20 <br>\n0 &lt;= <b>N</b> &lt;= 100\n</p>\n\n<h4>Large dataset (Test Set 2 - Hidden)</h4>\n<p>\n4 &lt;= <b>W</b> &lt;= 100 <br>\n1 &lt;= <b>H</b> &lt;= 100 <br>\n0 &lt;= <b>N</b> &lt;= 5000\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3tQmF0PK9hwu-qOkiPi7qnXyg0CSqdyigO4nFIsvG3wE0aW0ePvUdFtiOkdeYjNpv21a31kTuzboKDzsO-tB_WgwHCNyQ/tetris_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">5\n8 6 1\n1 0 0\n5 4 1\n1 1 1\n5 6 3\n5 0 0\n5 0 2\n3 2 3\n6 4 3\n6 2 0\n6 2 0\n6 2 0\n6 4 2\n6 0 0\n6 0 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2yDGjPGCAkufM49q6nJ2M7QGvERIVYnIHaamlSjRsdjyJ_xBgTZu0U9v3H8Q6oPaEfRLFzU7kUiYgvbz-hG4ribdPEzM8F/tetris_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1:\n........\n........\n........\nx.......\nxx......\n.x......\nCase #2:\n.....\n.....\n..xx.\n.xx..\nCase #3:\n.....\n.....\n.....\n.....\n.....\n...xx\nCase #4:\nGame Over!\nCase #5:\nxx....\nxx....\nxx....\nxx....\n\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":11},{"type":2,"type__str":"HIDDEN","value":17}],"title":"Tetris","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"Scans the board, the floodfills from an unreached 0 cell until it reaches 1-8, recursively. At last, we can get a number of disconnect components of 0, and add the rest number of unreached 1-8 to the result.\ninitial board:\n02*\n2*3\n*3*\nafter one floodfill,\n//*\n/*3\n*3*\nThere are two 3s left, so the result is 3\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3XJSxuJ38Su13mJe2S-bghjCxaS_aDOQb4E6RYWUtIA8ypDd1JwgN8Uq07jlEzMbQmBwyrTHkj/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000434c0c","statement":"<h3>Problem</h3>\n<p>\nMinesweeper is a computer game that became popular in the 1980s, and is still included in some versions of the Microsoft Windows operating system. This problem has a similar idea, but it does not assume you have played Minesweeper.\n</p>\n<p>\nIn this problem, you are playing a game on a grid of identical cells. The content of each cell is initially hidden. There are M mines hidden in M different cells of the grid. No other cells contain mines. You may click on any cell to reveal it. If the revealed cell contains a mine, then the game is over, and you lose. Otherwise, the revealed cell will contain a digit between 0 and 8, inclusive, which corresponds to the number of neighboring cells that contain mines. Two cells are neighbors if they share a corner or an edge. Additionally, if the revealed cell contains a 0, then all of the neighbors of the revealed cell are automatically revealed as well, recursively. When all the cells that don't contain mines have been revealed, the game ends, and you win.\n</p>\n<p>\nFor example, an initial configuration of the board may look like this ('*' denotes a mine, and 'c' is the first clicked cell):\n</p>\n<pre>\n*..*...**.\n....*.....\n..c..*....\n........*.\n..........\n</pre>\n<p>\nThere are no mines adjacent to the clicked cell, so when it is revealed, it becomes a 0, and its 8 adjacent cells are revealed as well. This process continues, resulting in the following board:\n</p>\n<pre>\n*..*...**.\n1112*.....\n00012*....\n00001111*.\n00000001..\n</pre>\n<p>\nAt this point, there are still un-revealed cells that do not contain mines (denoted by '.' characters), so the player has to click again in order to continue the game.\n</p>\nYou want to win the game as quickly as possible. You want to find the minimum number of clicks to win the game. Given the size of the board (N x N), output such minimum number of clicks.\n\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>.  <b>T</b>test cases follow.  First line of each test case contains one integer N. N lines strings with length N follows containing '*' and '.', denotes the Minesweeper initial board.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the test case number (starting from 1) and y is the minimum number of clicks to win.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds per test set.<br/>\nMemory limit: 1 GB.<br/>\n1 &le; <b>T</b> &le; 100.<br/>\n</p>\n\n<h4>Small dataset (Test Set 1 - Visible)</h4>\n<p>\n1 &le; <b>N</b> &le; 50.<br/>\n</p>\n\n<h4>Large dataset (Test Set 2 - Hidden)</h4>\n<p>\n1 &le; <b>N</b> &le; 300.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2bGc_Mdswo5dLj2a4x03WTqz5tsqlVlJTnA4e6054-nw_kmBWxlTNEk3mPyu_zcXs3c1hdUXSdshsUtWXrSGmiFwm1IS4iqScdoQ/minesweeper_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3\n..*\n..*\n**.\n5\n..*..\n..*..\n.*..*\n.*...\n.*...</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3FwwUy12i9VC1_LbqjDz17xVnexGi0OZIsv1PQIPcRjt0Ol-DP0uO_gatWPZ5wWSUEWKkm2paDO5lAeu-o-RKb9p96nFC90xLqQYk/minesweeper_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 8</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":8},{"type":2,"type__str":"HIDDEN","value":14}],"title":"Minesweeper","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1Yhupn4gacEEF3-T-ev_NcDuUvjRAcjCMQCYNFNSIMxUOuoabvmaRHn72XL62w6ARHJpV1MI7S/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000434cd2","statement":"<h3>Problem</h3>\n<p>\nTom is taking metros in the city to go from station to station.<br>\n<br>\nThe metro system in the city works like this:<br>\n<ul>\n<li>There are <b>N</b> metro lines in the city: line 1, line 2, ..., line <b>N</b>.</li>\n<li>For each metro <b>i</b>, there are <b>SN<sub>i</sub></b> stations. Let's assume they are <b>S<sub>i,1</sub></b>,<b>S<sub>i,2</sub></b>, ... , <b>S<sub>i,SN<sub>i</sub></sub></b>. These stations are ordered from one end point to the other end point. The metro is running in both directions. In other words, the metro is going from <b>S<sub>i,1</sub></b> -&gt; <b>S<sub>i,2</sub></b> -&gt; ... -&gt; <b>S<sub>i,SN<sub>i</sub></sub></b>, and <b>S<sub>i,SN<sub>i</sub></sub></b> -&gt; <b>S<sub>i,SN<sub>i</sub>-1</sub></b> -&gt; ... -&gt; <b>S<sub>i,1</sub></b>.  You can take the metro from any station and get off at any station. It takes a certain time to travel from one station to the next station. It takes <b>Time<sub>i,1</sub></b> minutes to travel from <b>S<sub>i,1</sub></b> to <b>S<sub>i,2</sub></b>, <b>Time<sub>i,2</sub></b> minutes to travel from <b>S<sub>i,2</sub></b> to <b>S<sub>i,3</sub></b>, etc. It takes the same time in the other direction. </li>\n<li>There are <b>M</b> transfer tunnels. Each transfer tunnel connects two stations of different metro lines. It takes a certain amount of time to travel through a tunnel in either direction. You can get off the metro at one end of the tunnel and walk through the tunnel to the station at the another end.</li>\n<li>When you arrive at a metro station of line <b>i</b>, you need to wait <b>W<sub>i</sub></b> minutes for the next metro.</li>\n</ul>\n<br>\nNow, you are going to travel from one station to another. Find out the shortest time you need.\n</p>\n\n<h3>Input</h3>\n<p>\n\nThe first line of the input gives the number of test cases, <b>T</b>.  <b>T</b> test cases follow.<br>\n<br>\nEach test case starts with an integer <b>N</b>, the number of metro lines. <b>N</b> metros descriptions follow. Each metro description starts with two integers <b>SN<sub>i</sub></b> and <b>W<sub>i</sub></b>, the number of stations and the expected waiting time in minutes. The next line consists of <b>SN<sub>i</sub>-1</b> integers, <b>Time<sub>i,1</sub></b>, <b>Time<sub>i,2</sub></b>, ..., <b>Time<sub>i,SN<sub>i</sub>-1</sub></b>, describing the travel time between stations.<br>\n<br>\nAfter the metro descriptions, there is an integer <b>M</b>, the number of tunnels. <b>M</b> lines follow to describe the tunnels. Each tunnel description consists of 5 integers, <b>m1<sub>i</sub></b>, <b>s1<sub>i</sub></b>, <b>m2<sub>i</sub></b>, <b>s2<sub>i</sub></b>, <b>t<sub>i</sub></b> which means the tunnel is connecting stations <b>S<sub>m1<sub>i</sub>,s1<sub>i</sub></sub></b> and station <b>S<sub>m2<sub>i</sub>,s2<sub>i</sub></sub></b>. The walking time of the tunnel is <b>t<sub>i</sub></b>.<br>\n<br>\nThe next line contains an integer <b>Q</b>, the number of queries.\nEach of the next <b>Q</b> lines consists of 4 integers, <b>x1</b>, <b>y1</b>, <b>x2</b>, <b>y2</b>, which mean you are going to travel from station <b>S<sub>x1,y1</sub></b> to station <b>S<sub>x2,y2</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x:\", where x is the test case number (starting from 1), then followed by <b>Q</b> lines, each line containing an integer y which is the shortest time you need for that query.  If it's impossible, output -1 for that query instead.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds per test set.<br/>\nMemory limit: 1 GB.<br/>\n1 &le; <b>T</b> &le; 100.<br/>\n1 &le; <b>W<sub>i</sub></b> &le; 100.<br>\n1 &le; <b>Time<sub>i,j</sub></b> &le; 100.<br>\n1 &le; <b>m1<sub>i</sub></b> &le; <b>N</b>.<br/>\n1 &le; <b>s1<sub>i</sub></b> &le; <b>SN<sub>m1<sub>i</sub></sub></b>.<br/>\n1 &le; <b>m2<sub>i</sub></b> &le; <b>N</b>.<br/>\n1 &le; <b>s2<sub>i</sub></b> &le; <b>SN<sub>m2<sub>i</sub></sub></b>.<br/>\n<b>m1<sub>i</sub></b> and <b>m2<sub>i</sub></b> will be different.<br>\n1 &le; <b>t<sub>i</sub></b> &le; 100.<br/>\n1 &le; <b>Q</b> &le; 10.<br/>\n1 &le; <b>x1</b> &le; <b>N</b>.<br/>\n1 &le; <b>y1</b> &le; <b>SN<sub>x1</sub></b>.<br/>\n1 &le; <b>x2</b> &le; <b>N</b>.<br/>\n1 &le; <b>y2</b> &le; <b>SN<sub>y2</sub></b>.<br/>\nStation <b>S<sub>x1,y1</sub></b> and station <b>S<sub>x2,y2</sub></b> will be different.<br>\n</p>\n\n<h4>Small dataset (Test Set 1 - Visible) </h4>\n<p>\n1 &le; <b>N</b> &le; 10.<br/>\n0 &le; <b>M</b> &le; 10.<br/>\n2 &le; <b>SN<sub>i</sub></b> &le; 100.<br/>\nThe total number of stations in each case is at most 100.\n</p>\n\n<h4>Large dataset (Test Set 2 - Hidden)</h4>\n<p>\n1 &le; <b>N</b> &le; 100.<br/>\n0 &le; <b>M</b> &le; 100.<br/>\n2 &le; <b>SN<sub>i</sub></b> &le; 1000.<br/>\nThe total number of stations in each case is at most 1000.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2S6CHxkMOycD6WVqK-ZQV05XjsJORA4e1q0SWFkh8ng0FxwJipnS0zmMwVirkkqcwArU6RzzPEcoDJN6PDKzCXdSH3bP0YPePgUnk/taking_metro_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n\n2\n5 3\n3 5 7 3\n4 2\n1 1 1\n1\n1 2 2 2 1\n1\n1 1 2 4\n\n2\n5 3\n3 5 7 3\n4 2\n1 1 1\n2\n1 2 2 2 1\n2 4 1 4 1\n1\n1 1 1 5</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0ijmRbQ9CTpJyGRBXoassYoyXuDNwSJVy_Y1DiimNMdh9NmRxxOkgm3GecR2yOByg3__SOoenJic306p3Sd8AJBc-9btEEXMiA-vJ5/taking_metro_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1:\n11\nCase #2:\n18</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn the first case, you are going to travel from station 1 of metro line 1 to station 4 of metro line 2. The best way is:<br>\n<ul>\n<li>wait 3 minutes for line 1 and get on it.</li>\n<li>take it for 3 minutes and get off at station 2.</li>\n<li>take the tunnel and walk for 1 minute to station 2 of line 2. </li>\n<li>wait 2 minutes for line 2 and get on it.</li>\n<li>take it for 2 minutes and get off at station 4.</li>\n</ul>\nThe total time is: 3+3+1+2+2=11.<br>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":9},{"type":2,"type__str":"HIDDEN","value":15}],"title":"Taking Metro","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000434d9f","type":1,"type__str":"SPECTATOR"},"title":"Round C 2014"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
