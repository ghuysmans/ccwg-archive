{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1476604800000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000201db8","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1476594000000,"tasks":[{"analysis":"<p>\nThe answer is (n - m) / (n + m), which can be proved by mathematical induction method.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0A6nR3nfkQ51H-bGlOHct91ea1OiwHkDQzzCXD-g2_kWVwh80EiEhjtDxKTH9ahREiu4kalSB-/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201c06","statement":"<h2>Problem</h2>\n\n<p>\n  A and B are the only two candidates competing in a certain election. We know\n  from polls that exactly <b>N</b> voters support A, and exactly <b>M</b>\n  voters support B. We also know that <b>N</b> is greater than <b>M</b>, so A\n  will win.\n</p><p>\n  Voters will show up at the polling place one at a time, in an order chosen\n  uniformly at random from all possible (<b>N</b> + <b>M</b>)! orders. After\n  each voter casts their vote, the polling place worker will update the results\n  and note which candidate (if any) is winning so far. (If the votes are tied,\n  neither candidate is considered to be winning.)\n</p><p>\n  What is the probability that A stays in the lead the entire time -- that is,\n  that A will always be winning after every vote?\n</p>\n\n<h3>Input</h3>\n<p>\n  The input starts with one line containing one integer <b>T</b>, which is the\n  number of test cases. Each test case consists of one line with two integers\n  <b>N</b> and <b>M</b>: the numbers of voters supporting A and B, respectively.\n</p>\n\n<h3>Output</h3>\n\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>y</code>\n  is the probability that A will always be winning after every vote.\n</p><p>\n  <code>y</code> will be considered correct if <code>y</code> is within an\n  absolute or relative error of 10<sup>-6</sup> of the correct answer. See the\n  <a href=\"https://codingcompetitions.withgoogle.com/kickstart/faq\" target=\"_blank\">FAQ</a> for an explanation of what\n  that means, and what formats of real numbers we accept.\n</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 100.<br>\nTime limit: 40 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n0 &le; <b>M</b> &lt; <b>N</b> &le; 10.<br>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n0 &le; <b>M</b> &lt; <b>N</b> &le; 2000.<br>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U37J_s1ewRJD2EYoGFwAmWJHtkNy99DFDmyOKTdM4149xBc9PuArmjIn9zJJW00_y-8Vdm0qPmS9dvNfnvrbICXA8Qe/vote_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2 1\n1 0\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U29RYVP8xYkS8-u1qqH3voKnMlaiJguSHsaadfF2BNeNF2G0SzsUaITdWDPKMR7sO1QdWieGkyHEwh9gxOKibNG5O4giw/vote_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0.33333333\nCase #2: 1.00000000\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In sample case #1, there are 3 voters. Two of them support A -- we will call\n  them A1 and A2 -- and one of them supports B. They can come to vote in six\n  possible orders: A1 A2 B, A2 A1 B, A1 B A2, A2 B A1, B A1 A2, B A2 A1.\n  Only the first two of those orders guarantee that Candidate A is winning\n  after every vote. (For example, if the order is A1 B A2, then Candidate A is\n  winning after the first vote but tied after the second vote.) So the answer\n  is 2/6 = 0.333333...\n</p><p>\n  In sample case #2, there is only 1 voter, and that voter supports A. There is\n  only one possible order of arrival, and A will be winning after the one and\n  only vote.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":5},{"type":2,"type__str":"HIDDEN","value":8}],"title":"Vote","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2a0yJypm0C1zIp6NGchF2IxWsi56wk8MooYGFbcQNUOAn8p05nld7VfEz87L6H_AfjfczT-AMD/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201c9e","statement":"<h2>Problem</h2>\n\n<p>\n  The <i><b>Codejamon</b></i> game is on fire! Many players have gathered in an auditorium to fight for the World Championship. At the opening ceremony, players will sit in a grid of seats with <b>R</b> rows and <b>C</b> columns.<br/>\n<br/>\n  The competition will be intense, and the players are sensitive about sitting near too many of their future opponents! A player will feel too crowded if another player is seated directly to their left <i>and</i> another player is seated directly to their right. Also, a player will feel too crowded if one player is seated directly in front of them <i>and</i> another player is seated directly behind them.\n<br/>\n<br>\n  What is the maximum number of players that can be seated such that no player feels too crowded?\n<br/>\n</p>\n\n<h3>Input</h3>\n\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>; <b>T</b> test cases follow. Each test case consists of one line with two integers <b>R</b> and <b>C</b>: the number of rows and columns of chairs in the auditorium.\n</p>\n\n<h3>Output</h3>\n\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is the maximum number of players that can be seated, as described in the problem statement.\n</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 100.<br>\nTime limit: 30 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n1 &le; <b>R</b> &le; 5.<br>\n1 &le; <b>C</b> &le; 5.<br>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n1 &le; <b>R</b> &le; 100.<br>\n1 &le; <b>C</b> &le; 100.<br>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3CB60GXIJr-BHVRKkWx4lQ6Dn97GvCtYat9FtYkx80dhrVWAT_CuBmVH58zJnmSTeqF2q-vpMQ9VW85U2K2gBxKrJXlYk_/sitting_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n2 2\n2 3\n4 1</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3kEYrTk-jPMm3dxzPfdlyaI3KmsIKu9pI2UuZIfNyTuX5rNOa9Sa35TL92ChCE9--32g9zM8Xcug6rqoV3ORrVKUjkn_J9nw/sitting_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4\nCase #2: 4\nCase #3: 3</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>In sample case #1, we can fill all seats, and no player will feel too crowded.<p/>\n<p>In sample case #2, each row has three seats. We can't put three players in a row, since that would make the middle player feel too crowded. One optimal solution is to fill each of the first two columns, for a total of four players.</p>\n<p>In sample case #3, one optimal solution is to fill the first two rows and the last row, for a total of three players.</p>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":9},{"type":2,"type__str":"HIDDEN","value":10}],"title":"Sitting","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1dWfkz0LJ2LxV_gl11Nr7R2575KqK5fEg60wrCbRjRuNlYfmHRJcua29mD1rmLPE5L1l44BC3U/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201d2e","statement":"<h2>Problem</h2>\n\n<p>\n  The <i><b>Codejamon</b></i> monsters talk in enciphered messages. Here is\n  how it works:\n</p>\n\n<p>\n  Each kind of monster has its own unique <i>vocabulary</i>: a list of <b>V</b>\n  different words consisting only of lowercase English letters. When a monster\n  speaks, it first forms a sentence of words in its vocabulary; the same word\n  may appear multiple times in a sentence. Then, it turns the sentence into an\n  enciphered string, as follows:\n</p>\n\n<ol>\n  <li>Randomly shuffle each word in the sentence.\n  <li>Remove all spaces.\n</ol>\n\n<p>\n  Understanding the monsters can bring you huge advantages, so you are building\n  a tool to do that. As the first step, you want to be able to take an\n  enciphered string and determine how many possible original sentences could\n  have generated that enciphered string.  For example, if a monster's\n  vocabulary is <i>[\"this\", \"is\", \"a\", \"monster\", \"retsnom\"]</i>, and it speaks\n  the enciphered string <i>\"ishtsiarestmon\"</i>, there are four possible\n  original sentences:<br>\n  <ul>\n    <li>\"is this a monster\"\n    <li>\"is this a retsnom\"\n    <li>\"this is a monster\"\n    <li>\"this is a retsnom\"\n  </ul>\n</p>\n\n<p>\n  You have <b>S</b> enciphered strings from the same monster. For each one,\n  can you figure out the number of possible original sentences?\n</p>\n\n<p>\n  <b>IMPORTANT:</b> Since the output can be a really big number, we only ask\n  you to output the remainder of dividing the result by the prime\n  10<sup>9</sup> + 7 (1000000007).\n</p>\n\n<h3>Input</h3>\n\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>;\n  <b>T</b> test cases follow. Each test case consists of one line with two\n  integers <b>V</b> and <b>S</b>, the size of the monster's vocabulary and the\n  number of enciphered strings. Then, <b>V</b> lines follow; each contains a\n  single string of lowercase English letters, representing a word in the\n  monster's vocabulary. Finally, <b>S</b> lines follow. Each contains a string\n  consisting only of lowercase English letters, representing an enciphered\n  sentence. It is guaranteed that all enciphered sentences are valid; that is,\n  each one has at least one possible original sentence.\n</p>\n\n<h3>Output</h3>\n\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>y</code>\n  is a space separated list of of <b>S</b> integers: the answers (modulo\n  10<sup>9</sup> + 7) for each enciphered sentence, in the order given in the\n  input, as described in the problem statement.\n</p>\n\n<h3>Limits</h3>\n1 &le; <b>T</b> &le; 100.<br>\nTime limit: 20 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n1 &le; <b>S</b> &le; 5.<br>\n\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n1 &le; the length of each word in the monster's vocabulary &le; 5.<br>\n1 &le; the length of the enciphered string &le; 50.<br>\n5 &le; <b>V</b> &le; 10.<br>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n1 &le; the length of each word in the monster's vocabulary &le; 20.<br>\n2000 &le; the length of the enciphered string &le; 4000.<br>\n200 &le; <b>V</b> &le; 400.<br>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3jjpB8cKQtahHAwdfHmRuXZqf3X8v6ztYzNsoeh1HQxbABs6nI2wIVmKUA61rak91MUiAaND-h89XIB2OhMD2hE5fhI5ffq8KwnXiuaVf5/codejamon_cipher_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5 1\nthis\nis\na\ngood\nday\nsithsiaodogyad\n5 3\npt\nybsb\nxnydt\nqtpb\nkw\nxnydttbpqtpqb\nyxdtntpbsby\nptptxytdnsbybpt</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2NeyyhOLJsQR6u5bda9fJkw0NiYUkEcqPxtRG6sistPQLSrXqJaNdoDKl3KCih3qS1_Fq-l5L7raPz6xQPsJNYdVIbsvKxXqzyk67CTza6RA/codejamon_cipher_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 1 1 1</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":7},{"type":2,"type__str":"HIDDEN","value":16}],"title":"Codejamon Cipher","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U15VjfrIkZt4Fpq7RmsEO5oaXdtSNf5CJDPdtNxl-jW1L84tnAu2WPefsscir_W_5cQHyiD4Dcg/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201db9","statement":"<h3>Problem</h3>\n<p>\nMary likes playing with rubber bands. It's her birthday today, and you have gone to the rubber band shop to buy her a gift.<br/>\n<br/>\nThere are <b>N</b> rubber bands available in the shop. The i-th of these bands can be stretched to have any length in the range <b>[A<sub>i</sub>, B<sub>i</sub>]</b>, inclusive. Two rubber bands of range [a, b] and [c, d] can be connected to form one rubber band that can have any length in the range [a+c, b+d]. These new rubber bands can themselves be connected to other rubber bands, and so on.<br/>\n<br/>\nYou want to give Mary a rubber band that can be stretched to a length of <i>exactly</i> <b>L</b>. This can be either a single rubber band or a combination of rubber bands. You have <b>M</b> dollars available. What is the smallest amount you can spend? If it is impossible to accomplish your goal, output <code>IMPOSSIBLE</code> instead.<br/>\n<br/>\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each test case starts with 3 integers <b>N</b>, <b>M</b>, <b>L</b>, the number of rubber bands available in the shop, the number of dollars you have and the desired rubber band length. Then <b>N</b> lines follow. Each line represents one rubber band and consists of 3 integers, <b>A<sub>i</sub>, B<sub>i</sub>, and P<sub>i</sub></b>. <b>[A<sub>i</sub>, B<sub>i</sub>]</b> is the inclusive range of lengths that the i-th rubber band can stretch to, and <b>P<sub>i</sub></b> is the price of the i-th rubber band in dollars.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is <code>IMPOSSIBLE</code> if you cannot buy rubber bands to satisfy the goal described above, or otherwise an integer: the minimum price you can pay.\n</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 100.<br/>\nTime limit: 30 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n1 &le; <b>P<sub>i</sub></b> &le; <b>M</b>.<br/>\n1 &le; <b>L</b> &le; 10000.<br/>\n1 &le; <b>A<sub>i</sub></b> &le; <b>B<sub>i</sub></b> &le; 10000.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n1 &le; <b>N</b> &le; 10.<br/>\n1 &le; <b>M</b> &le; 100.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n1 &le; <b>N</b> &le; 1000.<br/>\n1 &le; <b>M</b> &le; 1000000000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U336UxL0DRmWcaUg3VEb_uATCX6Zd3bSBIHNX7vM0TTzDKjv9gU1_wU-QlzdAFwDphtlVjSkz5kxcjHAnHIhyTgZpC0wz94JML3nbM/stretch_rope_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3 8 6\n3 5 2\n4 4 3\n1 2 5\n3 11 14\n1 3 4\n5 5 3\n2 6 5\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3s9AxmlmiM95ZEQYWZb05Qf0j_JuEYwNIcmGBzO5SCKiEidR6OULuk7T4iljMulb2U6MnDT26p8QyCNgTQUPNDjaRNeFkjTCit6JT4/stretch_rope_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 7\nCase #2: IMPOSSIBLE\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\nIn sample case #1, none of the rubber bands in the shop are long enough on their own. It will not work to buy the two cheapest rubber bands and stick them together, because the new band would have a stretch range of [7, 9], which does not include 6. (Remember, the rubber band must be able to stretch to a length of <i>exactly</i> <b>L</b>.) The optimal solution is to buy the rubber bands costing 2 and 5 and stick them together; the new band has a stretch range of [4, 7], which does include 6. You have 8 dollars, so you can afford the total cost of 7 dollars.<br/>\n<br/>\nIn sample case #2, you need to buy all of the rubber bands to be able to stretch to length 14. That would cost 12 dollars, but you only have 11, so this case is <code>IMPOSSIBLE</code>.<br/>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":15},{"type":2,"type__str":"HIDDEN","value":30}],"title":"Stretch Rope","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000201db8","type":1,"type__str":"SPECTATOR"},"title":"Round D 2016"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
