{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1410768000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000434947","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1410757200000,"tasks":[{"analysis":"<p>\nFor small dataset, a simple brute-force algorithm will do. Also, since M &lt; 10 and N &le; 7, you can simply use 32-bit integer to enumerate all potential passwords. Pseudo-code:\n</p>\n<pre>\n<code>\nanswer = 0\nfor password in (0 .. 10<sup>N</sup>-1):\n  condition1 = every digit in password &lt; M\n  condition2 = every element in {0 .. M-1} occurs at least once in password\n  if condition1 == true and condition2 == true:\n    answer = answer + 1\nprint(answer)\n</code>\n</pre>\n\n<p>\nHowever, the algorithm above is not fast enough for large dataset. Assume that f(M,N) be the answer. If we ignore the condition that \"All M characters should occurs in the password at least once\", then the answer will be very simple -- M<sup>N</sup>.\n</p>\n\n<p>\nBut we can't ignore that. f(M,N) = M<sup>N</sup> takes some invalid passwords into count. What are they? They're the passwords formed with less than M characters. More precisely, we need to deduct all f(i,N) from M<sup>N</sup> where 1&le;i&lt;M. Is that enough?\n</p>\n\n<p>\nNot yet. Note that we need to choose a set of i characters first. Consider character set S={3,5,7} with N=4. If we want to remove all i=1-character passwords, we need to remove 3333, 5555 and 7777 -- we need to pick up a subset of S with i elements. That's a classical combinatorial problem.\n</p>\n\n<p>\nBy putting everything together, we have f(M,N) = M<sup>N</sup> - sigma(1&le;i&lt;M)C(M,i)*f(i,N) and f(1,N) = 1. We can easily solve it by using dynamic programming.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2ir7FfVaHqFUYdKMnVeekGQ0lmWemHHFjyxy2iCmIOA9Wdu3p-aWFYmxpgvwnQnRLz0ZLk7Yeh/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000043474c","statement":"<h3>Problem</h3>\n<p>\nPasswords are widely used in our lives: for ATMs, online forum logins, mobile device unlock and door access. Everyone cares about password security. However, attackers always find ways to steal our passwords. Here is one possible situation:\n</p>\n\n<p>\nAssume that Eve, the attacker, wants to steal a password from the victim Alice. Eve cleans up the keyboard beforehand. After Alice types the password and leaves, Eve collects the fingerprints on the keyboard. Now she knows which keys are used in the password. However, Eve won't know how many times each key has been pressed or the order of the keystroke sequence.\n</p>\n\n<p>\nTo simplify the problem, let's assume that Eve finds Alice's fingerprints only occurs on <b>M</b> keys. And she knows, by another method, that Alice's password contains <b>N</b> characters. Furthermore, every keystroke on the keyboard only generates a single, unique character. Also, Alice won't press other irrelevant keys like 'left', 'home', 'backspace' and etc.\n</p>\n\n<p>\nHere's an example. Assume that Eve finds Alice's fingerprints on <b>M</b>=3 key '3', '7' and '5', and she knows that Alice's password is <b>N</b>=4-digit in length. So all the following passwords are possible: 3577, 3557, 7353 and 5735. (And, in fact, there are 32 more possible passwords.)\n</p>\n<p>\nHowever, these passwords are not possible:\n</p>\n<pre>\n1357  // There is no fingerprint on key '1'\n3355  // There is fingerprint on key '7',\n         so '7' must occur at least once.\n357   // Eve knows the password must be a 4-digit number.\n</pre>\n\n<p>\nWith the information, please count that how many possible passwords satisfy the statements above. Since the result could be large, please output the answer modulo 1000000007(10<sup>9</sup>+7).\n\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>.<br/>\nFor the next <b>T</b> lines, each contains two space-separated numbers <b>M</b> and <b>N</b>, indicating a test case.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the test case number (starting from 1) and y is the total number of possible passwords modulo 1000000007(10<sup>9</sup>+7).\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n</p>\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n<b>T</b> = 15.<br/>\n1 &le; <b>M</b> &le; <b>N</b> &le; 7.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n<b>T</b> = 100.<br/>\n1 &le; <b>M</b> &le; <b>N</b> &le; 100.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3YFXrjrsVzUorJlzJWkg8MLqFJzmD-Hqxud175CRqp2ZTAdcqFuV2FlumoWRanIMuSG7S8oA5UJursCcwL_42vOqoev5VH1BLNJkhUn3k_iw/password_attacker_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n1 1\n3 4\n5 5\n15 15</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U30PhLCCGOriWSJRhzkmnGjhcNNsf5VwKi2fbMaAs1eeMuZZMEbc_mnzkw8enYz63kggwEweNJwGk2oR5r5TaAoPNKnusTro-58VUEYZ7Hg1Us/password_attacker_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 36\nCase #3: 120\nCase #4: 674358851\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":8},{"type":2,"type__str":"HIDDEN","value":13}],"title":"Password Attacker","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\nFor small dataset, there is a greedy solution - we can choose any 3 adjacent cards with same number, util we can't find such triple.\n</p>\n<p>\nFor large dataset, there it's a dynamic programming problem. We can define a state <b>DP[i][j]</b>, which indicates the smallest number of card Bob can not drop if we consider all cards with index from <b>i</b> to <b>j</b>. So for every legal state, we have four choices:\n<ul>\n<li>Get rid of the card with index <b>i</b></li>\n<li>Get rid of the card with index <b>j</b></li>\n<li>Choose a card with index <b>k</b>, which meets<pre>a<sub>j</sub> - a<sub>k</sub> = a<sub>k</sub> - a<sub>i</sub> = K</pre></li>\n<li>Choose a card with index <b>k</b>, and split the cards into two parts(one from <b>i</b> to <b>k</b> and the other one from <b>k + 1</b> to <b>j</b>)</li>\n</ul>\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2MKP3QG-zH4pV0AeZlnzFZ0MVLbfFijF63VBWgLOOkGZ1ugKwSaxLgmvM6-FHKJ2KeerP_rGkc/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000434c0b","statement":"<h3>Problem</h3>\n<p>\nBob is fond of playing cards. On his birthday party, his best friend Alice gave him a set of cards.\n</p>\n<p>\nThere are <b>N</b> cards and each card contains an integer number. He put the cards from left to right on a desk and wants to discard some of them. Before he discards any cards, he will choose a number <b>K</b>. At each time, he always chooses 3 <b>adjacent</b> cards to discard, and we assume that the numbers on each card from left to right are <b>a</b>, <b>b</b> and <b>c</b>. Bob guarantees that</p>\n<pre>c - b = b - a = K</pre>\n<p>\nBob want to know what is the smallest number of cards he can be left with at the end. If he ever has a choice of which cards to discard, he chooses the cards and will leave the fewest cards at the end.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>.  <b>T</b> test cases follow.  \n</p>\n<p>\nEach test cases contains two lines. The first line of each test case contains two integers: the number of cards <b>N</b> and the number <b>K</b> Bob chooses. The second line contains <b>N</b> integers <b>a<sub>1</sub></b>, <b>a<sub>2</sub></b>, ..., <b>a<sub>N</sub></b> the numbers on the cards from left to right.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the test case number (starting from 1) and y is the smallest number of cards Bob can be left with after he has discarded everything he can.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds per test set.<br/>\nMemory limit: 1GB.\n<p/>\n<p>\n1 &le; <b>T</b> &le; 100.<br/>\n1 &le; <b>a<sub>i</sub></b> &le; 10<sup>6</sup>(1 &le; i &le; <b>N</b>).<br/>\n1 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n<b>K</b> = 0.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n1 &le; <b>K</b> &le; 10<sup>6</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0sHPtdaeRBLugHyo4cJmoXuWqVFNxMY_UbKOXrD4Wq5Xp_e8cvOtsvoYiB-ZV30KulYPrVszA_k0Bbt_hiuqkoHoU4dMZLptE/card_game_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n6 0\n4 4 3 3 3 4\n5 1\n3 1 2 3 4\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2z0yymmXxRgNXZb9_SgUGVZbiINS1oLSe756IWDuSRsNWgIk1ZxyrZbyZycR-bVsjDIbm_A2MqFkoA3PCPnF8pv8mF2HDfLZhj/card_game_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0\nCase #2: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":9},{"type":2,"type__str":"HIDDEN","value":17}],"title":"Card Game","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1XwPMRZb0DNxvbPobj_DXODummeHikXiAZdcCbOLTR5SSoiZ5ba8rpymL52azrEBbX4AjukBaq/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000434cd1","statement":"<h3>Problem</h3>\n<p>\nAn <b>n</b> parentheses sequence consists of <b>n</b> <code>(</code>s and <b>n</b> <code>)</code>s.<br>\n<br>\n\nA valid parentheses sequence is defined as the following:<br>\n<br>\n<i>You can find a way to repeat erasing adjacent pair of parentheses <code>()</code> until it becomes empty.</i><br>\n<br>\nFor example, <code>(())</code> is a valid parentheses, you can erase the pair on the 2nd and 3rd position and it becomes <code>()</code> then you can make it empty.<br>\n<code>)()(</code> is not a valid parentheses, after you erase the pair on the 2nd and 3rd position, it becomes <code>)(</code> and you cannot erase any more.<br>\n<br>\nNow, we have all valid <b>n</b> parentheses sequences. Find the <b>k</b>-th smallest sequence in lexicographical order.<br>\n<br>\nFor example, here are all valid 3 parentheses sequences in lexicographical order:<br>\n<pre>\n((()))\n(()())\n(())()\n()(())\n()()()\n</pre>\n\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>.  <b>T</b> lines follow.  Each line represents a test case consisting of 2 integers, <b>n</b> and <b>k</b>.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the test case number (starting from 1) and y is the <b>k</b>-th smallest parentheses sequence in all valid <b>n</b> parentheses sequences. Output \"Doesn't Exist!\" when there are less than <b>k</b> different <b>n</b> parentheses sequences.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds per test set.<br/>\nMemory limit: 1GB.\n</p>\n<p>\n1 &le; <b>T</b> &le; 100.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n1 &le; <b>n</b> &le; 10.<br/>\n1 &le; <b>k</b> &le; 100000.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n1 &le; <b>n</b> &le; 100.<br/>\n1 &le; <b>k</b> &le; 10<sup>18</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0dIgTUk5xBznqWzyvudfRzVY7S2ETEVsjzywWnK3NN0XjOt0EtcWL0bz0LsFIDBYvhzj0gB1mmJFuzSEPzx2pzXLr9GdVtILRJnUMMXaqWvw/parentheses_order_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n2 2\n3 4\n3 6\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U34jxyOSWzaMzA8Zlkjdpg6Yq9oecaWaJquLo0ELxcOZIEu6icO1LT2IQMsdbHod0Ci3a1xKRDofom9gouwSvxMIRH-T1pS0PRMHW_NzCONmSk/parentheses_order_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: ()()\nCase #2: ()(())\nCase #3: Doesn&#39;t Exist!</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":20}],"title":"Parentheses Order","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U27U9vqAv-wD__zFqyUpTESQyO87mhRJP-0RGt1jYIi4ItQED9vusoT1NCLJWR36_S4EvLvXhJT/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000434d9d","statement":"<h3>Problem</h3>\n<p>\nAt new years party there is a pyramidal arrangement of glasses for wine. For example, at the top level, there would just be one glass, at the second level there would be three, then 6 and then 10 and so on and so forth like the following image:<br><br>\n\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3PalqJ3nnAOd5KHRasoXK2I4yxo2NAqg1Xs-n7VB0Z0kTunycCIdh9Ux4oSMmEaNzT3Q/wine.png\"><br><br>\n\nThe glasses are numbered using 2 numbers, <b>L</b> and <b>N</b>. <b>L</b> represents the level of the glass and <b>N</b> represents the number in that level. Numbers in a given level are as follows:\n\n<p>\n<pre>\nLevel 1: \n    1\n\nLevel 2:\n    1\n 2     3\n\nLevel 3:\n      1\n   2     3\n4     5     6\n\nLevel 4:\n         1\n      2     3\n   4     5     6\n7     8     9     10\n\n</pre>\n\nEach glass can hold <b>250ml</b> of wine. The bartender comes and starts pouring wine in the top glass(The glass numbered <b>L</b> = 1 and <b>N</b> = 1) from bottles each of capacity <b>750ml</b>.<br><br>\n\nAs wine is poured in the glasses, once a glass gets full, it overflows equally into the 3 glasses on the next level below it and touching it, without any wine being spilled outside. It doesn't overflow to the glasses on the same level beside it. It also doesn't overflow to the any level below next level (directly).<br><br>\n\nFor example: When the glass of <b>L</b> = 2 and <b>N</b> = 2 overflows, the water will overflow to glasses of <b>L</b> = 3 and <b>N</b> = 2, 4, 5.<br><br>\n\nOnce that the bartender is done pouring <b>B</b> bottles, figure out how much quantity in ml of wine is present in the glass on level <b>L</b> with glass number <b>N</b>.\n\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>.  <b>T</b> test cases follow.  Each test case consists of three integers, <b>B</b>, <b>L</b>, <b>N</b>, <b>B</b> is the number of bottles the bartender pours and <b>L</b> is the glass level in the pyramid and <b>N</b> is the number of the glass in that level.\n\n\n\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where <b>x</b> is the test case number (starting from 1) and <b>y</b> is the quantity of wine in ml in that glass.\n\n<p>\nWe recommend outputting y to 7 decimal places, but it is not required. y will be considered correct if it is close enough to the correct number: within an absolute or relative error of 10<sup>-6</sup>.\nSee the <a href=\"https://codingcompetitions.withgoogle.com/kickstart/faq#how-does-kick-start-handle-real-numbers\" target=\"_blank\">FAQ</a> for an explanation of what that means, and what formats of real numbers we accept.\n\n\n<p>\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds per test set.<br/>\nMemory limit: 1GB.\n</p>\n<p>\n1 &le; <b>T</b> &le; 150.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n1 &le; <b>B</b> &le; 1000.<br/>\n1 &le; <b>L</b> &le; 100.<br/>\n1 &le; <b>N</b> &le; Number of glasses on the corresponding level.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n1 &le; <b>B</b> &le; 50000.<br/>\n1 &le; <b>L</b> &le; 400.<br/>\n1 &le; <b>N</b> &le; Number of glasses on the corresponding level.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3MtS0gWWXzWc4PVRn9CfO15J6V1UI10mZoDfRrNIGnBEQ94naUkvyaI827d9vbkOJy6Vw-OugmXSfGba8a3NCRGFVchUit9nbvI75m/new_years_eve_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">7\n1 2 1\n1 1 1\n2 1 1\n20 1 1\n1 3 1\n2 3 1\n10 4 10\n\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0WW9gaCzl7BXAZZVTo1LVVfjGB7yvh0bF4P5Oim9wze_soNL3MDuMv93PMeMt9l76aYpeGNcxhzQp5NI99kqdDkSTe7sg548uhS3jNFg/new_years_eve_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 166.6666667\nCase #2: 250.0000000\nCase #3: 250.0000000\nCase #4: 250.0000000\nCase #5: 0.0000000\nCase #6: 55.5555556\nCase #7: 157.4074074\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":11},{"type":2,"type__str":"HIDDEN","value":12}],"title":"New Years Eve","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000434947","type":1,"type__str":"SPECTATOR"},"title":"Round B 2014"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
