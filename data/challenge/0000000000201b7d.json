{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1508659200000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000201b7d","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  This Kickstart round began with <i>Huge Numbers</i>, which could be solved by taking advantage of a basic property of exponents.\n  Then came <i>Cards Game</i>, which appeared to be solvable via some complicated greedy approaches,\n  but turned out to have an elegant minimum spanning tree approach.\n  Finally, we had <i>Matrix Cutting</i>, which involved breaking a large matrix into smaller independent\n  submatrices by making horizontal and vertical cuts. It could be solved via dynamic programming.\n</p><p>\n  Thanks to everyone who participated!\n</p>\n<hr>\n<p>\n  <b>Cast</b>\n</p><p>\n  Problem A (Huge Numbers): Written and prepared by Lalit Kundu.\n</p><p>\n  Problem B (Cards Game): Written by Amit Pandey. Prepared by Amit Pandey and Lalit Kundu.\n</p><p>\n  Problem C (Matrix Cutting): Written and prepared by Lalit Kundu.\n</p><p>\n  Solutions and other problem preparation and review by Akashdeep Nain, Nishant Redkar, Ian Tullis\n  and Xuan'ang Zhao.\n</p>\n</p><p>\nAnalyses by Lalit Kundu.","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1508648400000,"tasks":[{"analysis":"<h2>Huge Numbers : Analysis</h2>\n\n<h3>Small dataset</h3>\n<p>\n  For the small input, calculating the actual value of <b>N</b> factorial suffices, since <b>N</b>\n  is up to 10. We just need to calculate <b>A<sup>n</sup></b> mod <b>P</b>, where n could be up to\n  10! = 3628800. We can compute this iteratively, maintaining our answer modulo <b>P</b> at all times,\n  as in the following pseudocode:\n</p>\n<p><pre>\n  ans = 1\n  for i = 1 to factorial(N)\n    // Since, multiplication is associative modulo <b>P</b>,\n    // we can maintain our answer modulo <b>P</b>\n    ans = (ans * <b>A</b>) % <b>P</b>\n  return ans\n</pre>\nSince <b>P</b> and <b>A</b> are both no greater than 10<sup>5</sup>, and we are taking modulo <b>P</b> at\neach stage, we do not need to worry that (ans * <b>A</b>) will overflow the result, provided that\nwe use a long rather than an int to store ans.\n</p>\n\n<h3>Large dataset</h3>\n<p>\nAt first, it may seem like this problem requires a number-theoretic approach.\n  But there exists a very simple solution which employs fast exponentiation.<br/>\n  First, let's see how efficiently we can calculate <b>A<sup>n</sup></b> mod <b>P</b> for a given n.\n  We can use a divide and conquer approach to come up with an O(log n) solution, as summarized by\n  the following algorithm:\n</p>\n<p>\n  <pre>\n  pow(a, n, p):\n    if n == 0\n      return 1\n\n    pow_half = pow(a, n / 2, p)\n    pow_half_sq = (pow_half  * pow_half) % p // again, multiplication is associative modulo p\n    if n % 2 == 0\n      return pow_half_sq\n    else\n      return (pow_half_sq * a) % p\n  </pre>\n</p>\n\n<p>\n  We can also take advantage of a basic property of exponents: a<sup>b*c</sup> can be rewritten as a<sup>b<sup>c</sup></sup>.\n  So, we can write <b>A<sup>N!</sup></b> as <b>A<sup>1<sup>2<sup>3...</sup></sup></sup></b>. And,\n  since multiplication modulo <b>P</b> is associative, we can maintain our answer modulo <b>P</b> at all times.\n  So, our O(<b>N</b> log <b>N</b>) algorithm is:\n</p>\n<p>\n  <pre>\n  ans = <b>A</b> % <b>P</b>\n  for i = 2 to <b>N</b>\n    ans = pow(ans, i, <b>P</b>)\n  return ans\n  </pre>\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U29NlUZWuk6KLnzmaQQF6IdWFHyBJczxlaOVwB9YSVriFnFd8Htk1uR-PnDHZrWBdA7SjzxPw1A/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201c03","statement":"<h3>Problem</h3>\n<p>\nProfessor Shekhu has another problem for Akki today. He has given him three positive integers\n  <b>A</b>, <b>N</b> and <b>P</b> and wants him to calculate the remainder when <b>A<sup>N!</sup></b>\n  is divided by <b>P</b>. As usual, <b>N!</b> denotes the product of the first <b>N</b> positive integers.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> lines follow. Each\n  line contains three integers <b>A</b>, <b>N</b> and <b>P</b>, as described above.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the\n  test case number (starting from 1) and <code>y</code> is the answer.\n</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 100.<br/>\nTime limit: 40 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n1 &le; <b>A</b> &le; 10.<br/>\n1 &le; <b>N</b> &le; 10.<br/>\n1 &le; <b>P</b> &le; 10.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n1 &le; <b>A</b> &le; 10<sup>5</sup>.<br/>\n1 &le; <b>N</b> &le; 10<sup>5</sup>.<br/>\n1 &le; <b>P</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0qmURkjIGeP0fdAkGcETKgI6woERwPjk46yC9uw8KaEX_rTlJ8m8O_2gwe_YhSeHI0L3ZIIB9B6bQWwCP0Bjt_yF9Nq-0DwqvvILQ/huge_numbers_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2 1 2\n3 3 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0NR70Gjn6j81gUJya_ANw_JrZLwCaWnup8qWaqCgxa7Y1foiWja1Gc08B2WBg5_csRJRRwFFTN7XVZ-J4yh-KDaVHLRh0D7EIFSnUR/huge_numbers_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0\nCase #2: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n  In Sample Case #1, the answer is the remainder when 2<sup>1!</sup> = 2 is divided by 2, which is 0.\n    </p>\n  <p>\n    In Sample Case #2, the answer is the remainder when 3<sup>3!</sup> = 3<sup>6</sup> = 729 is\n    divided by 2, which is 1.\n    </p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":9},{"type":2,"type__str":"HIDDEN","value":14}],"title":"Huge Numbers","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3ZVPTql5g2Y4EoJQ-37goX13waNbcuVyUNU1MZ2fQxXF1ZatEiYMX1TPp2rQfAhgTYrxGKStNn/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201c9c","statement":"<h3>Problem</h3>\n<p>\nProfessor Shekhu was a famous scientist working in the field of game theory in the early days of computer\n  science. Right now, he's working on a game which involves a box containing <b>N</b> distinct cards.\n   The i-th of these cards has a red number written on one side, and a blue number written on the other side.\n  Both of these numbers are positive integers. The game proceeds as follows:\n  <ul>\n    <li>The player starts with a total of 0 points. The objective of the game is to finish with the\n      <i>lowest</i> possible total.</li>\n    <li>As long as there are at least two cards remaining in the box, the player must repeat the following move:\n      <ul>\n        <li>Remove two cards of their choice from the box. Choose a red number <b>R</b> from one card and a\n          blue number <b>B</b> from the other card.</li>\n        <li>Add the value <b>R ^ B</b> to the total, where <b>^</b> denotes bitwise XOR operation.</li>\n        <li>Return one of the two cards to the box, and remove the other from the game.</li>\n      </ul>\n    </li>\n    <li>The game ends when there is only one card remaining in the box (and so it is impossible to\n    make another move).</li>\n  </ul>\n</p>\n<p>\nProfessor Shekhu has summoned his best student, Akki, to play this game. Can you help Akki find the minimum possible total,\n  considering all possible ways in which he can play the game?\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe first line of the input contains an integer <b>T</b>, the number of test cases. <b>T</b> test cases follow;\n  each test case consists of three lines:<br/>\nFirst line of the each test case will contain an integer <b>N</b>.<br>\n   <ol>\n  <li>The first line contains a positive integer <b>N</b>: the number of cards in the box.</li>\n  <li>The second line contains a list of <b>N</b> positive integers <b>R<sub>i</sub></b>;\n    the i-th of these represents the red number on the i-th card.</li>\n     <li>The third line contains a list of <b>N</b> positive integers <b>B<sub>i</sub></b>;\n       the i-th of these represents the blue number on the i-th card.</li>\n  </ol>\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the\n  test case number (starting from 1) and <code>y</code> is the minimum possible total that Akki can\n  attain, if he plays optimally.\n</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 100.<br/>\nTime limit: 20 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n1 &le; <b>R<sub>i</sub></b> &le; 10<sup>9</sup>.<br/>\n1 &le; <b>B<sub>i</sub></b> &le; 10<sup>9</sup>.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n2 &le; <b>N</b> &le; 5.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n2 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1IRkUpVQsBUI5rzoQeLr5PG9wfA-lJ-HkVrs1gMW1-w-bHDnHWJAPXPco9H9QllJPr1cv5cpbbpXsQ6ZgNesILO6_uNdv9DW1o/cards_game_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2\n1 2\n3 3\n3\n1 101 501\n3 2 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3RPJ0JM6c362ooCZsOCurjRz4QWbidSCru1N5_ZZ2IOaBziiwRV7Dlxeudwp5tgHwpi1QeCIfmgMHFTyFIJ7-96z1VrGt6Xc9bmg/cards_game_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nIn Sample Case #1, Akki has only one move in which he picks up the available cards and has two options.\n     <ol>\n       <li>He can choose red number from the first card and blue number from the second card\n         to add 1 ^ 3 = 2 to the total.</li>\n       <li>He can choose red number from the second card and blue number from the first card\n         to add 2 ^ 3 = 1 to the total.</li>\n  </ol>\n  The second option is better and the answer is 1.\n</p>\n\n<p>\nIn Sample Case #2, one optimal strategy is to take the red number from first card and the blue\n  number from second card, add 1 ^ 2 = 3 to the total, and return first card to the box. Then, take\n  the red number from first card and the blue number from third card, add 1 ^ 3 = 2 to the total,\n  and return either of the cards to the box. The final total is 5.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":15},{"type":2,"type__str":"HIDDEN","value":19}],"title":"Cards Game","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Matrix Cutting : Analysis</h2>\n\n<h3>Small dataset</h3>\n<p>\nWe have a 1-D array of size <b>M</b> which needs be broken down into <b>M</b> parts by making\nvertical cuts in an order of our choice, where each vertical cut yields a number of coins equal to\n  the minimum value in the subarray at the time of the cut. Our objective is to make the cuts in an order\n  that maximizes the total number of coins.\n  </p>\n<p>\n  Since <b>M</b> can be no greater than 10 in this dataset, we can simply consider all possible\n  orderings of the cuts. For each permutation, we can simulate the cuts and calculate the total number\n  of coins, and then output the maximum total we find across all permutations. The complexity of this\n  approach is O(<b>M</b>!), which is sufficient for the Small dataset.\n</p>\n<p>\nHowever, we will have an easier time with the Large dataset if we come up with a better approach.\n  One helpful observation is that once a cut is made, the problem has been reduced to two independent\n  problems of the same type: one for the left subarray, and one for the right subarray.\n  This strongly suggests a dynamic programming (DP) based solution.\n</p>\n<p>\n  We can define each subproblem in the DP as f(L, R): the answer for a subarray ranging from positions\n  L to R, inclusive, in the original array. Our final answer is f(0, <b>M</b>-1).\n  Now we need a recurrence relation, which we can develop by iterating over the position of the\n  first cut we make, as in the following pseudocode:\n</p>\n<p>\n  <pre>\n  f(L, R, A): // A is the original array\n\n    ans = 0\n\n    // Assuming first cut is made immediately to the right of cut_position\n    for cut_position in L to R - 1, inclusive\n      ans = max(ans , f(L, cut_position) + f(cut_position + 1, R))\n\n    // we can calculate this in O(M).\n    current_coins = minimum value in A over positions L to R, inclusive\n\n    // For the current cut, we get the same number of coins no matter where we cut.\n    return ans + current_coins\n  </pre>\nWith memoization, the total complexity of this approach is O(<b>M</b><sup>3</sup>). Remember, the\ncomplexity of a DP approach is given by the number of possible distinct states times the cost of transitioning between states.\n\n</p>\n\n<h3>Large dataset</h3>\n<p>\n  In the Large dataset, we have a 2-D matrix in which we can make horizontal cuts as well as vertical cuts.\n  Since the total number of cuts could be up to 80, and those cuts could occur in many possible orders, our brute force method no longer works.\n</p>\n<p>\n  However, our efficient\n  DP approach from the 1-D case can be extended to the 2-D case, by redefining our DP state to\n  describe the answer for a submatrix instead of a subarray. So, we define f(L, R, P, Q) as the answer\n  for a submatrix defined by the intersection of rows L through R, and columns P through Q (all limits inclusive).\n  A recurrence relation can be derived by iterating over all possible horizontal and vertical cuts as the first cut we make.\n  Pseudocode:\n</p>\n<p>\n  <pre>\n  f(L, R, P, Q, A): // A is original matrix\n\n    ans = 0\n\n    // horizontal cuts\n    for horz_cut = L to R - 1, inclusive\n      ans = max(ans, f(L, horz_cut, P, Q) + f(horz_cut + 1, R, P, Q) + current_coins)\n\n    // vertical cuts\n    for vert_cut = P to Q - 1, inclusive\n      ans = max(ans, f(L, R, P, vert_cut) + f(L, R, vert_cut + 1, Q) + current_coins)\n\n\n    // we need to calculate this in less than O(<b>N</b> + <b>M</b>), if we don't want this step\n    // to dominate the transition cost\n    current_coins = minimum value in current submatrix (defined by L, R, P, Q)\n\n    // For the current cut, we get the same number of coins no matter where we cut.\n    return ans + current_coins\n  </pre>\n</p>\n<p>\nThe only remaining piece of the puzzle is: how do we calculate the minimum value in a submatrix efficiently,\n  in time linear or better in the number of rows and columns of the submatrix? We can pre-calculate\n  answer for all O(<b>N<sup>2</sup>M<sup>2</sup></b>) submatrices, which is easier if you fix the\n  top-left corner of the submatrix and iterate over possible bottom-right corners. This can be done\n  in O(<b>N<sup>2</sup>M<sup>2</sup></b>) overall.\n</p>\n<p>\n  The overall complexity of our DP approach is O(<b>N</b><sup>2</sup><b>M</b><sup>2</sup>(<b>N</b> + <b>M</b>)),\n  which is fast enough for the Large dataset.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2uC7vNCBxHWbU8fPIiZDUFM0Oren-SqFH4NZHbaI1JXFgY6V4x2EN4Dh0I687uu0-HsFzgD-Ip/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201d2b","statement":"<h3>Problem</h3>\n<p>\n  Prof Shekhu has a matrix of <b>N</b> rows and <b>M</b> columns where rows are numbered from 0 to <b>N-1</b>\n  from top to bottom, and columns are numbered from 0 to <b>M-1</b> from left to right. Each cell in the matrix\n  contains a positive integer.\n</p>\n\n<p>\n  He wants to cut this matrix into <b>N * M</b> submatrices (each of size 1 * 1) by making horizontal\n  and vertical cuts. A cut can be made only on the boundary between two rows or two columns.\n</p>\n<p>\n  Prof Shekhu invites his best student Akki for this job and makes an interesting proposition.\n  Every time Akki makes a cut in a submatrix, before he makes the cut, he is awarded a number of coins\n  equal to the minimum value in that submatrix.\n  Note that with every cut, the total number of submatrices increases. Also, cuts in any two different\n  submatrices are independent and likewise, Akki is awarded independently for the cuts in different submatrices.\n</p>\n<p>\n  Now, Akki has various ways in which he can make the cuts. Can you help him by maximizing the total\n  number of coins he can gain?\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe first line of the input contains an integer <b>T</b>, the number of test cases. <b>T</b> test cases follow.\nThe first line of each test case contains two integers <b>N</b> and <b>M</b>, as described above.<br>\n   <ol>\n     <li>Next, there are <b>N</b> lines of <b>M</b> positive integers each; these describe the matrix.</li>\n  </ol>\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the\n  test case number (starting from 1) and <code>y</code> is the maximum possible number of coins that Akki can\n  be awarded, if he makes the cuts in optimal order.\n</p>\n\n<h3>Limits</h3>\n<p>\n1 &le; <b>T</b> &le; 100.<br/>\nMemory limit: 1GB.<br/>\n1 &le; each value in the matrix &le; 10<sup>5</sup>.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\nTime limit: 40 seconds.<br/>\n<b>N</b> = 1.<br/>\n1 &le; <b>M</b> &le; 10.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\nTime limit: 120 seconds.<br/>\n1 &le; <b>N</b> &le; 40.<br/>\n1 &le; <b>M</b> &le; 40.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1ZeBOHnBXhiJPbVVGuU9E-qX8bLFS7-fbnQvxWR9jJRiMCzkICTgUt1isUB58cejg0D_VpXkkEKIBGax_Ab_TqS6suZjoPzKDbBLXg6w/matrix_cutting_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n2 2\n1 2\n3 4\n2 3\n1 2 1\n2 3 2\n1 2\n1 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Ngq09RtR-3cU5N0S6jJyIhotlQZ407QUdMsVMpd2Uf6yCBLQV7e7KYuBksJ0-Pf_dS_nFEj9JFc-r_jlm8VwQc_o2jAu2BOu96vpZmKQ/matrix_cutting_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 5\nCase #2: 7\nCase #3: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\nIn Sample Case #1, there are two possible ways in which Akki can make the cuts.\n  <ol>\n       <li>Suppose that Akki first cuts the matrix horizontally. He is awarded the minimum value in the matrix: 1.\n         Then he has to make vertical cuts in the two submatrices ([1, 2] and [3, 4]), for which he\n         gets 1 and 3 coins, respectively.</li>\n       <li>Suppose that Akki first cuts the matrix vertically. He is awarded the minimum value in the matrix: 1.\n         Then he has to make horizontal cuts in the two submatrices (which have the transposes [1, 3]\n         and [2, 4]), for which he gets 1 and 2 coins, respectively.</li>\n  </ol>\n  The first strategy is better, and the answer is 5.\n  </p>\n\n<p>\n  In Sample Case #2, Akki can be awarded at most 7 coins. One of the optimal ways is to first make\n  the only horizontal cut to earn 1 coin. Then, in the upper submatrix [1, 2, 1], Akki can first\n  make the cut immediately to the right of first column and then the cut immediately to the right of second\n  column to earn a total of 2 coins.\n  Similarly, in the lower submatrix [2, 3, 2], Akki can first make the cut immediately to the right of second column\n  and then the cut immediately to the right of first column to earn a total of 4 coins.\n</p>\n<p>\nIn Sample Case #3, there is only one cut to be made.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":17},{"type":2,"type__str":"HIDDEN","value":25}],"title":"Matrix Cutting","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000201b7d","type":1,"type__str":"SPECTATOR"},"title":"Round G 2017"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
