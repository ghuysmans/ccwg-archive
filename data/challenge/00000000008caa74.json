{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1650765600000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"00000000008caa74","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Thank you for participating in Kick Start 2022 Round B!</p>\n<hr>\n<p><b>Cast</b></p>\n<p>Infinity Area: Written by Mohamed Yosri Ahmed and prepared by Vijay Krishan Pandey.</p>\n<p>Palindromic Factors: Written by Gagan Madan and prepared by Pranav Gavvaji.</p>\n<p>Unlock the Padlock: Written by Aziz Eroui and prepared by Rahul Goswami.</p>\n<p>Hamiltonian Tour: Written by David Arthur and prepared by Laksh Nachiappan.</p>\n<p>Solutions, other problem preparation, reviews and contest monitoring by\nAbhilash Tayade, Aditya Kumar, Akriti Anand, Akul Siddalingaswamy, Alan Lou, Anurag Singh, Anushi Maheshwari, Arjun Sanjeev, Ashveen Bansal, Aziz Eroui, Bartosz Kostka, Bohdan Pryshchenko, Chun-nien Chan, Cristhian Bonilha, David Arthur, Deepanshu Aggarwal, Diksha Saxena, Fahim Ferdous Neerjhor, Gagan Kumar, Gagan Madan, Jared Gillespie, Jimmy Dang, Krists Boitmanis, Kunal Verma, Kushagra Srivastava, Laksh Nachiappan, Lizzie Sapiro Santor, Maks Verver, Matt Kenison, Michał Łowicki, Mohamed Yosri Ahmed, Nikita Rungta, Pranav Gavvaji, Pratibha Jagnere, Radhika Agarwal, Rahul Goswami, Rohan Garg, Ruoyu Zhang, Sasha Fedorova, Surya Upadrasta, Suryansh Gupta, Swapnil Gupta, Swapnil Mahajan, Teja Vardhan Reddy Dasannagari, Uday Patel, Vakul Gupta, Vijay Krishan Pandey, Vinay Khilwani.</p>\n<p>Analysis authors:</p><ul>\n<li>Infinity Area: Fahim Ferdous Neerjhor</li>\n<li>Palindromic Factors: Krists Boitmanis</li>\n<li>Unlock the Padlock: Swapnil Gupta</li>\n<li>Hamiltonian Tour: Krists Boitmanis</li>\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1650754800000,"tasks":[{"analysis":"<p>\n  A simple way to test if a number is palindromic is to convert it to a string first and then check\n  if the string equals its reverse. Since $$$\\mathbf{A}$$$ has no more than $$$11$$$ digits, we will assume that\n  it is a constant time operation.\n</p>\n\n<p>\n  C++:\n</p>\n\n<pre>\n  bool isPalindrome(long long a) {\n    string s = to_string(a);\n    string rev(s.rbegin(), s.rend());\n    return s == rev;\n  }\n</pre>\n\n<p>\n  Python:\n</p>\n\n<pre>\n  def isPalindrome(a):\n    s = str(a)\n    rev = s[::-1]\n    return s == rev\n</pre>\n\n<p>\n  Java:\n</p>\n\n<pre>\n  public static boolean isPalindrome(long a) {\n    String s = Long.toString(a);\n    StringBuilder rev = new StringBuilder(s);\n    rev.reverse();\n    return s.equals(rev.toString());\n  }\n</pre>\n\n<h3>\n  Test Set 1\n</h3>\n\n<p>\n  For the small test set, we can afford to find all factors of $$$\\mathbf{A}$$$ by checking every integer\n  $$$a \\in \\{1,2, \\ldots, \\mathbf{A}\\}$$$. For each factor of $$$\\mathbf{A}$$$, we also check\n  if it is a palindrome and increment the answer accordingly.\n</p>\n\n<p>\n  The time complexity of this brute-force solution is $$$O(\\mathbf{A})$$$.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  Let $$$a$$$ and $$$b$$$ be two factors of $$$\\mathbf{A}$$$ such that $$$\\mathbf{A}=ab$$$ and $$$a \\le b$$$. Then\n  $$$a \\le \\sqrt{\\mathbf{A}}$$$. It follows that we can find all factors of $$$\\mathbf{A}$$$ by checking the first\n  $$$\\sqrt{\\mathbf{A}}$$$ numbers only. For each factor $$$a \\le \\sqrt{\\mathbf{A}}$$$, the number\n  $$$b=\\frac{\\mathbf{A}}{a} \\ge \\sqrt{\\mathbf{A}}$$$ is also a factor of $$$\\mathbf{A}$$$.\n</p>\n\n<p>\n  The time complexity of the optimized algorithm is $$$O(\\sqrt{\\mathbf{A}})$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3ZjSqdQzossj9rhJO5fgWB1qRv20FedmxIs_nFDtkXNu4KNmhCGNZjZ4mHXh4pBb8ffDu3m_7z/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000acee89","statement":"<h3>Problem</h3>\n<p>\nYou are given a positive integer $$$\\mathbf{A}$$$. Find the number of factors of $$$\\mathbf{A}$$$ which are palindromes.\nA number is called a <a href=\"https://en.wikipedia.org/wiki/Palindromic_number\" target=\"_blank\">palindrome</a>\nif it remains the same when the digits in decimal representation are reversed. For instance, 121 is a palindrome,\nwhile 123 is not.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ lines follow.\n</p>\n<p>\n  Each line represents a test case and contains a single integer $$$\\mathbf{A}$$$.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the number of factors of $$$\\mathbf{A}$$$ which are palindromes.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 2 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n$$$1 \\le \\mathbf{A} \\le 10^{3}$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n$$$1 \\le \\mathbf{A} \\le 10^{10}$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3mcQhRGjr6i2M-lXjWtom3H0hbXh2L-LLyAGnaCPJRT8W6PZLcfjxJAvyDc7rRnA_rgDrTn56K8kd6FugpYiWT0rVgLuHNlTHgiaNcoSl4k_11/palindromic_factors_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n6\n10\n144\n242\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3KolOCiLgTvcOXIesOLJggF21w38s41fcbWdTFQTFofFC_a0FWi5bfT04yiIu7OmEku2A42di5QpxxxnTKBb1TOwOHmzgGqZxGjWeS0F5YGk3Fjg/palindromic_factors_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4\nCase #2: 3\nCase #3: 7\nCase #4: 6\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn the first test case, $$$\\mathbf{A}$$$ has $$$4$$$ factors which are palindromes: $$$1,2,3,$$$ and $$$6$$$. <br/>\nIn the second test case, $$$\\mathbf{A}$$$ has $$$3$$$ factors which are palindromes: $$$1, 2,$$$ and $$$5$$$. <br/>\nIn the third test case, $$$\\mathbf{A}$$$ has $$$7$$$ factors which are palindromes: $$$1, 2, 3, 4, 6, 8,$$$ and $$$9$$$. <br/>\nIn the fourth test case, $$$\\mathbf{A}$$$ has $$$6$$$ factors which are palindromes: $$$1, 2, 11, 22, 121,$$$ and $$$242$$$.<br/>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":6},{"type":1,"type__str":"VISIBLE","value":9}],"title":"Palindromic Factors","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n   In the given problem, the range $$$[l_{i-1}, r_{i-1}]$$$ chosen in the $$$(i-1)$$$-th operation needs to be completely contained\n      within the range $$$[l_i, r_i]$$$ chosen in the $$$i$$$-th operation; that is,\n      $$$l_i \\le l_{i-1} \\le r_{i-1} \\le r_i$$$. The initial range ($$$[l_1, r_1]$$$) can be chosen\n      arbitrarily. If we reverse the order of these operations, we would get the same final combination. For the remaining analysis, we would\n  assume the reverse order of operations, that is, $$$l_{i-1} \\le l_i \\le r_i \\le r_{i-1}$$$. Whenever we say\n  rotations in the analysis, it means downward by default unless mentioned otherwise.\n</p>\n\n<h3> Test set 1 </h3>\n\n<p>\n  In this test set, we can start from range $$$[1, \\mathbf{N}]$$$ and greedily choose the side that requires\n  lesser rotations and make it zero, and solve for the next number on that side. We should\n  also keep track of the number of rotations done till now. Let the current range that we are trying to solve\n  be $$$[i,j]$$$ and let the number of rotations modulo $$$\\mathbf{D}$$$ be $$$k$$$. Then, the current value of index $$$i$$$ would\n  be $$$(\\mathbf{V_{i}} - k + \\mathbf{D}) \\enspace mod \\enspace \\mathbf{D}$$$. Similarly, the current value of index $$$j$$$ would\n  be $$$(\\mathbf{V_{j}} - k + \\mathbf{D}) \\enspace mod \\enspace \\mathbf{D}$$$. Let the current values of indexes $$$i$$$ and\n  $$$j$$$ be $$$currentVal_{i}$$$ and $$$currentVal_{j}$$$ respectively. The number of rotations required\n  to make dial at index $$$i$$$ zero would be $$$\\min(currentVal_{i}, \\mathbf{D} - currentVal_{i})$$$. The number of rotations required\n  to make dial at index $$$j$$$ zero would be $$$\\min(currentVal_{j}, \\mathbf{D} - currentVal_{j})$$$. If index $$$i$$$ requires less\n  number of rotations, we then add $$$\\min(currentVal_{i}, \\mathbf{D} - currentVal_{i})$$$ to the answer and solve for range\n  $$$[i+1, j]$$$. Otherwise, if index $$$j$$$ requires less number of rotations, we then add\n  $$$\\min(currentVal_{j}, \\mathbf{D} - currentVal_{j})$$$ to the answer and solve for range\n  $$$[i, j-1]$$$. If the minimum number of rotations done are $$$0$$$, $$$k$$$ remains same for the subsequent range.\n  Otherwise, we do $$$k = (k + 1) mod \\mathbf{D}$$$ as we would need to do $$$1$$$ rotation. The transition is explained\n  below in detail.\n</p>\n\n<p>\n  Why would the greedy approach work? Let $$$solve(i, j, k)$$$ denote the number of operations required\n  to make all the elements in the range $$$[i,j]$$$ zero given that $$$k$$$ rotations have happened.\n  When we are solving for range $$$[i,j]$$$, there are $$$4$$$ possible\n  cases that could occur:\n  <ul>\n    <li>\n      $$$currentVal_{i} = 0, currentVal_{j} = 0$$$. In this case, we can reduce the range from both\n      the sides. Hence, $$$solve(i, j, k) = solve(i+1, j-1, k)$$$.\n    </li>\n    <li>\n      $$$currentVal_{i} = 1, currentVal_{j} = 1$$$. In this case, we can reduce the range from both\n      the sides. Hence, $$$solve(i, j, k) = 1 + solve(i+1, j-1, (k + 1) mod \\mathbf{D})$$$.\n    </li>\n    <li>\n      $$$currentVal_{i} = 1, currentVal_{j} = 0$$$. In this case, it is optimal to reduce the range from\n      the right side because the value of index $$$j$$$ is already zero and we would not require any further operations.\n      If we choose to convert index $$$i$$$ to zero, we would need one operation to convert the value of\n      index $$$i$$$ to zero. And this would change the value of index $$$j$$$ to $$$1$$$ which may require\n      one more operation to convert it to zero. So, we might end up taking at least $$$1$$$ more operation\n      if we choose to make index $$$i$$$ to $$$0$$$. So, it is optimal to exclude the index $$$j$$$.\n      Hence, $$$solve(i, j, k) = solve(i, j-1, k)$$$.\n    </li>\n    <li>\n    $$$currentVal_{i} = 0, currentVal_{j} = 1$$$. Similar explanation as above, it is optimal to\n      exclude the index $$$i$$$. Hence, $$$solve(i, j, k) = solve(i+1, j, k)$$$.\n    </li>\n</ul>\n</p>\n\n<p>\n  At each step, we perform constant operations to check which index requires\n  less number of rotations and then make that element zero. Hence, it would\n  take $$$O(\\mathbf{N})$$$ time complexity to make all the elements zero.\n</p>\n\n<h3> Test set 2 </h3>\n<p>\n  In this test set, the greedy approach would not work because the number of digits is more. We can use\n  dynamic programming to solve this test set. Let $$$dp(i, j, k)$$$ denote the minimum number of operations\n  required to make all elements from $$$i$$$ to $$$j$$$ equal to $$$0$$$ and $$$k$$$ be the number of rotations modulo $$$\\mathbf{D}$$$\n  that have been done till now. Then, $$$currentVal_{i} = (\\mathbf{V_{i}} - k + \\mathbf{D}) \\enspace mod \\enspace \\mathbf{D}$$$.\n  Similarly, $$$currentVal_{j} = (\\mathbf{V_{j}} - k + \\mathbf{D}) \\enspace mod \\enspace \\mathbf{D}$$$. We then solve for both the\n  cases.\n  <ul>\n    <li>\n      For converting index $$$i$$$ to $$$0$$$, we could do one of the following:\n      <ul>\n        <li> Rotate downwards, it would take $$$currentVal_{i}$$$ operations. We then recursively solve for\n          $$$dp(i+1, j, (k+currentVal_{i}) \\enspace mod \\enspace \\mathbf{D})$$$.\n        </li>\n        <li> Rotate upwards, it would take $$$\\mathbf{D}$$$ - $$$currentVal_{i}$$$ operations. We then recursively solve for\n          $$$dp(i+1, j, (k - (\\mathbf{D} - currentVal_{i}) + \\mathbf{D}) \\enspace mod \\enspace \\mathbf{D})$$$.\n        </li>\n      </ul>\n      Let $$$val_{1} = \\min(currentVal_{i} + dp(i+1, j, (k+currentVal_{i}) \\enspace mod \\enspace \\mathbf{D}),\n      \\mathbf{D} - currentVal_{i} + dp(i+1, j, (k - (\\mathbf{D} - currentVal_{i}) + \\mathbf{D}) \\enspace mod \\enspace \\mathbf{D}))$$$.\n    </li>\n    <li>\n      For converting index $$$j$$$ to $$$0$$$, we could do one of the following:\n      <ul>\n        <li> Rotate downwards, it would take $$$currentVal_{j}$$$ operations. We then recursively solve for\n          $$$dp(i, j - 1, (k+currentVal_{j}) \\enspace mod \\enspace \\mathbf{D})$$$.\n        </li>\n        <li> Rotate upwards, it would take $$$\\mathbf{D}$$$ - $$$currentVal_{j}$$$ operations. We then recursively solve for\n          $$$dp(i, j - 1, (k - (\\mathbf{D} - currentVal_{j}) + \\mathbf{D}) \\enspace mod \\enspace \\mathbf{D})$$$.\n        </li>\n      </ul>\n      Let $$$val_{2} = \\min(currentVal_{j} + dp(i, j - 1, (k+currentVal_{j}) \\enspace mod \\enspace \\mathbf{D}),\n      \\mathbf{D} - currentVal_{j} + dp(i, j - 1, (k - (\\mathbf{D} - currentVal_{j}) + \\mathbf{D}) \\enspace mod \\enspace \\mathbf{D}))$$$.\n    </li>\n</ul>\nFinally, $$$dp(i,j,k) = \\min(val_{1}, val_{2})$$$. Please take a look at the pseudocode below:\n</p>\n\n<h5>Sample Code(C++)</h5>\n<pre><code class=\"language-cpp\">\n<var>int</var> solve(<var>int</var> i, <var>int</var> j, <var>int</var> k) {\n  if(i > j) {\n    return 0;\n  }\n  if(dp[i][j][k] != -1) {\n    return dp[i][j][k];\n  }\n  <var>int</var> currentVal_i = (V[i] - k + D) % D;\n  <var>int</var> currentVal_j = (V[j] - k + D) % D;\n  // Convert index i to 0.\n  <var>int</var> val_1 = min(currentVal_i + solve(i+1, j, (k + currentVal_i) % D), D - currentVal_i + solve(i+1, j, (k - (D - currentVal_i) + D) % D));\n  // Convert index j to 0.\n  <var>int</var> val_1 = min(currentVal_j + solve(i, j-1, (k + currentVal_j) % D), D - currentVal_j + solve(i, j-1, (k - (D - currentVal_j) + D) % D));\n  return dp[i][j][k] = min(val_1, val_2);\n}\n</code></pre>\n\n<p>\n  We can get the final answer from $$$dp(1, \\mathbf{N}, 0)$$$. There are a total of $$$O(\\mathbf{N}^{2} \\cdot \\mathbf{D})$$$ number of states. And we perform\n  constant operations for each state. Hence, the overall complexity of the solution is $$$O(\\mathbf{N}^{2} \\cdot \\mathbf{D})$$$.\n</p>\n\n<h3> Test set 3 </h3>\n\n<p>\n  In this test set, $$$\\mathbf{D}$$$ is very large, so the solution for the previous test set would time out.\n  An interesting observation is that we do not\n  need to keep track of the number of rotations when solving for a range $$$[i,j]$$$. If we keep track\n  of which side (left or right) was made zero in the previous operation, we can calculate the number\n  of rotations modulo $$$\\mathbf{D}$$$ that has been done till now. The last element that becomes zero will be because of\n  the combination of all the rotations done so far. So, let us say initial value of the element that was made\n  zero in the previous operation was $$$x$$$. Then,\n  total rotations applied so far have combinely made it zero. Then all numbers inside the range\n  $$$[i,j]$$$ are affected by $$$x$$$ downward rotations.\n</p>\n\n<p>\n  We can then solve the current test set by having $$$dp(i,j,bit)$$$ denoting the minimum number of operations\n  required to make all elements from $$$i$$$ to $$$j$$$ equal to $$$0$$$ given that the element\n  that was made zero in the previous operation is on the left side if $$$bit = 0$$$, and is on the right\n  side if $$$bit = 1$$$.\n</p>\n\n<p>\n  Let the number of rotations done till now modulo $$$\\mathbf{D}$$$ be $$$k$$$. The value of $$$k$$$ can be determined as follows:\n  <ul>\n    <li>\n    If $$$bit = 0$$$:\n      <ul>\n        <li>\n          If $$$i \\gt 1$$$, then $$$k = \\mathbf{V_{i-1}}$$$.\n        </li>\n        <li>\n          Otherwise, $$$k = 0$$$.\n        </li>\n      </ul>\n    </li>\n    <li>\n    If $$$bit = 1$$$:\n      <ul>\n        <li>\n          If $$$j \\lt \\mathbf{N}$$$, then $$$k = \\mathbf{V_{j+1}}$$$.\n        </li>\n        <li>\n          Otherwise, $$$k = 0$$$.\n        </li>\n      </ul>\n    </li>\n</ul>\n  Then $$$currentVal_{i} = (\\mathbf{V_{i}} + k) \\enspace mod \\enspace \\mathbf{D}$$$\n      and $$$currentVal_{j} = (\\mathbf{V_{j}} + k) \\enspace mod \\enspace \\mathbf{D}$$$. For a particular\n  state $$$dp(i,j,bit)$$$, we would transition to the next state as follows.\n  <ul>\n    <li>\n      For converting index $$$i$$$ to $$$0$$$, it would take $$$\\min(currentVal_{i}, \\mathbf{D} - currentVal_{i})$$$ operations.\n      Let $$$currOperations = \\min(currentVal_{i}, \\mathbf{D} - currentVal_{i})$$$.\n      We then recursively solve for $$$dp(i+1, j, 0)$$$.\n      Let $$$val_{1} = dp(i+1, j, 0) + currOperations$$$.\n    </li>\n    <li>\n For converting index $$$j$$$ to $$$0$$$, it would take $$$\\min(currentVal_{j}, \\mathbf{D} - currentVal_{j})$$$ operations.\n      Let $$$currOperations = \\min(currentVal_{j}, \\mathbf{D} - currentVal_{j})$$$.\n      We then recursively solve for $$$dp(i, j-1, 1)$$$.\n      Let $$$val_{2} = dp(i, j-1, 1) + currOperations$$$.\n    </li>\n</ul>\nFinally, $$$dp(i,j,bit) = \\min(val_{1}, val_{2})$$$. Please take a look at the pseudocode below:\n</p>\n\n<h5>Sample Code(C++)</h5>\n<pre><code class=\"language-cpp\">\n<var>int</var> solve(<var>int</var> i, <var>int</var> j, <var>bool</var> bit) {\n  if(i > j) {\n    return 0;\n  }\n  if(dp[i][j][bit] != -1) {\n    return dp[i][j][bit];\n  }\n  <var>int</var> k = 0;\n  if(!bit) {\n    if(i > 1) {\n      k = V[i-1];\n    }\n  }\n  else {\n    if(j < N ) {\n       k = V[j+1];\n    }\n  }\n  <var>int</var> currentVal_i = (V[i] - (D - k) + D) % D;\n  <var>int</var> currentVal_j = (V[j] - (D - k) + D) % D;\n  // Convert index i to 0.\n  <var>int</var> currOperations = min(currentVal_i, D - currentVal_i);\n  <var>int</var> val_1 = currOperations + solve(i+1, j, 0);\n  // Convert index j to 0.\n  currOperations = min(currentVal_j, D - currentVal_j);\n  <var>int</var> val_2 = currOperations + solve(i, j - 1, 1);\n  return dp[i][j][bit] = min(val_1, val_2);\n}\n</code></pre>\n\n<p>\n  We can get the final answer from $$$dp(1, \\mathbf{N}, 0)$$$. There are a total of $$$O(\\mathbf{N}^{2})$$$ number of states. And we perform\n  constant operations for each state. Hence, the overall complexity of the solution is $$$O(\\mathbf{N}^{2})$$$.<br/>\n  Note that, if we solve the\n  dynamic programming solution mentioned in Test Set 2 recursively, we will only visit\n  $$$O(\\mathbf{N}^2)$$$ states because the number of rotations from left side and right side\n  will always be fixed. Hence, the recursive version of Test Set 2 solution where we keep track of only the states\n  that we visit would pass this test set.\n</p>\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2oVFJsDwN5-ClBCByDD4YkRUMkds9tMzJjJLf2NaRedsWR6x74WGNdofRdqEP6xbJVKrWdLlmE/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000acef55","statement":"<h3>Problem</h3>\n<p>\nImagine you have a padlock, which is a combination lock consisting of $$$\\mathbf{N}$$$ dials, set initially to a random combination.\nThe dials of the padlock are of size $$$\\mathbf{D}$$$, which means that they can have values between $$$0$$$ and $$$\\mathbf{D}-1$$$, inclusive, and can be rotated upwards or downwards.\nThey are also ordered from left to right, with the leftmost and rightmost dials at positions $$$1$$$ and $$$\\mathbf{N}$$$, respectively.\nThe padlock can be unlocked by setting the values of all its dials to $$$0$$$.\n</p>\n\n<p>\n  You can perform zero or more operations of this kind:\n  <ul>\n    <li>\n      Pick any range $$$[l, r]$$$ such that $$$1 \\le l \\le r \\le \\mathbf{N}$$$ and rotate all the dials\n      in $$$[l, r]$$$ together, upwards or downwards. Rotating up increases the value of each dial\n      in the range $$$[l, r]$$$ by $$$1$$$, and rotating down decreases its value by $$$1$$$. Note that a dial with value $$$\\mathbf{D}-1$$$\n      becomes $$$0$$$ when increased (rotated up) and a dial with value $$$0$$$ becomes $$$\\mathbf{D}-1$$$ when decreased (rotated down).\n    </li>\n </ul>\n</p>\n\n<p>\nThe series of operations must satisfy the following condition:\n <ul>\n    <li>\n      The range $$$[l_{i-1}, r_{i-1}]$$$ chosen in the $$$(i-1)$$$-th operation needs to be completely contained\n      within the range $$$[l_i, r_i]$$$ chosen in the $$$i$$$-th operation; that is,\n      $$$l_i \\le l_{i-1} \\le r_{i-1} \\le r_i$$$. The initial range ($$$[l_1, r_1]$$$) can be chosen\n      arbitrarily.\n    </li>\n </ul>\n</p>\n\n<p>\nExample of a valid sequence of operations to unlock a padlock with initial combination $$$[1, 1, 2, 2, 3, 3]$$$:\n<ol>\n  <li>Rotate range $$$[5, 6]$$$ downwards.</li>\n  <li>Rotate range $$$[3, 6]$$$ downwards.</li>\n  <li>Rotate range $$$[1, 6]$$$ downwards.</li>\n</ol>\n</p>\n\n<p>\nThe following are some operations that cannot be performed:\n<ol>\n  <li>Rotating range $$$[1, 4]$$$ after $$$[6, 9]$$$, because $$$[6, 9]$$$ is not completely contained in $$$[1, 4]$$$ (does not satisfy $$$r_{i-1} \\le r_{i}$$$ where $$$r_{i-1} = 9$$$ and $$$r_i = 4$$$).</li>\n  <li>Rotating range $$$[3, 6]$$$ after $$$[2, 7]$$$.</li>\n</ol>\n</p>\n\n<p>\n  The goal for you is to output the <i>minimum</i> number of valid operations needed to make all dials in the padlock set to $$$0$$$.\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe first line of the input contains the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n</p>\n<p>\nEach test case consists of two lines.\n</p>\n<p>\n  The first line of each test case contains two integers $$$\\mathbf{N}$$$ and $$$\\mathbf{D}$$$, representing the number of dials in the padlock and the size of the dials, respectively.\n</p>\n<p>\nThe second line of each test case contains $$$\\mathbf{N}$$$ integers  $$$\\mathbf{V_1}, \\mathbf{V_2}, \\dots, \\mathbf{V_N}$$$, where the $$$i$$$-th integer represents the value of the $$$i$$$-th dial in the initial combination of the padlock.\n</p>\n\n<h3>Output</h3>\n<p>\n For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\n  where $$$x$$$ is the test case number (starting from $$$1$$$) and $$$y$$$ is the minimum number of operations needed to unlock the padlock as described in the statement.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$0 \\le \\mathbf{V_i} \\le \\mathbf{D}-1$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n$$$1 \\le \\mathbf{N} \\le 40$$$.<br/>\n$$$\\mathbf{D} = 2$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n$$$1 \\le \\mathbf{N} \\le 40$$$.<br/>\n$$$2 \\le \\mathbf{D} \\le 10$$$.<br/>\n</p>\n\n<h4>Test Set 3</h4>\n<p>\n\n$$$1 \\le \\mathbf{N} \\le 400$$$.<br/>\n$$$2 \\le \\mathbf{D} \\le 10^9$$$.<br/>\n</p>\n\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1g4CZBX98QXh0Tla16kgXbr6xVTUWFiOBZ-Uy7lbXhq8C9k4bEb74OcBOJqoeDmjSXfntbqiwzmPK0VKx0ggwJv7ICNkcLp6OofQHJoAENooE/unlock_the_padlock_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n6 2\n1 1 0 1 0 1\n6 2\n0 1 0 0 1 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2-hCWipccQxFlRjyx2J93okFKx8qKqnyRd_UIs-8NlVtvybv4bZCh5m5HP_qGvqgPdZ3bgGLy64WXXsGQSGrdwqtzSORjWVlGtIEJdWqxOV-GM/unlock_the_padlock_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nIn Sample Case #1, the minimum number of operations needed to unlock the padlock is $$$3$$$. We can unlock it using the following operations:\n  <ol>\n\n  <li>Rotate range $$$[4, 4]$$$ downwards.</li>\n  <li>Rotate range $$$[3, 5]$$$ downwards.</li>\n  <li>Rotate range $$$[1, 6]$$$ downwards.</li>\n</ol>\n</p>\n\n<p>\nIn Sample Case #2, the minimum number of operations needed to unlock the padlock is $$$2$$$. We can unlock it using the following operations:\n<ol>\n\n  <li>Rotate range $$$[3, 4]$$$ upwards.</li>\n  <li>Rotate range $$$[2, 6]$$$ downwards.</li>\n</ol>\n</p>\n\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2o_1zKR9RMKh8SQpYJFvmb5d3mTySxCK5fI500RJA52T0IKbF3i6BtjoO5ayMHJq-1LkICoHB03YB7VLRRlLEHzbWZOWW0TlVwtEEozeq8CjY/unlock_the_padlock_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">2\n6 10\n1 1 2 2 3 3\n6 10\n1 1 9 9 1 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U20YJdiS-9_PY6ZsZsklezhSHwKGsoIudYp7UzUYibwozCJviBpsNfWrfgpr_uxl5wDHcgV6Rcu3rxIUxVhhLivXWm37dCbZir67Y9QdrNt8-Po/unlock_the_padlock_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 3\nCase #2: 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nIn Sample Case #1, the minimum number of operations needed to unlock the padlock is $$$3$$$. We can unlock it using the following operations:\n  <ol>\n\n  <li>Rotate range $$$[5, 6]$$$ downwards.</li>\n  <li>Rotate range $$$[3, 6]$$$ downwards.</li>\n  <li>Rotate range $$$[1, 6]$$$ downwards.</li>\n</ol>\n</p>\n\n<p>\nIn Sample Case #2, the minimum number of operations needed to unlock the padlock is $$$3$$$. We can unlock it using the following operations:\n<ol>\n\n  <li>Rotate range $$$[3, 4]$$$ upwards.</li>\n  <li>Rotate range $$$[3, 4]$$$ upwards.</li>\n  <li>Rotate range $$$[1, 6]$$$ downwards.</li>\n</ol>\n</p>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":10},{"type":1,"type__str":"VISIBLE","value":11},{"type":1,"type__str":"VISIBLE","value":14}],"title":"Unlock the Padlock","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  The idea is to use brute force. You can simulate the multiplication and division operations and\n  stop when $$$\\mathbf{R}$$$ reaches zero. As it is integer division, it is guaranteed that after a finite\n  number of steps, $$$\\mathbf{R}$$$ will eventually become zero. At first it might look like that it\n  will exceed the TL, but the $$$2 \\times \\mathbf{A} \\leq \\mathbf{B}$$$ condition ensures that the value of $$$\\mathbf{R}$$$ will\n  be halved each time a division by $$$\\mathbf{B}$$$ occurs. The area of a circle with radius $$$\\mathbf{R}$$$ is\n  $$$\\pi\\mathbf{R}^{2}$$$ which can be calculated in $$$O(1)$$$. So, if the value of $$$\\mathbf{R}$$$ is halved\n  with each division, it leads to a final time complexity of $$$O(\\log(\\mathbf{R}))$$$.\n</p>\n\n<p>\n  A pseudocode would look something like this:\n</p>\n\n<pre>\n<code>\n  ans = R*R\n  while R > 0:\n    R *= A\n    ans += R*R\n    R /= B\n    ans += R*R\n  return ans*pi\n</code>\n</pre>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0xmH1j0N4mt0s67tIdcq6mxg-GrJtEWu56VNgVuEhgK89mC4czaT1VfSfQatayobT3MMce3RTn/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000acf079","statement":"<h3>Problem</h3>\n<p>\n    Let us assume for the simplicity of this problem that the Infinity symbol is made of circles\n    which touch externally at point $$$S$$$ as shown below, and let us call it the center of the infinity.\n</p>\n<p>\n    You are given three integers $$$\\mathbf{R}$$$, $$$\\mathbf{A}$$$, $$$\\mathbf{B}$$$. You are currently at the center of the infinity.\n    You will first start drawing the right circle with radius $$$\\mathbf{R}$$$ and reach again the center of\n    infinity. After that, you start drawing the left circle with the radius equal to the radius of last\n    circle multiplied by $$$\\mathbf{A}$$$. After reaching the center of the infinity you again start drawing the\n    right circle with radius equal to the radius of last circle divided by $$$\\mathbf{B}$$$\n    (<a href=\"https://mathworld.wolfram.com/IntegerDivision.html\" target=\"_blank\">integer divison</a>).\n    After reaching the center of infinity you again draw the left circle with the radius equal to\n    the radius of last circle multiplied by $$$\\mathbf{A}$$$.\n</p>\n    <p align=\"center\">\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1e4z1A_PavxFDGbaT56khGcyJToxtQZtyUuG5gUzKEGn8NxkJX5ziDO_HOl3-ls9LG3dBO7X_yUPAI4kbkoe-ePOqmQD6G/InfinityAreaImage.png\" width=\"90%\" alt=\"Steps to create the infinity symbol with three circles.\"/>\n    </p>\n<p>\n    You continue to draw the left and right circles as described above until the radius of the\n    circle to be drawn becomes zero. Calculate the sum of areas of all the circles drawn.\n    It is guaranteed that the process will terminate after finite number of steps.\n</p>\n\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ lines follow.\n</p>\n<p>\n  Each line represents a test case and contains three integers $$$\\mathbf{R}$$$, $$$\\mathbf{A}$$$, $$$\\mathbf{B}$$$, where $$$\\mathbf{R}$$$ denotes\n  the radius of the first circle, and $$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$ are the parameters used to calculate the radii\n  of the subsequent circles.\n</p>\n\n<h3>Output</h3>\n<p>\n    For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\n    where $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the sum of areas of all\n    the circles drawn until radius of the circle to be drawn becomes zero.\n</p>\n<p>\n    $$$y$$$ will be considered correct if it is within an absolute or relative error of\n    $$$10^{-6}$$$ of the correct answer. See the\n    <a href=\"https://codingcompetitions.withgoogle.com/kickstart/faq#how-does-kick-start-handle-real-numbers\" target=\"_blank\">\n    FAQ</a> for an explanation of what that means, and what formats of real numbers we accept.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$ <br/>\n$$$1 \\le \\mathbf{R} \\le 10^5$$$ <br/>\n$$$1 \\le \\mathbf{A} \\le 500$$$ <br/>\n$$$2 \\times \\mathbf{A} \\le \\mathbf{B} \\le 1000$$$<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3FM0Acy4U3hTVH0pRagtaaKSGwKCd1AdT4TZKVQWj9KDNtONT-Z2pgaj081OzDlG4vV93yILRsBQfHL0Ykze3pUBIIClQ9ibwmegKm/infinity_area_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n1 3 6\n5 2 5\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2eqgFAvLkAvn1VaBtqxo8GBXl3ZDez15V1xF_V3rFIU6HGA8mmTSunRmSmq9-qpFtFV0JqFaDznkEs-eJ8IlUZKoRi9FKqF-9PB4Mgcw/infinity_area_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 31.415927\nCase #2: 455.530935\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n    In Sample Case #1, you start with drawing the right circle with radius $$$1$$$ unit. After\n    reaching the center of infinity you draw the left circle with radius $$$1 \\times 3=3$$$ units.\n    Again after reaching the center of infinity you stop drawing the right circle since the radius\n    becomes $$$\\lfloor3/6\\rfloor=0$$$ units. Therefore the sum of areas of the circles drawn is\n    $$$\\pi \\times 1 \\times 1 + \\pi \\times 3 \\times 3 \\approx 31.415927$$$.\n</p>\n<p>\n    In Sample Case #2, you start with drawing the right circle with radius $$$5$$$ units. After\n    reaching the center of infinity you draw the left circle with radius $$$5 \\times 2=10$$$\n    units. After reaching the center of infinity you draw the right circle with radius\n    $$$\\lfloor10/5\\rfloor=2$$$ units. After reaching the center of infinity you draw the left circle\n    with radius $$$2 \\times 2=4$$$ units. After reaching the center of infinity, you stop drawing since\n    the radius of next circle becomes $$$\\lfloor4/5\\rfloor=0$$$ units. Therefore the sum of areas of\n    the circles drawn is $$$\\pi \\times 5 \\times 5 + \\pi \\times 10 \\times 10 + \\pi \\times 2 \\times 2 +\n    \\pi \\times 4 \\times 4 \\approx 455.530935$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":8}],"title":"Infinity Area","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\n  Test Set 1\n</h3>\n<p>\n  The regular structure of the grid allows for many simple constructions of a\n  <a href=\"https://en.wikipedia.org/wiki/Hamiltonian_path\" target=\"_blank\">Hamiltonian cycle</a> by\n  using repeated patterns as building blocks. For example, if both $$$\\mathbf{R}$$$ and $$$\\mathbf{C}$$$ are even, we can\n  define $$$P=E^{2\\mathbf{C}-2}S(W^2S^2WN^2W)^\\frac{\\mathbf{C}-2}{2}W^2S^2$$$ and use\n  $$$E(PS)^{\\frac{\\mathbf{R}}{2}-1}PWN^{2\\mathbf{R}-1}$$$ as our Hamiltonian cycle. This is illustrated in the\n  picture below, where the same pattern $$$P$$$ is used to walk between cells $$$S$$$ and $$$T$$$ or\n  cells $$$S'$$$ and $$$T'$$$.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U249m7Pr2ef3txyNVKIcmj6pWBwzBP85MZ4Y4OXv14YkylSpXIOfIiVY7F02bIXRpGVyd48spGyVZFmgdIUfGhe/ts1_pattern.png\" width=\"60%\"\n     alt=\"An example grid for Test Set 1, R = 4, and C = 6 with one potential Hamiltonian cycle.\"/>\n<p>\n  Similar patterns can be defined when one or both of $$$\\mathbf{R}$$$ and $$$\\mathbf{C}$$$ are odd. For example:\n</p>\n<ul>\n  <li>If $$$\\mathbf{R}$$$ is even and $$$\\mathbf{C}$$$ is odd, use the cycle $$$E(PS)^{\\frac{\\mathbf{R}}{2}-1}PWN^{2\\mathbf{R}-1}$$$, where\n  $$$P=E^{2\\mathbf{C}-2}S(S^2WN^2W^3)^\\frac{\\mathbf{C}-1}{2}S^2$$$.</li>\n  <li>If $$$\\mathbf{R}$$$ is odd and $$$\\mathbf{C}$$$ is even, use the cycle\n    $$$EP^\\frac{\\mathbf{R}-1}{2}E^{2\\mathbf{C}-2}SW^{2\\mathbf{C}-1}N^{2\\mathbf{R}-1}$$$, where\n    $$$P=E^{2\\mathbf{C}-2}S(W^2S^2WN^2W)^\\frac{\\mathbf{C}-2}{2}W^2S^3$$$.</li>\n  <li>If both $$$\\mathbf{R}$$$ and $$$\\mathbf{C}$$$ are odd, use the cycle\n    $$$EP^\\frac{\\mathbf{R}-1}{2}E^{2\\mathbf{C}-2}SW^{2\\mathbf{C}-1}N^{2\\mathbf{R}-1}$$$, where\n    $$$P=E^{2\\mathbf{C}-2}S(S^2WN^2W^3)^\\frac{\\mathbf{C}-1}{2}S^3$$$.</li>\n</ul>\n<p>\n  The time complexity of\n  this construction is proportional to the length of the resulting cycle, which is $$$O(\\mathbf{R}\\mathbf{C})$$$.\n</p>\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  We are going to discuss two different approaches here. In both of them, we will use an undirected\n  graph $$$G$$$ with the empty $$$2 \\times 2$$$ blocks as nodes and two blocks connected by an edge\n  if and only if the blocks share a side. If the graph is disconnected, then the answer is\n  <code>IMPOSSIBLE</code>, as there are empty cells that are not even reachable from the cell\n  $$$A_{1,1}$$$. We will see that a Hamiltonian cycle exists if $$$G$$$ is connected.\n</p>\n\n<h4>\n  Merging Cycles\n</h4>\n\n<p>\n  The idea in this approach is to perform a depth-first search (DFS) on the graph $$$G$$$,\n  starting at the top-left block, and maintain a cycle traversing all four empty cells of every\n  visited $$$2 \\times 2$$$ block. The cycle is extended incrementally as more blocks are visited\n  by the DFS.\n  A detailed description follows.\n</p>\n\n<p>\n  First, let us connect the four cells of each empty $$$2 \\times 2$$$ block in a clockwise cycle of\n  length four. Technically, it can be implemented by maintaining\n  pointers <code>next[i,j]</code>, where <code>next[i,j]=={p,q}</code> if the cell $$$A_{p,q}$$$\n  follows the cell $$$A_{i,j}$$$ in a cycle.\n</p>\n<p>\n  The following picture shows the construction for the third example\n  test case.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U13IoNSV-pMLgacboco823aipfcUaaPzKIs49KdmW5GUBubpIMwk35i1cKk7YzhTv6lP38ABZUom6OP0s4M_enYaw/small_cycles.png\" width=\"60%\"\n     alt=\"The image shows the grid of the third example test case, where the empty cells of each\n          2x2 block are connected in a clockwise cycle.\"/>\n<p>\n  Now perform a DFS on $$$G$$$ starting at the\n  top-left block. During the search, we maintain a single cycle containing all four cells of all\n  empty blocks that are visited by the DFS so far. Let us call it the <em>main cycle</em>, which\n  is initially the small $$$4$$$-cycle of the top-left block. As we visit a new block $$$X$$$ from\n  its parent block $$$P$$$ in the DFS tree, we merge the $$$4$$$-cycle of $$$X$$$ into the main\n  cycle at the common side between blocks $$$P$$$ and $$$X$$$. The merging operation can be\n  implemented in constant time by reconnecting two pointers. For example, if $$$X$$$ has\n  $$$A_{i,j}$$$\n  as its top-left cell and $$$X$$$ is on the right of $$$P$$$, then the cycles can be merged by\n  setting <code>next[i][j-1]={i,j}</code> and <code>next[i+1][j]={i+1,j-1}</code>.\n</p>\n<p>\n  The following picture illustrates the merging operations for our example.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3eCpxvYYbrm9U1ZABJCcAPQj51nuBgjEPqVgyi_2nrPcHgFYiocW3ICgr-gnYaoPlg5sU9phk1MmaUtq8wzbU/dfs_cycles.png\" width=\"100%\"\n     alt=\"The image shows the merging operations for the third example test case.\"/>\n<p>\n  Since cycles can be merged in constant time and DFS is a linear time algorithm, the overall\n  time complexity of this approach is $$$O(\\mathbf{R}\\mathbf{C})$$$.\n</p>\n\n<h4>\n  Following the Walls\n</h4>\n\n<p>\n  If you are familiar with the\n  <a href=\"https://en.wikipedia.org/wiki/Maze-solving_algorithm#Wall_follower\" target=\"_blank\">\n    Wall follower</a>\n  algorithm for escaping a maze, the same intuition can be applied directly to construct the\n  Hamiltonian tour in our grid. The idea is to keep walking while sliding one hand along the wall\n  without ever loosing contact with the wall. In the context of a maze, you would either exit the\n  maze eventually or return to the starting position. Similarly, if we were to use the wall follower\n  algorithm in our grid of Hamilton starting at the top-left cell $$$A_{1,1}$$$, we would eventually\n  return to that cell and thus form a cycle.\n</p>\n\n<p>\n  If $$$G$$$ is a tree, then\n  every empty cell is touching a wall at least at a corner. Therefore, the wall follower algorithm\n  would necessarily visit every empty cell and result in a Hamiltonian cycle.\n</p>\n\n<p>\n  But what if $$$G$$$ is not a tree? We can construct a\n  <a href=\"https://en.wikipedia.org/wiki/Spanning_tree\" target=\"_blank\">spanning tree</a> $$$T$$$\n  of $$$G$$$ and introduce thin walls between $$$2 \\times 2$$$ blocks that are connected in $$$G$$$,\n  but not in the tree $$$T$$$. And again, using the wall follower algorithm would yield a\n  Hamiltonian cycle.\n</p>\n\n<p>\n  This whole construction is illustrated in the following picture. The spanning tree $$$T$$$ of\n  $$$G$$$ is marked with blue lines, the wall being followed is outlined in red, and the green cycle\n  is the resulting Hamiltonian tour.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1IR96076V5PNgvJ-0AyqvtVDVK1WpzXla33YgGBhqc51eImrZlUi35mFtGKEET7B_cAUkd0pIWJdkV7fNbCoaZA9g/wall_follower.png\" width=\"60%\"\n     alt=\"The image shows a spanning tree of G and the Hamiltonian tour constructed by the wall follower algorithm.\"/>\n\n<p>\n  The time complexity of both the spanning tree construction and the wall follower algorithm is\n  $$$O(\\mathbf{R}\\mathbf{C})$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0oacglLsifjYgPE3b__uOj5KPrJ1kFT4_s31BTN0dmmEcyCkNQhvbPmACIUQfpcokZZtJiJ9k0/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000acf318","statement":"<h3>Problem</h3>\n<p>\n  Hamilton is a Canadian city near Toronto, and a nice place to take a walking\n  tour.\n</p>\n<p>\n  In this problem, Hamilton is represented by a grid of unit cells\n  with $$$2\\mathbf{R}$$$ rows and $$$2\\mathbf{C}$$$\n  columns, where each cell is either empty (represented by <code>*</code>) or\n  contains a building (represented by <code>#</code>). The cell on the $$$i$$$-th row\n  and $$$j$$$-th column is represented by $$$A_{i,j}$$$ where $$$1 \\le i \\le 2\\mathbf{R}$$$\n  and $$$1 \\le j \\le 2\\mathbf{C}$$$. It is not possible to enter cells containing\n  buildings and you can only move to an adjacent cell that shares a side with\n  the current cell (not just a corner). The grid is such that if it is divided\n  evenly into $$$2\\times2$$$ blocks of unit cells, then in each of those blocks,\n  either all four cells are empty, or all four cells are occupied by a building.\n  Let us represent the block formed by $$$ A_{2i-1,2j-1}, A_{2i-1,2j},\n  A_{2i,2j-1},$$$ and $$$A_{2i,2j}$$$ cells as $$$\\mathbf{B_{i,j}}$$$ where $$$1 \\le i \\le\n  \\mathbf{R}$$$ and $$$1 \\le j \\le \\mathbf{C}$$$.\n</p>\n<p>\n  Grace is a tourist in Hamilton and wants to visit all the empty cells in\n  Hamilton. Grace is currently in cell $$$A_{1,1}$$$. Visiting the same cell\n  twice could be boring for her. Hence, Grace wants to visit each of the empty\n  cells exactly once and finally end in cell $$$A_{1,1}$$$. Can you help Grace\n  by providing a string (consisting of directional moves {<code>N</code>,\n  <code>E</code>, <code>S</code>, <code>W</code>} representing the unit moves to\n  the north, east, south, or west respectively) which Grace can follow to visit\n  every empty cell once and end again in $$$A_{1,1}$$$.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow.<br />\n  The first line of each test case contains two integers $$$\\mathbf{R}$$$ and $$$\\mathbf{C}$$$.<br />\n  The next $$$\\mathbf{R}$$$ lines of each test case contains $$$\\mathbf{C}$$$ characters each.\n</p>\n<p>\n  The $$$j$$$-th character on the $$$i$$$-th of these lines represents the block $$$\\mathbf{B_{i,j}}$$$\n  formed by the following four cells: $$$ A_{2i-1,2j-1}, A_{2i-1,2j},\n  A_{2i,2j-1}, $$$ and $$$ A_{2i,2j} $$$.<br />\n  If $$$\\mathbf{B_{i,j}=}$$$ <code>#</code>, all four of the cells in $$$\\mathbf{B_{i,j}}$$$ are occupied\n  by a building.<br />\n  Otherwise, if $$$\\mathbf{B_{i,j}=}$$$ <code>*</code>, all four of the cells in $$$\\mathbf{B_{i,j}}$$$\n  are empty.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the test case number\n  (starting from 1) and $$$y$$$ is the answer to the problem as follows.\n</p>\n<p>\n  If there is no solution to the problem, $$$y$$$ should be\n  <code>IMPOSSIBLE</code>. Otherwise, $$$y$$$ should be a sequence of characters\n  from the set {<code>N</code>, <code>E</code>, <code>S</code>, <code>W</code>},\n  representing the unit moves (to the north, east, south, or west respectively)\n  in a valid route, starting from $$$A_{1,1}$$$, as\n  described in the statement above.\n</p>\n<p>\n  Note that your last move should take you to $$$A_{1,1}$$$; this move does not count as visiting the same cell twice.\n</p>\n<p>If there are multiple valid solutions, you may output any one of them.</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 25 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n  $$$1 \\le \\mathbf{R} \\le 200$$$.<br />\n  $$$1 \\le \\mathbf{C} \\le 200$$$.<br />\n  All characters in the grid are from the set\n  {<code>#</code>,<code>*</code>}.<br />\n  The first character of the first line of the input grid for each test case is\n  a <code>*</code> character, i.e. $$$\\mathbf{B_{1,1}=}$$$<code>*</code>.<br />\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  A block contains buildings if and only if the row number and column number of it are divisible by 2.\n  i.e.  $$$\\mathbf{B_{i,j}=}$$$ <code>#</code> $$$\\iff ((i \\bmod 2 = 0)$$$  and $$$ (j \\bmod 2 =0))$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  No extra constraints.\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Njek_ZuqYlqYHDkyfF7XqadmoaAO76JhBcNGfvEZ3RhCE4akn-47UOy80TXs_Wkje282PWpx7kO3gUEyy7qit2SZy01xeY6xrO24FE8az/hamiltonian_tour_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n1 1\n*\n2 2\n**\n*#\n3 4\n****\n*#*#\n****\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2sZlauOb_vSK1VlIijSXSEgx6ThPpW0UiAJHdiI3tJfi7zOOyffr6Cee_bwCxWa4VdUVA-DQXwfTUz9AYjMeGEx2Lu4gIB3W9eN_joi_Qc7w/hamiltonian_tour_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: SENW\nCase #2: SSSENNEENWWW\nCase #3: ESSSSEEENNNWWNEEEEESWWSSSEESWWWWWWWNNNNN\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    The sample output displays one set of answers to the sample cases. Other\n    answers may be possible.\n  </p>\n  <p>\n    In Sample Case #1, Grace will follow the route $$$A_{1,1}$$$, $$$A_{2,1}$$$,\n    $$$A_{2,2}$$$, $$$A_{1,2}$$$, and finally $$$A_{1,1}$$$. Note that <code>ESWN</code> is\n    the only other possible valid answer.<br />\n\n    The image below shows one of the possible routes for Sample Case #1.<br />\n\n    <img\n      src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3pXn64oi0KdZ29JlFoBtELDG90XRX9vyjNvdwyfaNT_tYQm7fu0HitJnr0LIajVG3eNC_l43MJyuLseB3qE5FjXjA/case1.png\"\n      width=\"20%\"\n      alt=\"One of the possible routes for Case 1.\"\n    />\n  </p>\n  <p>\n    The image below shows one of the possible routes for Sample Case #2. <br />\n\n    <img\n      src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3ZQvlEIzockvg-oiJhXa9oBqXS6wAJ0x3mty9nkyljHYfN5j7F7BZmUCE2WIFnby6a700mW630DgnqpIso6wqju7U/case2.png\"\n      width=\"20%\"\n      alt=\"One of the possible routes for Case 2.\"\n    />\n  </p>\n\n  \n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0PrwqBrYXmFs7QWA3xKL6vBQExPJoAXLp-cFsNCq61xLY4cWq5DNYVHpsiYxvf1TO4KlomrbiLwTYd5nYACluj6eYDW96-dt1MUYmHXYVw/hamiltonian_tour_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">3\n3 1\n*\n*\n#\n1 3\n*#*\n3 4\n**#*\n**#*\n****\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Nbnb5NC3PyTWfVCNjXRKY3ucMxbV4pyi9Pgi0M1RCg2PFkFcdBN4SqFfjZWQwTUQIUu3sZ-2Ciyyub0lO2GIlR8jguj5g03WxwYQyENurBQ/hamiltonian_tour_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: SSSENNNW\nCase #2: IMPOSSIBLE\nCase #3: ESSSSENNNNESSSSEEENNNNESSSSSWWWWWWWNNNNN\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n    <p>\n      The image below shows one of the possible routes for Sample Case #1. <br />\n      <img\n        src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2cP4cBBWuPX_lVvH4nQ1IDoBpFftgIFK-pQD4KE_yFkUK9qNiSDz1b621g7wyY67-CtynIA5kn0TpfKl1dGjEqqSM/case1.png\"\n        height=\"15%\"\n        width=\"20%\"\n        alt=\"One of the possible routes for Case 1.\"\n      />\n    </p>\n    <p>\n      In Sample Case #2, it is impossible for Grace to travel to any cell in $$$\\mathbf{B_{1,3}}$$$ from $$$A_{1,1}$$$.\n    </p>\n  </sampleio>\n</sampleio>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":15},{"type":1,"type__str":"VISIBLE","value":27}],"title":"Hamiltonian Tour","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000008caa74","type":1,"type__str":"SPECTATOR"},"title":"Round B 2022","ui_appearance":0,"ui_appearance__str":"APPEARANCE_TYPE_DEFAULT"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
