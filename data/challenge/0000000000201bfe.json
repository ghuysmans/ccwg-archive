{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1503820800000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000201bfe","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  Thanks to everyone who participated! Kickstart Round F will take place next\n  month; check the Kickstart\n  schedule\n  for more details.\n</p>\n<hr>\n<p>\n  <b>Cast</b>\n</p><p>\n  Problem A (Copy &amp; Paste): Written and prepared by Satoru Yamauchi.\n</p><p>\n  Problem B (Trapezoid Counting): Written and prepared by Xuanang Zhao.\n</p><p>\n  Problem C (BlackHole): Written and prepared by Ruoyu Zhang.\n</p><p>\n  Solutions and other problem preparation and review by Ian Tullis, Yiming Li, Yang Xiao, \n  Xuanang Zhao, Beiyu Li and Lin Jin. Thanks for their great help!\n</p>\n</p><p>\nAnalysis authors:\n</p>\n<ul>\n  <li>Copy &amp; Paste: Yang Xiao</li>\n  <li>Trapezoid Counting: Beiyu Li</li>\n  <li>BlackHole: Ruoyu Zhang</li>\n</ul>\n","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1503810000000,"tasks":[{"analysis":"<h2>Black Hole: Analysis</h2>\n<p>\n</p>\n<h3>Small Dataset</h3>\n<p>\nIn the Small dataset, all three black holes are along the x-axis, so the solution is simple: the three spheres should be placed in a row (touching only at single points) to cover the distance spanned by the leftmost and rightmost of the black holes. So the answer is just the distance between leftmost and rightmost black holes, divided by 6.\n</p>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0G4l6ToS74_mT_Awz20EoXJP8S2JJ0M7J8iOCM5V0zwVObZSzmvH7aQ8n28suqe6CKt2oimA/small_1.jpg\"/>\n<h3>Large Dataset</h3>\n<p>\nTo solve the Large dataset, it is helpful to notice that although this is a 3-D problem, it only has three points (black holes), and there is at least one plane that contains all three of the points. It is therefore possible to simplify the problem into a 2-D problem: how can we use three connected circles of equal radius to cover three points on a plane?\n</p>\n<p>\nSuppose that we have Circles A, B, and C, with circle A connected to circle B, circle B connected to circle C, and circles A and C possibly (but not necessarily) connected. Then these are the only two potentially optimal ways to cover the points:\n</p>\n<p>\nType I: Each point is in a different circle.\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1eZE9CNJujvODt_F-Ur4NCU_QmszfkNYd_ijaSGTZRDcVuyWD-KoNTqLjHZVykz9nMBlWsMQ/large_1.jpg\"/>\n</p>\n<p>\nType II: Two points are in circle A, and a third point is in circle C.\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2yJe3xDWFz1qHSamDsaNNgPcygJRvw7RxGz0_-jFB2SU3A90dFee-d7xWqaFm2_yCQW5DK8g/large_2.jpg\"/>\n</p>\n<p>\nIf we call the points X, Y, and Z, then there are three Type I possibilities and three Type II possibilities. For example, one possibility for Type I is to have Point X in Circle A, Point Y in Circle B, and Point Z in Circle C. One possibility for Type II is to have Points Y and Z in Circle A, and Point X in Circle C.\n</p>\n<p>\nAny other arrangement cannot be optimal. For instance, if all three points are in one circle, we are wasting the other two circles. If two points are in one circle and one point is in another circle, and the third circle does not connect the first two, then we could make the circles smaller and use the third to connect the first two.\n</p>\n<p>\nTo find the minimum valid radius for a possible configuration, we can use binary search. But we still need a way to determine whether a radius is valid.\n</p>\n<p>\nFor Type I possibilities, how can we determine whether a radius R is valid? Let K be the center of circle B. Then:\n</p>\n<ol>\n<li>The distance between K and the point in circle B must be no greater than R, or else the point would not be in B.</li>\n<li>The distance between K and the point in circle A must be no greater than 3R, or else circles A and B would not be connected.</li>\n<li>The distance between K and the point in circle C must be no greater than 3R, or else circles B and C would not be connected.</li>\n</ol>\n<p>\nIt is equivalent to check that point K is in all three of these circles:\n</p>\n<ol>\n<li>A circle of radius R centered at the point in circle B</li>\n<li>A circle of radius 3R centered at the point in circle A</li>\n<li>A circle of radius 3R centered at the point in circle C</li>\n</ol>\n<p>\nSo, if those three circles have any common intersection, then we know that radius R is valid, without having to choose a specific point K.\n</p>\n<p>\nWe can use a similar strategy for Type II possibilities. Let K be the center of circle A. Then:\n</p>\n<ol>\n<li>The distance between K and the point in circle C must be no greater than 5R, or else circles A and C would not be connected.</li>\n<li>The distance between K and the first point in circle A must be no greater than R, or else the point would not be in circle A.</li>\n<li>The same is true of the second point in circle A.</li>\n</ol>\n<p>\nand so we only need to look for a common intersection of these three circles:\n</p>\n<ol>\n<li>A circle of radius 5R centered at the point in circle C</li>\n<li>A circle of radius R centered at the first point in circle A</li>\n<li>A circle of radius R centered at the second point in circle A</li>\n</ol>\n<p>\nTo determine whether the three circles have at least one point in common, we can start by finding the intersections of the perimeters of each pair of circles. If two circles' perimeters intersect at...\n</p>\n<ul>\n<li>...two points, we can check whether either of those points is in the third circle.</li>\n<li>...one point, we can check whether that point is in the third circle.</li>\n<li>...infinitely many points (that is, the two circles are the same), it suffices to check whether either of those circles intersects the third circle.</li>\n<li>...zero points, then either one circle is completely within the other, or the circles are disjoint. If the circles are disjoint, there can be no common point. Otherwise, we can disregard the outermost circle and check whether the innermost circle intersects the third circle.</li>\n</ul>\n<p>\nIf none of these checks succeed, then the three circles have no point in common. Otherwise, they have at least one.\n</p>\n<p>\nOnce we have found the minimum radius for each cover method, the minimum of those is our final answer.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Y22iZoyKzjMbwPfxk4ObMVh9ulJUixiaFbZ0urQo-LcyM6fv9qPR_hLUul_CuHaCnuZ0uhLTs/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201b78","statement":"<h2>Problem</h2>\n\n<p>\nAlice is trying to prevent dangerous black holes from threatening Earth. Right now, there are three black holes that are different points in 3-D space. Alice will create exactly three containment spheres, and all three must have the same radius. Spheres do not interfere with each other, so they may overlap.\n</p>\n\n<p>\nAlice must place these spheres so that each black hole is covered by at least one sphere. Moreover, to ensure stability, the total set of points covered by at least one sphere must form a single connected area.\n</p>\n\n<p>\nAlice wants to solve this critical problem as inexpensively as possible. What is the minimum radius that she can use?\n</p>\n\n<h3>Input</h3>\n<p>\nThe input starts with one line with one integer <b>T</b>: the number of test cases. <b>T</b> test cases follow. Each test case consists of three lines. The i-th of those lines consists of three integers <b>X<sub>i</sub></b>, <b>Y<sub>i</sub></b>, and <b>Z<sub>i</sub></b>, representing the 3-D coordinates of the i-th black hole.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is a rational representing the minimum radius that Alice can use to solve the problem. <code>y</code> will be considered correct if it is within an absolute or relative error of 10<sup>-6</sup> of the correct answer. See the <a href=\"https://codingcompetitions.withgoogle.com/kickstart/faq\" target=\"_blank\">FAQ</a> for an explanation of what that means, and what formats of real numbers we accept.\n</p>\n\n<h3>Limits</h3>\nTime limit: 20 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n-1000 &le; <b>X<sub>i</sub></b> &le; 1000, for all i.<br>\nFor all j &ne; k, (<b>X<sub>j</sub></b>, <b>Y<sub>j</sub></b>, <b>Z<sub>j</sub></b>) &ne; (<b>X<sub>k</sub></b>, <b>Y<sub>k</sub></b>, <b>Z<sub>k</sub></b>). (No two of the points have the same coordinates.)<br>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<b>Y<sub>i</sub></b> = 0, for all i.<br>\n<b>Z<sub>i</sub></b> = 0, for all i.<br>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n-1000 &le; <b>Y<sub>i</sub></b> &le; 1000, for all i.<br>\n-1000 &le; <b>Z<sub>i</sub></b> &le; 1000, for all i.<br>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U01q_BqLWDM5Mf89tsNOZPhDtcNk9XsRqg83Puu56wbyS7pgNfz7eNBN-JbN7rP3gf-j9FOplRVKhXAc9o_zzmXfMbEQ2R-u-M/blackhole_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n0 0 0\n1 0 0\n-1 0 0\n4 0 0\n5 0 0\n-2 0 0\n0 0 0\n1 1 1\n-1 -1 -1\n-4 2 -2\n5 1 -4\n0 4 -9\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0m0sQjWN7TbOwd_4ivRfxlNGMyzvlvh3rptTsuhvBHUzIl6zkAc7bMOOxBP2ASBJMr-fa8hq4SoB7HC9QMLMZQxkmfQZR8ZgdM/blackhole_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0.3333333333\nCase #2: 1.1666666667\nCase #3: 0.5773502692\nCase #4: 2.1373179212\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\nNote that the last two sample cases would not appear in the Small dataset.<br>\nIn Sample Case #1, the smallest radius we can use is 1/3. Our three spheres should be centered at (-2/3, 0, 0), (0, 0, 0), and (2/3, 0, 0).\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":8},{"type":2,"type__str":"HIDDEN","value":29}],"title":"Blackhole","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Copy & Paste: Analysis</h2>\n\n<h3>Small dataset</h3>\n<p>\nLet N be the length of the target string <b>S</b>. We can observe that:\n</p>\n<ul>\n<li>Copying and pasting a single character is always strictly worse than just typing another instance of that character, which takes only one operation.</li>\n<li>Copying and pasting two or more characters can be useful, but it turns out not to be for N &le; 5. Suppose that we wanted to use copying and pasting to create a string of length 5. Then the only possible copy/paste operation that uses two or more characters is to start with a string of length 3 and copy/paste two of its characters. But then we could have just typed the two characters instead, using the same number of operations.</li>\n<li>For N = 6, there are some patterns for which the optimal strategy requires copying and pasting. With some brute-force experimentation or case-based analysis, you can find that they are of all of the of the form 111111, 121212, or 123123 (in which each number consistently stands for a particular letter)..</li>\n</ul>\n<p>\nIt is also possible to use a brute-force breadth/depth-first search to solve the Small.\n</p>\n\n<h3>Large dataset</h3>\n<p>\nFor the Large dataset, we can use <a href='https://en.wikipedia.org/wiki/Dynamic_programming'>dynamic programming</a>. We will keep track of the minimum number of operations used to reach a state with the following parameters, as the target string is being built from left to right:\n</p>\n<ul>\n<li>Current length - the length of the prefix of the target string that we have built so far</li>\n<li>Clipboard content - the content in the clipboard</li>\n</ul>\n<p>\nThere can be at most O(N<sup>2</sup>) substrings, so there are O(N<sup>3</sup>) states in total.\n\nFor each state, we can choose to type a character, paste the contents of the clipboard, or copy something into the clipboard. Since there are O(N<sup>2</sup>) substrings that we could choose to copy, there are O(N<sup>2</sup>) possible moves from each of the O(N<sup>3</sup>) possible states, and so the overall time complexity is O(N<sup>5</sup>). This approach is fast enough to pass all the test cases within the time limit.\n</p>\n\n<p>\nNotice that the copy operation is needed only when the copied string needs to be pasted as the next operation. It reduces the number of candidate strings that need to be copied in each move to O(N) because the number of substring starting with next character is O(N).  Thus, this approach leads to an O(N<sup>4</sup>) solution.\n</p>\n\n<p>\nThere is even an O(N<sup>3</sup>) approach. Can you find it?\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3N10qVJAQaPOJQArl8IRkM7f-8I2CtA6768X3LWLsXsPumMu9W5T77qfQ8YXvGfPbA27m5OE5a/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201c96","statement":"<h3>Problem</h3>\n<p>\nYou want to create a certain target string <b>S</b>, which consists only of lowercase English letters. You start with an empty string, and you are allowed to perform the following operations:\n</p>\n<ul>\n<li>Add any single lowercase letter to the end of your string.</li>\n<li>Copy any substring of your string (that is, all of the characters between some start point in your string and some end point in your string) to the clipboard. Doing this overwrites whatever was in the clipboard before. The clipboard starts off empty.</li>\n<li>Add the <i>entire</i> contents of the clipboard to the end of your string. (The contents of the clipboard do not change.)</li>\n</ul>\n<p>\nWhat is the smallest number of operations needed to create your target string? Note that you must create exactly the target string, with no additional letters.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> lines follow. Each line contains the target string <b>S</b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is the minimum number of operations (as described in the problem statement) needed to create the target string.\n</p>\n\n<h3>Limits</h3>\nTime limit: 40 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n<b>S</b> consists only of lowercase English letters in the range <code>a</code> through <code>z</code>.\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n1 &le; <b>T</b> &le; 100.<br/>\n1 &le; length of <b>S</b> &le; 6.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n1 &le; <b>T</b> &le; 100.<br/>\n1 &le; length of <b>S</b> &le; 300.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U07mMIjSmaMf0c9WZXKuAUxmpyYTDboNZ_mtp7UT4rJqNps7bLGx3RuamCxjq3zBc4yVTYABMqhALsuHDwmo9HMIXQpC0t9XR9Cyw/copy__paste_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\nabcabab\naaaaaaaaaaa\nvnsdmvnsnsdmkvdmkvnsdmk\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1_9hZuH5WBZylBOAXidGZ1Yy0EzWClr5P8Drelvp97StHzjlGCZ-jfLJFx1H-m8DXMLYHqPGHxtZYWlrBwbd7ST4KVlSWTDgxl4OA/copy__paste_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 6\nCase #2: 7\nCase #3: 15\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nThe optimal solution for Sample Case #1 is:\n<ol>\n<li>Type <code>a</code>.</li>\n<li>Type <code>b</code>.</li>\n<li>Type <code>c</code>.</li>\n<li>Copy <code>ab</code> to the clipboard.</li>\n<li>Paste <code>ab</code> at the end of the string.</li>\n<li>Paste <code>ab</code> at the end of the string.</li>\n</ol>\nThe optimal solution for Sample Case #2 is:\n<ol>\n<li>Type <code>a</code>.</li>\n<li>Type <code>a</code>.</li>\n<li>Type <code>a</code>.</li>\n<li>Copy <code>aaa</code> to the clipboard.</li>\n<li>Paste <code>aaa</code> at the end of the string.</li>\n<li>Copy <code>aaaaa</code> to the clipboard.</li>\n<li>Paste <code>aaaaa</code> at the end of the string.</li>\n</ol>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":11},{"type":2,"type__str":"HIDDEN","value":23}],"title":"Copy & Paste","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Trapezoid Counting: Analysis\n<h3>Small dataset</h3>\n<p>\n  There are at most 50 sticks, which means we can enumerate all different sets\n  of four sticks directly.\n</p>\n<p>\n  For a set of sticks to form the four sides of an isosceles trapezoid, it must\n  meet all of the following conditions:\n  <ul>\n    <li> There must be a pair of sticks with equal length. Call this length C.\n    <li> The remaining two sticks must have unequal lengths. Call the shorter of\n      those lengths A, and the longer one B.\n    <li> The four sticks must be able to actually connect to form an isosceles\n      trapezoid, so we need to obey an isosceles trapezoid equivalent of the\n      triangle inequality: B &lt; A + 2 &times; C.\n  </ul>\n  Then we just need to count how many different sets of four sticks meet these\n  conditions.\n</p>\n<h3>Large dataset</h3>\n<p>\n  First, we can create a Length array with all the unique length values, and a\n  Count array with the counts of each of those values.</br>\n  For example, for sticks with lengths [3, 4, 1, 4, 2, 6, 3, 1, 3], we would get\n  the Length array [1, 2, 3, 4, 6] and the Count array [2, 1, 3, 2, 1].\n</p>\n<p>\n  Consider the inequality above: B &lt; A + 2 &times; C.</br>\n  There are two possible situations in which valid isosceles trapezoids can be\n  formed:\n  <ul>\n    <li> A is equal to C or B is equal to C.\n    <li> A, B, and C are all different values. (Recall that we cannot have A\n      equal B, or else the shape would not meet the problem's definition of an\n      isosceles trapezoid.)\n  </ul>\n</p>\n<p>\n  For the first situation, we consider all possible values C = Length[i] such\n  that Count[i] &ge; 3.</br>\n  For each of these, we have to count how many sticks have length less than 3\n  &times; C but not equal to C.</br>\n  We can do this quickly by using a prefix sum of the Count array (which we only\n  need to create once). Then we add that number, multiplied by (Count[i] choose\n  3), to our answer.\n</p>\n<p>\n  For the second situation, we consider all possible values C = Length[i] such\n  that Count[i] &ge; 2.</br>\n  For each of these, we consider all A = Length[j] (with i &ne; j).</br>\n  For each of those (C, A) pairs, we need to count how many sticks have length B\n  such that B &ne; C, A &lt; B, and B &lt; A + 2 &times; C.</br>\n  The number of valid B is the prefix sum of Count up to A + 2 &times; C, minus\n  the prefix sum of Count up to A, possibly minus the Count of C if it is in\n  that range.</br>\n  Then we add that number, multiplied by (Count[i] choose 2), to our answer.\n</p>\n<p>\n  This method avoids double-counting any sets, and it runs in\n  O(<b>N</b><sup>2</sup>) time, which is easily fast enough for <b>N</b> &le;\n  5000.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3-9DkkpDCwEWAnhHV8Ct48-Wr2QRSjZrnaCkg05ri3NhqncT22u7PH_hwBDIFNXyp3cY7Moqtq/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000201d24","statement":"<h3>Problem</h3>\n<p>\n  In this problem, we will consider a <i>trapezoid</i> to be a convex quadrilateral with\n  <u>exactly</u> one pair of parallel sides. If the lengths of the two non-parallel sides are equal,\n  we say the trapezoid is <i>isosceles</i>.\n</p>\n<p>\n  You have some wooden sticks of various lengths, and you need to pick exactly four of them to form\n  the four sides of an <b>isosceles trapezoid</b>. How many different sets of four sticks will allow\n  this? Even if two sticks have the same length, they are considered to be different sticks. Sticks\n  could not be bended and broke into parts.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow;\n  each consists of two lines. The first line consists of one integer <b>N</b>, the number of sticks.\n  The second line consists of <b>N</b> integers; the i-th of these, <b>L<sub>i</sub></b>,\n  represents the length of the i-th stick.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1), and <code>y</code>\n  is the number of different sets of four sticks that can form an isosceles trapezoid, as described\n  above.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 30 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  1 &le; <b>L<sub>i</sub></b> &le; 10<sup>9</sup>.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  1 &le; <b>N</b> &le; 50.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n  1 &le; <b>N</b> &le; 5000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1LmKE4C1ZYFtFjhi1jDc9ufp4fk887oRynSLovngRCZXiQqE08KsH8eMOP4jQsWAPQZljs2UofRy25hu0DDk8qwKoqlmxdINFxrGHw1rF4908/trapezoid_counting_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n5\n2 3 3 4 3\n4\n1 5 3 1\n4\n2 2 3 3\n9\n3 4 1 4 2 5 3 1 3</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0hKH935SZRYgNUv5mUqF4Tz5EoDhhBQ1k_1Vjv0LTovlqnGeBjbyIrk904A4M5CFbrBUZTkkg4pcqiRKCEnQv_8g4jJjZWEMgrFBBv5OzQw2BA/trapezoid_counting_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 5\nCase #2: 0\nCase #3: 0\nCase #4: 73\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, there are five ways to choose four out of the five given sticks, and any one of\n  those five sets of four sticks can be used to form an isosceles trapezoid. </br>\n  In Sample Case #2, note that the set {1, 1, 3, 5} cannot form an isosceles trapezoid, even though\n  two of its sticks are of equal length.</br>\n  In Sample Case #3, note that the set {2, 2, 3, 3} can form a rectangle, but in this problem, a\n  rectangle is not considered to be an isosceles trapezoid.</br>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":19}],"title":"Trapezoid Counting","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000201bfe","type":1,"type__str":"SPECTATOR"},"title":"Round E 2017"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
