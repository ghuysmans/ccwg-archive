{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1584860400000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"000000000019ffc7","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  Thank you for participating in Kick Start 2020 Round A. This was our first round with the\n  new format: four problems instead of three, and no hidden test sets.\n</p>\n<p>\n</p>\n<hr>\n<p>\n<b>Cast</b>\n</p><p>\n  Allocation: Written by Vikash Dubey and prepared by Swapnil Gupta.\n</p><p>\n  Plates: Written by Ben Jacobson and prepared by Wajeb Saab.\n</p><p>\n  Workout: Written by Yossi Matsumoto and prepared by Wajeb Saab.\n</p><p>\n  Bundling: Written by Bartosz Kostka and prepared by Devika Krishnadas and Kevin Tran.\n</p><p>\n  Solutions, other problem preparation, reviews and contest monitoring by\nAmr Aboelkher,\n Ankit Goyal,\n  Anson Ho,\n  Arun Yadav,\n  Bohdan Pryshchenko,\n  Diksha Saxena,\n  Ganesh Kaname,\n  Jared Gillespie,\n  Joe Simons,\n  Kevin Tran,\n  Krists Boitmanis,\n  Lalit Kundu,\n  Lizzie Sapiro,\n  Medo Ali,\n  Ruoyu Zhang,\nRaihat Zaman Neloy,\n  Shantam Agarwal,\n  Swapnil Gupta,\n  Tejendra Patel,\n  Truman Wang, and\n  Wajeb Saab.\n</p>\n<p>\nAnalysis authors:\n</p>\n<ul>\n  <li>Allocation: Shimi Zhang</li>\n  <li>Plates: Akul Siddalingaswamy</li>\n  <li>Workout: Akul Siddalingaswamy</li>\n  <li>Bundling: Swapnil Gupta</li>\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1584849600000,"tasks":[{"analysis":"<p>\n  We want to buy as many as possible houses. Intuitively, we can keep buying the cheapest house. The\n  rationale is to save money at each step so we could buy more in the end. One way to implement this\n  strategy is to sort all the houses by prices from low to high and then buy houses one by one until\n  we run out of money.\n</p>\n\n<p>\n  The sorting part has O(<b>N</b> log <b>N</b>) time complexity and the processing part has\n  O(<b>N</b>) time complexity. Using counting sort could reduce the sorting complexity to\n  O(<b>N</b>) since the range of the prices is [1, 1000]. The overall time complexity is\n  O(<b>N</b>).\n</p>\n\n<p>\n  Let's prove the correctness of this greedy algorithm. Let the solution produced by the greedy\n  algorithm be <b>A</b> = {a<sub>1</sub>, a<sub>2</sub>, ..., a<sub>k</sub>} and an optimal solution\n  <b>O</b> = {o<sub>1</sub>, o<sub>2</sub>, ..., o<sub>m</sub>}.\n</p>\n\n<p>\n  If <b>O</b> and <b>A</b> are the same, we are done with the proof. Let's assume that there is at\n  least one element o<sub>j</sub> in <b>O</b> that is not present in <b>A</b>. Because we always\n  take the smallest element from the original set, we know that any element that is not in <b>A</b>\n  is greater than or equal to any a<sub>i</sub> in <b>A</b>. We could replace o<sub>j</sub> with the\n  absent element in <b>A</b> without worsening the solution, because there will always be element in\n  <b>A</b> that is not in <b>O</b>. We then increased number of elements in common between <b>A</b>\n  and <b>O</b>, hence we can repeat this operation only finite number of times. We could repeat this\n  process until all the elements in <b>O</b> are elements in <b>A</b>. Therefore, <b>A</b> is as\n  good as any optimal solution.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U18jba9-i9-gvF5b69F86AahOrpDCX3jA4nzkYZLMudhdY6bY0PunG245vnk04mTrkimjqGxQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000001d3f56","statement":"<h3>Problem</h3>\n<p>\n  There are <b>N</b> houses for sale.\n  The i-th house costs <b>A<sub>i</sub></b> dollars to buy.\n  You have a budget of <b>B</b> dollars to spend.\n</p><p>\n  What is the maximum number of houses you can buy?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow. Each test case begins with a single line containing the two integers <b>N</b> and <b>B</b>.\n  The second line contains <b>N</b> integers. The i-th integer is <b>A<sub>i</sub></b>, the cost of the i-th house.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the maximum number of houses you can buy.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 15 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n1 &le; <b>T</b> &le; 100.<br/>\n1 &le; <b>B</b> &le; 10<sup>5</sup>.<br/>\n1 &le; <b>A<sub>i</sub></b> &le; 1000, for all i.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  1 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  1 &le; <b>N</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1krnr5C9_uqAX6vrTydT0YlJuCo9_ZzgDsvsKqZQYteGwsFi55AXQ2T008m8W5VRxizHhh1G0ITX3dwtZc_xUyoscBDsVXUg/allocation_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n4 100\n20 90 40 90\n4 50\n30 30 10 10\n3 300\n999 999 999\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0gU35gw725j6tmUF_Zdrk4-PHEFwPbN5x3TIYmE_4cRmyD5-H9tZLNLTboGZfX2cwUqfjLvIV7IHbuC5mr22g8BYCeo7YhHjc/allocation_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 3\nCase #3: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\nIn Sample Case #1, you have a budget of 100 dollars. You can buy the 1st and 3rd houses for 20 + 40 = 60 dollars.<br/>\nIn Sample Case #2, you have a budget of 50 dollars. You can buy the 1st, 3rd  and 4th houses for 30 + 10 + 10 = 50 dollars.<br/>\nIn Sample Case #3, you have a budget of 300 dollars. You cannot buy any houses (so the answer is 0).<br/>\n\n<p>\n  <b>Note:</b> Unlike previous editions, in Kick Start 2020, all test sets are visible verdict test sets, meaning you receive instant feedback upon submission.\n</p>\n\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":1,"type__str":"VISIBLE","value":7}],"title":"Allocation","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test set 1</h3>\n<p>\n  Since <b>K</b>=1, all that we need to do is to find the maximum difference and split it into 2 halves.\n  For example, given a sequence [2, 12, 18] and <b>K</b> = 1, the <i>difficulty</i> is 10, since the\n  maximum difference is in [2, 12]. The best way to minimize this is to take\n  the maximum difference and split it in half giving us the final sequence of [2, 7, 12, 18].\n  The <i>difficulty</i> for this final sequence now is 6. The time complexity is O(<b>N</b>).\n</p>\n\n<h3>Test set 2</h3>\n<p>\n  For this test case, we cannot perform such direct splits because repeatedly splitting the maximum\n  difference into halves is not optimal. For example, given a sequence [2, 12] and <b>K</b> = 2,\n  splitting into halves will result in [2, 12] &rarr; [2, 7, 12] &rarr; [2, 7, 9, 12]. This way,\n  the <i>difficulty</i> would be 5. However, if we perform [2, 12] &rarr; [2, 5, 12] &rarr;\n  [2, 5, 8, 12], the <i>difficulty</i> would be 4. This clearly demonstrates that continuous halving\n  of the maximum difference is sub-optimal. Okay, so how do we do this?\n</p>\n<p>\n  Consider the i-th adjacent pair of training sessions with an initial difference d<sub>i</sub>. If\n  we want to insert some number of training sessions in between this pair such that the maximum difference\n  among those is at most a certain value, let's say d<sub>optimal</sub>, then <i>how many training sessions can\n  be inserted in between?</i> The answer to this is <i>ceiling(d<sub>i</sub> / d<sub>optimal</sub>)-1</i>.\n  Let's call that k'<sub>i</sub>. Doing this for all <b>N</b>-1 adjacent pairs in the given array would\n  give us k'[1, ..., <b>N</b>-1]. Let's denote k'<sub>sum</sub> = k'<sub>1</sub>+k'<sub>2</sub>+ ....+k'<sub><b>N</b>-1</sub>.\n  From the constraints, we can insert at most <b>K</b> training sessions. Therefore, we need to make sure\n  k'<sub>sum</sub> &le; <b>K</b> while minimizing d<sub>optimal</sub> as much as possible.\n  <br/><br/>\n  If you observe, d<sub>optimal</sub> can lie anywhere between [1, max(d<sub>i</sub>)]\n  (1 &le; i &le; <b>N</b>-1). Linear search would be to check every value here starting from 1\n  and output the first value that satisfies the above condition. A quicker way to do this\n  is using binary search. On closer observation, you can see that increasing the value of\n  d<sub>optimal</sub> decreases the value of <i>ceiling(d<sub>i</sub> / d<sub>optimal</sub>)-1</i>\n  and hence smaller is the value of k'<sub>sum</sub>. Therefore, we can perform a binary search in\n  the range [1, max(d<sub>i</sub>)] to find the least value of d<sub>optimal</sub> that makes\n  k'<sub>sum</sub> &le; <b>K</b>. That is our answer.\n</p>\n<p>\n  Since the max(d<sub>i</sub>) could be as much as 10<sup>9</sup>, we might have to search [1, 10<sup>9</sup>]\n  making time complexity of the solution is O(log(10<sup>9</sup>)*<b>N</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1jAxOBNbZbsrvtCDaGsSWJYPBa7_KlUV1HV4pVbJflFnXdN3aOj9dVyrVMW4C6Zw4dsOz8Kg/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000001d3f5b","statement":"<h3>Problem</h3>\n<p>\n  Tambourine has prepared a fitness program so that she can become more fit!\n  The program is made of <b>N</b> sessions.\n  During the i-th session, Tambourine will exercise for <b>M<sub>i</sub></b> minutes.\n  The number of minutes she exercises in each session are <i>strictly increasing</i>.\n</p><p>\n</p><p>\n  The <i>difficulty</i> of her fitness program is equal to the maximum difference in the number of\n  minutes between any two consecutive training sessions.\n</p><p>\n  To make her program less difficult, Tambourine has decided to add up to <b>K</b> additional training sessions to her fitness program.\n  She can add these sessions anywhere in her fitness program, and exercise any positive integer number of minutes in each of them.\n  After the additional training session are added, the number of minutes she exercises in each session must still be strictly increasing.\n  What is the minimum difficulty possible?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the two integers <b>N</b> and <b>K</b>.\n  The second line contains <b>N</b> integers, the i-th of these is <b>M<sub>i</sub></b>, the number\n  of minutes she will exercise in the i-th session.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the minimum difficulty possible after up to <b>K</b> additional training sessions are added.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  For at most 10 test cases, 2 &le; <b>N</b> &le; 10<sup>5</sup>.<br/>\n  For all other test cases, 2 &le; <b>N</b> &le; 300.<br/>\n  1 &le; <b>M<sub>i</sub></b> &le; 10<sup>9</sup>.<br/>\n  <b>M<sub>i</sub></b> &lt; <b>M<sub>i+1</sub></b> for all i.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  <b>K</b> = 1.\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  1 &le; <b>K</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U11h2ibR5KZNWJzY5samCRYBN8eoKh-UteTKQ4Yd_mSiMEFbw-G34yChIZ32VgUcv5YHjAErXUOnZjKVjXdJSU5Dl-unA/workout_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">1\n3 1\n100 200 230\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1AxqLEUHxeNWYDdlbU769NJySERz92kh7OUfvPXXFlvcA_fIDEu4MR8uKXlB4Ps0-NErL8ygVuSmUV2cy4Gz0weCX7fwg/workout_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 50\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn Sample Case #1: Tambourine can add up to one session. The added sessions are marked in bold:\n  100 <b>150</b> 200 230.\n  The difficulty is now 50.\n</p>\n<p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0qY3Al8bwKK_HW4GHtNmQagvl3NwqI9u9tDq7PWIoEvhAPIxvEYHdHkYQU8Ux8Vlpoxi3rys1vm4Tv4XNWkjzcOYE0RA/workout_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">3\n5 2\n10 13 15 16 17\n5 6\n9 10 20 26 30\n8 3\n1 2 3 4 5 6 7 10\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3iYpn0atIBzZV3qRl_OeXwwqUx3eqLTgipSXBO3S9wQUbXRcZHgiiTRbVO0_9w9bFdpitglwxEJYJC9Wifp_NDgqLFeZw/workout_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 2\nCase #2: 3\nCase #3: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn Sample Case #1: Tambourine can add up to two sessions. The added sessions are marked in bold:\n  10 <b>12</b> 13 <b>14</b> 15 16 17. The difficult is now 2.\n</p>\n<p>\nIn Sample Case #2: Tambourine can add up to six sessions. The added sessions are marked in bold:\n  9 10 <b>12 14 16 18</b> 20 <b>23</b> 26 <b>29</b> 30.\n  The difficulty is now 3.\n</p>\n<p>\n  In Sample Case #3: Tambourine can add up to three sessions. The added sessions are marked in bold:\n  1 2 3 4 5 6 7 <b>8 9</b> 10.\n  The difficulty is now 1. Note that Tambourine only added two sessions.\n</p>\n<p>\n<b>Note:</b> Unlike previous editions, in Kick Start 2020, all test sets are visible verdict test sets, meaning you receive instant feedback upon submission.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":11},{"type":1,"type__str":"VISIBLE","value":18}],"title":"Workout","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  We need to maximise the sum of scores of each bundle. Let us consider a bundle and say longest\n  prefix shared by all strings of this bundle is of length X. Now each prefix of length from\n  1 to X is shared by all of the strings in this bundle. Consider any prefix among these X prefixes, it\n  is counted once in the score of this bundle. Thus the score of a bundle can be defined as number of\n  prefixes that are shared by all of the strings in this bundle. Thus if a prefix is shared by all\n  strings in Y bundles, then it will contribute Y to the total sum of scores.\n</p>\n\n<p>\n  Now instead of finding the total score, we find the contribution of each prefix in the total score.\n  So for maximising the total score, we would want to maximize the contribution of each prefix in\n  the total score. Let the contribution of each prefix PRE be contibution(PRE). We want to maximize\n  &sum; contribution(PRE) where PRE comprises all possible prefixes of the given strings.\n</p>\n\n<p>\n  Let us say a prefix P<sub>i</sub> is a prefix of S strings. The maximum number of bundles of size\n  <b>K</b> formed by S strings is &lfloor; S / <b>K</b> &rfloor;. In each of these\n  &lfloor; S / <b>K</b> &rfloor; bundles, prefix P<sub>i</sub> will add to their scores. Thus maximum\n  value of contribution(P<sub>i</sub>) can be &lfloor; S / <b>K</b> &rfloor;. So a prefix\n  P<sub>i</sub> which occurs as a prefix of S strings will contribute &lfloor; S / <b>K</b> &rfloor;\n  to the answer.\n</p>\n\n<p>\n  Let us see if we can achieve this maximum value for all the prefixes. Consider a prefix P of\n  length L. It occurs as a prefix in CNT number of strings. Now consider there are C prefixes of\n  length L + 1 which contain the prefix P as a prefix\n  (P<sub>1</sub>, P<sub>2</sub>, ....,P<sub>C</sub>). And we have stored the number of strings these\n  prefixes are part of as (CNT<sub>1</sub>, CNT<sub>2</sub>, ....,CNT<sub>C</sub>).\n</p>\n\n<p>\n  Let us say we divided the strings which have prefix P<sub>i</sub> into\n  &lfloor; (CNT<sub>i</sub> / <b>K</b>) &rfloor; bundles. Now we have CNT<sub>i</sub>%<b>K</b>\n  strings remaining for each prefix that we need to arrange so that they make a bundle. For each of\n  these remaining strings we cannot have a bundle of size <b>K</b> which would have a common prefix\n  of length L + 1 because we have CNT<sub>i</sub>%<b>K</b> remaining strings for each P<sub>i</sub>.\n  So, we can make bundles in any order using the remanining strings. Those bundles will still have a\n  prefix of length L shared among them. Thus we would be left with CNT%<b>K</b> number of strings\n  which are not in any bundle when we consider prefix P. We can continue this procedure till we are\n  left with prefix of length 0. We would be able to bundle all the strings at this point because we\n  would have <b>N</b> % <b>K</b> strings remaining, and as specified in the problem, <b>N</b> is\n  divisible by <b>K</b>.\n</p>\n\n<p>\n  The problem is now reduced to finding number of times each prefix occurs in the given strings. Let\n  this number be COUNT. We just need to add &lfloor; COUNT / <b>K</b> &rfloor; to the answer for\n  each prefix.\n</p>\n\n<h3>Test set 1 </h3>\n<p>\n  The length of each string is at most 5. Thus we have total number of prefixes as <b>N</b> * 5 and each\n  prefix can be of size at most 5. Store each prefix in a hashmap and increase the count for each\n  prefix. In the end, we just need to add &lfloor; (count(i) / <b>K</b>) &rfloor; for each prefix i. The\n  complexity of the solution would be O(<b>N</b> * 5 * 5).\n</p>\n\n<h3>Test set 2 </h3>\n<p>\n  Let the sum of length of all strings over all the test cases be SUM which is 10<sup>6</sup>. For\n  the large test set, the length of the string can be very large. So, we can't store all the\n  prefixes in a hashmap. We need to store all the prefixes in an efficient manner along with the\n  number of times they occur in given strings. We can use a data structure\n  <a href=\"https://en.wikipedia.org/wiki/Trie\">trie</a>. The insertion cost would be equal to sum of\n  length of strings over the test cases which is  O(SUM). Then finally we just need to traverse the\n  trie and for each prefix, add its contribution to the answer. Time complexity of the solution\n  would be O(SUM).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3CtyA0hSPsbeV54EQZw3vXu0BL8WjatsZ8QA8RF64hej9l6f39LPZQjTdlxD1Slb6NAAVJ2w/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000001d3ff3","statement":"<h3>Problem</h3>\n<p>\n  Pip has <b>N</b> strings. Each string consists only of letters from <code>A</code> to <code>Z</code>.\n  Pip would like to bundle their strings into <i>groups</i> of size <b>K</b>. Each string must belong to exactly one group.\n</p><p>\n  The <i>score</i> of a group is equal to the length of the longest prefix shared by all the strings in that group.\n  For example:\n  <ul>\n    <li>The group <code>{RAINBOW, RANK, RANDOM, RANK}</code> has a score of 2 (the longest prefix is <code>'RA'</code>).</li>\n    <li>The group <code>{FIRE, FIREBALL, FIREFIGHTER}</code> has a score of 4 (the longest prefix is <code>'FIRE'</code>).</li>\n    <li>The group <code>{ALLOCATION, PLATE, WORKOUT, BUNDLING}</code> has a score of 0 (the longest prefix is <code>''</code>).</li>\n  </ul>\n</p><p>\n  Please help Pip bundle their strings into groups of size <b>K</b>, such that the sum of scores of\n  the groups is maximized.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the two integers <b>N</b> and <b>K</b>.\n  Then, <b>N</b> lines follow, each containing one of Pip's strings.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the maximum sum of scores possible.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  2 &le; <b>N</b> &le; 10<sup>5</sup>.<br/>\n  2 &le; <b>K</b> &le; <b>N</b>.<br/>\n  <b>K</b> divides <b>N</b>.<br/>\n  Each of Pip's strings contain at least one character.<br/>\n  Each string consists only of letters from <code>A</code> to <code>Z</code>.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  Each of Pip's strings contain at most 5 characters.\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  The total number of characters in Pip's strings across all test cases is at most 2 &times; 10<sup>6</sup>.\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3rllobSfdt_Rt1o_xDSrXGiOdI_Z93Tcc9K5n4bPcXAU5N3FVd8uN6PPTTfx_ughKPA3j1OrgUzmiGFOLWAsecLYiKRXo/bundling_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2 2\nKICK\nSTART\n8 2\nG\nG\nGO\nGO\nGOO\nGOO\nGOOO\nGOOO\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2ZeWY13MKyIBH1XWy2avy3FZpmLW2X89y_vG8NMzg1Ru2VeLNU_nMzD0oMUNhk9F4AadSOvwRf77rxRHHwT4SrAQbJ31wS/bundling_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 0\nCase #2: 10\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn Sample Case #1, Pip can achieve a total score of 0 by making the groups:\n<ul>\n  <li><code>{KICK, START}</code>, with a score of 0.</li>\n</ul>\n</p>\n<p>\nIn Sample Case #2, Pip can achieve a total score of 10 by making the groups:\n<ul>\n  <li><code>{G, G}</code>, with a score of 1.</li>\n  <li><code>{GO, GO}</code>, with a score of 2.</li>\n  <li><code>{GOO, GOO}</code>, with a score of 3.</li>\n  <li><code>{GOOO, GOOO}</code>, with a score of 4.</li>\n</ul>\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0A566OlcXSVXxsXmeSOK0uawZ-H5PVxLqa_qpjlpOw8MHnu7h0kg5CuDkdtPqf7S9IVckNXYIa03Cs1ArZOccn13mIDj4/bundling_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">1\n6 3\nRAINBOW\nFIREBALL\nRANK\nRANDOM\nFIREWALL\nFIREFIGHTER\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1-KkmnJESM50Za5nObAX8hn560zL3VyVg2P3XyMWbNFsWe43AUBhHPBXr9uqtUcDHzKCxfasxRgqi04PdkC__mvqiQv6cZ/bundling_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 6\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn Sample Case #1, Pip can achieve a total score of 6 by making the groups:\n<ul>\n  <li><code>{RAINBOW, RANK, RANDOM}</code>, with a score of 2.</li>\n  <li><code>{FIREBALL, FIREWALL, FIREFIGHTER}</code>, with a score of 4.</li>\n</ul>\n</p>\n<p>\n  <b>Note:</b> Unlike previous editions, in Kick Start 2020, all test sets are visible verdict test sets, meaning you receive instant feedback upon submission.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":14},{"type":1,"type__str":"VISIBLE","value":21}],"title":"Bundling","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  From the constraints, we can see that regardless of the test set, 1 &le; <b>K</b> &le; 100.\n  i.e., 1 &le; <b>P</b> &le; 100*<b>N</b>.\n</p>\n\n<h3>Test set 1</h3>\n<p>\n  For this test set, we see that 1 &le; <b>N</b> &le; 3. So, we can check for every possible combination of taken plates across\n  all stacks and output the maximum sum. For example, if <b>N</b> = 3 and for any given values of <b>K</b> and <b>P</b>,\n  generate all possible triples (S<sub>1</sub>, S<sub>2</sub>, S<sub>3</sub>) such that\n  S<sub>1</sub>+S<sub>2</sub>+S<sub>3</sub> = <b>P</b> and 0 &le; S<sub>i</sub> &le; <b>K</b>.\n  Note: S<sub>i</sub> is the number of plates picked from the i-th stack. <br/>\n  This can be done via recursion and the total time complexity is O(<b>K</b><sup><b>N</b></sup>)\n  which abides by the time limits.\n</p>\n\n<h3>Test set 2</h3>\n<p>\n  The solution we had for test set 1 doesn't scale given that N now is at most 100.\n  In order to tackle this test set, we use Dynamic Programming along with some precomputation.\n</p>\n<p>\n  First, let's consider an intermediate state <i>dp[i][j] which denotes the maximum sum that can be\n  obtained using the first i stacks when we need to pick j plates in total</i>. Therefore,\n  dp[<b>N</b>][<b>P</b>] would give us the maximum sum using the first <b>N</b> stacks if\n  we need to pick <b>P</b> plates in total.\n  In order to compute dp[][] efficiently, we need to be able to efficiently answer the\n  question: <i>What is the sum of the first x plates from stack i?</i> We can precompute this once\n  for all <b>N</b> stacks. Let <i>sum[i][x] denote the sum of first x plates from stack i</i>.\n</p>\n<p>\n  Next, we iterate over the stacks and try to answer the question:\n  <i>What is the maximum sum if we had to pick j plates in total using the i stacks we've seen so far?\n  </i> This would give us dp[i][j]. However, we need to also decide, <i>among those j plates, how many\n  come from the i-th stack?</i> i.e., Let's say we pick x plates from the i-th stack, then\n  <i>dp[i][j] = max(dp[i][j], sum[i][x]+dp[i-1][j-x])</i>. Therefore, in order to pick j plates in\n  total from i stacks, we can pick anywhere between [0, 1, ..., j] plates from the i-th stack and\n  [j, j-1, ..., 0] plates from the previous i-1 stacks respectively. Also, we need to do\n  this for all values of 1 &le; <i>j</i> &le; <b>P</b>.\n  <br/>\n</p>\n<p>\n  The flow would look like:<br/>\n  for i [1, <b>N</b>]:<br/>\n    &emsp;for j [0, <b>P</b>]:<br/>\n      &emsp;&emsp;dp[i][j] := 0<br/>\n      &emsp;&emsp;&emsp;for x [0, min(j, <b>K</b>)]:<br/>\n          &emsp;&emsp;&emsp;&emsp;dp[i][j] = max(dp[i][j], sum[i][x]+dp[i-1][j-x])<br/>\n</p>\n\n<p>\n  If we observe closely, this is similar to the\n  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Knapsack_problem#0-1_knapsack_problem\">\n    0-1 Knapsack Problem</a> with some added complexity. To conclude, the overall time complexity\n  would be O(<b>N</b>*<b>P</b>*<b>K</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2cIrNARkZnCuZsr68Tg7NgYEEEIy2hmgDgMSlyFu_H7rtGlPi8LGAdI7l0o1Ulpc2fFHVWEg/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000001d40bb","statement":"<h3>Problem</h3>\n<p>\n  Dr. Patel has <b>N</b> stacks of plates. Each stack contains <b>K</b> plates.\n  Each plate has a positive <i>beauty value</i>, describing how beautiful it looks.\n</p><p>\n  Dr. Patel would like to take exactly <b>P</b> plates to use for dinner tonight.\n  If he would like to take a plate in a stack, he must also take all of the plates above it in that stack as well.\n</p><p>\n  Help Dr. Patel pick the <b>P</b> plates that would maximize the total sum of beauty values.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow. Each test case begins with a line containing the three integers <b>N</b>, <b>K</b> and <b>P</b>.\n  Then, <b>N</b> lines follow. The i-th line contains <b>K</b> integers, describing the beauty values\n  of each stack of plates from top to bottom.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the maximum total sum of beauty values that Dr. Patel could pick.\n</p>\n\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>K</b> &le; 30.<br/>\n  1 &le; <b>P</b> &le; <b>N</b> * <b>K</b>.<br/>\n  The beauty values are between 1 and 100, inclusive.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  1 &le; <b>N</b> &le; 3.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  1 &le; <b>N</b> &le; 50.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3_OB2IvWSbMcM10DRPKkrFh6Vajcc6MAoMSmc6M1iGmPB25dLoMK9KeeBTgbxgG4Th1pMByRWAvfln879Lk7GFQGd_/plates_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2 4 5\n10 10 100 30\n80 50 10 50\n3 2 3\n80 80\n15 50\n20 10\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1mNFqtaVCEjthcxdxPOnv59yZgncmCUr_wmzb_rERG76h377jBK2IRVBN_oGnJxnrKu3j7HR-enK2a1fTM7pZidvQ0zw/plates_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 250\nCase #2: 180\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nIn Sample Case #1, Dr. Patel needs to pick <b>P</b> = 5 plates:\n<ul>\n  <li>He can pick the top 3 plates from the first stack (10 + 10 + 100 = 120).</li>\n  <li>He can pick the top 2 plates from the second stack (80 + 50 = 130) .</li>\n</ul>\nIn total, the sum of beauty values is 250.\n</p>\n\n<p>\nIn Sample Case #2, Dr. Patel needs to pick <b>P</b> = 3 plates:\n<ul>\n  <li>He can pick the top 2 plates from the first stack (80 + 80 = 160).</li>\n  <li>He can pick no plates from the second stack.</li>\n  <li>He can pick the top plate from the third stack (20).</li>\n</ul>\nIn total, the sum of beauty values is 180.\n</p>\n<p>\n  <b>Note:</b> Unlike previous editions, in Kick Start 2020, all test sets are visible verdict test sets, meaning you receive instant feedback upon submission.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":9},{"type":1,"type__str":"VISIBLE","value":15}],"title":"Plates","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"000000000019ffc7","type":1,"type__str":"SPECTATOR"},"title":"Round A 2020"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
