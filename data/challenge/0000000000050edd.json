{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1573977600000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000050edd","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  Thank you for participating in Kick Start 2019 Round H.\n</p>\n<p>\n</p>\n<hr>\n<p>\n<b>Cast</b>\n</p><p>\n  H-Index: Written and prepared by Himanshu Jaju and prepared by Bartosz Kostka.\n</p><p>\n  Diagonal Puzzle: Written by Max Ward and prepared by Jonathan Irvin Gunawan.\n</p><p>\n  Elevanagram: Written by Bartosz Kostka and prepared by Zhang Chen.\n</p><p>\n  Solutions, other problem preparation, reviews and contest monitoring by\n  Bartosz Kostka,\n  Himanshu Jaju,\n  Jonathan Irvin Gunawan,\n  Kevin Tran,\n  Lalit Kundu,\n  Sadia Atique,\n  Raihat Zaman Neloy,\n  Viplav Kadam,\n  Yossi Matsumoto,\n  Yang Xiao, and\n  Zhang Chen.\n</p>\n<p>\nAnalysis authors:\n</p>\n<ul>\n  <li>H-Index: Sadia Atique</li>\n  <li>Diagonal Puzzle: Sadia Atique</li>\n  <li>Elevanagram: Zhang Chen</li>\n</ul>\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1573966800000,"tasks":[{"analysis":"<h3>Test set 1 (Visible)</h3>\n<p>\n  For a set of papers, let's define a function score(x), which denotes the number of papers in the\n  set with citations at least x. We can calculate the score for every integer x &le; n, where n\n  is the number of papers in the set. For each set of papers, the answer is maximum x such that\n  score(x) &ge; x. We can store the counts of each of the citation numbers in the\n  input in an array, and calculate cumulative sum to find the score for any x.\n</p>\n<p>\n  We need to find the maximum x where score(x) &ge; x, each time a new paper is added. We can find\n  that using the approach mentioned above in O(max(<b>A</b>)) time, where max(<b>A</b>) is the maximum citation\n  number in the set of papers. An observation here is, we can consider all citations &ge; <b>N</b> as\n  N, which allows us to find H-index for any set of papers in O(<b>N</b>). This leads to a total\n  time complexity of O(<b>N</b><sup>2</sup>) per test case, which is sufficient for test set 1.\n</p>\n<h3>Test set 2 (Hidden)</h3>\n<p>\n  For test set 2, we initialize the H-index with 0, and\n  after adding each paper, we need to update the current H-index. We can use a minimum priority\n  queue data structure to store the citation numbers. As we go through each of the papers, we keep\n  updating the current H-index. We also keep updating the priority queue so that it only contains\n  numbers greater than the current H-index and remove the rest. For each new paper, we can follow these steps\n</p>\n<ol>\n  <li>If the current citation number is bigger than the current answer, add it in the priority queue</li>\n  <li>Remove all the citation numbers from the priority queue which is not greater than the current answer</li>\n  <li>If the size of priority queue is not less than the current answer + 1, increment the answer by 1</li>\n</ol>\n<p>\n  A single operation of priority queue takes O(log<b>N</b>) time, and a number is added and removed at most\n  once. This leads to a total time complexity of O(<b>N</b> &times; log<b>N</b>) per test case,\n  which is sufficient for test set 2.\n</p>\n<p>\n  A solution with linear time complexity is also possible, if we store the citation numbers in an\n  array or a hashtable to calculate the answer. This is left as an exercise for the readers.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1z7DkGyDudiHy3twysL0FExkXUrE7Pn8xRTxVpEu6Ci1AU5s0tl-8MzK7Tn37Wbz90dJ_nrw/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000001a274e","statement":"<h3>Problem</h3>\n<p>\n  It is important for researchers to write many high quality academic papers.\n  Jorge has recently discovered a way to measure how impactful a researcher's papers are: the <a href=\"https://en.wikipedia.org/wiki/H-index\" target=\"_blank\">H-index</a>.\n</p><p>\n  The <i>H-index score</i> of a researcher is the largest integer h such that the researcher has h papers with at least h citations each.\n</p><p>\n  Jorge has written <b>N</b> papers in his lifetime. The i-th paper has <b>A<sub>i</sub></b> citations.\n  The number of citations that each paper has will never change after it is written.\n  Please help Jorge determine his H-index score after each paper he wrote.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing <b>N</b>, the number of papers Jorge wrote.\n</p><p>\n  The second line contains <b>N</b> integers. The i-th integer is <b>A<sub>i</sub></b>, the number of citations the i-th paper has.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  a space-separated list of integers. The i-th integer is the H-index score after Jorge wrote his i-th paper.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 50 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>A<sub>i</sub></b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  1 &le; <b>N</b> &le; 1000.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  1 &le; <b>N</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0RJz-8-qgXgfuYf1IJok4O6FZuUO-0KkpBY7ZcZQbIpEPTLKSHFaZ4W9z5pns7F0cR1Uy8u1jz7ycTTD1QqSDTh8_qHQ/h-index_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3\n5 1 2\n6\n1 3 3 2 2 15\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U38Wvl9k_cHrppX3UvO4ExRl_VQQbUQLSxe913ySair9bVkhVpsgxtbNR-gNmCF0DxcMcivJTBf8pRuMJZFR0H_hoWCJKA/h-index_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1 1 2\nCase #2: 1 1 2 2 2 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\nIn Sample Case #1, Jorge wrote <b>N</b> = 3 papers.\n<ul>\n  <li>After the 1st paper, Jorge's H-index score is 1, since he has 1 paper with at least 1 citation.</li>\n  <li>After the 2nd paper, Jorge's H-index score is still 1.</li>\n  <li>After the 3rd paper, Jorge's H-index score is 2, since he has 2 papers with at least 2 citations (the 1st and 3rd papers).</li>\n</ul>\n<br/>\nIn Sample Case #2, Jorge wrote <b>N</b> = 6 papers.\n<ul>\n  <li>After the 1st paper, Jorge's H-index score is 1, since he has 1 paper with at least 1 citation.</li>\n  <li>After the 2nd paper, Jorge's H-index score is still 1.</li>\n  <li>After the 3rd paper, Jorge's H-index score is 2, since he has 2 papers with at least 2 citations (the 2nd and 3rd papers).</li>\n  <li>After the 4th paper, Jorge's H-index score is still 2.</li>\n  <li>After the 5th paper, Jorge's H-index score is still 2.</li>\n  <li>After the 6th paper, Jorge's H-index score is 3, since he has 3 papers with at least 3 citations (the 2nd, 3rd and 6th papers).</li>\n</ul>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":2,"type__str":"HIDDEN","value":16}],"title":"H-index","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test set 1 (Visible)</h3>\n<p>\n  For a square grid of size <b>N</b>, there's total 2 &times; <b>N</b> &minus; 1 diagonals that are\n  parallel to the main diagonal, and 2 &times; <b>N</b> &minus; 1 diagonals that are perpendicular\n  to the main diagonal.\n</p>\n<p>\n  For each of the diagonals parallel to the main diagonal, we can fix either we would flip them\n  or not, and then check if each of the perpendicular diagonals contain cells of the same color.\n  If all cells are the same for each of the perpendicular diagonals, then this would lead to a\n  solution. If all white, just flip the whole diagonal, if not, nothing is necessary.\n</p>\n<p>\n  There are total 2<sup>2 &times; <b>N</b> &minus; 1</sup> possible combinations for flipping diagonals\n  parallel to the main diagonal, and we can check if the perpendicular diagonals have all same coloured\n  cells in O(<b>N</b><sup>2</sup>) time complexity, which leads to a total time complexity of\n  O(2<sup>2 &times; <b>N</b> &minus; 1</sup> &times; <b>N</b><sup>2</sup>) per test case, which is\n  sufficient for test set 1.\n</p>\n<h3>Test set 2 (Hidden)</h3>\n<p>\n  One interesting observation is that if we decide whether we would flip the two largest diagonals or not\n  (in the case where <b>N</b> is odd, we decide whether we flip the largest diagonal in one direction,\n  and the second largest diagonal in the other direction), we can pick all other diagonals to flip\n  deterministically. The diagonals are shown for grids of size <b>N</b> = 6 and <b>N</b> = 7 below.\n\n<pre>\n\\..../ \\......\n.\\../. .\\..../\n..\\/.. ..\\../.\n../\\.. ...\\/..\n./..\\. .../\\..\n/....\\ ../..\\.\n       ./....\\\n</pre>\n</p><p>\n  There are four choices for flipping/not\n  flipping the two chosen diagonals. And for each of these choices, we can go through all other\n  diagonals in the grid. For each of these other diagonals, we can check if the square where it intersected\n  with one of the chosen diagonals is white. If it is white, we need to flip this diagonal, otherwise not.\n  If after all the flips, the final grid is all black squares, then we have\n  a possible answer. We take the minimum flips of the four possible choices.\n</p>\n<p>\n  There are 4 choices for the flipping of the two chosen diagonals. And for each of the choices, the\n  flipping of all other diagonals, and finally checking for all black cells can be done in O(<b>N</b><sup>2</sup>)\n  time, which leads to a total time complexity of O(<b>N</b><sup>2</sup>), which is sufficient for test\n  set 2.\n</p>\n<p>\n  An alternative solution is to convert this problem into a variant of\n  <a href=\"https://en.wikipedia.org/wiki/Graph_coloring#Vertex_coloring\">2-coloring</a>. Each of the\n  cells in the grid is shared by two diagonals. If a cell is white, either one of them needs to be\n  flipped to make this cell black. Otherwise, none of these two diagonals needs to be flipped. For this\n  problem, we can consider each diagonal as a vertex of a graph, and and the squares in the grid are\n  the edges between the two diagonals that affect that square. If the square is initially black, then\n  the endpoints of the corresponding edge must be colored the same, else they must be colored\n  differently. By color, we mean chosen to be flipped or not flipped. So we should color in such a\n  way that all conditions for all edges in the graph are satisfied and we have the minimum number of\n  flips possible. This can be done with a DFS for each component of the graph.\n</p>\n<p>\n  There are total O(<b>N</b><sup>2</sup>) edges in the graph. Building the graph and\n  solving it can be done in O(|Edges|). This leads to a time complexity of O(<b>N</b>), which is\n  sufficient for test set 2.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2WTYalnam2n0yu4CrdCW6wm9Iml_ntf4wHvDLvd9vh6K1w9kVX2ygeWHKBkdBVi5mgarhkyg/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000001a2835","statement":"<h3>Problem</h3>\n<p>\n  Kibur has made a new puzzle for you to solve! The puzzle consists of an <b>N</b> by <b>N</b> grid of squares.\n  Each square is either black or white. The goal of the puzzle is to make all the squares black in as few moves as possible.\n</p><p>\n  In a single move, you may choose any diagonal of squares and flip the color of every square on that diagonal (black becomes white and white becomes black).\n  For example, the 10 possible diagonals for a 3 by 3 grid are shown below.\n<pre>\n/..      ./.      ../      ...      ...\n...      /..      ./.      ../      ...\n...      ...      /..      ./.      ../\n\n\n...      ...      \\..      .\\.      ..\\\n...      \\..      .\\.      ..\\      ...\n\\..      .\\.      ..\\      ...      ...\n</pre>\n</p><p>\n  Given the initial configuration of the board, what is the fewest moves needed to make all the squares black?\n  You are guaranteed that it is possible to make all the squares black.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the integer <b>N</b>, the size of the grid.\n  Then, <b>N</b> lines follow, each containing <b>N</b> characters that describe the initial configuration of the grid.\n  The c-th character on the r-th line is the character <code>.</code> (ASCII number 46) if the square in the r-th row and c-th column is initially white.\n  Otherwise, it is <code>#</code> (ASCII number 35), indicating that it is black.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the fewest moves needed to make all the squares black.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds per test set.<br/>\nMemory limit: 1GB.<br/>\n1 &le; <b>T</b> &le; 100.<br/>\nYou are guaranteed that it is possible to make all the squares black.\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  2 &le; <b>N</b> &le; 8.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  2 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3GPxuqZeVEibiavzhi9N5JbUd6Fk6q_xTTJhKFFvWHKx3HbeMHslIvphSlf3MJJ9YnRPm8MEWEyxxNTJvuldWSIPgWc68GgDVJoDu8/diagonal_puzzle_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3\n..#\n#.#\n#..\n5\n.####\n#.###\n##.##\n###.#\n#####\n2\n##\n##\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3GKA8HCKKIEJtHdmyZkF9nluv-nfg920aVBUS__LZuvPV311HwhniuWB-bdg51oTmz_vwgOa1uWViNR-2Wgu_mtFkq9ynnD5IAHh7MKg/diagonal_puzzle_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 2\nCase #3: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\nIn sample case #1, the fewest moves needed is 3, as shown below:\n<pre>\n..#    .<span style=\"color:red\">.</span>#    <span style=\"color:red\">.</span>##    ###\n<span style=\"color:red\">#</span>.# -> <span style=\"color:red\">.</span>.# -> #<span style=\"color:red\">.</span># -> ###\n#<span style=\"color:red\">.</span>.    ##.    ##<span style=\"color:red\">.</span>    ###\n</pre>\n\nIn sample case #2, the fewest moves needed is 2, as shown below:\n<pre>\n<span style=\"color:red\">.</span>####    #####    #####\n#<span style=\"color:red\">.</span>###    #####    #####\n##<span style=\"color:red\">.</span>## -> ##### -> #####\n###<span style=\"color:red\">.</span>#    #####    #####\n####<span style=\"color:red\">#</span>    ####<span style=\"color:red\">.</span>    #####\n</pre>\n\nIn sample case #3, all the squares in the grid are already black, so the answer is 0.\n\n<!--TODO: replace ASCII diagrams with more colour-blindness friendly diagrams.-->\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":12},{"type":2,"type__str":"HIDDEN","value":20}],"title":"Diagonal Puzzle","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test set 1</h3>\n<p>\n  We need to divide each digits to two partitions: positive partition and negative partition, where\n  positive partition means the digit is on the odd index (be calculated as <i>add</i>), and\n  negative partition means the digit is in the even index (be calculated as <i>minus</i>).\n</p>\n<p>\n  We can use dynamic programming to solve test set 1. Let dp[i][j][k] denote if it is possible to\n  achieve the state that when we are considering digits 1, 2, ... <i>i</i>, the current number of\n  digits in the positive partition is <i>j</i> and the current sum modulo 11 is <i>k</i>. Then for\n  each digit i, we can put 0, 1, ..., <b>A<sub>i</sub></b> digits into the positive partition,\n  and calculate if the current state is possible. We want to calculate dp[9][sum(<b>A</b>)/2][0],\n  where sum(<b>A</b>) means the total sum of all elements in array <b>A</b>.\n</p>\n<p>\n  The time complexity is O(9 * sum(<b>A</b>) * 11 * max(<b>A</b>)), which fits the time limit for\n  test case 1. Here max(<b>A</b>) means the maximum of all elements in array <b>A</b>.\n</p>\n<h3>Test set 2</h3>\n<p>\n  Assume the positive number of digits i is P<sub>i</sub>, and negative number of\n  digits i is <b>A<sub>i</sub></b> - P<sub>i</sub>. Then, we will have the following three\n  equations:\n</p>\n<pre>\n  (1) &Sigma; P<sub>i</sub> = ceil(sum(<b>A</b>) / 2)\n  (2) &Sigma; i &times; (P<sub>i</sub> - (<b>A<sub>i</sub></b> - P<sub>i</sub>)) % 11 = 0\n  (3) 0 &le; P<sub>i</sub> &le; <b>A<sub>i</sub></b>\n</pre>\n<p>\n  In order to solve this, initially we can put half the number of each digits to be in positive\n  partition (e.g. P<sub>i</sub> = <b>A<sub>i</sub></b> / 2, take care of odd numbers),\n  and then try to adjust each P<sub>i</sub> to satisfy equation (2). For each i,\n  we can adjust its P<sub>i</sub> from -<b>A<sub>i</sub></b> / 2 to\n  <b>A<sub>i</sub></b> / 2.\n</p>\n<p>\n  We can prove the two following conclusions:\n</p>\n<p>\n  1. If there are at least two numbers of <b>A<sub>i</sub></b> &ge; 10, then the solution must\n  exist.\n</p>\n<p>\n  This is very easy to prove. We can only adjust these two digits from -5 to 5, and each adjustment\n  will result in a different remain value of modulo 11. Thus, we will get 0 finally.\n</p>\n\n<p>\n  2. If there are at least three numbers of <b>A<sub>i</sub></b> &ge; 6, then the solution must\n  exist.\n</p>\n<p>\n  To prove this, we can prove that:\n</p>\n<pre>\n  For any 1 &le; i &lt; j &lt; k &le; 9, 0 &le; r &le; 10, the following equations:\n  (1) (i * x<sub>1</sub> + j * x<sub>2</sub> + k * x<sub>3</sub>) % 11 = r\n  (2) x<sub>1</sub> + x<sub>2</sub> + x<sub>3</sub> = 0\n  (3) -3 &le; x<sub>i</sub> &le; 3\n  will have a valid solution.\n</pre>\n<p>\n  This can be proved by iterating all possible situations, where the total number is\n  9<b>C</b>3 * 11 * 7 * 7 = 45276, quite small.\n</p>\n\n<p>\n  According to these two conclusions, if there are at least two numbers &ge; 10 or at least three\n  numbers &ge; 6, we can return YES immediately. Otherwise, there are at most one value &ge;\n  10, and at most two values &ge; 6, we can calculate all possible situations, where in the worst\n  case time complexity is O(6<sup>7</sup> * 10) = O(2799360) which fits the time limit for test\n  case 2.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3BsRXn-TeC7iiixp5FuvHbZkZmdVj-gJKWlMACTCrn3nfqQy4DREyTcGDNFqX9xRkPSXrh4g/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000001a286d","statement":"<h3>Problem</h3>\n<p>\n  It is a well known fact that a number is divisible by 11 if and only if the alternating sum of its digits is equal to 0 modulo 11.\n  For example, 8174958 is a multiple of 11, since 8 - 1 + 7 - 4 + 9 - 5 + 8 = 22.\n</p><p>\n  Given a number that consists of digits from 1-9, can you rearrange the digits to create a number that is divisible by 11?\n</p><p>\n  Since the number might be quite large, you are given integers <b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>, ..., <b>A<sub>9</sub></b>.\n  There are <b>A<sub>i</sub></b> digits i in the number, for all i.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> lines follow.\n  Each line contains the nine integers <b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>, ..., <b>A<sub>9</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is <code>YES</code> if the digits can be\n  rearranged to create a multiple of 11, and <code>NO</code> otherwise.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>A<sub>1</sub></b> + <b>A<sub>2</sub></b> + ... + <b>A<sub>9</sub></b>.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  0 &le; <b>A<sub>i</sub></b> &le; 20, for all i.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  0 &le; <b>A<sub>i</sub></b> &le; 10<sup>9</sup>, for all i.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3bDgt98wbZkbURjfY-yjcvqXYF7KEa1b8bVWcHktM7u14Gs0hz4zlS2XmGB_tW5I79GTDmudhArmSnrnT-hBJzXVK14-yBeFQ/elevanagram_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">6\n0 0 2 0 0 1 0 0 0\n0 0 0 0 0 0 0 0 12\n0 0 0 0 2 0 1 1 0\n3 1 1 1 0 0 0 0 0\n3 0 0 0 0 0 3 0 2\n0 0 0 0 0 0 0 1 0\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0JWY9mrHyw4Y90HNhjqWgD7_slKCtasGO4ALs_ncIiXu5LoZUjKs06-OoVAechxwiw7nYoQuiqdetPgqwNMBV_R5GqTPeA_2R7/elevanagram_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: YES\nCase #2: YES\nCase #3: NO\nCase #4: YES\nCase #5: YES\nCase #6: NO</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<ul>\n  <li>In Sample Case #1, the digits are <code>336</code>, which can be rearranged to <code>363</code>. This is a multiple of 11 since 3 - 6 + 3 = 0.</li>\n  <li>In Sample Case #2, the digits are <code>999999999999</code>, which is already a multiple of 11, since 9 - 9 + 9 - 9 + ... - 9 = 0.</li>\n  <li>In Sample Case #3, the digits are <code>5578</code>, which cannot be rearranged to form a multiple of 11.</li>\n  <li>In Sample Case #4, the digits are <code>111234</code>, which can be rearranged to <code>142131</code>. This is a multiple of 11 since 1 - 4 + 2 - 1 + 3 - 1 = 0.</li>\n  <li>In Sample Case #5, the digits are <code>11177799</code>, which can be rearranged to <code>19191777</code>. This is a multiple of 11 since 1 - 9 + 1 - 9 + 1 - 7 + 7 - 7 = -22 (which is 0 modulo 11).</li>\n  <li>In Sample Case #6, the only digit is <code>8</code>, which cannot be rearranged to form a multiple of 11.</li>\n</ul>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":20},{"type":2,"type__str":"HIDDEN","value":27}],"title":"Elevanagram","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000050edd","type":1,"type__str":"SPECTATOR"},"title":"Round H 2019"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
