{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1628355600000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000436329","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\r\n  The Code Jam 2021 World Finals took place virtually for the second year in a row.\r\n  But that did not stop the judges from crafting challenging problems,\r\n  nor the contestants from tackling them in formidable manner.\r\n  Unlike the last few editions, the difficulty curve was a steep one and the\r\n  problem scores reflected that. <i>Cutting Cake</i> was a relatively\r\n  straightforward (for the Finals) geometry problem, which ended up requiring some\r\n  algebra as well. <i>Slide Circuits</i> was a graph problem only on the surface,\r\n  but solving it was all about data structures and hashing techniques.\r\n  <i>Ropes</i> marked the return of interactive problems to the Finals after a\r\n  one year absence. It rewarded both creative ad-hoc insights and careful research.\r\n  <i>Divisible Divisions</i> was a regular dynamic programming problem that became\r\n  heavily arithmetic once the size got bigger for Test Set 2. Finally,\r\n  <i>Infinitree</i> was a multi-step problem requiring graph theory and arithmetic insights,\r\n  careful on-paper work, and a meticulous, if short, implementation.\r\n</p><p>\r\n  <b>ainta</b> was the first to secure some points just 12 minutes in by solving Test Set 1\r\n  of Divisible Divisions.\r\n  <b>Radewoosh</b> was the first to solve a full problem by cracking Slide Circuits\r\n  just 18 minutes in. They followed this up by being the first to solve Divisible Divisions\r\n  in just over 40 minutes. Between these two submissions, <b>Benq</b> solved Cutting Cake\r\n  35 minutes in.\r\n  <b>wxh010910</b> was the first to grab all the points for Ropes in just under two hours.\r\n</p><p>\r\n  This year's round was an incredible nail-biter. With half an hour left, more than ten\r\n  contestants had the possibility to jump into first place by solving just a single problem.\r\n  Even in the last minute, a full solve of Infinitree would have secured the championship\r\n  for eight contestants.\r\n  <b>wxh010910</b> was the first to fully solve Ropes, and they went on to solve two full\r\n  problems and a partial problem after that\r\n  to become the 2021 Code Jam Champion! Congratulations! They were the only one to score\r\n  160 points, which is all problems except the hard part of Infinitree&mdash;just incredible!\r\n  The last ten minutes contained extremely exciting moments when two contestants jumped up\r\n  to 145 points. <b>semiexp.</b> jumped up with just 13 seconds left in the contest to\r\n  finish in second place and <b>scottwu</b> finished in third less than six penalty minutes behind.\r\n</p><p>\r\n  This is it for Code Jam 2021! Congratulations to all participants for raising\r\n  the problem-solving bar higher every year. We hope you enjoyed the contest\r\n  as much as we enjoyed putting it together. We've already started writing and testing some\r\n  intriguing problems for 2022, so we hope you'll come back for more (and bring your friends).\r\n  If the algorithmist in you cannot possibly wait that long, you can keep practicing\r\n  with all the problems in our\r\n  <a href=\"http://codingcompetitions.withgoogle.com/codejam/archive\" target=\"_blank\">archive</a>\r\n  and keep your competitive fire alive by taking part in the remaining\r\n  <a href=\"http://codingcompetitions.withgoogle.com/kickstart\" target=\"_blank\">Kick Start</a>\r\n  rounds.\r\n  See you next year!\r\n</p>\r\n<hr>\r\n<p>\r\n  <b>Cast</b>\r\n</p>\r\n<p>\r\n  Cutting Cake: Written and prepared by Timothy Buzzelli.\r\n</p><p>\r\n  Slide Circuits: Written by Jay Mithani. Prepared by Darcy Best, Nour Yosri, and Petr Mitrichev.\r\n</p><p>\r\n  Ropes: Written by Darcy Best and Pablo Heiber. Prepared by Mohamed Yosri Ahmed and Pablo Heiber.\r\n</p><p>\r\n  Divisible Divisions: Written by Darcy Best and Pablo Heiber. Prepared by Darcy Best.\r\n</p><p>\r\n  Infinitree: Written by Pablo Heiber. Prepared by John Dethridge.\r\n</p><p>\r\nSolutions and other problem preparation and review by Andy Huang, Artem Iglikov, Darcy Best,\r\nHannah Angara, Jay Mithani, John Dethridge, Julia DeLorenzo, Max Ward, Md Mahbubul Hasan,\r\nMekhrubon Turaev, Mohamed Yosri Ahmed, Nafis Sadique, Pablo Heiber, Petr Mitrichev, Pi-Hsun Shih,\r\nSadia Atique, Swapnil Gupta, Timothy Buzzelli, Yang Xiao, and Yui Hosaka.\r\n</p><p>\r\nAnalysis authors:\r\n</p><ul>\r\n  <li>Cutting Cake: Timothy Buzzelli.</li>\r\n  <li>Slide Circuits: Pablo Heiber.</li>\r\n  <li>Ropes: Darcy Best.</li>\r\n  <li>Divisible Divisions: Darcy Best.</li>\r\n  <li>Infinitree: Pablo Heiber.</li>\r\n</ul>","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1628341200000,"tasks":[{"analysis":"<a href=\"https://youtu.be/MPKKu6SDA24\" target=\"_blank\">View problem and solution walkthrough video</a>\n<p>\nTo simplify the notation, we can reframe this problem in terms of\n<a href=\"https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)\" target=\"_blank\">graphs</a>. We represent the\ninput with a graph $$$G$$$ that has one node per building and one directed edge per slide.\nThe enabled/disabled states we can represent by subgraphs $$$G_1, G_2, ..., G_\\mathbf{N}$$$ where\n$$$G_i$$$ is a\n<a href=\"https://en.wikipedia.org/wiki/Glossary_of_graph_theory#subgraph\" target=\"_blank\">subgraph</a> of $$$G$$$\ncontaining only the edges representing slides that are enabled after the first $$$i$$$ operations.\n</p><p>\nA graph is fun if every node belongs to exactly one\n<a href=\"https://en.wikipedia.org/wiki/Glossary_of_graph_theory#cycle\" target=\"_blank\">cycle</a>.\nThe question is, for each $$$i$$$, to identify an edge $$$(v, w) \\in G - G_i$$$ such that\n$$$G_i \\cup \\{(v, w)\\}$$$ is fun.\n</p>\n\n<h3>Test Set 1</h3>\n<p>\nThe first step to solve the problem is to describe fun graphs more directly:\nA graph is fun if the\n<a href=\"https://en.wikipedia.org/wiki/Glossary_of_graph_theory#in-degree\" target=\"_blank\">in-degree</a> and\n<a href=\"https://en.wikipedia.org/wiki/Glossary_of_graph_theory#out-degree\" target=\"_blank\">out-degree</a> of\nevery node is $$$1$$$. Therefore, the edge $$$(v, w)$$$ that we need in step $$$i$$$\nmust be such that the out-degree of $$$v$$$ in $$$G_i$$$ is $$$0$$$, the in-degree of $$$w$$$\nin $$$G_i$$$ is $$$0$$$ and all other in-degrees and out-degrees in $$$G_i$$$ are $$$1$$$.\nThis implies that, given $$$G_i$$$, we can simply check the degrees and find the only possible\ncandidate for $$$v$$$ and $$$w$$$, if any. If $$$(v, w) \\in G$$$, we found a answer. If there\nis no candidate for either, or $$$(v, w) \\not\\in G$$$, then there is no answer for step $$$i$$$.\n</p><p>\nIn Test Set 1, we can maintain the in-degree and out-degree of each node in the current $$$G_i$$$.\nWhen there is an enable operation, for each affected edge $$$(v, w)$$$ we need to increase\nthe out-degree of $$$v$$$ and the in-degree of $$$w$$$ by $$$1$$$. For disable operations, we do\nthe same but decreasing by $$$1$$$. Then, we can do a linear pass to find candidates $$$v$$$\nand $$$w$$$. If there are unique candidates for both, we check if $$$(v, w)$$$ is in $$$G$$$\nand give the appropriate output. This can be done in linear time in the size of the graph per step,\nwhich is $$$O(\\mathbf{B} + \\mathbf{S})$$$ time, or $$$O(\\mathbf{N} (\\mathbf{B} + \\mathbf{S}))$$$ time overall, which is fast enough\nto pass Test Set 1.\n</p>\n<h3>Test Set 2</h3>\n<p>\nOur solution for Test Set 2 is an optimized version of the solution presented for Test Set 1.\nConsider multisets of nodes $$$I_i$$$ and $$$O_i$$$. The number of occurrences of $$$v$$$ in\n$$$I_i$$$ is equal to the out-degree of $$$v$$$ in $$$G_i$$$, and the number of occurrences of\n$$$v$$$ in $$$O_i$$$ is equal to the out-degree of $$$v$$$ in $$$G_i$$$. Let $$${I'}_e$$$\nand $$${O'}_e$$$ be the way the multisets $$$I_i$$$ and $$$O_i$$$ should look for $$$e$$$ to be\nthe answer after step $$$i$$$.\n</p><p>\nIf we keep <a href=\"https://en.wikipedia.org/wiki/Hash_function\" target=\"_blank\">hashes</a>\nof the $$$I_i$$$ and $$$O_i$$$ that are efficient to update and check a\ndictionary from the pairs of hashes of $$$({I'}_e, {O'}_e) \\to e$$$, we can solve the problem.\nThere are many options that work with different trade-offs in reliability, ease of implementation\nand ease of proof.\n</p>\n<h4>Sum of random values</h4>\n<p>\nLet us start by assigning a random integer $$$x_v$$$ to each vertex $$$v$$$, that we keep\nthroughout a test case. The hash of a multiset in this case is the sum of the values over all the\nvertices it contains (if it contains a vertex multiple times, its value is summed that many times),\nmodulo some large number.\nFor extra randomness we could use separate values for the $$$I$$$ and $$$O$$$ hashes.\n</p><p>\nLet $$$t = \\sum_v x_v$$$ be the sum of all those random values. Then, the hash of\n$$${I'}_{(v, w)}$$$ is simply $$$t - x_w$$$ and the hash of $$${O'}_{(v, w)}$$$ is $$$t - x_w$$$.\nTo get the hashes of $$${I'}_{i+1}$$$ and $$${O'}_{i+1}$$$ we can add or subtract to the hashes\nof $$${I'}_i$$$ and $$${O'}_i$$$ (for simplicity, $$${I'}_0 = {O'}_0 = 0$$$). The amount to add or\nsubtract is the sum of the values of the starting/ending points of all edges that the operation\nis changing. We can find that efficiently by building two arrays (one for starting points and\none for ending points) of sums over the first $$$i$$$ multiples of $$$M$$$ for each $$$i$$$ and\neach $$$M$$$. Then, the sum between the $$$i$$$-th and $$$j$$$-th multiples of $$$M$$$ is just\nthe difference between the values for $$$M,j$$$ and $$$M,i-1$$$. The array for a specific\nvalue of $$$M$$$ contains $$$\\lfloor \\mathbf{S} / M \\rfloor$$$ values, and\n$$$\\sum_{M \\le \\mathbf{S}} \\lfloor \\mathbf{S} / M \\rfloor \\le \\sum_{M \\le \\mathbf{S}} \\mathbf{S} / M =\n\\mathbf{S} \\sum_{M \\le \\mathbf{S}} 1 / M = O(\\mathbf{S} \\log \\mathbf{S})$$$, so this is efficient enough.\n</p><p>\nIt has hard to prove formally that the sums work well as hashes. We present next a closely\nrelated variant for which is much easier to be convinced that the probability of collisions is\nreally small.\n</p>\n<h4>XOR of random values</h4>\n<p>\nThe idea in this case is to use XOR instead of sum. The whole implementation can be done in the\nsame way as in the previous case. However, because XOR is its own inverse, two multisets with the\nsame parity in the number of occurrences for all vertices have the same hash. We can solve this by\nadding a count of the number of edges in $$$G_i$$$. This can still cause collisions, but since\nall numbers of occurrences in $$$I'$$$ and $$$O'$$$ are either $$$0$$$ or $$$1$$$, having both\nthe correct parities and the correct total guarantees we are looking at the same multiset.\nThis does require maintaining that total number of edges update, but that can be done in\nconstant time per step.\n</p><p>\nIn the case of XORs, each bit in the result is independent from all other bits. Since the values\n$$$x_v$$$ are randomized, the probability of the bit being equal in two multisets with different\nparities is $$$1/2$$$. Therefore, the probability of $$$64$$$ bits coinciding by chance is\n$$$2^{-64}$$$, which is vanishingly small.\n</p>\n<h4>Polynomial hashes</h4>\n<p>\nFinally, in the XOR version above, we are actually hashing sets of nodes depending on the parity\nof their in- or out-degree, in a way. We know\n<a href=\"https://en.wikipedia.org/wiki/Rolling_hash#Cyclic_polynomial\" target=\"_blank\">polynomial hashes</a>\nare good for hashing sets, so we\ncan simply use one of them. This is a third way of solving the problem.\n</p><p>\nNotice that a polynomial hash is actually equivalent to the sum version\nexcept the $$$x_v$$$ values are powers of a prime instead of randomly chosen. Random choices\nare more resilient to adversary data and provide similar properties of uniformity of distribution.\nThis is an informal argument that justifies the sum of random values being a good hashing for\nthis problem.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3biY2mK9Db0X2hH_hG5ngb7Sv0Dg3vZbYiNegChoQxNJHu7JW-J509WsZRbQBFHNSnjBi3VgT-/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000084f7b2","statement":"<h3>Problem</h3>\n<p>\nGooli is a huge company that owns $$$\\mathbf{B}$$$ buildings in a hilly area. Five years ago, Gooli\n<a href=\"https://codingcompetitions.withgoogle.com/codejam/round/0000000000201bef/0000000000201d18\" target=\"_blank\">\nbuilt slides</a> that allowed employees to go from one building to another\n(they are not bidirectional), starting a tradition of building slides between buildings.\nCurrently, $$$\\mathbf{S}$$$ slides exist.\n</p><p>\nMelek is Gooli's Head of Transportation and a problem-solving enthusiast. She was tasked with\nkeeping the slides enjoyable to use. The idea she came up with was disabling some slides such\nthat only circuits remained.\nA circuit is a set of two or more buildings $$$b_1, b_2, ..., b_k$$$ such that there is\nexactly one slide enabled from building $$$b_i$$$ to building $$$b_{i+1}$$$, for each $$$i$$$,\nand exactly one slide enabled from building $$$b_k$$$ to building $$$b_1$$$.\nNo other slides from or to any of those buildings should be enabled, to prevent misdirection.\nA state of the slides is then called <i>fun</i> if each building belongs to exactly one circuit.\n</p><p>\nSlides in Gooli's campus are numbered with integers between 1 and $$$\\mathbf{S}$$$, inclusive.\nMelek created a slide controlling console that supports two operations: enable and disable. Both\noperations receive three parameters $$$\\ell$$$, $$$r$$$, and $$$m$$$ and perform the operation\non each slide $$$x$$$ such that $$$\\ell \\le x \\le r$$$ and $$$x$$$ is a multiple of $$$m$$$.\nAn enable operation is valid only if all affected slides are in a disabled state right before the\noperation is performed. Similarly, a disable operation is valid only if all affected slides are\nin an enabled state right before the operation is performed.\n</p><p>\nThe following picture illustrates a possible succession of states and operations.\nThe layout has $$$3$$$ buildings and\n$$$3$$$ slides. Slides are light grey when disabled and dark grey when enabled.\n</p>\n<div align=center style=\"display: flex; flex-direction: row; flex-wrap: wrap; padding: 20px 0 0 0;\">\n  <div style=\"display: inline-block; flex: 1 1 0; flex-direction: column; margin: 0 10px 0 10px;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0Kk4HgyCYb8CXAPHdwTWBuNWhC_yTSusKjGO-2THrWaRAGaBUz7qBcXyR8G7pqEcvrdMzhqonzIOw0YN-low/sample1_none.png\" style=\"max-width:245px;\" alt=\"Sample input 1\">\n    </div>\n    <div>\n      <p>\n        <b>1.</b> Initial state. All sides are disabled.\n      </p>\n    </div>\n  </div>\n  <div style=\"display: inline-block; flex: 1 1 0; flex-direction: column; margin: 0 10px 0 10px;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1tqg7DFMdQ9l35fjw4MzoJkQx1vb5rbhWb_toMJybMo_Zm_I9P8zz3BOGZaF3RmA3rSEedCSU1PbfQ9MU/sample1_12.png\" style=\"max-width:245px;\" alt=\"Sample input 1 with slides 1 and 2 enabled\">\n    </div>\n    <div>\n      <p>\n        <b>2.</b> After enable operation with $$$\\ell=1$$$, $$$r=2$$$, and $$$m=1$$$.\n      </p>\n    </div>\n  </div>\n  <div style=\"display: inline-block; flex: 1 1 0; flex-direction: column; margin: 0 10px 0 10px;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U32qy5JbcBHZtvmJhab91nHNoO8aI8QrM9q4yn4O7q5SiHYXnZsWRqfnT1L3K0179grRpsamrKRSwQzJeRC/sample1_123.png\" style=\"max-width:245px;\" alt=\"Sample input 1 with slides 1, 2 and 3 enabled\">\n    </div>\n    <div>\n      <p>\n        <b>3.</b> After enable operation with $$$\\ell=3$$$, $$$r=3$$$, and $$$m=1$$$.\n      </p>\n    </div>\n  </div>\n  <div style=\"display: inline-block; flex: 1 1 0; flex-direction: column; margin: 0 10px 0 10px;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0GZDgszFv6zK5oUAeCT4GuKg5knQmKxuAc61OSz86ujzToYi1f65A3TltBhE5fgj8_xVHKTzShbpOjMWk/sample1_13.png\" style=\"max-width:245px;\" alt=\"Sample input 1 with slides 1 and 3 enabled\">\n    </div>\n    <div>\n      <p>\n        <b>4.</b> After disable operation with $$$\\ell=1$$$, $$$r=3$$$, and $$$m=2$$$.\n      </p>\n    </div>\n  </div>\n  <div style=\"display: inline-block; flex: 1 1 0; flex-direction: column; margin: 0 10px 0 10px;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2U-rAV4DSpwBYL5BS7evn2BRkInNylwZHH0hCvCJLtQmyDHYqX04biuY5te6GNhJ1x74WithUGaRwx0w/sample1_1.png\" style=\"max-width:245px;\" alt=\"Sample input 1 with slide 1 enabled\">\n    </div>\n    <div>\n      <p>\n        <b>5.</b> After disable operation with $$$\\ell=1$$$, $$$r=3$$$, and $$$m=3$$$.\n      </p>\n    </div>\n  </div>\n  <div style=\"display: inline-block; flex: 1 1 0; flex-direction: column; margin: 0 10px 0 10px;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1tqg7DFMdQ9l35fjw4MzoJkQx1vb5rbhWb_toMJybMo_Zm_I9P8zz3BOGZaF3RmA3rSEedCSU1PbfQ9MU/sample1_12.png\" style=\"max-width:245px;\" alt=\"Sample input 1 with slides 1 and 2 enabled\">\n    </div>\n    <div>\n      <p>\n        <b>6.</b> After enable operation with $$$\\ell=1$$$, $$$r=2$$$, and $$$m=2$$$.\n      </p>\n    </div>\n  </div>\n</div>\n<p>\nUnfortunately, Sult, Melek's cat, found the console and\nstarted performing several valid enable and disable operations.\nAfter every console operation performed by Sult, Melek wants to know if the state of the slides\ncan be made fun by enabling exactly one currently disabled slide.\nNote that Melek does not actually enable this slide.\n</p><p>\nIn the picture above, we can see that after the first, third, and last operations, Melek\ncould enable the only disabled slide and get to a fun state. After the\nsecond operation, there are two issues. One issue is that there are no currently disabled slides,\nso Melek cannot enable any. Additionally, the state is already fun, so even if there were\nadditional disabled slides, enabling anything would result in a not fun state.\nAfter the fourth operation, there are\ntwo disabled slides, but enabling either would not yield a fun state.\n</p><p>\nAll slides are initially disabled, then Sult performs its operations one at a time.\nAfter each of Sult's operations, determine which disabled slide, if any, Melek can enable\nto put the slides in a fun state.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case starts with a line containing three integers $$$\\mathbf{B}$$$, $$$\\mathbf{S}$$$, and $$$\\mathbf{N}$$$: the\nnumber of buildings, slides, and operations to process, respectively.\nThen, $$$\\mathbf{S}$$$ lines follow. The $$$i$$$&NoBreak;-&NoBreak;th of these lines contains two integers\n$$$\\mathbf{X_i}$$$ and $$$\\mathbf{Y_i}$$$, indicating that the slide with number $$$i$$$ goes from\nbuilding $$$\\mathbf{X_i}$$$ to building $$$\\mathbf{Y_i}$$$.\nFinally, $$$\\mathbf{N}$$$ lines represent the operations. The $$$j$$$&NoBreak;-&NoBreak;th of these lines\ncontains a character $$$\\mathbf{A_j}$$$ and three integers $$$\\mathbf{L_j}$$$, $$$\\mathbf{R_j}$$$, and $$$\\mathbf{M_j}$$$, describing\nthe $$$j$$$&NoBreak;-&NoBreak;th operation. $$$\\mathbf{A_j}$$$ describes the type of operation using\nan uppercase <code>E</code> for enable and an uppercase <code>D</code> for disable.\nThe operation is to be performed on slides with numbers that are simultaneously\na multiple of $$$\\mathbf{M_j}$$$ and between $$$\\mathbf{L_j}$$$ and $$$\\mathbf{R_j}$$$, inclusive.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing\n<code>Case #$$$x$$$: $$$y_1\\ y_2\\ \\dots\\ y_\\mathbf{N}$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y_j$$$ is an uppercase\n<code>X</code> if there is no way to turn the state\nof slides created by the first $$$j$$$ console operations into a fun state by enabling\nexactly one disabled slide. Otherwise, $$$y_j$$$ should be an integer representing that\nenabling the $$$y_j$$$&NoBreak;-&NoBreak;th slide would turn the state created by the first $$$j$$$ console operations\ninto a fun state.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{X_i} \\le \\mathbf{B}$$$, for all $$$i$$$.<br/>\n$$$1 \\le \\mathbf{Y_i} \\le \\mathbf{B}$$$, for all $$$i$$$.<br/>\n$$$\\mathbf{X_i} \\ne \\mathbf{Y_i}$$$, for all $$$i$$$.<br/>\n$$$(\\mathbf{X_i}, \\mathbf{Y_i}) \\neq (\\mathbf{X_j}, \\mathbf{Y_j})$$$, for all $$$i \\neq j$$$.<br/>\n$$$\\mathbf{A_j}$$$ is either uppercase <code>E</code> or uppercase <code>D</code>, for all $$$j$$$.<br/>\n$$$1 \\le \\mathbf{L_j} \\le \\mathbf{R_j} \\le \\mathbf{S}$$$, for all $$$j$$$.<br/>\n$$$1 \\le \\mathbf{M_j} \\le \\mathbf{S}$$$, for all $$$j$$$.<br/>\nEach operation is valid.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\nTime limit: 10 seconds.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$2 \\le \\mathbf{B} \\le 100$$$.<br/>\n$$$2 \\le \\mathbf{S} \\le 1000$$$.<br/>\n$$$1 \\le \\mathbf{N} \\le 1000$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\nTime limit: 120 seconds.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 30$$$.<br/>\n$$$2 \\le \\mathbf{B} \\le 3 \\times 10^4$$$.<br/>\n$$$2 \\le \\mathbf{S} \\le 3 \\times 10^5$$$.<br/>\n$$$1 \\le \\mathbf{N} \\le 3 \\times 10^5$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1txDrYdH4Vx6Mx99TElk49Rgu2bOzKnlT3MuiFIxaaFSydIRR4KgvQt7h92bkPyNhRefRhLklzgJP2J-99daV6ZH_w7Mqz6un7iFuIug/slide_circuits_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3 3 5\n1 2\n2 3\n3 1\nE 1 2 1\nE 3 3 1\nD 1 3 2\nD 1 3 3\nE 1 2 2\n5 8 10\n1 5\n5 3\n4 1\n3 2\n2 4\n2 5\n2 1\n1 4\nE 1 8 2\nD 4 8 2\nE 3 5 1\nE 1 1 3\nE 1 1 1\nE 5 8 2\nD 1 8 3\nD 5 8 4\nD 4 5 1\nE 3 4 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0I6q8MADjEhrQPeXUG4r9eF68veTgKVWPbMeBAV7jKSkciKauzXWJ3obpgTud-LkKEKdwQVYdlYDLWJTdHVeakRFGMf1IVRc016fzA870/slide_circuits_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3 X 2 X 3\nCase #2: 3 X 1 1 X X X 3 X 5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  Sample Case #1 is the one depicted in the problem statement.\n</p><p>\n  The following picture shows the building and slide layout of Sample Case #2.\n</p><p align=center>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2-Ij29XWNaim2Ypg69XGxA5OzAnnrd1Bvbdyjb-vbf4UPciYvwNax-JOYNWcZb5RIb-2-RXeONGjQ/sample2.png\" alt=\"Sample input 2\" style=\"max-width:300px;\">\n</p><p>\n  The sets of enabled slides after each operation are:\n<ul>\n  <li>$$$\\{2,4,6,8\\}$$$,</li>\n  <li>$$$\\{2\\}$$$,</li>\n  <li>$$$\\{2,3,4,5\\}$$$,</li>\n  <li>$$$\\{2,3,4,5\\}$$$,</li>\n  <li>$$$\\{1,2,3,4,5\\}$$$,</li>\n  <li>$$$\\{1,2,3,4,5,6,8\\}$$$,</li>\n  <li>$$$\\{1,2,4,5,8\\}$$$,</li>\n  <li>$$$\\{1,2,4,5\\}$$$,</li>\n  <li>$$$\\{1,2\\}$$$, and</li>\n  <li>$$$\\{1,2,3,4\\}$$$.</li>\n</ul>\n</p>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":20}],"title":"Slide Circuits","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<a href=\"https://youtu.be/exEwKRKZP64\" target=\"_blank\">View problem and solution walkthrough video</a>\n<p>\n  This problem can be solved in many different ways! Below is a collection of different solutions\n  we came across. If yours is not here, we would love to hear it! Head over to our\n  <a href=\"https://groups.google.com/forum/#!forum/google-code\" target=\"_blank\">Code Jam group</a>\n  and share your favorite idea.\n</p>\n<p>\n  For consistency, here are a few terms we will use throughout:\n  <ul>\n    <li>\n      \"Playing $$$(x,y)$$$\" means connecting tree $$$x$$$ on the North\n      to tree $$$y$$$ on the South.\n    </li><li>\n      \"Playing greedily\" means looking at all possible options and choosing a move that\n      maximizes your score on this turn. Sometimes we will choose randomly, sometimes\n      we will pick a specific one of these. Note that the judge plays greedily (and\n      chooses their move randomly).\n    </li>\n  </ul>\n</p><p>\n  The percentages given below are approximate (found via experimentation) and rounded to the\n  closest integer value.\n</p>\n\n<h3>Playing Greedily</h3>\n<p><b>... by picking randomly ($$$28\\%$$$)</b></p>\n<p>\n  We just pick our move randomly like the opponent is going to. This is not a great strategy!\n</p>\n<p><b>... by picking non-randomly ($$$55\\%$$$)</b></p>\n<p>\n  This strategy works surprisingly well for how simple it is. Simply play the same\n  way as your opponent, except instead of picking randomly, choose the one that comes\n  first lexicographically&mdash;that is, choose $$$(x,y)$$$ that minimizes $$$x$$$,\n  then minimizes $$$y$$$ if there is a tie. To understand why it works well,\n  read the \"Push Them East!\" strategy, as they work for similar reasons.\n</p>\n<p><b>... by picking non-randomly and starting in a better place</b></p>\n<p>\n  This the same as the previous strategy, but instead of starting at $$$(1,1)$$$, we\n  pick some other spot. The result varies depending on the exact starting spot, but\n  $$$(1,3)$$$ already gets us $$$75\\%$$$ probability of winning. Read below to understand\n  why this has such a big impact in the overall probability.\n</p>\n\n<h3>Mirroring</h3>\n<p><b>First attempt ($$$64\\%$$$)</b></p>\n<p>\n  This strategy is based on a simple idea: if the opposing team plays $$$(x,y)$$$, then\n  we will play $$$(y,x)$$$. Why is this a good idea? Because if they just played $$$(x,y)$$$ and\n  scored $$$\\Delta$$$ points, then we will score $$$\\Delta + 1$$$ points on our turn because\n  we will also cross their newly placed rope as well as all other ropes the opponent just\n  crossed.\n</p><p>\n  There are two issues, though. The first issue is that we are going first, so we cannot mirror\n  them. We will solve this by playing $$$(1,1)$$$ as our first move. This move does not impact\n  the remainder of the game as no other rope can cross this one. The second issue is what to\n  do when they play $$$(x,x)$$$? In this case, we will just play\n  the highest scoring $$$(z,z)$$$ that is available.\n</p>\n<p><b>Now with a better start ($$$82\\%$$$)</b></p>\n<p>\n  This strategy is the same as the previous section, except our first move is $$$(10,10)$$$\n  instead of $$$(1,1)$$$. Why is this better? Think about when we did well in the previous\n  version. If $$$x \\neq y$$$, then we gain one point on them. The only time they can gain\n  on us is if $$$x = y$$$ (or it is their last turn). By playing $$$(10,10)$$$, we are encouraging\n  them to play diagonal moves early on in the game, which gains us a reasonably good lead.\n  10 was found experimentally to be the best value. Starting with $$$(2,2)$$$ gives $$$72\\%$$$\n  and starting with $$$(25,25)$$$ gives $$$64\\%$$$.\n</p>\n\n<h3>Push It East!</h3>\n<p><b>First attempt ($$$50\\%$$$)</b></p>\n<p>\n  It will help to think of this in three phases:\n  Phase $$$1$$$ sets up the ropes in a reasonable way (and hopefully gains us some points). Phase $$$2$$$\n  plays greedily (and hopefully maintains the lead from Phase $$$1$$$). Phase $$$3$$$ is the final turn\n  for our opponent (hopefully their score from this turn is small).\n</p><p>\n  This strategy is called \"Push It East!\" because our main goal is to make Phase $$$3$$$ as bad as\n  possible for our opponent, and how we do that is ensure that their final move is as far\n  East as possible. If their final move is $$$(x,y)$$$, then the maximum\n  they can possibly score is $$$(100-x) + (100-y)$$$. In particular, if we can push them\n  all the way to the East, they will score 0.\n</p><p>\n  For our first attempt, Phase $$$1$$$ will simply \"give up\" our first turn by playing $$$(1,1)$$$.\n  We enter Phase $$$2$$$ now (note that we are currently tied).\n  Phase $$$2$$$ will play greedily, breaking ties by taking more western trees as often as possible\n  (say by choosing $$$(x,y)$$$ that minimizes $$$x + y$$$).\n  With this setup, Phase $$$3$$$ will typically take a tree that is quite far East. (Yay!)\n</p>\n<p><b>A better start ($$$73\\%$$$)</b></p>\n<p>\n  If we start Phase $$$1$$$ with $$$(2,2)$$$, then the opponents will play $$$(1,x)$$$ (or $$$(x,1)$$$),\n  scoring one point. We then play $$$(1,3)$$$ (or $$$(3,1)$$$), scoring two points. At this point,\n  we enter Phase $$$2$$$ ahead by one point and the opponent can only score at most one point on the\n  next turn. This dramatically improves our win probability.\n</p>\n<p><b>A great start ($$$92\\%$$$)</b></p>\n<p>\n  Let $$$z$$$ be an integer near 10 (say 9, 10, or 11). Let's start Phase $$$1$$$ with $$$(z,z)$$$.\n  For the next few moves, the opponent's moves will typically be $$$(x,y)$$$,\n  where one of\n  $$$x$$$ and $$$y$$$ is \"small\" ($$$\\lt z$$$) and the other is \"large\" ($$$\\gt z$$$).\n  We can continue encouraging the opponent to make these \"small\"/\"large\" moves by choosing\n  moves that are \"short\" ($$$(x,y)$$$ or $$$(y,x)$$$ where $$$x \\lt 10$$$,\n  but as large as possible, and $$$y \\gt 10$$$, but as small as possible). We will continue making\n  \"short\" moves which further encourages the opponent making \"small\"/\"large\" moves.\n</p><p>\n  Say $$$z = 10$$$. After we have made $$$10$$$ moves (and the opponent has made $$$9$$$),\n  we should now be ahead by $$$5$$$ to $$$10$$$ points\n  (since we score approximately $$$0+2+\\cdots+18$$$ and they score approximately\n  $$$1+3+5+\\cdots+17$$$). Phase $$$2$$$ contains 90 greedy moves for each of us where we\n  typically maintain the $$$5-10$$$ point lead. Then, in the opponent's final turn,\n  we hope they score fewer than 5 points since we have pushed them so far East.\n</p><p>\n  Notice that just choosing every move (except the first) to be $$$(x,y)$$$ that first maximizes\n  the score, then minimizes $$$x + y$$$ as above\n  also works quite well because maximum score moves will usually cross our $$$(z,z)$$$ rope.\n  This gets win percentages around $$$92\\%$$$ as well.\n</p>\n","id":"000000000084fad0","statement":"<h3>Problem</h3>\n<p>\nTwo scout teams are taking part in a scouting competition. It is the finals\nand each team is well prepared. The game is played along a river that flows west to east.\nThere are $$$4\\mathbf{N}$$$ trees planted along the river, with exactly $$$2\\mathbf{N}$$$ of them lined up\nalong the north bank and $$$2\\mathbf{N}$$$ lined up along the south bank.\nBoth teams alternate turns playing the game. Your team goes first.\n</p>\n<p>\nOn each turn, the playing team selects one tree on each bank that does not have any ropes\ntied to it and ties a rope between both trees, making it cross the river. Each rope that is added\nis placed higher than all previous ropes. The playing team scores 1 point per each\npreviously used rope that passes below the newly added rope.\n</p><p>\nAfter $$$2\\mathbf{N}$$$ turns, all trees have exactly one rope tied to them, so there are no more\npossible plays and the game is over. The score of each team is the sum of the scores they got\nin all of their turns. If your team's score is strictly greater than the opposing team's score,\nyour team wins. If your team's score is less than or equal to the opposing team's score,\nyour team does not win.\n</p><p>\nThe following animation shows a possible game with $$$\\mathbf{N}=2$$$. Your team is represented by\nthe color red and the other team by the color blue.\n</p><p align=center>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3ZtkMuZA2Is2ahB5jl_cKP5KnUML-ZCJtgBJ0X5JKWG5wfQ5mfdwpiDNOBBo1-hblU-JZKV0s/game.gif\" alt=\"Animation of the first sample interaction\" style=\"max-width:300px;\">\n</p><p>\nThe opposing team felt confident that going second is a large advantage,\nso they revealed their strategy. On their turn, they choose the play that yields the maximum\npossible score for this turn. If multiple such plays exist, they choose one at random.\nThis choice is generated uniformly at random, and independently for each play,\nfor each test case and for each submission.\nTherefore, <i>even if you submit exactly the same code twice, the opposing team\ncan make different random choices</i>.\n</p>\n<p>\nYou play $$$\\mathbf{T}$$$ games in total, and your team must win at least $$$\\mathbf{W}$$$ of them.\n</p>\n\n<h3>Input and output</h3>\n<p>\n  This is an interactive problem. You should make sure you have read the\n  information in the Interactive Problems section of our\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq\" target=\"_blank\">FAQ</a>.\n</p>\n<p>\n  Initially, your program should read a single line containing three integers\n  $$$\\mathbf{T}$$$, $$$\\mathbf{N}$$$, and $$$\\mathbf{W}$$$: the number of test cases, the number of\n  turns of your team and the number of wins you need to get for your solution to be considered\n  correct, respectively. Note that the opposing team also\n  gets $$$\\mathbf{N}$$$ turns, for a total of $$$2\\mathbf{N}$$$ turns for each test case.\n</p>\n<p>\n  For each test case, your program must process $$$\\mathbf{N}$$$ exchanges. Each exchange represents\n  two consecutive turns, one from your team and one from the opposing team.\n</p>\n<p>\n  For the $$$i$$$&NoBreak;-&NoBreak;th exchange, you must first print a single line with\n  two integers $$$\\mathbf{A_i}$$$ and $$$\\mathbf{B_i}$$$ and then read\n  a single line with two integers $$$\\mathbf{C_i}$$$ and $$$\\mathbf{D_i}$$$.\n  This represents that in your $$$i$$$&NoBreak;-&NoBreak;th turn you tied the rope between the $$$\\mathbf{A_i}$$$&NoBreak;-&NoBreak;th\n  tree from the west on the north bank and the $$$\\mathbf{B_i}$$$&NoBreak;-&NoBreak;th tree from the west on\n  the south bank. Similarly, in the opposing team's $$$i$$$&NoBreak;-&NoBreak;th turn they used the $$$\\mathbf{C_i}$$$&NoBreak;-&NoBreak;th\n  tree from the west on the north bank and the $$$\\mathbf{D_i}$$$&NoBreak;-&NoBreak;th tree from the west on\n  the south bank. Trees are indexed starting from 1.\n</p>\n<p>\n  After the $$$\\mathbf{N}$$$ exchanges, you must read one number that represents the result of this game.\n  This number will be 1 if your team won, otherwise it will be 0.\n</p>\n<p>\n  The next test case starts immediately if there is one. If this was the last test case,\n  the judge will expect no more output and will send no further input to your program.\n  In addition, all $$$\\mathbf{T}$$$ test cases are always processed, regardless of whether it is\n  already guaranteed that the threshold for correctness will or cannot be met.\n  The threshold is only checked after correctly processing all test cases.\n</p>\n<p>\n  If the judge receives an invalidly formatted line or invalid move (like using a tree\n  that has already been used) from your program at any moment, the judge will print a single\n  number -1 and will not print any further output. If your program continues to wait for the judge after\n  receiving a -1, your program will time out, resulting in a Time Limit\n  Exceeded error. Notice that it is your responsibility to have your program\n  exit in time to receive a Wrong Answer judgment instead of a Time Limit\n  Exceeded error. As usual, if the memory limit is exceeded, or your program\n  gets a runtime error, you will receive the appropriate judgment.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 90 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$\\mathbf{T} = 2000$$$.<br/>\n$$$\\mathbf{N} = 50$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$\\mathbf{W} = 1200$$$ ($$$\\mathbf{W} = 0.6 \\cdot \\mathbf{T}$$$).\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\n\n$$$\\mathbf{W} = 1560$$$ ($$$\\mathbf{W} = 0.78 \\cdot \\mathbf{T}$$$).\n</p>\n\n<h4>Test Set 3 (Visible Verdict)</h4>\n<p>\n\n$$$\\mathbf{W} = 1720$$$ ($$$\\mathbf{W} = 0.86 \\cdot \\mathbf{T}$$$).\n</p>\n\n\n<h3>Testing Tool</h3>\n<p>\n  You can use this testing tool to test locally or on our platform. To test\n  locally, you will need to run the tool in parallel with your code; you can\n  use our <a href=\"https://storage.googleapis.com/coding-competitions.appspot.com/interactive_runner.py\">interactive runner</a>\n  for that. For more information, read the instructions in comments in that\n  file, and also check out the\n  <a href=\"/codejam/faq#interactive-problems\" target=\"_blank\">Interactive Problems section</a>\n  of the FAQ.\n</p><p>\n  Instructions for the testing tool are included in comments within the tool.\n  We encourage you to add your own test cases. Please be advised that although\n  the testing tool is intended to simulate the judging system, it is <b>NOT</b>\n  the real judging system and might behave differently. If your code passes the\n  testing tool but fails the real judge, please check the\n  <a href=\"/codejam/faq#coding\" target=\"_blank\">Coding section</a>\n  of the FAQ to make sure that you are using the same compiler as us.\n</p><p>\n<a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0zyliOuSBeOZSNaf-0N3Xz9qcmhTL3TQnmp87j1JSHJPhpyAYKxUdPHWLB45Sy_Qt1wR_CNZ3d6sc6q-H-5rM/local_testing_tool.py?dl=1\" download=\"testing_tool.py\">Download testing tool</a>\n</p>\n\n\n  <div class=\"sample-interaction-wrapper\">\n    <div class=\"sample-interaction-header\">\n      <div class=\"sample-interaction-header-text\">Sample Interaction</div>\n    </div>\n    <div class=\"sample-interaction-content\">\n      <div class=\"sample-interaction-judge-solution-labels\">\n        <div class=\"sample-interaction-judge-label\">Judge</div>\n        <div class=\"sample-interaction-solution-label\">Solution</div>\n      </div>\n      \n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Constraints<br>\n</div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">2 2 1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge provides $$$\\mathbf{T}$$$, $$$\\mathbf{N}$$$, $$$\\mathbf{W}$$$. These are illustrative and do not abide by the limits of any test set.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Game 1 (depicted in the animation above)<br>\n</div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">3 2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution connects the 3rd tree from the west on the north bank with the 2nd tree from the west on the south bank, scoring 0.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">4 1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge crosses the only rope, scoring 1.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">1 3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution crosses both previous ropes, scoring 2.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">2 4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge crosses the first two ropes and not the last one, scoring 2 more.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">0\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Your team lost with a score of 2-3, so judge indicates not a win.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">Game 2<br>\n</div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">1 1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution starts, scoring 0.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">2 3\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge has no way to score, so it plays something scoring 0.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-solution-output-wrapper\">\n    <div class=\"sample-interaction-solution-output-box\">\n      <pre class=\"sample-interaction-solution-output-test\">3 2\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-solution-note\">Solution crosses the judge's rope, scoring 1.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">4 4\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Judge plays its only option, scoring 0 again.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-judge-output-wrapper\">\n    <div class=\"sample-interaction-judge-output-box\">\n      <pre class=\"sample-interaction-judge-output-test\">1\n</pre>\n    </div>\n  </div>\n\n  <div class=\"sample-interaction-judge-note\">Your team won with a score of 1-0, so judge indicates a win.<br>\n</div>\n\n  <div class=\"sample-interaction-block-spacer\"></div>\n\n  <div class=\"sample-interaction-block-section-label\">The solution is considered correct because it got $$$1 \\ge \\mathbf{W}$$$ win.<br>\n</div>\n\n    </div>\n  </div>\n\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":15},{"type":1,"type__str":"VISIBLE","value":10},{"type":1,"type__str":"VISIBLE","value":15}],"title":"Ropes","trial_input_type":2,"trial_input_type__str":"JUDGE_CODE"},{"analysis":"<a href=\"https://youtu.be/pJ1fGIApE98\" target=\"_blank\">View problem and solution walkthrough video</a>\n<h3>Test Set 1</h3>\n<p>\n  In  Test Set 1, $$$\\mathbf{S}$$$ is reasonably small. This allows us\n  to compute the answer for every prefix of the input using\n  <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\" target=\"_blank\">dynamic programming</a>.\n  We compute two values for every prefix ending at index $$$i$$$: $$$A_i$$$ and $$$B_i$$$,\n  which are the number of divisible divisions of this prefix whose last division\n  is divisible by $$$\\mathbf{D}$$$ (<i>Type A</i>) and the number of divisible divisions of this\n  prefix whose last division is not divisible by $$$\\mathbf{D}$$$ (<i>Type B</i>). The empty prefix\n  has corresponding values $$$A_0 = 1$$$ and $$$B_0 = 0$$$. The solution to\n  the problem is $$$A_{\\text{length}(\\mathbf{S})} + B_{\\text{length}(\\mathbf{S})}$$$.\n</p><p>\n  Let $$$\\mathbf{S}[i..j]$$$ be the integer represented by the digits in $$$\\mathbf{S}$$$ from index\n  $$$i$$$ to index $$$j$$$, inclusive. If $$$i > j$$$, then this is an empty substring\n  and the corresponding value is $$$0$$$ (this only happens with $$$j=0$$$ below).\n  To compute $$$A_k$$$, we will iterate over all possible last divisions\n  ($$$\\mathbf{S}[1..k], \\mathbf{S}[2..k], \\dots, \\mathbf{S}[(k-1)..k], \\mathbf{S}[k..k]$$$). For each one of\n  these substrings (say $$$\\mathbf{S}[i..k]$$$),\n  we check if it is divisible by $$$\\mathbf{D}$$$, and if it is, we can append this division to\n  any divisible division that ends at index $$$i-1$$$. Since the division we constructed\n  is divisible by $$$\\mathbf{D}$$$, it does not matter if the divisible division we are appending\n  to ends in a division that is divisible by $$$\\mathbf{D}$$$. The formulas below use\n  <a href=\"https://www.google.com/url?sa=D&q=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FModular_arithmetic%23Congruence\"  target=\"_blank\">modular arithmetic notation</a>.\n  Thus,\n  $$$$A_k = \\sum_{1 \\leq i \\leq k \\\\ \\mathbf{S}[i..k] \\equiv 0 \\pmod{\\mathbf{D}}} \\left( A_{i-1} + B_{i-1} \\right).$$$$\n  For convenience below, we slightly rewrite this equation as:\n  $$$$A_k = \\sum_{0 \\leq i \\leq k-1 \\\\ \\mathbf{S}[(i+1)..k] \\equiv 0 \\pmod{\\mathbf{D}}} \\left( A_i + B_i \\right).$$$$\n</p><p>\n  We can compute $$$B_k$$$ similarly. We iterate over all possible last divisions.\n  For each one of these substrings that is not divisible by $$$\\mathbf{D}$$$, we can append it to\n  any divisible division that <u>does</u> end with a division that is divisible by $$$\\mathbf{D}$$$.\n  Thus,\n  $$$$B_k = \\sum_{0 \\leq i \\leq k-1 \\\\ \\mathbf{S}[(i+1)..k] \\not\\equiv 0 \\pmod{\\mathbf{D}}} A_i.$$$$\n</p><p>\n  Since |$$$\\mathbf{S}$$$| is small, we can simply check all possible values. Some care is\n  needed when determining whether $$$\\mathbf{S}[i..k]$$$ is divisible by $$$\\mathbf{D}$$$. Using the fact that\n  $$$\\mathbf{S}[i..k] = 10^{k-i} \\cdot \\mathbf{S}[i] + \\mathbf{S}[(i+1)..k]$$$, we can avoid fully recomputing\n  the value of $$$\\mathbf{S}[i..k]$$$ by keeping this rolling value (as well as\n  maintaining the current power of 10).\n</p><p>\n  For each $$$k$$$, computing $$$A_k$$$ and $$$B_k$$$ requires a linear sweep through\n  all smaller indices, so this solution takes $$$O(|\\mathbf{S}|^2)$$$ time.\n</p>\n\n<h3>Test Set 2</h3>\n\n<h4>When $$$\\mathbf{D}$$$ and 10 are relatively prime</h4>\n<p>\n  In Test Set 2, $$$\\mathbf{S}$$$ is too large to use the dynamic programming solution\n  explained above. However, we will make use of the same foundation for our solution:\n  for each index, compute $$$A_k$$$ and $$$B_k$$$.\n</p><p>\n  Rather than sweeping through all smaller indices to check which prefixes are\n  divisible by $$$\\mathbf{D}$$$ and which are not, we will instead use the following observation:\n  $$$\\mathbf{S}[(i+1)..k] = \\mathbf{S}[1..k] - \\mathbf{S}[1..i] \\cdot 10^{k-i}$$$.\n  To find all $$$i$$$ such that $$$\\mathbf{S}[(i+1)..k] \\equiv 0 \\pmod{\\mathbf{D}}$$$ (which is needed\n  in the formula above for both $$$A_k$$$ and $$$B_k$$$),\n  we instead search for all $$$0 \\leq i \\leq k-1$$$ such that\n  $$$\\mathbf{S}[1..i] \\cdot 10^{k-i} \\equiv \\mathbf{S}[1..k] \\pmod{\\mathbf{D}}$$$.\n  This allows us to group all terms in the summation by the value of\n  $$$v \\equiv S[1..i] \\pmod{\\mathbf{D}}$$$:\n  $$$$\\mathcal{A}^{(k)}_v = \\sum_{0 \\leq i \\leq k-1 \\\\ \\mathbf{S}[1..i] \\cdot 10^{k-i} \\equiv v \\pmod{\\mathbf{D}}} A_i,$$$$\n  and similar for $$$\\mathcal{B}^{(k)}_v$$$.\n</p><p>\n  With this framework, we can re-write our formula above for $$$A_k$$$ and $$$B_k$$$:\n  $$$$A_k = \\left( \\mathcal{A}^{(k)}_{\\mathbf{S}[1..k]} \\right) + \\left( \\mathcal{B}^{(k)}_{\\mathbf{S}[1..k]} \\right)\n  \\qquad\\qquad\\text{and}\\qquad\\qquad\n  B_k = \\sum_{v \\neq \\mathbf{S}[1..k]} \\mathcal{A}^{(k)}_{i} = \\left( \\sum_{0 \\leq v \\lt \\mathbf{D}} \\mathcal{A}^{(k)}_v \\right) - \\mathcal{A}^{(k)}_{\\mathbf{S}[1..k]}$$$$\n</p><p>\n  The only piece of the puzzle left is determining how to compute $$$\\mathcal{A}^{(k)}_v$$$\n  and $$$\\mathcal{B}^{(k)}_v$$$ quickly.\n  Intuitively, to move from $$$\\mathcal{A}^{(k)}_v$$$ to $$$\\mathcal{A}^{(k+1)}_v$$$,\n  we must do two things:\n  (1) multiply every index $$$v$$$ by 10 modulo $$$\\mathbf{D}$$$, then (2) apply our knowledge of\n  $$$A_k$$$ and $$$B_k$$$. In the equations below, we need to make use of the\n  <a href=\"https://en.wikipedia.org/wiki/Multiplicative_inverse\" target=\"_blank\">multiplicative inverse of 10 modulo $$$\\mathbf{D}$$$</a>,\n  $$$10^{-1}$$$ (this is why we need $$$\\mathbf{D}$$$ and 10 to be relatively prime).\n  Mathematically, we can write $$$\\mathcal{A}^{(k+1)}_v$$$ as follows\n  (proofs of these are at the very bottom): if $$$\\mathbf{S}[1..k] \\equiv v \\pmod{\\mathbf{D}}$$$, then\n  $$$$\\mathcal{A}^{(k+1)}_v = \\mathcal{A}^{(k)}_{10^{-1}v} + A_k$$$$\n  and if $$$\\mathbf{S}[1..k] \\not\\equiv v \\pmod{\\mathbf{D}}$$$, then\n  $$$$\\mathcal{A}^{(k+1)}_v = \\mathcal{A}^{(k)}_{10^{-1}v}.$$$$\n</p><p>\n  If we wish to store $$$\\mathcal{A}^{(k+1)}_v$$$ as an array, we could naively loop through\n  every index $$$v$$$ of $$$\\mathcal{A}^{(k)}_v$$$ (but that would be much too slow).\n  Instead, we do the multiplication implicitly.\n  If an index is $$$v$$$ in $$$\\mathcal{A}^{(k)}$$$, then it is at index\n  $$$10v \\pmod{\\mathbf{D}}$$$ in $$$\\mathcal{A}^{(k+1)}$$$. This means that after applying (1) above,\n  to compute the value of $$$\\mathcal{A}^{(k+1)}_v$$$, we can instead examine\n  $$$\\mathcal{A}^{(k)}_{10^{-1} \\cdot v}$$$.\n  We can recursively apply this logic and store just one array: $$$\\mathcal{A}^{(1)}$$$\n  and look at the appropriate index:\n  $$$$\\mathcal{A}^{(k+1)}_i = \\mathcal{A}^{(1)}_{10^{-k}i}.$$$$\n  In the case where $$$\\mathbf{S}[1..k] \\equiv v \\pmod{\\mathbf{D}}$$$, we accomplish (2) similarly by increasing\n  $$$\\mathcal{A}^{(1)}_{10^{-k} \\cdot \\mathbf{S}[1..k]}$$$ by $$$A_k$$$\n  (and similar for $$$\\mathcal{B}$$$).\n</p><p>\n  In total, we can keep track of all of these operations in $$$O(|\\mathbf{S}|)$$$ time and\n  $$$O(\\mathbf{D})$$$ memory. We do need one extra variable to store\n  $$$\\left( \\sum_{0 \\leq v \\lt \\mathbf{D}} \\mathcal{A}^{(k)}_v \\right)$$$ for the computation of\n  $$$B_k$$$, but this is easy to maintain in $$$O(1)$$$ time per $$$k$$$.\n</p>\n\n<h4>Chinese Remainder Theorem to the rescue!</h4>\n<p>\n  The above algorithm works because $$$\\mathbf{D}$$$ and 10 were assumed to be relatively prime. This was\n  needed for $$$10^{-1}$$$ to exist in all cases. But\n  what do we do when they are not?\n  We write $$$\\mathbf{D} = 2^\\ell 5^m n$$$, where $$$\\text{gcd}(n, 10) = 1$$$.\n  Instead of checking that $$$\\mathbf{S}[i..k] \\equiv 0 \\pmod{\\mathbf{D}}$$$, we will instead break it\n  up into three separate (simultaneous) checks:\n  $$$\\mathbf{S}[i..k] \\equiv 0 \\pmod{2^\\ell}$$$,\n  $$$\\mathbf{S}[i..k] \\equiv 0 \\pmod{5^m}$$$, and\n  $$$\\mathbf{S}[i..k] \\equiv 0 \\pmod{n}$$$.\n  By the\n  <a href=\"https://en.wikipedia.org/wiki/Chinese_remainder_theorem\" target=\"_blank\">Chinese Remainder Theorem</a>,\n  all three of these are true if and only if $$$\\mathbf{S}[i..k] \\equiv 0 \\pmod{\\mathbf{D}}$$$.\n</p><p>\n  Recall that we are searching for all $$$i$$$ such that\n  $$$\\mathbf{S}[1..i] \\cdot 10^{k-i} \\equiv \\mathbf{S}[1..k] \\pmod{\\mathbf{D}}$$$.\n  The key observation needed is that if $$$k - i \\geq \\ell$$$, then\n  $$$\\mathbf{S}[1..i] \\cdot 10^{k-i} \\equiv 0 \\pmod{2^\\ell}$$$. Similarly,\n  if $$$k - i \\geq m$$$, then\n  $$$\\mathbf{S}[1..i] \\cdot 10^{k-i} \\equiv 0 \\pmod{5^m}$$$. This means that a\n  substring of $$$\\mathbf{S}$$$ (say $$$\\mathbf{S}$$$[i..k]) that is longer than $$$\\text{max}(\\ell, m)$$$\n  can only contribute to $$$\\mathcal{A}$$$\n  if $$$\\mathbf{S}[1..k] \\equiv 0 \\pmod{2^\\ell}$$$ and $$$\\mathbf{S}[1..k] \\equiv 0 \\pmod{5^m}$$$.\n</p><p>\n  This leads us to our solution. For each $$$k$$$, we will compute $$$A_k$$$ and $$$B_k$$$\n  by breaking into two cases: the \"small\" substrings\n  and \"large\" substrings.\n  For \"small\" substrings (that is, substrings of length at most\n  $$$\\text{max}(\\ell, m)$$$), we use our algorithm from Test Set 1, looping\n  through all small substrings naively.\n</p><p>\n  For the \"large\" substrings, we know that if\n  $$$\\mathbf{S}[1..k] \\not\\equiv 0 \\pmod{2^\\ell}$$$ or $$$\\mathbf{S}[1..k] \\not\\equiv 0 \\pmod{5^m}$$$,\n  then no large substrings are divisible by $$$\\mathbf{D}$$$. So the large part of $$$A_k = 0$$$ and\n  the large part of $$$B_k = \\sum_{0 \\leq v \\lt \\mathbf{D}} \\mathcal{A}^{(k)}_v$$$.\n  If, however, $$$\\mathbf{S}[1..k] \\equiv 0 \\pmod{2^\\ell}$$$ and $$$\\mathbf{S}[1..k] \\equiv 0 \\pmod{5^m}$$$,\n  then we can use the technique described above (with $$$n$$$ instead of $$$\\mathbf{D}$$$).\n  One small modification is needed: do not add in our knowledge of $$$A_k$$$ and $$$B_k$$$\n  into $$$\\mathcal{A}$$$ or $$$\\mathcal{B}$$$ until they are out of range of the\n  \"small\" substrings or else the \"small\" substrings will be counted multiple times.\n</p><p>\n  Computing the \"large\" substrings takes linear time (as explained in the section above).\n  To compute the \"small\" substrings, we must naively loop over $$$\\max(\\ell, m)$$$\n  elements. Note that $$$\\max(\\ell, m) \\leq \\log_2 \\mathbf{D} $$$. This means that, in total,\n  we do $$$O(|\\mathbf{S}| \\log \\mathbf{D})$$$ operations.\n</p>\n\n<h4>\n  Proofs\n</h4>\n<p>\n  If $$$\\mathbf{S}[1..k] \\equiv v \\pmod{\\mathbf{D}}$$$, then:\n  $$$$\n   \\begin{array}{rcl}\n     \\mathcal{A}^{(k+1)}_v & = & \\sum_{0 \\leq i \\leq k \\\\ \\mathbf{S}[1..i] \\cdot 10^{k+1-i} \\equiv v \\pmod{\\mathbf{D}}} A_i \\\\\n       ~ & = & \\left(\\sum_{0 \\leq i \\leq k-1 \\\\ \\mathbf{S}[1..i] \\cdot 10^{k+1-i} \\equiv v \\pmod{\\mathbf{D}}} A_i \\right) + A_k \\\\\n       ~ & = & \\left(\\sum_{0 \\leq i \\leq k-1 \\\\ \\mathbf{S}[1..i] \\cdot 10^{k-i} \\equiv 10^{-1}v \\pmod{\\mathbf{D}}} A_i \\right) + A_k \\\\\n       ~ & = & \\mathcal{A}^{(k)}_{10^{-1}v} + A_k \\\\\n    \\end{array}\n  $$$$\n  Otherwise, if $$$\\mathbf{S}[1..k] \\not\\equiv v \\pmod{\\mathbf{D}}$$$, then:\n\n  $$$$\n   \\begin{array}{rcl}\n     \\mathcal{A}^{(k+1)}_v & = & \\sum_{0 \\leq i \\leq k \\\\ \\mathbf{S}[1..i] \\cdot 10^{k+1-i} \\equiv v \\pmod{\\mathbf{D}}} A_i \\\\\n        ~ & = & \\left(\\sum_{0 \\leq i \\leq k-1 \\\\ \\mathbf{S}[1..i] \\cdot 10^{k+1-i} \\equiv v \\pmod{\\mathbf{D}}} A_i \\right) \\\\\n        ~ & = & \\left(\\sum_{0 \\leq i \\leq k-1 \\\\ \\mathbf{S}[1..i] \\cdot 10^{k-i} \\equiv 10^{-1}v \\pmod{\\mathbf{D}}} A_i \\right) \\\\\n        ~ & = & \\mathcal{A}^{(k)}_{10^{-1}v} \\\\\n   \\end{array}\n  $$$$\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2LnnhJOdHJ3Mho67JbDMxvX6frMsDBwZz5lRFq9tA7MdvN-qjKADSXZSUTLOSEEV4WdbAEnho9/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000084fb3a","statement":"<h3>Problem</h3>\n<p>\nWe have a string $$$\\mathbf{S}$$$ consisting of decimal digits. A <i>division</i> of $$$\\mathbf{S}$$$ is created by\ndividing $$$\\mathbf{S}$$$ into contiguous substrings.\nFor example, if $$$\\mathbf{S}$$$ is <code>0145217</code>, two possible divisions are\n<code>014 5 21 7</code> and <code>0 14 52 17</code>. Each digit must be used in exactly one\nsubstring, and each substring must be non-empty. If $$$\\mathbf{S}$$$ has $$$L$$$ digits, then there are exactly\n$$$2^{L-1}$$$ possible divisions of it.\n</p><p>\nGiven a positive integer $$$\\mathbf{D}$$$, a division of $$$\\mathbf{S}$$$ is called <i>divisible</i> by $$$\\mathbf{D}$$$ if for every\npair of consecutive substrings, at least one of the integers they represent in base $$$10$$$\nis divisible by $$$\\mathbf{D}$$$.\nIf $$$\\mathbf{D}=7$$$, the first example division above is divisible because <code>014</code>,\n<code>21</code>, and <code>7</code> represent integers divisible by $$$7$$$. The second example\ndivision is not divisible because <code>52</code> and <code>17</code> are consecutive substrings\nand neither represents an integer divisible by $$$7$$$. Dividing <code>0145217</code> as\n<code>0145217</code> is divisible by any $$$\\mathbf{D}$$$ because there are no pairs of consecutive substrings.\n</p><p>\nGiven $$$\\mathbf{S}$$$ and $$$\\mathbf{D}$$$, count how many divisions of $$$\\mathbf{S}$$$ exist that are divisible by $$$\\mathbf{D}$$$.\nSince the output can be a really big number, we only ask you to output the remainder\nof dividing the result by the prime $$$10^9+7$$$ ($$$1000000007$$$).\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ lines follow.\nEach line represents a test case with a string of digits $$$\\mathbf{S}$$$ and a positive integer $$$\\mathbf{D}$$$, as\nmentioned above.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the number of\ndifferent divisions of $$$\\mathbf{S}$$$ that are divisible by $$$\\mathbf{D}$$$, modulo the prime\n$$$10^9+7$$$ ($$$1000000007$$$).\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 60 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{D} \\le 10^6$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$1 \\le $$$ the length of $$$\\mathbf{S} \\le 1000$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\n\n$$$1 \\le $$$ the length of $$$\\mathbf{S} \\le 10^5$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1umEqj5ta0SetjdVwGFAqv3JVkZ1dxCmRuchFAvnJ--usFAVgor2flEq2KZLkKBV2mmHZDEerV1R4sCRCOl2JGCZQ7YhP1ld-avyt0p3HDs--h/divisible_divisions_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n0145217 7\n100100 10\n5555 12\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2vtaYAcO5OVCgZUQGK3BjGUv2X7f_rjOE_SrXN5Vf7N7KoOcl2om-dGrrdyy9wn7TCQj6nJcOTrWngBaJ7-DDeWzxJWDy4ouLikfDo2HP13AErfg/divisible_divisions_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 16\nCase #2: 30\nCase #3: 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, all $$$16$$$ divisible divisions of $$$\\mathbf{S}$$$ are:\n<ul>\n<li><code>0145217</code>,</li>\n<li><code>0 145217</code>,</li>\n<li><code>0 14 5217</code>,</li>\n<li><code>0 14 5 217</code>,</li>\n<li><code>0 14 5 21 7</code>,</li>\n<li><code>0 14 521 7</code>,</li>\n<li><code>0 145 217</code>,</li>\n<li><code>0 145 21 7</code>,</li>\n<li><code>0 14521 7</code>,</li>\n<li><code>014 5217</code>,</li>\n<li><code>014 5 217</code>,</li>\n<li><code>014 5 21 7</code>,</li>\n<li><code>014 521 7</code>,</li>\n<li><code>0145 217</code>,</li>\n<li><code>0145 21 7</code>, and</li>\n<li><code>014521 7</code>.</li>\n</ul>\n</p><p>\n  In Sample Case #2, there are $$$2^5=32$$$ ways to divide in total. To get two consecutive\n  substrings to not be divisible by $$$10$$$, we need both of them to not end in $$$0$$$. The\n  only $$$2$$$ ways of doing that are <code>1 001 00</code> and <code>1 001 0 0</code>, which\n  means the other $$$30$$$ divisions of $$$\\mathbf{S}$$$ are divisible by $$$10$$$.\n</p><p>\n  In Sample Case #3, no possible substring represents an even integer, which in turn means\n  it is not divisible by $$$12$$$. Therefore, the only way to not have two consecutive substrings\n  that are not divisible by $$$12$$$ is to not have two consecutive substrings at all, which\n  can be done in only $$$1$$$ way: <code>5555</code>.\n </p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":35}],"title":"Divisible Divisions","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<a href=\"https://youtu.be/6vKA-6g9mtk\" target=\"_blank\">View problem and solution walkthrough video</a>\n<h3>A Single Icing Patch</h3>\n<p>\n  Let's first consider a case where we have only one icing patch with a vertical edge on the right\n  having enjoyment values $$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$.\n  If our vertical cut line is all the way to the left of the triangle, we would get\n  $$$0$$$ enjoyment and our twin would get $$$\\mathbf{B}$$$ enjoyment. If our cut line is to the right of the\n  triangle, we would get $$$\\mathbf{A}$$$ enjoyment and our twin would get $$$0$$$ enjoyment.\n</p><p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1nydFavnCo6Xo8ie4fzD8fplLNys9E7aFRRtSSO97saYzEN2DdWG-jU7sI5nJnk-vkIU2NMArMyQnRnQ/analysis1.png\" alt=\"Cake with one icing patch and cut line going through the middle of it.\">\n</p><p>\n  Otherwise, our cut is somewhere in the middle of the triangle.\n  In this case, we would get $$$\\mathbf{A} \\cdot P(X)$$$ enjoyment and our twin would get\n  $$$\\mathbf{B} \\cdot (1 - P(X))$$$ enjoyment where $$$P(X)$$$ is a value between 0 and 1 representing the\n  proportion of the triangle that is to the left of a cut line at position $$$X$$$.\n</p><p>\n  We can calculate $$$P(X)$$$ by considering\n  <a href=\"https://en.wikipedia.org/wiki/Similarity_(geometry)#Similar_triangles\" target=\"_blank\">similar triangles</a>.\n  Let $$$T_X$$$ be the triangle\n  that is to the left of our cut line when cutting at $$$X$$$. We can notice that $$$T_X$$$ and our\n  full triangle are similar triangles. This means that the ratio between the width and height of\n  $$$T_X$$$ is the same as the ratio for the full triangle. So, given a cut location $$$X$$$, the\n  width and height of $$$T_X$$$ are both $$$\\frac{X - \\text{left}}{\\text{width}}$$$ of the full\n  triangle's width and height respectively.\n  Therefore, we can calculate $$$P(X)$$$ using the following formula:\n</p><p>\n  $$$$P(X) = \\left(\\frac{X - \\text{left}}{\\text{width}} \\right) ^2$$$$\n</p><p>\n  Notice that $$$P(X)$$$ is a quadratic (polynomial of degree 2).\n  With this, we can write the formulas for our enjoyment and our twin's enjoyment as polynomials\n  in terms of $$$X$$$:\n</p><p>\n  $$$$\\text{Our enjoyment} = \\mathbf{A} \\cdot \\left(\\frac{X - \\text{left}}{\\text{width}} \\right) ^2$$$$\n  $$$$\\text{Twin's enjoyment} = \\mathbf{B} \\cdot \\left(1 - \\left(\\frac{X - \\text{left}}{\\text{width}} \\right) ^2\\right)$$$$\n</p><p>\n  The value we care about is the difference between these enjoyments. So, we can take the\n  difference between enjoyments and solve for the minimum absolute value\n  within a given range of our cut X-coordinate (from the left of the triangle to the right of the\n  triangle). We can do this by checking the following:\n</p>\n<ul>\n  <li>The value at the extreme point of the quadratic, if that's within the interval.</li>\n  <li>The values at each endpoint of the interval.</li>\n  <li>Whether the quadratic crosses 0 within the interval.</li>\n</ul>\n<p>\n  We can know whether the function crosses $$$0$$$ by checking whether the sign at the two endpoints\n  is different. In case the extreme value is within the range, we need to check whether that sign is\n  different from endpoints as well.\n</p><p>\n  Note that our triangle mold might not have a vertical edge. In this case, we can split the\n  triangle in two parts and solve for the left and right sides separately.\n</p><p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0b6A07GndY8dymoW81-dogIXAGlNI_gpmlGXFW574Ci_Z1wSoJ92t9n18xSNJ1FOOTLpUPMh3jDUj_tQ/analysis2.png\" alt=\"Triangle without vertical edge cut in half so each half has a vertical edge.\">\n</p><p>\n  The formula for the right side is slightly different but very similar to that used for the left.\n  So, we can calculate the proportion, $$$P(X)$$$, for a triangle with a vertical edge on the left\n  as follows:\n</p><p>\n  $$$$P(X) = 1 - \\left(\\frac{\\text{left} + \\text{width} - X}{\\text{width}} \\right) ^2$$$$\n</p>\n<h3>Many Icing Patches</h3>\n<p>\n  For the full problem, we have many icing patches. If we look at all unique X-coordinates of the\n  vertices representing the triangular icing patches, we can notice that if we cut somewhere\n  between two adjacent X-coordinates, each triangle is either always:\n</p>\n<ul>\n  <li>Entirely to the left of our cut line (contributing to our enjoyment).</li>\n  <li>Entirely to the right of our cut line (contributing to our twin's enjoyment).</li>\n  <li>Cut in two pieces by the cut line (contributing to both our and our twin's enjoyment).</li>\n</ul>\n<p align=\"center\">\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2AUwydjscvke_sg5U_0xBEAqFQCs9Rzcffx2sXjXjZzR0kVmlVi3kSwYfiiRDE_i7P23ZgE2v9yF7Nlw/analysis3.png\" alt=\"A cake with three icing patches and vertical dotted lines showing all unique X-coordinates.\">\n</p><p>\n  Therefore, for every pair of adjacent X-coordinates, we can add the constant enjoyments from the\n  triangles that are always either to the left or to the right of the cut line to the quadratic functions\n  from the triangles that are being cut. This means that the function $$$D(X)$$$ that represents the\n  difference between enjoyments if we cut at $$$X$$$ is a piece-wise polynomial of degree no more\n  than two.\n  Between every pair of adjacent X-coordinates, we can solve for the minimum absolute value of the\n  difference between our and our twin's enjoyment. Our final answer is then the minimum across all\n  X-coordinate ranges.\n</p><p>\n  Using a <a href=\"https://en.wikipedia.org/wiki/Sweep_line_algorithm\" target=\"_blank\">sweep-line</a>\n  technique, we can maintain the polynomials representing our and our twin's\n  enjoyments. Because we need to sort the points by X-coordinate, our overall solution requires\n  $$$O(\\mathbf{N} \\log \\mathbf{N})$$$ operations for sorting and $$$O(\\mathbf{N})$$$ operations on fractions.\n  Keep in mind that the numbers for the numerator and denominator might not fit into 64 bit integers.\n  Notice that the size of those numbers grows logarithmically in the size of the input, so\n  $$$O(\\mathbf{N} \\log \\mathbf{N})$$$ operations is a reasonable approximation of the overall time complexity\n  of the algorithm.\n</p>\n<h3>Some behind the scenes trivia</h3>\n<p>\n  Because of the $$$O(\\mathbf{N} \\log \\mathbf{N})$$$ complexity mentioned in the previous paragraph, this problem\n  started out as the same statement but intended to be solved using floating point. However, as\n  illustrated by the fact that it needs fractions with integers that do not fit in 128 bits, the\n  precision was a big problem. The amount of restriction all variables needed to keep the precision\n  issues workable would have made a solution that simply iterates through all triangles for\n  every range and does a ternary search usable. Such a solution can be guessed without understanding\n  the polynomials we explained. Using fractions was a way to require solutions to understand\n  those polynomials. Setting a small value for $$$\\mathbf{N}$$$ allows using unbounded integers without\n  worrying about the additional running time. Making all the triangles the same shape also\n  helps with this: it keeps the size of the fractions from getting too big.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U19J8YmXG3M8jo__qlsIZa808s65k4GkIpZkPIAG7rvF9yKCPMFItyVvmbNS2kowI4olbytYuBC/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000084fba1","statement":"<h3>Problem</h3>\n<p>\nToday is your and your twin sibling's birthday. To celebrate, you got a rectangular cake to share.\nThe cake is decorated with $$$\\mathbf{N}$$$ triangular patches of icing (which may overlap). All the icing\npatches were created with the same triangular mold, so they have the same shape and orientation.\nAlthough you and your twin are very similar, your tastes in icing are much different.\nThis difference is formalized by each of you having a different enjoyment value for each patch of\nicing. Specifically, your enjoyment value for eating the entire $$$i$$$&NoBreak;-&NoBreak;th patch\nof icing is $$$\\mathbf{A_i}$$$, and your twin's is $$$\\mathbf{B_i}$$$. If someone eats part of a patch, they get\nenjoyment proportional to the eaten area. For example, if you eat\n$$$\\frac{2}{3}$$$ of the area of the $$$i$$$&NoBreak;-&NoBreak;th icing patch, you would get\n$$$\\frac{2\\mathbf{A_i}}{3}$$$ enjoyment from it.\nNote that there may be some flavors of icing that you or your twin do not enjoy, so the $$$\\mathbf{A_i}$$$\nand/or $$$\\mathbf{B_i}$$$ values can be negative.\n</p>\n<div align=center>\n  <div style=\"display: inline-block; flex-direction: column; padding: 20px 0 0 0;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0k4xiqWN9u3SW87z_MlKzG1DX8PQBHvKZiyCrQmEpC4eppOXBgEVuMLIytHEncirwKj5HZgPH6EFiaEbY7pA/cutting_cake.png\" alt=\"A cake with 4 icing patches.\">\n    </div>\n  </div>\n</div>\n<p>\nYou will cut the cake into two rectangular pieces by making a single vertical cut\n(parallel to the Y-axis). After cutting the cake, you will eat the left piece and your twin will\neat the right piece.\nYour total enjoyment is the sum of the enjoyment you get from all icing to the left of the cut.\nSimilarly,\nyour twin's enjoyment is the sum of the enjoyment they get from all icing to the right of the cut.\n</p><p>\nTo be as fair as possible, you want to cut the cake such that\nthe absolute value of the difference between your total enjoyment and your twin's total enjoyment\nis as small as possible.\nGiven the $$$\\mathbf{N}$$$ triangular icing patches on a rectangular cake, what is the minimum possible\nabsolute value of the difference between your and your twin's total enjoyments\nyou can get?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case starts with a line containing three positive integers, $$$\\mathbf{N}$$$, $$$\\mathbf{W}$$$, and $$$\\mathbf{H}$$$,\nrepresenting the number of icing patches on the cake and the width and height of the top of the\ncake, respectively. The bottom-left corner of the cake is\nlocated at $$$(0, 0)$$$ and the top-right corner is at $$$(\\mathbf{W}, \\mathbf{H})$$$.\nThen, a line describing the icing patch mold follows. This line contains four integers:\n$$$\\mathbf{P}$$$, $$$\\mathbf{Q}$$$, $$$\\mathbf{R}$$$, and $$$\\mathbf{S}$$$. The icing patch mold is a triangle with vertices at $$$(0, 0)$$$,\n$$$(\\mathbf{P}, \\mathbf{Q})$$$, and $$$(\\mathbf{R}, \\mathbf{S})$$$.\nThen, $$$\\mathbf{N}$$$ lines follow. The $$$i$$$&NoBreak;-&NoBreak;th of these lines contains four integers\n$$$\\mathbf{X_i}$$$, $$$\\mathbf{Y_i}$$$, $$$\\mathbf{A_i}$$$, and $$$\\mathbf{B_i}$$$. The $$$i$$$&NoBreak;-&NoBreak;th patch is a triangle with vertices\nat $$$(\\mathbf{X_i}, \\mathbf{Y_i})$$$, $$$(\\mathbf{X_i} + \\mathbf{P}, \\mathbf{Y_i} + \\mathbf{Q})$$$,\nand $$$(\\mathbf{X_i} + \\mathbf{R}, \\mathbf{Y_i} + \\mathbf{S})$$$. You would get $$$\\mathbf{A_i}$$$ enjoyment from eating it and your twin\nwould get $$$\\mathbf{B_i}$$$ enjoyment.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$/$$$z$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$\\frac{y}{z}$$$ is the minimum\nabsolute value of the difference between your and your twin's total enjoyment that can be achieved\nwith a single vertical cut as an irreducible fraction (that is, $$$z$$$ must be positive and of\nminimum possible value).\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 45 seconds.<br/>\nMemory limit: 1 GB.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{N} \\le 100$$$.<br/>\n$$$3 \\le \\mathbf{W} \\le 10^9$$$.<br/>\n$$$3 \\le \\mathbf{H} \\le 10^9$$$.<br/>\n$$$-10^9 \\le \\mathbf{A_i} \\le 10^9$$$, for all $$$i$$$.<br/>\n$$$-10^9 \\le \\mathbf{B_i} \\le 10^9$$$, for all $$$i$$$.<br/>\n$$$0 \\le \\mathbf{P} \\le 10^9$$$.<br/>\n$$$-10^9 \\le \\mathbf{Q} \\le 10^9$$$.<br/>\n$$$0 \\le \\mathbf{R} \\le 10^9$$$.<br/>\n$$$-10^9 \\le \\mathbf{S} \\le 10^9$$$.<br/>\nThe three vertices of the mold $$$(0, 0)$$$, $$$(\\mathbf{P}, \\mathbf{Q})$$$, and $$$(\\mathbf{R}, \\mathbf{S})$$$\n  are not collinear.<br/>\nThe three vertices of each triangular icing patch are strictly inside the cake's borders.\nFormally:<br/>\n&nbsp;&nbsp;$$$1 \\le \\mathbf{X_i} \\le \\mathbf{W} - \\max(\\mathbf{P}, \\mathbf{R}) - 1$$$, for all $$$i$$$, and<br/>\n&nbsp;&nbsp;$$$\\max(0, -\\mathbf{Q}, -\\mathbf{S}) + 1 \\le \\mathbf{Y_i} \\le \\mathbf{H} - \\max(0, \\mathbf{Q}, \\mathbf{S}) - 1$$$, for all $$$i$$$.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1IPLk193AZ8mZpGOdY9hjO7QHFB98RmjLbnkMCLSuBHkU84iskdPFqp93Kfd3MzJHpLHNZhf4-usoMzbyWXHu-r75hRyHGW6KpMtQ/cutting_cake_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n1 5 5\n3 -1 2 2\n1 2 -10 5\n2 100000000 50000000\n80000000 0 40000000 40000000\n5000001 2500000 500 -501\n15000000 5000000 501 -400\n2 10 10\n0 2 4 2\n2 2 -4 5\n4 6 -6 5\n3 622460462 608203753\n486076103 36373156 502082214 284367873\n98895371 126167607 823055173 -740793281\n26430289 116311281 -398612375 -223683435\n46950301 278229490 766767410 -550292032\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2ijmOQ4PKrEYYdRP9vE91PR88QHM1ETsNyawFyJOEXI6k1rOAEsUEn4MWy1cqdVscwBjvYa5_lQ0r1p5OOBgtFJMqH7M4T8e1TgaDN/cutting_cake_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 5/1\nCase #2: 288309900002019999899/320000000000000000\nCase #3: 37/4\nCase #4: 216757935773010988373334129808263414106891/187470029508637421883991794137967\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nIn Sample Case #1, there is a single icing patch. The optimal cut is to the left of the patch.\nYou will eat no icing and receive $$$0$$$ enjoyment. Your twin will eat all of the icing patch\nand receive $$$5$$$ enjoyment from it.\nThe absolute value of the difference between your and your twin's enjoyments is $$$|0 - 5| = 5$$$.\n</p>\n<div align=center>\n  <div style=\"display: inline-block; flex-direction: column; padding: 20px 60px 0 60px;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U186yadWgicTTvRjf2bpQVPOsHEJicn542bLWHYVgr0QP51f5wxQ9RuBVJaR-khhcdsFnVWttCiUMCEsQ/sample_1a.png\" alt=\"The cake in the first sample with a single icing patch.\">\n    </div>\n  </div>\n  <div style=\"display: inline-block; flex-direction: column; padding: 20px 60px 0 60px;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3W_wo8cDOUF7TO_XG-X-uiWoPojxknfxHQuOJ7VHZEZ2jjzDhU_lRvXI0zD5t4zQyJAUNEJ0_GrHngVA/sample_1b.png\" alt=\"The cake in the first sample with a cut line at X = 4.5.\">\n    </div>\n  </div>\n</div>\n<p>\nIn Sample Case #2, there are two icing patches. The optimal cut is at $$$X = 15099999.99$$$.\nNotice that the numerator and denominator of the answer can get very large.\n</p>\n<div align=center>\n  <div style=\"display: inline-block; flex-direction: column; padding: 20px 60px 0 60px;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U21qlnH9T6aGwFMJoUs3uroQPTX-ff6WyRlS_QkNXK933ZSQ_olt-J-R1sTmnWExRTvYae3U8sZOQCS4A/sample_2a.png\" alt=\"The cake in the second sample with 2 icing patches.\">\n    </div>\n  </div>\n  <div style=\"display: inline-block; flex-direction: column; padding: 20px 60px 0 60px;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1_UCIuUHQbIUzfyYwvtIdsv3n4ubZJ_V3dayjyYZxVDVsmrXXHlQr6ueDnI5a1pH9nTyEdgcaGzEiEzg/sample_2b.png\" alt=\"The cake in the second sample with a cut line at X = ~1.51e7.\">\n    </div>\n  </div>\n</div>\n<p>\nIn Sample Case #3, there are two icing patches. The optimal cut is at $$$X = 4$$$. You will eat\n75% of the first icing patch and receive $$$-3$$$ enjoyment from it. Your twin will eat 25% of the\nfirst icing patch and all of the second icing patch getting $$$5 \\cdot 0.25 + 5 = 6.25$$$\nenjoyment. The absolute value of the difference between your and your twin's enjoyments is\n$$$|-3 - 6.25| = 9.25 = \\frac{37}{4}$$$.\n</p><p>\nNotice that cutting at $$$X = 1$$$ would give you\n$$$0$$$ enjoyment and your twin $$$10$$$ enjoyment. While both of those values are greater\nthan the corresponding enjoyment when cutting at $$$X = 4$$$, the difference between them\nis $$$10 \\gt 9.25$$$, which means cutting at $$$X = 4$$$ is preferable anyway.\n</p>\n<div align=center>\n  <div style=\"display: inline-block; flex-direction: column; padding: 20px 60px 0 60px;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1ME2Y9Sj4chn5hcv9wBfhYxAnjc_wCfGnB0-bJkoq4sIYI5zfl-qFk3jTGMHqRYku4FfQFIaOAi4wodQ/sample_3a.png\" alt=\"The cake in the third sample with 2 icing patches.\">\n    </div>\n  </div>\n  <div style=\"display: inline-block; flex-direction: column; padding: 20px 60px 0 60px;\">\n    <div>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1mYLbEpKKLQ5JC7xjMMDMhRfd8Y13Y1WsFQ6xLYZvnaHp5F_B85Il7N8CSNDMeSu9o7SO9s2iIsTnHrQ/sample_3b.png\" alt=\"The cake in the third sample with a cut line at X = 4.\">\n    </div>\n  </div>\n</div>\n<p>\nIn Sample Case #4, there are three icing patches. The optimal cut is at\n$$$X \\approx 521241077.6027$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":20}],"title":"Cutting Cake","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<a href=\"https://youtu.be/EuFov-EPw-4\" target=\"_blank\">View problem and solution walkthrough video</a>\n<p>\nThe first thing to do to solve this problem is seeing it as a graph theoretical\nproblem. We can consider the directed graph $$$G$$$ where each node represents\na color and there is an edge $$$c_1 \\to c_2$$$ if $$$\\mathbf{L_{c_1}} = c_2$$$ or\n$$$\\mathbf{R_{c_1}} = c_2$$$ (if $$$\\mathbf{L_{c_1}} = \\mathbf{R_{c_1}} = c_2$$$, then there are two\nedges $$$c_1 \\to c_2$$$). Nodes at level $$$K$$$ in the tree correspond\nto the last node of paths in $$$G$$$ of length $$$K$$$ starting at the black node\n(the full paths correspond to the branches that go into those nodes).\nTherefore, if $$$M$$$ is the adjacency matrix of $$$G$$$,\n$$${M^K}_{i,j}$$$ is the number of descendants of color $$$j$$$ that are\n$$$K$$$ levels below a given node of color $$$i$$$. In particular,\n$$$\\sum_j {M^K}_{\\text{black},j}$$$ is the number of nodes at level $$$K$$$,\nand we can sum that over all $$$K \\le K'$$$ to get the number of nodes at levels\nup to $$$K'$$$.\n</p>\n<h4>Matrix powers</h4>\n<p>\nWe can calculate $$$M^K$$$ with only $$$O(\\log K)$$$ matrix multiplications.\nMoreover, we need only values $$$K \\le \\mathbf{B}$$$, and since we will do this\nfor the same $$$M$$$ and lots of different\nvalues of $$$K$$$, we can memoize $$$M^{2^p}$$$ for each integer\n$$$p \\le \\log_2 \\mathbf{B})$$$ by starting with $$$M^1 = M^{2^0}$$$ and then using\n$$$M^{2^{p+1}} = (M^{2^p})^2$$$ to calculate each subsequent power. This\nrequires $$$O(\\log \\mathbf{B})$$$ matrix multiplications to initialize, or\n$$$O(\\mathbf{N}^3 \\log \\mathbf{B})$$$ time. Since $$$K$$$ can be expressed uniquely as\na sum of powers of $$$2$$$, we can calculate $$$M^K$$$ as the product of those\npowers. While this still requires the same worst-case time, it is much faster\nin practice. More importantly, if we want to calculate $$$VM^K$$$ for a vector\n$$$V$$$ we can do that by multiplying $$$V$$$ by each matrix, requiring only\n$$$O(\\log \\mathbf{B})$$$ vector-matrix multiplications, which is\n$$$O(\\mathbf{N}^2 \\log \\mathbf{B})$$$ time.\n</p>\n<h4>Summation of powers of matrices</h4>\n<p>\nLet $$$x$$$ be a tree node of color $$$i$$$. We can calculate the number of descendants\nof $$$x$$$ up to level $$$K'$$$ as\n$$$\\sum_{K \\le K'} \\sum_j {M^K}_{i,j} = \\sum_j (\\sum_{K \\le K'} {M^K})_{i,j}$$$.\nWe can calculate $$$\\sum_{K \\le K'} M^K$$$ efficiently with a divide and conquer approach, using\n$$$M^0 + M^1 + M^2 + \\dots + M^{2K-1} = (I + M^K) (M^0 + M^1 + \\dots + M^{K-1}),$$$\nwhere $$$I$$$ is the identity matrix. This would require $$$O(\\log K')$$$ matrix\npowers, or $$$O(\\log^2 K')$$$ matrix multiplications. By overlapping the divide and conquer\nneeded to calculate the matrix powers and the summation, we can get that down to $$$O(\\log K')$$$\noverall.\n</p><p>\nNotice that the values in the matrices can be really big. However, any value above $$$\\mathbf{B}$$$ is\nequivalent for us, so we can do all math by capping the results at anything larger than $$$\\mathbf{B}$$$.\nThis allows to implement this with regular 64 bit integers and without adding a\nlarge-integer arithmetic factor to the overall time complexity.\n</p>\n<h3>Test Set 1</h3>\n<p>\nWith the setup done in the previous paragraphs, solving Test Set 1 is straightforward. Since node\n$$$\\mathbf{A}$$$ is always the root in this case, the answer is the level of node $$$\\mathbf{B}$$$. We can get $$$\\mathbf{B}$$$'s\nlevel by using\n<a href=\"https://en.wikipedia.org/wiki/Bisection_method\" target=\"_blank\">bisection</a> on the function\n\"number of nodes up to a certain level\". We saw that we can implement that function efficiently\nabove with $$$O(\\log \\mathbf{B}')$$$ matrix multiplications, making this algorithm run in\n$$$O(\\mathbf{N}^3 \\log^2 \\mathbf{B})$$$. Since the divide and conquer of the bisection and the matrix\nmultiplication can be overlapped, this can be reduced to $$$O(\\mathbf{N}^3 \\log \\mathbf{B})$$$ overall,\nwhich allows for slower implementations/languages.\n</p>\n<h3>Test Set 2</h3>\n<p>\nThe solution for Test Set 2 uses the same framing and graph theory as the solution for Test Set 1,\nbut it requires a lot of additional work.\n</p><p>\nFirst, we will define a new naming convention for nodes in the tree. We will uniquely identify\na node in the tree with a pair of numbers $$$(h, x)$$$. The pair $$$(h, x)$$$ represents the node\nat level $$$h$$$ that has exactly $$$X$$$ other nodes at level $$$h$$$ to its left. This is similar\nto a coordinate system. We can convert from a node index to one of these pairs as follows. First,\nwe can obtain the level of a node given its index as we did in the Test Set 1 solution. Then,\nif the node index is $$$D$$$ and the level is $$$h$$$, we can find $$$X$$$ as the difference\nbetween $$$D-1$$$ and the number of nodes up to level $$$h-1$$$, which we saw how to calculate as\nwell. Now, we turn our attention to solving the problem for two nodes identified as pairs.\n</p>\n<h4>A slow solution</h4>\n<p>\nWe will work our way down the tree, while always maintaining both of the input nodes $$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$\ninside the current subtree. As state we will keep the color of the root of the current subtree,\nand the pairs representing $$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$ relative to the current subtree. Initially, the color of\nthe current root is black, and the pairs that represent $$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$ are calculated as mentioned\nin the previous paragraph.\n</p><p>\nGiven the color of a current root $$$C$$$ and a pair $$$(h, x)$$$ representing a non-root node,\nwe can check whether $$$(h, x)$$$ is in the left or right subtree as follows: The number of nodes\nat level $$$h$$$ in the left subtree is exactly the number of descendants of $$$L_C$$$ at level\n$$$h-1$$$. Since this is simply $$$e_{L_C} M^{h-1}$$$, where $$$e_i$$$\nis the vector that has a $$$1$$$ in position $$$i$$$ and $$$0$$$ in all other positions,\nwe can calculate it in $$$O(\\mathbf{N}^2 \\log \\mathbf{B})$$$ time, as we saw in the opening\nparagraphs. Therefore, we can simply compare that number with $$$x$$$ to make our decision.\n</p><p>\nThe observation above leads to an algorithm: Given the two target nodes as pairs $$$(h_1, x_1)$$$\nand $$$(h_2, x_2)$$$ and current root color $$$c$$$,\nif $$$\\min(h_1, h_2) = 0$$$, then the answer is $$$h_1 + h_2$$$. Otherwise,\nwe check in which subtree each of the nodes is. If both are in different subtrees, the answer is\nalso $$$h_1 + h_2$$$. If not, we move into the subtree. If we move into the left subtree,\nthe root switches to $$$L_c$$$ and the node represented by the pair $$$(h, x)$$$ is now represented\nby the pair $$$(h-1, x)$$$. If we move into the right subtree, the new root color is $$$R_c$$$\nand the node represented by the pair $$$(h, x)$$$ is now represented by the pair $$$(h-1, x - t)$$$\nwhere $$$t$$$ is the number of descendants at level $$$h-1$$$ of $$$L_c$$$ (the same amount we\nneeded to calculate to decide on which subtree $$$(h, x)$$$ belonged).\n</p><p>\nThis algorithm would require $$$min(h_1, h_2)$$$ steps, and can be too slow if that is a large\namount, which can happen.\n</p>\n<h4>Speeding up the solution</h4>\n<p>\nInstead of speeding up all cases, we focus only on the ones that definitely need the speed up.\nIf the graph implied by $$$\\mathbf{L}$$$ and $$$\\mathbf{R}$$$ has any\n<a href=\"https://en.wikipedia.org/wiki/Reachability\" target=\"_blank\">reachable</a> color\nbelonging to more than one cycle, then\nthe total number of nodes of the tree grows exponentially. In this case, the $$$h$$$ values in the\npair representation of the input nodes are necessarily small (logarithmic on the node indices)\nand the algorithm above just works. So, we need a faster algorithm only for the case in which\nevery reachable color belongs to at most one cycle.\n</p><p>\nIn the case in which the current root is a color that does not belong to a cycle, we proceed as\nin the slow algorithm and move one step down. After this, the color left behind will not be a root\ncolor again. If the root color $$$c_1$$$ belongs to a cycle $$$c_1, c_2, \\dots, c_h$$$, then\nwe want to do multiple steps at once. Consider the branch of the tree that is obtained\nby going through the cycle $$$p$$$ times, with $$$p \\times h \\lt \\min(h_1, h_2)$$$. The branch\nsplits the tree in $$$3$$$ parts: descendants of the last node of the branch, nodes that are\nto the left of that subtree, and nodes that are to the right of that subtree. Our strategy is to\nfind out where in that partition are our target nodes. If they are both in the middle (right below\nthe branch), we go into it. Otherwise, we cannot do that many passes without leaving one of\nthe target nodes outside of our current subtree. We can try decreasing powers of $$$2$$$ as\nvalues for $$$p$$$, which requires each value to be tried only once. After we try $$$p=1$$$\n(the smallest integer power of $$$2$$$),\nwe fall back to moving one step at a time as in the slow solution until we reach a root color\noutside of the cycle (this requires at most $$$h$$$ single move steps).\n</p><p>\nTo do the fast moves, we calculate the vector representing the number of nodes of each color\nthat lie exactly $$$p \\times h$$$ levels below our current root on the left side.\nWe can calculate it for $$$p=1$$$ as $$$\\sum_j  e_{c_1} M^{h-j+1}$$$ where\nthe summation is only over the values $$$j$$$ for which the step $$$c_j \\to c_{j+1}$$$ (or\n$$$c_h \\to c_1$$$ if $$$j=h$$$) is to the right.\nFor larger values of $$$p$$$, we take the value for $$$p=1$$$ and multiply it by\n$$$M^0 + M^h + \\cdots + M^{(p-1)h}$$$. This summation can be calculated similarly to the\nsummation over consecutive powers, and it has to be done only once per value of $$$h$$$, of which\nthere are $$$O(\\sqrt{\\mathbf{N}})$$$ different ones. We can calculate the right side analogously.\n</p><p>\nFrom the vectors at level $$$p \\times h$$$ we can find out how many nodes at level $$$h_i$$$\nare on each side by multiplying by $$$M^{h_i - p \\times h}$$$. With those values, we can decide\nsimilarly to how we did in the slow solution whether both nodes are in the middle subtree. If\nwe were to move into the middle subtree, we simply subtract $$$p \\times h$$$ from both $$$h_i$$$\nvalues and the total number of nodes from the level that were left behind on the left side from\nthe $$$x_i$$$ values, as we did in the slow solution.\n</p><p>\nWith the details above, this leads to an algorithm that takes\n$$$O(\\mathbf{N}^{3.5} \\log \\mathbf{N} + \\mathbf{N}^2 \\log \\mathbf{B})$$$ time to run. If less care is taken with how\nmatrix powers and summations of matrix powers are calculated, larger complexities may arise. The\ntime limit is purposefully not tight, so algorithms with larger complexities that are logarithmic\nin $$$\\mathbf{B}$$$ can also get the problem correct.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1yYSSCxek1Fm2pIbwLQCkMIystybIgkSUI4Jlk-8cDAlQm5Zdoau8gTkmQDMQQTaus2xwvT_0X/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000084fc01","statement":"<h3>Problem</h3>\n<p>\nThis problem is about finding the distance between two nodes of a strictly binary tree. Oh, is\nthat too easy?! Ok, the tree is potentially infinite now. Keep it up and we will start going up\nthe aleph numbers.\n</p><p>\nIn this problem, a tree is either a single node $$$X$$$, or a node $$$X$$$ with two\ntrees attached to it: a left subtree and a right subtree. In both cases, $$$X$$$\nis the root of the tree. If the tree is not a single node,\nthe roots of both the left and right subtrees are the only children of $$$X$$$.\n</p><p>\nThere is a set of colors numbered from $$$0$$$ to $$$\\mathbf{N}$$$, inclusive.\nEach node is of exactly one color.\nThere might be zero, one, or  multiple nodes of each\ncolor. Each node of color $$$0$$$ (white) is a leaf node (that is, it\nhas no children).\nEach node of color $$$i$$$, for $$$1 \\le i \\le \\mathbf{N}$$$, has exactly $$$2$$$\nchildren: the left one is color $$$\\mathbf{L_i}$$$ and the right one is color $$$\\mathbf{R_i}$$$.\nThe root of the tree is color $$$1$$$ (black).\nNote that the tree may have a finite or countably infinite number of nodes.\n</p><p>\nFor example, the following picture illustrates a finite tree defined by the lists\n$$$\\mathbf{L} = [3, 0, 0]$$$ and $$$\\mathbf{R} = [2, 0, 2]$$$. Color $$$2$$$ is blue and color $$$3$$$ is yellow.\n</p>\n<p align=center>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1L4fzQartLybfl4IyWouXJaGR8KIm5VGVfm0cD2Kf6KCe81lE2d2yF0sU0Q3Nj38_Na_pYzjY6YWiDJ1-iTZXLLXVZH3Z2ZaE/finite_tree_no_numbers.png\" alt=\"A tree with colored nodes\" style=\"max-width:300px;\">\n</p><p>\nThe distance between two nodes in the tree is the minimum number of steps that are needed to get\nfrom one node to the other. A step is a move from a node to its direct parent or its direct\nchild.\n</p><p>\nNodes in the tree are indexed using positive integers. The root has index $$$1$$$. Then, other\nnodes are indexed using consecutive integers, with nodes with smaller distances to the root being\nindexed\nfirst. For nodes that are equidistant to the root, nodes that are further to the left\nare indexed first. For example, the following picture adds indices to each node in the tree\nwe presented before. Notice that each node's index is independent from its color.\n</p><p align=center>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1caeAu3UkgmHF51y9XZ-rP4iM5d9aStMCD8Cz0h-nYiZ-_BqiSG442wuqrx4NcGjI0wi4dWExoZFQQEqbh/finite_tree.png\" alt=\"A tree with colored and indexed nodes\" style=\"max-width:300px;\">\n</p><p>\nAs another example, the following picture shows the first $$$33$$$ nodes of an infinite tree\ndefined by the lists $$$\\mathbf{L} = [3, 4, 2, 4]$$$ and $$$\\mathbf{R} = [2, 2, 4, 0]$$$. Color $$$4$$$ is green.\n</p><p align=center>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0WQ3yxHv6K72QIc2AYydGn7QgC3V6RD0uWDXyjAxG57Zz8xti1Y-XRpmwlKQUlNct8aJ1EtrgQx5jvvapQ2Po/infinite_tree.png\" alt=\"An infinite tree with colored and indexed nodes\" style=\"max-width:500px;\">\n</p><p>\nGiven the lists $$$\\mathbf{L}$$$ and $$$\\mathbf{R}$$$ that define a tree and the indices of two different nodes in the tree,\nreturn the distance between those two nodes.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$.\n$$$\\mathbf{T}$$$ test cases follow. Each test case consists of three lines. The first line contains\n$$$\\mathbf{N}$$$, $$$\\mathbf{A}$$$, and $$$\\mathbf{B}$$$: the size of the lists that define the tree, and the indices of the two\nnodes whose distance you need to calculate, respectively.\nThe second line contains $$$\\mathbf{N}$$$ integers\n$$$\\mathbf{L_1}, \\mathbf{L_2}, \\dots, \\mathbf{L_N}$$$\nand the third line contains $$$\\mathbf{N}$$$ integers\n$$$\\mathbf{R_1}, \\mathbf{R_2}, \\dots, \\mathbf{R_N}$$$, as described above.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is\nthe distance between the nodes with indices $$$\\mathbf{A}$$$ and $$$\\mathbf{B}$$$ in the tree defined by the lists $$$\\mathbf{L}$$$\nand $$$\\mathbf{R}$$$.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 90 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{N} \\le 50$$$.<br/>\n$$$0 \\le \\mathbf{L_i} \\le \\mathbf{N}$$$.<br/>\n$$$0 \\le \\mathbf{R_i} \\le \\mathbf{N}$$$.<br/>\n$$$\\mathbf{A} \\lt \\mathbf{B} \\le 10^{18}$$$.<br/>\nThe tree defined by $$$\\mathbf{L}$$$ and $$$\\mathbf{R}$$$ has at least $$$\\mathbf{B}$$$ nodes.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$\\mathbf{A} = 1$$$.\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{A} \\le 10^{18}$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3dIB0gY6l9Lw_QLraE_-RX1Yl4rQWM1awP0k_QzfNkLDeRf-2OTrD4mvN7XA1kZJThZgq7bYKGzWbg6ZTib6yHqNCUX3juUhP0/infinitree_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">5\n3 1 8\n3 0 0\n2 0 2\n3 1 5\n3 0 0\n2 0 2\n4 1 27\n3 4 2 4\n2 2 4 0\n4 1 28\n3 4 2 4\n2 2 4 0\n3 1 10\n1 3 1\n3 2 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U09K5_g4JHa2uC3U21EcFAavm2BZVwR1qM4KfETpz2X7a16ciWOjDXCueY3GQb_VniauAneGVSEb7FakzxYMZbxV9mOP-mvr_RvJQ/infinitree_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 2\nCase #3: 4\nCase #4: 5\nCase #5: 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  The tree in Sample Cases #1 and #2 is the first tree shown in the statement. The tree\n  in Sample Cases #3 and #4 is the last tree shown in the statement. The same is true for the\n  additional samples below. In Sample Case #5, notice that some colors may not be present in the\n  tree.\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2M0blr3L1PyE6e-khjmotQNGbRmkdM-41LINpMhYqO62zk2oOABnuXKHJ1CYW2mes8qVDeyCiXEAA3mkiLbyKTUKmehoey81DE/infinitree_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">4\n3 5 7\n3 0 0\n2 0 2\n3 4 9\n3 0 0\n2 0 2\n4 11 18\n3 4 2 4\n2 2 4 0\n4 21 22\n3 4 2 4\n2 2 4 0\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1tDMhWrUnqv980zBssQRPdzR6siL-xINpA_jf9ultQlDvu4KPHyuKcEuoSdpLaY606_C7fcBdNGkrc-sB2dbnnh7gpjoJjqtL58w/infinitree_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 4\nCase #2: 3\nCase #3: 5\nCase #4: 8\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":25},{"type":2,"type__str":"HIDDEN","value":40}],"title":"Infinitree","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000436329","type":1,"type__str":"SPECTATOR"},"title":"World Finals 2021"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
