{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1618677000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"00000000004360f2","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\r\n  This year's Code Jam to I/O for Women came later in the year than\r\n  its <a href=\"https://codingcompetitions.withgoogle.com/codejamio/archive\" target=\"_blank\">\r\n  recent predecessors</a>, but it was hopefully worth the wait!\r\n</p><p>\r\n  The round started with <i>Impartial Offerings</i>, helping the budget-conscietious\r\n  Aroha stay generous with her beloved pet friends. One small insight allowed contestants\r\n  to get some points, and a second one was enough to solve the full problem greedily.\r\n  <i>Inconstant Ordering</i> followed with a more abstract scenario, and this time the greedy\r\n  strategy was less apparent, but more straightforward to code. There was larger leap in\r\n  difficulty landing into the third problem, <i>Introductions Organization</i>, in which some\r\n  clever graph modeling was needed. Finally, <i>Irrefutable Outcome</i> had three test sets:\r\n  some careful brute force would get you a few points and applying some dynamic programming\r\n  to it would get you some extra, but a thorough analysis of the game was needed to\r\n  obtain the full score.\r\n</p><p>\r\n  <b>IloveShokupanman</b> was the first one to a perfect score (something that hasn't been achieved\r\n  since 2017), and landed at the top of the scoreboard once the round concluded. <b>ITO444</b> came in\r\n  with a super close second place finishing only 10 penalty seconds behind, and\r\n  <b>giada</b> rounded out the top 3. In total, 10 people managed a perfect score. More than 5000\r\n  people scored some points out of the more than 6600 that submitted a solution.\r\n</p><p>\r\n  Unfortunately, there was an incorrect limit in the Hidden test set of Introductions Organization,\r\n  which we discovered only after the Hidden results were already revealed. The test data was\r\n  corrected to match the statement that was displayed during the round.\r\n  All affected solutions have been\r\n  re-judged and points have been updated accordingly. As a result, ranks may change\r\n  slightly from what was previously displayed.  We apologize for the confusion.\r\n</p><p>\r\n  We hope that Code Jam to I/O for Women 2021 was fun and challenging,\r\n  and that everyone finished having learned something new. Congratulations to those\r\n  in the top 150: you earned special tickets to virtual Google I/O 2021! You will be\r\n  contacted by the team soon to claim your prize.\r\n</p><p>\r\n  We look forward to having everyone back again in 2022.\r\n  Until then, the current\r\n  <a href=\"http://codingcompetitions.withgoogle.com/codejam\" target=\"_blank\">Code Jam</a>\r\n  season is in full swing, and you can also train and compete year round with\r\n  <a href=\"http://codingcompetitions.withgoogle.com/kickstart\" target=\"_blank\">Kick Start</a>.\r\n</p>\r\n<hr>\r\n<p>\r\n  <b>Cast</b>\r\n</p>\r\n<p>\r\n  Impartial Offerings: Written by Frances Cooper. Prepared by Vivian Tsai.\r\n</p><p>\r\n  Inconstant Ordering: Written by Daria Tupikina. Prepared by Sadia Atique.\r\n</p><p>\r\n  Introductions Optimization: Written by Pablo Heiber. Prepared by Jonathan Irvin Gunawan.\r\n</p><p>\r\n  Irrefutable Outcome: Written and prepared by Sherry Wu.\r\n</p><p>\r\nSolutions and other problem preparation and review by Anushi Maheshwari, Balganym Tulebayeva,\r\nBianca Shimizu Oe, Bohdan Pryshchenko, Cindy Le, Daria Tupikina, Deepika Naryani, Diana Tanase,\r\nHsin-Yi Wang, Ian Tullis, Jasmine Yan, Jonathan Irvin Gunawan, Liang Bai, Marina Vasilenko,\r\nMax Ward, Md Mahbubul Hasan, Pablo Heiber, Pi-Hsun Shih, Sadia Atique, Samiksha Gupta, Sherry Wu,\r\nShuhan Fan, Swetha Srinivasan, Teja Vardhan Reddy Dasannagari, Timothy Buzzelli, and Vivian Tsai.\r\n</p><p>\r\nAnalysis authors:\r\n</p><ul>\r\n  <li>Impartial Offerings: Sadia Atique.</li>\r\n  <li>Inconstant Ordering: Samiksha Gupta.</li>\r\n  <li>Introductions Optimization: Balganym Tulebayeva, Ian Tullis,\r\n    Jonathan Irvin Gunawan, and Pablo Heiber.</li>\r\n  <li>Irrefutable Outcome: Vivian Tsai.</li>\r\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1618668000000,"tasks":[{"analysis":"<p>\n  One observation that helps us find a solution is: we will never need to give any pet more\n  than $$$\\mathbf{N}$$$ treats. So for each pet, we need to consider at most $$$\\mathbf{N}$$$ options for treats,\n  $$$1, 2, \\dots, \\mathbf{N}$$$. We can quickly verify that this observation is true with a simple\n  argument.\n  If there is a positive integer $$$X$$$ such that no pet receives $$$X$$$ and some pets receive\n  $$$X+1$$$, then we can give all those pets $$$X$$$ instead, keep everything valid and reduce the\n  total amount of treats.\n</p>\n<p>\n  For Test Set 1, limits are small enough for a brute force solution. For each pet, we can try all\n  the numbers ($$$1, 2, \\dots, \\mathbf{N}$$$) of treats, and check if that assignment fulfills our\n  criteria. Then we output the minimum total from among the valid assignments.\n  There are $$$\\mathbf{N}^\\mathbf{N}$$$ possible assignments.\n  For each assignment, we can check the validity criteria by checking\n  that all pairs of pets satisfy the impartiality rule in $$$O(\\mathbf{N}^2)$$$ time.\n  This makes the overall time\n  complexity $$$O(\\mathbf{N}^{\\mathbf{N}+2})$$$, which is sufficient for Test Set 1.\n</p>\n<p>\n  For Test Set 2, we need to find the solution faster.\n</p>\n<p>\n  All pets of the same size must get the same amount of treats, and any pet must get strictly\n  more treats than all pets strictly smaller than it. That means that if we sort the pets by\n  size (in non-decreasing order), the number of treats each pet must get is also sorted. Since we need to\n  minimize the number of treats, we can start by giving $$$1$$$ treat to the smallest animal.\n  Then, for every animal in the sorted list, we can give it:\n<ul>\n  <li>the same number of treats as the previous one, if it is the same size as the previous one.</li>\n  <li>$$$1$$$ more treat than the previous one, if it is bigger.</li>\n</ul>\n</p><p>\n  By distributing treats like this, we are keeping the invariant that the assignment is optimal\n  for the set of pets that have already received treats. When considering the next pet, we are\n  giving the minimum amount possible. Therefore, we are giving the minimum number of treats whilst\n  also fulfilling the condition.\n</p>\n<p>\n  The sorting of the pets takes $$$O(\\mathbf{N} \\log \\mathbf{N})$$$ time, and the assigning of the\n  treats can be done in $$$O(\\mathbf{N})$$$ time. This makes the overall time complexity\n  $$$O(\\mathbf{N} \\log \\mathbf{N})$$$, which is sufficient to pass Test Set 2.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2BS8N5p8evu6Per8Dob78G_GtljgoOerTZOoj1dwGPzO2NuTriHLNy-861idn5118orRwoblBo/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000777098","statement":"<h3>Problem</h3>\n<p>\nAroha is a big animal lover, so she spends some free time taking care of many of her\nloved ones' pets. She likes to offer them treats, but wants to do that in an impartial way.\n</p><p>\nAroha decided that it was logical for pets of the same size to get the same amount of treats\nand for larger pets to get strictly more treats than smaller ones. For example,\nif she has $$$4$$$ pets with her of sizes $$$10, 20, 10$$$, and $$$25$$$, she could offer\n$$$2$$$ treats to each pet of size $$$10$$$, $$$3$$$ treats to the pet of size $$$20$$$, and\n$$$5$$$ treats to the pet of size $$$25$$$. This requires her to buy a total of $$$2+3+2+5=12$$$\ntreats. However, she can offer treats to all $$$4$$$ pets and comply with her own rules with\na total of just $$$7$$$ treats by offering $$$1$$$ each to the pets of size $$$10$$$,\n$$$2$$$ to the pet of size $$$20$$$, and $$$3$$$ to the pet of size $$$25$$$.\n</p><p>\nHelp Aroha plan her next pet day. Given the sizes of all pets that will\naccompany her, compute the minimum number of treats she needs to buy to be able to offer\nat least one treat to all pets while complying with her impartiality rules.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case consists of two lines. The first line of a test case contains a single\ninteger $$$\\mathbf{N}$$$, the number of pets in Aroha's next pet day. The second line of a test\ncase contains $$$\\mathbf{N}$$$ integers $$$\\mathbf{S_1}, \\mathbf{S_2}, \\dots, \\mathbf{S_N}$$$, representing the sizes\nof each pet.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the\nminimum number of treats she needs to buy to be able to offer\nat least one treat to all pets while complying with her impartiality rules.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 10 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{S_i} \\le 100$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N} \\le 5$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N} \\le 100$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3DxctLAElZaBKd3I0GzJSQptVHBdLDRzfcJ09AgttVsRR7uxSCRQXs9PdBiob1peMA1Ms2NtnDT1wBt2dla2faW-hotF-fIyGTmq1tbNC2KCXK/impartial_offerings_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n4\n10 20 10 25\n5\n7 7 7 7 7\n2\n100 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2kcTLV3D3eGDbz0ItSVsMjcWAvDxjX10zyp5-gTRJvErlXk3ZrU8-3ue4B8hZnv7qJSuxjdgKfnlTURN9CJnIkISq1eytCw07ODBzcghoUCuQRZQ/impartial_offerings_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 7\nCase #2: 5\nCase #3: 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  Sample Case #1 is the case explained above.\n</p>\n<p>\n  In Sample Case #2, all pets are of the same size, so Aroha must offer them all the same amount\n  of treats. The minimum total is attained by offering each pet a single treat.\n</p>\n<p>\n  In Sample Case #3, both pets are of different size so they need a different amount of treats\n  each. Buying less than $$$2$$$ treats is not enough to give treats to both pets.\n  Buying $$$2$$$ treats and making sure both pets get something would force\n  Aroha to give both pets the same amount, despite them having different size.\n  Using $$$3$$$ treats Aroha can give $$$1$$$ to the small pet and $$$2$$$ to the\n  big pet and thus comply with all her rules.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":6},{"type":1,"type__str":"VISIBLE","value":10}],"title":"Impartial Offerings","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n<p>\n  It is given that a valid string must start with A.\n</p>\n<p>\n  For $$$\\mathbf{N} = 1$$$, the only block $$$B_1$$$\n  should therefore start with a character greater than <code>A</code>. To keep building\n  the alphabetically first valid string, we start $$$B_1$$$ with <code>B</code> which is\n  just greater than <code>A</code>. We keep on incrementing the character as we move\n  right to ensure that $$$B_1$$$ is strictly increasing. Notice that we will eventually end up\n  with a prefix of <code>BCDE..XYZ</code> as $$$B_1$$$. As $$$\\mathbf{L_i} \\le 25$$$, we will never\n  run out of characters for this.\n</p>\n<p>\n  For $$$\\mathbf{N} = 2$$$, we construct the first block $$$B_1$$$ using the process described for\n  $$$\\mathbf{N} = 1$$$.\n  We now evaluate the possible ways to fill the strictly decreasing second block $$$B_2$$$.\n  We try to start $$$B_2$$$ with the smallest possible character to get the alphabetically\n  first string. This implies that $$$B_2$$$ will end with the smallest character in the alphabet\n  which is <code>A</code>. So, we start filling $$$B_2$$$ from the end with <code>A</code> and\n  move to the left, incrementing the character.\n</p>\n<p>\n  Let $$$b_1$$$ be the last character in $$$B_1$$$ and $$$b_2$$$ be the first character in\n  $$$B_2$$$.\n  If $$$b_1 \\gt b_2$$$, then we will always get a valid string as it ensures that\n  $$$B_2$$$ is strictly decreasing. On the other hand if $$$b_1 \\le b_2$$$, then the final\n  string is invalid. For example, if $$$\\mathbf{L_1}=2$$$ and $$$\\mathbf{L_2}=4$$$, the resulting string\n  from the above process will be <code>ABCDCBA</code> which is invalid.\n</p>\n<p>\n  To ensure that $$$B_2$$$ is always strictly decreasing, we update $$$b_1$$$ with the\n  character just greater than $$$b_2$$$. This will guarantee that the string is valid and\n  alphabetically the first one. Again as $$$\\mathbf{L_i} \\le 25$$$, we will never run out of\n  characters while filling $$$B_2$$$. In the above example, <code>ABCDCBA</code> now transforms\n  to a valid string <code>ABEDCBA</code>.\n</p>\n\n<h3>Test Set 2</h3>\n<p>\n  We generalize the above solution for $$$\\mathbf{N} \\gt 2$$$.\n</p>\n<p>\n  If $$$\\mathbf{N}$$$ is even, we can divide the blocks into $$$\\mathbf{N}/2$$$ pairs as\n  |$$$\\mathbf{L_1}$$$,$$$\\mathbf{L_2}$$$|$$$\\mathbf{L_3}$$$,$$$\\mathbf{L_4}$$$|...|$$$\\mathbf{L_{N-1}}$$$,$$$\\mathbf{L_N}$$$| and solve the $$$\\mathbf{N}/2$$$ pairs\n  independently using the same approach as for $$$\\mathbf{N}=2$$$. We can do this as every such pair\n  of blocks will end with <code>A</code>.\n</p>\n<p>\n  If $$$\\mathbf{N}$$$ is odd, we solve for $$$\\mathbf{N}-1$$$ blocks using the above\n  approach and for the last block $$$\\mathbf{L_N}$$$, we treat it as the case when $$$\\mathbf{N}=1$$$.\n</p>\n<p>\n  The time complexity is $$$O(\\mathbf{L_1} + \\mathbf{L_2} + \\cdots + \\mathbf{L_N})$$$ for each test case.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0j-TN8IKp9TJ_yP5SQipbwea0gz7WMoehK26geWxS9Ry1gMq5A4hNn_vWoypnkKa4SPEl0zZLV/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000007772ed","statement":"<h3>Problem</h3>\n<p>\nWe want to build a string with English alphabet uppercase letters in sorted order.\nHowever, we want the order to be sometimes strictly increasing and sometimes strictly\ndecreasing.\n</p><p>\nThe first letter of the string must be <code>A</code>.\nAfter that, the string must contain one or more blocks of letters.\nThe $$$i$$$-th block must contain exactly $$$\\mathbf{L_i}$$$ letters.\nEach letter in the $$$i$$$-th block must be later in the\nalphabet than its preceding letter in the string if $$$i$$$ is odd and earlier in the alphabet\nthan its preceding letter if $$$i$$$ is even. Notice that for the first\nletter of a block, its preceding letter exists, even though it is not in the block.\nStrings that follow all of these rules\nare called valid. There can be multiple valid strings, and we want\nto find the alphabetically first one.\n</p><p>\nFor example, if there are $$$2$$$ blocks of sizes $$$\\mathbf{L_1}=2$$$ and $$$\\mathbf{L_2}=3$$$, the\nstring must have exactly $$$1+\\mathbf{L_1}+\\mathbf{L_2}=1+2+3=6$$$ letters (the $$$1$$$ is for the\ninitial <code>A</code>).\nThe strings <code>XYZYBA</code>, <code>AZYCBA</code> and <code>AYZYBB</code> are not valid\nfor this case because they violate the required starting letter condition, and the ordering\nconditions in the first\nand second block, respectively. The string <code>AYZYBA</code> is valid.\nThe string <code>ABDCBA</code> is also valid and, moreover, it is the alphabetically first valid\nstring.\n</p><p>\nGiven the sizes of the blocks, output the valid string that comes first in alphabetical order\nin the list of all valid strings.\nIt can be shown that, for all inputs within the given limits, at least one valid string exists.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case is described with two lines. The first line of a test case contains\na single integer $$$\\mathbf{N}$$$, the number of blocks. The second line contains $$$\\mathbf{N}$$$ integers\n$$$\\mathbf{L_1}, \\mathbf{L_2}, \\dots, \\mathbf{L_N}$$$, the number of letters each block must have,\nin order.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the valid string\nthat comes first in alphabetical order. It is guaranteed that at least one\nvalid string exists.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 10 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{L_i} \\le 25$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{N} \\le 2$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\n\n$$$1 \\le \\mathbf{N} \\le 100$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1WYuOLbKfdLU_Jt9GsF6MGJ8-wrv7YNJRxY_ouAxf0iEIufmPkD4Bh8rKYlytMwQLt7bvI11RW6SwOySA0QdR1qyPrVQdN3APCiqzfxAXNFz-X/inconstant_ordering_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n2\n2 3\n2\n5 1\n1\n2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1xCZxZ6k4w4MCgzHi-LmK2E5ER-Fc9c1Z0vYbfW3ON2U04lEktnPySBUzM-9wWQEk9DWsWMy3FqTDxrTWzcTLNlzi2Nz91VMnp3-Q-ii6IZuoKtg/inconstant_ordering_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: ABDCBA\nCase #2: ABCDEFA\nCase #3: ABC\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":8},{"type":1,"type__str":"VISIBLE","value":13}],"title":"Inconstant Ordering","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n<p>\n  In the first Test Set, the number of people in a new team is so small that we can\n  use brute force. Even in the worst case, we only have five people: three\n  managers and two non-managers. Since an introduction ties up three people,\n  at most one introduction can take place in each minute. Moreover, there are\n  only $$$\\binom{3}{1}\\times\\binom{4}{2}=18$$$ possible groups of an\n  introducing manager plus two other people, and only some of these will meet\n  the conditions needed for an introduction: the introducing manager must know\n  the other two people, and the other two people must not know each other (or\n  else there would be no point in introducing them).\n</p><p>\n  We can use an exhaustive search to explore all ways of performing an\n  introduction each minute until our target people are acquainted, or until we\n  run out of valid introductions to make, and then return the smallest number\n  of introductions we saw in a valid answer (or $$$-1$$$ if there is no\n  answer). The bounds on the number of possible introductions and on the size\n  of the answer (it cannot exceed $$$3$$$ in this test set) ensure that the space to\n  explore is small, and so our solution will run very quickly.\n</p>\n<h3>Test Set 2</h3>\n<p>\n  To solve Test Set 2 we can model the problem as a\n  <a href=\"https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)\" target=\"_blank\">graph</a>.\n  Every person in the team is a node, and we connect two different nodes with an edge\n  if the represented people know each other when the team was formed.\n  The key insight to solve this test set is to realize that an introduction\n  changes the state from graph $$$G$$$ to a graph $$$H$$$ that is $$$G$$$ with one extra edge,\n  and the extra edge directly connects two nodes that are connected in $$$G$$$\n  by a <a href=\"https://en.wikipedia.org/wiki/Path_(graph_theory)\" target=\"_blank\">path</a>\n  of length $$$2$$$ with an intermediate node that is a manager. Let $$$D_G(v,w)$$$\n  be the distance in $$$G$$$ between nodes $$$v$$$ and $$$w$$$ considering just paths that\n  only use managers as intermediate nodes. In what follows, when we say\n  path or distance, we refer to those terms with the restriction of only\n  using managers as intermediate nodes.\n</p><p>\n  Following the reasoning in the previous paragraph,\n  $$$D_{G}(v,w)-1 \\ge D_{H}(v,w)$$$ &mdash; that is, after an introduction,\n  the distance between two nodes decreases by at most $$$1$$$. Moreover, if\n  $$$D_{G}(v,w) \\gt 1$$$ &mdash; that is, $$$v$$$ and $$$w$$$ do not know each other &mdash;\n  and there is a path of managers between them, there is always a way to make an introduction such\n  that the resulting $$$H$$$ has $$$D_{H}(v,w)=D_{G}(v,w)-1$$$. Let\n  <code>$$$[v = x_0, x_1, x_2, \\dots, x_{D_{G}(v,w)-1}, x_{D_{G}(v,w)} = w]$$$</code>\n  be a minimum path that between $$$v$$$ and $$$w$$$ in $$$G$$$. Since $$$v$$$ and $$$w$$$ do not\n  know each other, $$$x_1$$$ is neither of them, and therefore\n  an intermediate step in the path, so $$$x_1$$$ is a manager.\n  If $$$x_1$$$ introduces $$$v = x_0$$$ and $$$x_2$$$, the\n  path <code>$$$[v = x_0, x_2, \\dots, x_{D_{G}(v,w)-1}, x_{D_{G}(v,w)} = w]$$$</code>\n  of length $$$D_{G}(v,w)-1$$$ is formed in the resulting $$$H$$$, so\n  $$$D_{H}(v,w) = D_{G}(v,w)-1$$$.\n</p><p>\n  The goal of the problem is to use introductions to reduce the distance between\n  a given pair of nodes $$$v$$$ and $$$w$$$ to $$$1$$$ (the minimum possible distance).\n  So, if we could only do one introduction at a time, the answer would be exactly\n  $$$D_{G_0}(v,w)$$$ in the initial graph $$$G_0$$$.\n  Since time considerations don't change whether\n  it is possible for $$$v$$$ and $$$w$$$ to meet, we can already say that $$$v$$$ and $$$w$$$ can\n  meet if and only if there is a path connecting them in the initial graph.\n</p><p>\n  Let us now consider simultaneous introductions.\n  Let $$$G_0, G_1, \\dots, G_k$$$ be a\n  list of graphs where $$$G_i$$$ models the state of the team at time $$$i$$$\n  in an optimal way to make $$$v$$$ and $$$w$$$ meet (meaning $$$k$$$ is the answer for this pair).\n  $$$G_0$$$ is the original team and $$$v$$$ and $$$w$$$ are connected directly by an\n  edge only in $$$G_k$$$. For convenience, let $$$D_i = D_{G_i}(v, w)$$$.\n  We can bound $$$D_{i + 1}$$$ in terms of $$$D_i$$$ as follows:\n  each edge $$$(x, y)$$$ on $$$G_{i + 1}$$$ either exists in $$$G_i$$$ or\n  comes from an introduction that happens between minutes $$$i$$$ and $$$i + 1$$$, meaning\n  there is a path of length $$$2$$$ $$$[x, m, y]$$$ in $$$G_i$$$ where $$$m$$$ is a manager.\n  Now fix $$$i$$$ and consider the path <code>$$$[v = x_0, x_1, \\dots, x_{D_{i+1} - 1}, x_{D_{i+1}}\n  = w]$$$</code>\n  between $$$v$$$ and $$$w$$$ in $$$G_{i + 1}$$$. Consecutive edges share\n  a person, so at most one of each pair can come from an introduction\n  and the other one must exist in $$$G_i$$$. This gives us a\n  bound $$$D_i \\le D_{i+1} + \\lceil(D_{i+1} / 2)\\rceil$$$.\n  Let us show that this bound is tight and always reachable:\n  if we are at state $$$G_i$$$, and $$$D_i \\gt 1$$$,\n  we can take a minimum path <code>$$$[v = y_0, y_1, \\dots,\n  y_{D_{i} - 1}, y_{D_i} = w]$$$</code>\n  between $$$v$$$ and $$$w$$$ in $$$G_i$$$ and have $$$y_{3j + 1}$$$\n  to introduce $$$y_{3j}$$$ and $$$y_{3j + 2}$$$ for each $$$j$$$ between\n  $$$0$$$ and $$$\\lceil((D_i - 2) / 3)\\rceil$$$. Those introductions at minute $$$i$$$\n  yield $$$D_{i + 1} = D_i - \\lceil((D_i - 2) / 3)\\rceil$$$ and\n  make exactly $$$\\lceil(D_{i + 1})\\rceil$$$ edges in $$$G_{i+1}$$$ come from an\n  introduction.\n</p><p>\n  Given all the theory above, the answer for a given pair $$$v$$$ and $$$w$$$ for which\n  $$$D_{G_0}(v, w)$$$ is undefined (that is, they are not connected)\n  is impossible, and is otherwise\n  $$$f(D_{G_0}(v, w))$$$ where $$$f(x)$$$ is the number of steps it takes for\n  $$$x := x - \\lceil((x - 1) / 3)\\rceil$$$ to reach $$$x = 1$$$. Notice that it takes a\n  logarithmic number of steps to reach $$$1$$$, so we can just calculate $$$f$$$\n  on demand, or we can memoize all the needed values (for $$$x$$$ between\n  $$$1$$$ and $$$\\mathbf{N}$$$). Most shortest-path algorithms can be modified slightly\n  to calculate the distance $$$D_0$$$ considering only managers\n  as intermediate nodes as above, but the simplest must be\n  <a href=\"https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm\" target=\"_blank\">Floyd-Warshall</a>.\n  Floyd-Warshall computes the shortest paths between every pair of nodes\n  by considering each possible intermediate node in its outermost loop. So,\n  simply restricting that loop to iterate over managers (up to $$$\\mathbf{M}$$$ instead\n  of $$$\\mathbf{M}$$$+$$$\\mathbf{N}$$$) is enough to calculate, in time\n  $$$O(\\mathbf{M} \\times (\\mathbf{N}+\\mathbf{M})^2)$$$, the distance $$$D_{G_0}$$$\n  for every pair of nodes. After running Floyd-Warshall and memoizing $$$f$$$ once, we can\n  get the answer for every pair in constant time, so the algorithm takes\n  $$$O(\\mathbf{M} \\times (\\mathbf{M}+\\mathbf{N})^2 + \\mathbf{P})$$$ time overall.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0sNT61Oc0y6HnlS8kgfc17H-4h4sBQc344Q3fd2m1Pl6U5IJq8bOtUAYceyMNrQdePyxkVx3T-/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000077796b","statement":"<h3>Problem</h3>\n<p>\n  After Apricot Rules LLC went through a reorganization, a new large team was formed containing\n  $$$\\mathbf{M}$$$ managers and $$$\\mathbf{N}$$$ non-managers. Since many people within the team do not\n  know each other, a number of introduction sessions are to be scheduled.\n  We know exactly which pairs of members already know each other.\n</p><p>\n  The introduction sessions are organized into time slots that take $$$1$$$ minute.\n  The first time slot starts at 8:00 AM and ends at 8:01 AM.\n  The $$$i$$$-th time slot starts $$$i-1$$$ minutes after 8:00 AM\n  and ends $$$i$$$ minutes after 8:00 AM.\n  During each time slot, there can be one or more introduction sessions.\n  A team member can be assigned to at most one introduction session per time slot. Each\n  introduction session must have exactly three members: an assigned manager $$$a$$$ who must\n  be a manager and two others $$$b$$$ and $$$c$$$ who can be managers or\n  non-managers. The assigned manager $$$a$$$ must already know $$$b$$$ and $$$c$$$ for the\n  session to be scheduled. After the introduction session, $$$b$$$ and $$$c$$$\n  are considered to know each other too. If $$$b$$$ and/or $$$c$$$ are managers,\n  either of them can be the assigned manager of a future introduction session that includes\n  both.\n</p><p>\n  For some pairs of people in the team, we want to know the shortest time\n  that is needed for them to finally know each other, or whether it is\n  impossible for that to happen through the described process. If two people know each\n  other before any introduction sessions happen, we define that shortest\n  time to be $$$0$$$ minutes.\n</p><p>\n  Even though we are interested in multiple pairs of people, we are\n  considering the situations independently. That is, the minimum time for each\n  pair can depend on a specific organization of the introduction that is particular\n  to that pair only.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$.\n  $$$\\mathbf{T}$$$ test cases follow. Each test case begins with a line containing\n  three integers $$$\\mathbf{M}$$$, $$$\\mathbf{N}$$$, and $$$\\mathbf{P}$$$: the number of managers on the new team, the\n  number of non-managers on the new team, and the number of pairs of team members we are\n  going to ask about, respectively. Managers are numbered from 1 through $$$\\mathbf{M}$$$ and\n  non-managers are numbered from $$$\\mathbf{M} + 1$$$ through $$$\\mathbf{M} + \\mathbf{N}$$$. Then,\n  $$$\\mathbf{M} + \\mathbf{N}$$$ lines follow with $$$\\mathbf{M} + \\mathbf{N}$$$ characters each.\n  The j-th character on the i-th of these lines $$$\\mathbf{C_{i,j}}$$$ is\n  <code>Y</code> if team members $$$i$$$ and $$$j$$$ know each other before the introduction\n  process starts, and <code>N</code> otherwise. Then, there are $$$\\mathbf{P}$$$ more lines; the $$$k$$$-th\n  of which contains a pair of integers $$$\\mathbf{A_k}$$$ and\n  $$$\\mathbf{B_k}$$$ each, representing the team member numbers of the $$$k$$$-th pair we\n  are interested in.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$y_1\\ y_2\\ y_3 \\cdots y_\\mathbf{P}$$$</code>,\n  where $$$x$$$ is the test case number (starting from 1) and\n  $$$y_i$$$ is $$$-1$$$ if team members $$$\\mathbf{A_k}$$$\n  and $$$\\mathbf{B_k}$$$ cannot get to know each other, or the shortest amount\n  of time (in minutes) since the process starts until they do.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$\\mathbf{C_{i,j}}$$$ is either uppercase <code>Y</code> or uppercase\n<code>N</code>, for all $$$i, j$$$. <br/>\n$$$\\mathbf{C_{i,j}}$$$ = $$$\\mathbf{C_{j,i}}$$$, for all $$$i, j$$$. <br/>\n$$$\\mathbf{C_{i,i}}$$$ = <code>Y</code>, for all $$$i$$$.\n  (Team members know themselves.)<br/>\n$$$1 \\le \\mathbf{A_k} \\lt \\mathbf{B_k} \\le \\mathbf{M} + \\mathbf{N}$$$, for all $$$k$$$.<br/>\n$$$(\\mathbf{A_k}, \\mathbf{B_k}) \\neq (\\mathbf{A_\\ell}, \\mathbf{B_\\ell})$$$, for all $$$k &ne; \\ell$$$.\n    (No pair of team members is asked about twice.)<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n$$$1 \\le \\mathbf{M} \\le 3$$$.<br/>\n$$$1 \\le \\mathbf{N} \\le 2$$$.<br/>\n$$$1 \\le \\mathbf{P} \\le 3$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n$$$1 \\le \\mathbf{M} \\le 50$$$.<br/>\n$$$1 \\le \\mathbf{N} \\le 50$$$.<br/>\n$$$1 \\le \\mathbf{P} \\le 100$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1p4HGHSj1f03dLmq8IfteuXwbmA4ZppEnrwPPpZv4w25PCBvQPYu9ts2YJ-LXvp9Z1zNKgOLoIyKF3khko2gVmurgaW3xAjNVk8dVZ1fzlveAAqf0eTuS3NA/introductions_organization_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n2 2 3\nYYYY\nYYNN\nYNYN\nYNNY\n2 3\n2 4\n1 4\n3 2 2\nYYYNN\nYYNYN\nYNYNY\nNYNYN\nNNYNY\n2 5\n4 5\n1 1 1\nYN\nNY\n1 2\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2qc2QsyZeYewRFhSG1pqjm8mE_zXAtTcOsvGN89QDJjDQ8H3EqgHHVz6BwGFd2En4EeqwUoq15kTBXbWyKlTFePmx2zeHz0N3zn_Gc9pVSxa_08djvppgJr5g/introductions_organization_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1 1 0\nCase #2: 2 3\nCase #3: -1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, manager $$$1$$$ knows everybody else at the start, and there are\n  no other pairs of people that know each other. Therefore, any pair that includes manager $$$1$$$\n  has $$$0$$$ as a result, since they know each other from the start. On the\n  other hand, for any pair that does not include manager $$$1$$$, the two people do\n  not know each other from the start, but can be introduced during the first\n  time slot by manager $$$1$$$. Notice that the scenarios for the first two pairs considered\n  independently.\n</p><p>\n  In Sample Case #2, manager $$$2$$$ and non-manager $$$5$$$ do not know each other, nor do\n  they know anyone who knows both of them, so the minimum time for them to be\n  introduced is at least $$$2$$$ minutes. One way for them to be introduced after\n  exactly 2 minutes is for manager $$$3$$$ to introduce manager $$$1$$$ and non-manager $$$5$$$\n  during the first time slot, after which manager $$$1$$$ can introduce manager $$$2$$$ and\n  non-manager $$$5$$$ in the second time slot. For the second pair, we can start the same way to\n  introduce manager $$$2$$$ and non-manager $$$5$$$ in 2 minutes and then, manager $$$2$$$ can\n  introduce non-managers $$$4$$$ and $$$5$$$ in the third time slot, so $$$3$$$ minutes is an upper\n  bound for introducing the pair of $$$4$$$ and $$$5$$$. It is impossible to do this quicker.\n</p><p>\n  In Sample Case #3, neither person in the new team knows the other, so no\n  introductions are possible.\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 2</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 2. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0JNRIZhu3n6vnlNG0vjTu2xCoKuu1Xjnou-6YcVL0EPbpmRRFflzW-tbuFLu-mMcFE1sKlKrIsn98tEMBl6DQLaMe17lw-Dq9c_uZVQCuqLzkM5KYp2g5FHg/introductions_organization_sample_ts2_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_1\">1\n5 1 1\nYYNNNN\nYYYNNN\nNYYYNN\nNNYYYN\nNNNYYY\nNNNNYY\n1 6\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0ucEK9KMltpe6Qxp-Qz166NUSRylJ3YhUc3D5UoMIy1_pD3U452IiG4YmPMIvt6Q2Nt6BPeCA7CzYvpySGzEbXG9M6xL3r2uDyBKuV4HviaNSnDPp9os0Ttks/introductions_organization_sample_ts2_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_1').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_1');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_1\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_1\">Case #1: 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In this additional Sample Case, manager $$$2$$$ can introduce managers $$$1$$$ and $$$3$$$ in the\n  first time slot, while at the same time manager $$$5$$$ can introduce manager $$$4$$$ and\n  non-manager $$$6$$$. Then, manager $$$3$$$ can introduce managers $$$1$$$ and $$$4$$$ in\n  the second time slot, and finally manager $$$4$$$ can introduce manager $$$1$$$ and non-manager\n  $$$6$$$ in the third time slot.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":12},{"type":2,"type__str":"HIDDEN","value":19}],"title":"Introductions Organization","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n<p>\n  We can determine the outcome by playing through the game.\n  For each turn: if the current player cannot move, the game is over.\n  If the current player can only move on one side, eliminate the outermost piece from that side.\n  Otherwise, the current player must choose between the leftmost piece and the rightmost piece.\n</p>\n\n<p>\n  Notice that this choice leads to a subgame where it is the other player's turn.\n  (E.g., the starting game <code>IOII</code> where Izabella plays first can lead to either\n  <code>OII</code> or <code>IOI</code> where it is Olga's turn.) If there is only one piece\n  left in a subgame, the current player wins if they can take the piece and loses if they cannot.\n</p>\n\n<p>\n  For each turn, eliminate the piece that the current player takes. If the current player can\n  choose between both sides, solve both subgames and choose the option that is more favorable\n  to the current player. Continue until the game has finished.\n</p>\n<p>\n  If $$$N$$$ is the length of the input string $$$\\mathbf{B}$$$, there are at most $$$N$$$ moves in the game,\n  and there are at most $$$2$$$ options per-move, so this solution requires at most $$$O(2^N)$$$\n  time. Moreover, one player having a choice means the pieces at both ends are of their\n  color. Since only one of them is removed, that means the next player cannot have more than\n  one option. This means that at most half of the moves actually have $$$2$$$ options,\n  meaning our algorithm's running time can be bounded more tightly by $$$O(2^{N/2})$$$.\n</p>\n\n\n<h3>Test Set 2</h3>\n<p>\n  The solution above can be optimized: use\n  <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\" target=\"_blank\">memoization/dynamic programming</a>\n  to avoid playing a subgame more than once. For each subgame, save its result and if you were to\n  play it again, simply lookup the result instead of doing the recursion. Since there are\n  less than $$$N^2$$$ subgames, this can yield a time complexity as low as $$$O(N^2)$$$.\n  Implementations that manipulate strings, use them to represent the states or use inefficient\n  ways to do the lookups can have higher time complexities, but the bounds of this test set are\n  small enough that we can get away with doing it.\n</p>\n\n\n<h3>Test Set 3</h3>\n<p>\n  We can alternatively determine the outcome without subgames. For each turn: if the current player\n  cannot move, the game is over. If the current player can only move on one side, eliminate the\n  outermost piece from that side.\n</p>\n\n<p>\n  If the current player can move on either side, the end state of the game can be calculated as\n  follows: if the <code>I</code> and <code>O</code> pieces continue to alternate, the last player to take a piece wins\n  (with zero pieces left). Otherwise, the game will end once the players reach a pair of consecutive\n  identical pieces (<code>II</code> or <code>OO</code>).\n</p>\n\n<p>\n  Suppose the current player (who can move on either side) is Izabella. From each of the sides,\n  find the nearest pair of consecutive identical pieces (<code>II</code> or <code>OO</code>).\n  If one of those pairs is <code>II</code>, Izabella can win by choosing the outermost piece\n  from that side (as Olga will not be able to move after Izabella takes one of the\n  <code>I</code>s in <code>II</code>). Note that if both sides have a <code>II</code> pair,\n  choosing the side with the closer pair will maximize Izabella's score &mdash;\n  which can be calculated as the number of pieces between that <code>II</code> and\n  the outermost piece on the other side, inclusive.\n</p>\n\n<p>\n  Alternatively, if the nearest pairs on both sides are <code>OO</code>, Izabella will ultimately\n  lose the game. She can minimize Olga's score by eliminating the alternating\n  <code>I</code> and <code>O</code> pieces from both sides until reaching the <code>OO</code>(s).\n  Then the score will be the number of pieces between the two occurrences of <code>OO</code>s,\n  $$$1$$$ if there is only one <code>OO</code> or $$$2$$$ if there are overlapping\n  <code>OO</code>s, that is, <code>OOO</code>, inclusive.\n</p>\n\n<p>\n  This solution takes linear time.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1qEGx7ag_daQLPrdGal6KAxOhfIQxn27sgTup3DMTYpOKXV99sPsN3vEyzGLMep4SRk17tPSbE/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000777c68","statement":"<h3>Problem</h3>\n<p>\nIzabella and Olga are playing a game alternating turns. Izabella plays first.\nThe game starts with all game pieces arranged in a single row.\nThe pieces come in two colors: indigo and orange.\nDuring Izabella's turns, she must choose and remove an indigo piece that is\neither the leftmost or rightmost piece remaining. During Olga's turns, she must choose and\nremove an orange piece that is either the leftmost or rightmost piece remaining. If at any\npoint one of the players does not have a legal move (possibly because there are no pieces\nremaining), that player loses the game, and the other player is awarded $$$1$$$ point plus\n$$$1$$$ additional point for each piece that remains on the board.\n</p><p>\nWe use an uppercase letter <code>I</code> to represent indigo pieces and\nan uppercase letter <code>O</code>\nto represent orange pieces. Suppose, for example, that they play with the following\nstarting board: <code>IOIOOOII</code>.\n</p><p>\nOn her first turn, Izabella can choose to remove either the leftmost or rightmost\npieces, as both are indigo. Suppose she chooses the leftmost. Then, the board\nwould become <code>OIOOOII</code>. Then, Olga would have no choice but\nto remove the new leftmost piece, as the rightmost piece is not orange, leaving\n<code>IOOOII</code>. Izabella can choose again, and this time she chooses the\nrightmost piece, leaving <code>IOOOI</code> for Olga's turn. At this point,\nOlga has no valid move, so Izabella won. Since there are $$$5$$$ pieces remaining,\nIzabella wins $$$1+5=6$$$ points in total.\n</p><p>\nEach player plays optimally trying to win and to maximize their own score.\nA player that cannot guarantee a win plays to minimize the opponent's score.\n</p><p>\nGiven the starting board, can you find out who wins and what is their score?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ lines follow.\nEach line represents a test case and contains a string $$$\\mathbf{B}$$$ representing the status of the\nboard. The $$$i$$$-th character in $$$\\mathbf{B}$$$ is <code>I</code> if the $$$i$$$-th piece from\nthe left is indigo and <code>O</code> if it is orange.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$ $$$z$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1), $$$y$$$ is the initial of\nthe winner (<code>I</code> for Izabella or <code>O</code> for Olga), and $$$z$$$ is\nthe score the winner gets.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\nEach character of $$$\\mathbf{B}$$$ is either an uppercase letter <code>I</code> or an uppercase letter\n  <code>O</code>.\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$2 \\le$$$ the length of $$$\\mathbf{B} \\le 10$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\n\n$$$2 \\le$$$ the length of $$$\\mathbf{B} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 3 (Hidden Verdict)</h4>\n<p>\n\n$$$2 \\le$$$ the length of $$$\\mathbf{B} \\le 10^5$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3pW9Qt7r0hCqoYcr62q1onPyrAeMXN_86zdwQjY1y_fkPBUdqvRhTTX27r31gcVB7fZwKYlSUrn_lqWxzd69Hp9HECfdqYm0os4yfFXOa8RgDk/irrefutable_outcome_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">5\nIOIOOOII\nOIIIIO\nIO\nIOIOIOI\nIOIOIOOIO\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Zb-16cVt1oRCenzDpejXwChqQUy_PZGakfnAsHH_hm59R3Z-LJK-8isEX1Tvgiw872B3qQpc7wJTazmvjOS725uzFHGOyqcyLmVTDBBg3kODXIw/irrefutable_outcome_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: I 8\nCase #2: O 7\nCase #3: O 1\nCase #4: I 1\nCase #5: O 6\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, Izabella can do better than the example in the statement. If she starts\n  by removing the rightmost piece, Olga has no possible moves and Izabella wins with $$$7$$$\n  pieces remaining. Izabella wins $$$1+7=8$$$ points in total.\n</p><p>\n  In Sample Case #2, Izabella cannot even make her first move, so Olga wins!\n</p><p>\n  In Sample Case #3, neither player has a choice on what to play, and Olga wins after\n  all pieces are exhausted, so she gets only $$$1$$$ point.\n</p><p>\n  In Sample Case #4, all pieces are exhausted at the end of the game too, but it is\n  Izabella who comes out with the win.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":1,"type__str":"VISIBLE","value":11},{"type":2,"type__str":"HIDDEN","value":14}],"title":"Irrefutable Outcome","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000004360f2","type":1,"type__str":"SPECTATOR"},"title":"Code Jam to I/O for Women 2021"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
