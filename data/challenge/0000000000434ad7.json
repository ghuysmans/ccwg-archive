{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1381550400000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000434ad7","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1381539600000,"tasks":[{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0bj2l0TFKrYh7LIzAi6VF2dXHTaGY9_UbqfYW5uUClSYiKQYA9sU_v7O9UYM4K1A6VPyIVWvd-/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000004347b3","statement":"<h3>Problem</h3>\n<p><b>Sudoku</b> is a popular single player game. The objective is to fill a 9x9 matrix with digits so that each column, each row, and all 9 non-overlapping 3x3 sub-matrices contain all of the digits from 1 through 9. Each 9x9 matrix is partially completed at the start of game play and typically has a unique solution.\n</p>\n\n<p><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0-fDET6hu2bJ-AJF-hK3A5sDaZiKpDOSjUK2cdKcrW-VuyjcRUiX4-IduiXfV0itlz/xxx.png\"></p>\n<p><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2EmGJVm0B5S0AVne6Ty4yrO4_rXydYwikJo6oqJ9O4LVlHtVlDBonWbHFoaM8B463D/yyy.png\"></p>\n\n<p>Given a completed <b>N<sup>2</sup></b>x<b>N<sup>2</sup></b> Sudoku matrix, your task is to determine whether it is a <i>valid</i> solution. A <i>valid</i> solution must satisfy the following criteria:\n<ul>\n<li>Each row contains each number from <b>1</b> to <b>N<sup>2</sup></b>, once each.</li>\n<li>Each column contains each number from <b>1</b> to <b>N<sup>2</sup></b>, once each.</li>\n<li>Divide the <b>N<sup>2</sup></b>x<b>N<sup>2</sup></b> matrix into <b>N<sup>2</sup></b> non-overlapping <b>N</b>x<b>N</b> sub-matrices. Each sub-matrix contains each number from <b>1</b> to <b>N<sup>2</sup></b>, once each.\n</ul>\n</p>\n<p>\nYou don't need to worry about the uniqueness of the problem. Just check if the given matrix is a valid solution.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>.  <b>T</b> test cases follow.  Each test case starts with an integer <b>N</b>. The next <b>N<sup>2</sup></b> lines describe a completed Sudoku solution, with each line contains exactly <b>N<sup>2</sup></b> integers. All input integers are positive and less than 1000.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the case number (starting from 1) and y is \"Yes\" (quotes for clarity only) if it is a valid solution, or \"No\" (quotes for clarity only) if it is invalid. Note that the judge is case-sensitive, so answers of \"yes\" and \"no\" will not be accepted.\n</p>\n\n<h3>Limits</h3>\nTime limit: 30 seconds per test set.<br>\nMemory limit: 1GB.<br>\n<p>\n1 &le; <b>T</b> &le; 100.\n</p>\n\n<h4>Test set 1 - Visible</h4>\n<p>\n<b>N</b> = 3.\n</p>\n\n<h4>Test set 2 - Hidden</h4>\n<p>\n3 &le; <b>N</b> &le; 6.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3leB1usA7MvFjctPCnpiUw9dDcLXQUN2w0PEqFoXKYlLBt1bEdkA6VmTQCly_oITy8azBbkrTT7DPg04sNfvvJiVmvDHAjRXiEpSlEOg/sudoku_checker_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3\n5 3 4 6 7 8 9 1 2\n6 7 2 1 9 5 3 4 8\n1 9 8 3 4 2 5 6 7\n8 5 9 7 6 1 4 2 3\n4 2 6 8 5 3 7 9 1\n7 1 3 9 2 4 8 5 6\n9 6 1 5 3 7 2 8 4\n2 8 7 4 1 9 6 3 5\n3 4 5 2 8 6 1 7 9\n3\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n1 2 3 4 5 6 7 8 9\n3\n5 3 4 6 7 8 9 1 2\n6 7 2 1 9 5 3 4 8\n1 9 8 3 4 2 5 6 7\n8 5 9 7 6 1 4 2 3\n4 2 6 8 999 3 7 9 1\n7 1 3 9 2 4 8 5 6\n9 6 1 5 3 7 2 8 4\n2 8 7 4 1 9 6 3 5\n3 4 5 2 8 6 1 7 9</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0dfLJ8USnjboDQhpbPniZ-Mf4reVvpaa45BI-FSDBKcrgm7k0OjaFkgtUvY3wTLq1fdldaHkNRb78-v6_0rCNWRyHYJUTZ1rSNMd2CkzA/sudoku_checker_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: Yes\nCase #2: No\nCase #3: No</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":5},{"type":2,"type__str":"HIDDEN","value":9}],"title":"Sudoku Checker","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0zpe09Hk0Rq_48SOb4Vcn7__545ixwa8Kq9pxXpK5g-DsBWfJ8ZSSDjSFBMAQniGzWGcPul4ZS/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000004348e0","statement":"<h3>Problem</h3>\n<p>\nLittle Sin lives in a Manhattan-grid city, a 2D plane where people can only go north, west, south or east along the grid. The distance from (x1, y1) to (x2, y2) is |x1 - x2| + |y1 - y2|.<br/><br/>\nLittle Sin really likes to party and is hoping to host a house party in Manhattan this Sunday. Little Sin has collected a list of people who will attend, and now needs to decide at whose home she will host the party.\n</p>\n<p>\nLittle Sin invited all of the people in several rectangular areas, and all of those people have said yes. A rectangular area is denoted as (x1, y1, x2, y2), where x1 &le; x2, y1 &le; y2. People who live in a rectangular area fill all integral points inside it. So there are a total of (x2 - x1 + 1) * (y2 - y1 + 1) people in the rectangular area (x1, y1, x2, y2).\n</p>\n<p>\nLittle Sin knows the coordinates of those rectangular areas. She wants the party to be hosted at the home of one of the people who is attending, but she also doesn't want everyone else to have to travel very far: she wants to minimize the sum of all distances from all attendees' houses to the party. Can you help her?<br/>\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>.  <b>T</b> test cases follow.\nEach test case starts with a line containing a single integer: the number of rectangular areas, <b>B</b>.  <b>B</b> lines follow.  Each line contains 4 integers: x1, y1, x2, y2, denoting the coordinates of a rectangular area of people Little Sin has invited to her party.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #t: x y d\", where t is the case number (starting from 1) and (x, y) is the coordinates of the person whose home the party should be hosted.  If there are multiple positions with the same minimum total distance, choose the one with the smallest x. If there are still multiple positions, choose the one with the smallest y. The value d is the sum of the distances from all attendees' houses to the point (x, y).\n</p>\n\n<h3>Limits</h3>\nMemory limit: 1GB.<br>\n<p>\n1 &le; <b>T</b> &le; 10.<br/>\n|x1|, |y1|, |x2|, |y2| &le; 10<sup>9</sup>.<br/>\nx1 &le; x2, y1 &le; y2.<br/>\nThe rectangular areas within a test case don't intersect.\n</p>\n\n<h4>Test set 1 - Visible</h4>\n<p>\nTime limit: 30 seconds.<br>\n1 &le; <b>B</b> &le; 100.<br/>\n1 &le; <b>Total number of people in each test case</b> &le; 1000.\n</p>\n\n<h4>Test set 2 - Hidden</h4>\n<p>\nTime limit: 60 seconds.<br>\n1 &le; <b>B</b> &le; 1000.<br/>\n1 &le; <b>Total number of people in each test case</b> &le; 1000000.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U28eAhvvbJcl3wKTLIgVotMzdrLVpb8Ska43CYQPvQhWg78MWezUw56V-_1yl4kINc1kt2ALoYKPrBcItZKcZue8wN3fKvizkgK9PrZRQ/meet_and_party_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n1\n0 0 2 2\n3\n-1 2 -1 2\n0 0 0 0\n1 3 1 3</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2QBluuLE04rWECAh8LqRKq4wh9ljRhn_tFmoB_pRyqchAvqBolD0_w_CTBHT7zd8Z_Gtb4f3lvKJWd4-kpdFiOiaSkaP0CtFge3KdJ0_c/meet_and_party_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1 1 12\nCase #2: -1 2 6</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":9},{"type":2,"type__str":"HIDDEN","value":15}],"title":"Meet and party","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3GbGPF9U2m1FqG64FE3VjCBo6QmCe8aKuGA-eGK4QrAZLsbUxswklKhBxzo1LRHSqPzb-F9Y4A/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000004349a6","statement":"<h3>Problem</h3>\n<p>\nThis problem was inspired by a board game called Hex, designed independently by Piet Hein and John Nash. It has a similar idea, but does not assume you have played Hex.<br/>\n<br/>\nThis game is played on an <b>N</b>x<b>N</b> board, where each cell is a hexagon. There are two players: Red side (using red stones) and Blue side (using blue stones). The board starts empty, and the two players take turns placing a stone of their color on a single cell within the overall playing board.  Each player can place their stone on any cell not occupied by another stone of any color.  There is no requirement that a stone must be placed beside another stone of the same color.  The player to start first is determined randomly (with equal probability among the two players).<br/>\n<br/>\nThe upper side and lower sides of the board are marked as red, and the other two sides are marked as blue. The goal of the game is to form a connected path of one player's stones connecting the two sides of the board that have that player's color. The first player to achieve this wins. Note that the four corners are considered connected to both colors.<br/>\n<br/>\nThe game ends immediately when one player wins.<br/>\n<br/>\nGiven a game state, help someone new to the game determine the status of a game board. Say one of the following:\n<ul>\n<li>\"<b>Impossible</b>\": If it was impossible for two players to follow the rules and to have arrived at that game state.</li>\n<li>\"<b>Red wins</b>\": If the player playing the red stones has won.</li>\n<li>\"<b>Blue wins</b>\": If the player playing the blue stones has won.</li>\n<li>\"<b>Nobody wins</b>\": If nobody has yet won the game. Note that a game of Hex can't end without a winner!</li>\n</ul>\nNote that in any impossible state, the only correct answer is \"Impossible\", even if red or blue has formed a connected path of stones linking the opposing sides of the board marked by his or her colors.\n<br/>\n<br/>\nHere's a an example game on a 6x6 gameboard where blue won. Blue was the first player to move, and placed a blue stone at cell marked as 1. Then Red placed at cell 2, then blue at cell 3, etc. After the 11th stone is placed, blue wins.<br/>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3j-g3VTtw4DeHLge8F1zw00KRDdBYoVxo1xQAbGmhjxsnzT7ORFmoDI7a38v7WloVVcnPfFQ/Hex_num.png\">\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of input gives the number of test cases, <b>T</b>.  <b>T</b> test cases follow. Each test case start with the size of the side of the board, <b>N</b>. This is followed by a board of <b>N</b> rows and <b>N</b> columns consisting of only 'B', 'R' and '.' characters. 'B' indicates a cell occupied by blue stone, 'R' indicates a cell occupied by red stone, and '.' indicates an empty cell.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the case number (starting from 1) and y is the status of the game board. It can be \"Impossible\", \"Blue wins\", \"Red wins\" or \"Nobody wins\" (excluding the quotes). Note that the judge is case-sensitive, so answers of \"impossible\", \"blue wins\", \"red wins\" and \"nobody wins\" will be judged incorrect.\n</p>\n\n<h3>Limits</h3>\nTime limit: 30 seconds per test set.<br>\nMemory limit: 1GB.<br>\n<p>\n1 &le; <b>T</b> &le; 100.\n</p>\n\n<h4>Test set 1 - Visible</h4>\n<p>\n1 &le; <b>N</b> &le; 10.\n</p>\n\n<h4>Test set 2 - Hidden</h4>\n<p>\n1 &le; <b>N</b> &le; 100.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1lJepXmgTgSGTyaebQL7qn-pe0_VUlfWPX2jhTuDMHFXKZroEN6-c5WJw9_5HK9Fz1H4JQk6GqM_9jLQC0AofS_6c/hex_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">7\n1\n.\n1\nB\n1\nR\n2\nBR\nBB\n4\nBBBB\nBBB.\nRRR.\nRRRR\n4\nBBBB\nBBBB\nRRR.\nRRRR\n6\n......\n..R...\nBBBBBB\n..R.R.\n..RR..\n......</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1u0w2LmmoEj1d_2GU_7gIa8MH7R-dSqXpYDAY-opvYAn5-eZOB0S4tQ8_jSzXYqJ2fmzGissxjWbUT7zoxomQ-vrz4/hex_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: Nobody wins\nCase #2: Blue wins\nCase #3: Red wins\nCase #4: Impossible\nCase #5: Blue wins\nCase #6: Impossible\nCase #7: Blue wins</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":12},{"type":2,"type__str":"HIDDEN","value":13}],"title":"Hex","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2g7Q3b_RYNzB0Hsy46NxxTlxeGnMwUTOdJzMw2aA3XxjZR8C-dw8ZFkGJXd9ESxC9Hg5kVvbib/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000434c67","statement":"<h3>Problem</h3>\n<p>\nYou are the prince of Dragon Kingdom and your kingdom is in danger of running out of power. You must find power to save your kingdom and its people. An old legend states that power comes from a place known as Dragon Maze. Dragon Maze appears randomly out of nowhere without notice and suddenly disappears without warning. You know where Dragon Maze is now, so it is important you retrieve some power before it disappears.\n</p>\n<p>\nDragon Maze is a rectangular maze, an <b>N</b> x <b>M</b> grid of cells. The top left corner cell of the maze is (0,0) and the bottom right corner is (<b>N</b>-1, <b>M</b>-1). Each cell making up the maze can be either a dangerous place which you never escape after entering, or a safe place that contains a certain amount of power. The power in a safe cell is automatically gathered once you enter that cell, and can only be gathered once. Starting from a cell, you can walk up/down/left/right to adjacent cells with a single step.\n</p>\n<p>\nNow you know where the entrance and exit cells are, that they are different, and that they are both safe cells. In order to get out of Dragon Maze before it disappears, you must walk from the entrance cell to the exit cell taking as few steps as possible. If there are multiple choices for the path you could take, you must choose the one on which you collect as much power as possible in order to save your kingdom.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>.  <b>T</b> test cases follow.\n</p>\n<p>\nEach test case starts with a line containing two integers <b>N</b> and <b>M</b>, which give the size of Dragon Maze as described above. The second line of each test case contains four integers <b>en<sub>x</sub></b>, <b>en<sub>y</sub></b>, <b>ex<sub>x</sub></b>, <b>ex<sub>y</sub></b>, describing the position of entrance cell <b>(en<sub>x</sub>, en<sub>y</sub>)</b> and exit cell <b>(ex<sub>x</sub>, ex<sub>y</sub>)</b>. Then <b>N</b> lines follow and each line has <b>M</b> numbers, separated by spaces, describing the <b>N x M</b> cells of Dragon Maze from top to bottom. Each number for a cell is either <code>-1</code>, which indicates a cell is dangerous, or a positive integer, which indicates a safe cell containing a certain amount of power.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the case number (starting from 1). If it's possible for you to walk from the entrance to the exit, y should be the maximum total amount of power you can collect by taking the fewest steps possible. If you cannot walk from the entrance to the exit, y should be the string \"Mission Impossible.\" (quotes for clarity). Please note that the judge requires an exact match, so any other output like \"mission impossible.\" or \"Mission Impossible\" (which is missing the trailing period) will be judged incorrect.\n</p>\n\n<h3>Limits</h3>\nTime limit: 30 seconds per test set.<br>\nMemory limit: 1GB.<br>\n<p>\nThe amount of power contained in each cell will not exceed 10,000.<br/>\n1 &le; <b>T</b> &le; 30.<br/>\n0 &le; <b>en<sub>x</sub></b>, <b>ex<sub>x</sub></b> &lt; <b>N</b>.<br/>\n0 &le; <b>en<sub>y</sub></b>, <b>ex<sub>y</sub></b> &lt; <b>M</b>.<br/>\n</p>\n\n<h4>Test set 1 - Visible</h4>\n<p>\n1 &le; <b>N</b>, <b>M</b> &le; 10.<br/>\n</p>\n\n<h4>Test set 2 - Hidden</h4>\n<p>\n1 &le; <b>N</b>, <b>M</b> &le; 100.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2CPeRDw1MkjwoQcW9piPd0kvjvgxrhrvJSGijLDyD1fvI5vnc-CZcv9Xibyw5VLhsC8t__bvIpxbJEcOdSmqbguLrxd_JLxbkbpA/dragon_maze_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2 3\n0 2 1 0\n2 -1 5\n3 -1 6\n4 4\n0 2 3 2\n-1 1 1 2\n1 1 1 1\n2 -1 -1 1\n1 1 1 1</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0N3qgjgjkqJ27ihylKagHXkgrcKR9iBpAstbwp6uBLyPrnxzMP0_nPSwRKcmg621sD5oOD_hzCvNp26WefuPfhIZH65c9s6sDNrjc/dragon_maze_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: Mission Impossible.\nCase #2: 7\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":8},{"type":2,"type__str":"HIDDEN","value":12}],"title":"Dragon Maze","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2O_ECU_qdQ3-o0do-3-pS1A7GeGpl7iXgvB-tHGdnnWiIC0TSe7IC0cDF3CgAMM4agCRqJuz5y/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000434dfc","statement":"<h3>Problem</h3>\n<p>\nGood programmers write fabulous comments. Igor is a programmer and he likes the old C-style comments in <b><code>/* ... */</code></b> blocks. For him, it would be ideal if he could use this style as a uniform comment format for all programming languages or even documents, for example Python, Haskell or HTML/XML documents.\n</p>\n<p>\nMaking this happen doesn't seem too difficult to Igor. What he will need is a comment pre-processor that removes all the comment blocks in <b><code>/*</code></b>, followed by comment text, and by another <b><code>*/</code></b>. Then the processed text can be handed over to the compiler/document renderer to which it belongs&mdash;whatever it is.\n</p>\n<p>\nIgor's pre-processor isn't quite that simple, though. Here are some cool things it does:\n<li>The comments the pre-processor reads can be nested the same way brackets are nested in most programming languages. It's possible to have comments inside comments. For example, the following code block has an outer level of comments that should be removed by the comment pre-processor. The block contains two inner comments.\n<pre>\nprintf(\"Hello /* a comment /* a comment inside comment */ \n        inside /* another comment inside comment */ \n        string */ world\");\n</pre>\nAfter the pre-process step, it becomes:\n<pre>\nprintf(\"Hello  world\");\n</pre>\n<li>Igor recognizes comments can appear anywhere in the text, including inside a string <code>\"/*...*/\"</code>, a constant number <code>12/*...*/34</code> or even in a character escape <code>\\/*...*/n</code>\n<p>Or more formally:\n<pre>\ntext:\n  text-piece\n  text-piece remaining-text\ntext-piece:\n  char-sequence-without-/*\n  empty-string\nremaining-text:\n  comment-block text\n\ncomment-block:\n  /* comment-content */\ncomment-content:\n  comment-piece\n  comment-piece remaining-comment\ncomment-piece:\n  char-sequence-without-/*-or-*/\n  empty-string\nremaining-comment:\n  comment-block comment-content\n\nchar:\n  letters\n  digits\n  punctuations\n  whitespaces\n</pre>\n<p>Our pre-processor, given a <code><b>text</b></code>, removes all <code><b>comment-block</b></code> instances as specified.</p>\n<h3>Notes</h3>\n<li>Igor only needs to remove the comment in one pass. He doesn't remove additional comment blocks created as a result of the removal of any comment block. For example:\n<pre>//*no recursion*/* file header */</pre>\nshould generate:\n<pre>/* file header */</pre>\n<li>The <b><code>*</code></b> character in any <b><code>/*</code></b> or <b><code>/*</code></b>cannot be re-used in  another <b><code>/*</code></b> or <b><code>*/</code></b>. For example the following does <b>NOT</b> form a proper comment block\n<pre>\n/*/\n</pre>\n<h3>Input</h3>\n<p>\nA text document with comment blocks in <b><code>/*</code></b> and <b><code>*/</code></b>. The input file is valid. It follows the specification of <b><code>text</code></b> in the problem statement. The input file always terminates with a newline symbol.\n</p>\n\n<h3>Output</h3>\n<p>\nWe only have one test case for this problem. First we need to output the following line.\n<pre>\nCase #1:\n</pre>\nThen, print the document with all comments removed, in the way specified in the problem statements. Don't remove any spaces or empty lines outside comments.\n</p>\n\n<h3>Limits</h3>\nTime limit: 30 seconds per test set.<br>\nMemory limit: 1GB.<br>\n<p>\nThe input program contains only:\n<li>Letters: <code>a-z, A-Z, </code>\n<li>Digits: <code>0-9</code>\n<li>Punctuation: <code>~ ! @ # % ^ &amp; * ( ) - + = : ; \" ' &lt; &gt; , . ? | /  \\ { } [ ] _</code>\n<li>Whitespace characters: space, newline\n</p>\n\n<h4>Test set 1 - Visible</h4>\n<p>\nThe small input contains a program of less than 2k bytes.\n</p>\n\n<h4>Test set 2 - Hidden</h4>\n<p>\nThe large input contains a program of less than 100k bytes.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U12-36C_jUgbhH2ICC4OXXKjhn2q_NR-8p4wxaGgJUN2ikU2JtHDz6AkDjx6TFFiKhRGxlBL4xwCe2B_9zIaEEijDfCHF63jrX1Uw2RdNEc_gFR-MB4/ignore_all_my_comments_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">//*no recursion*/* file header\n***********/************\n* Sample input program *\n**********/*************\n*/\nint spawn_workers(int worker_count) {\n  /* The block below is supposed to spawn 100 workers.\n     But it creates many more.\n     Commented until I figure out why.\n  for (int i = 0; i &lt; worker_count; ++i) {\n    if(!fork()) {\n      /* This is the worker. Start working. */\n      do_work();\n    }\n  }\n  */\n  return 0; /* successfully spawned 100 workers */\n}\n\nint main() {\n  printf(&quot;Hello /*a comment inside string*/ world&quot;);\n  int worker_count = 0/*octal number*/144;\n  if (spawn_workers(worker_count) != 0) {\n    exit(-1);\n  }\n  return 0;\n}\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1XZmv1UEG7cSBJfaxIHjyr46IJnhl20iULQ8-EWbYp3o-PH0BZYNeNbMSizPgCGjD-PaVvl7WZmDGND70UAsOxWyoKLPFMd2VG05WHL2YvmDU7glK2LQ/ignore_all_my_comments_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1:\n/* file header\n************************\n*/\nint spawn_workers(int worker_count) {\n  \n  return 0; \n}\n\nint main() {\n  printf(&quot;Hello  world&quot;);\n  int worker_count = 0144;\n  if (spawn_workers(worker_count) != 0) {\n    exit(-1);\n  }\n  return 0;\n}\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":2,"type__str":"HIDDEN","value":10}],"title":"Ignore all my comments","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000434ad7","type":1,"type__str":"SPECTATOR"},"title":"Round B 2013"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
