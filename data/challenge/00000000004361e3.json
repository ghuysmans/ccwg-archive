{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1625994000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"00000000004361e3","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>Thank you for participating in Kick Start 2021 Round D!</p>\r\n<hr>\r\n<p><b>Cast</b></p>\r\n<p>Arithmetic square: Written by Bartosz Kostka and prepared by Vijay Krishan Pandey.</p>\r\n<p>Cutting Intervals: Written by Aneesh D H and prepared by Gagan Kumar.</p>\r\n<p>Final Exam : Written by Bartosz Kostka and prepared by Anson Ho.</p>\r\n<p>Primes and Queries: Written by Balganym Tulebayeva and prepared by Pranav Gavvaji.</p>\r\n<p>Solutions, other problem preparation, reviews and contest monitoring by\r\nAneesh D H, Anik Sarker, Ankur Dua, Anson Ho, Anurag Singh, Balganym Tulebayeva, Bao Nguyen, Bartosz Kostka, Bohdan Pryshchenko, Dee Guo, Deep Bhattacharyya, Fahim Ferdous Neerjhor, Gagan Kumar, Harshil Shah, Hsin-cheng Hou, Jared Gillespie, Joe Simons, Lizzie Sapiro Santor, Michał Łowicki, Nghia Le, Phil Sun, Pranav Gavvaji, Pranjal Jain, Ruoyu Zhang, Samiksha Gupta, Sanyam Garg, Sarah Young, Shweta Karwa, Subhasmita Sahoo, Swapnil Gupta, Swapnil Mahajan, Teja Vardhan Reddy Dasannagari, Timothy Buzzelli, Umang Goel, Vijay Krishan Pandey, Wajeb Saab, Wei Zhou, Wendi Wang.</p>\r\n<p>Analysis authors:</p><ul>\r\n<li>Arithmetic square: Vijay Krishan Pandey</li>\r\n<li>Cutting Intervals: Wajeb Saab</li>\r\n<li>Final Exam : Swapnil Gupta</li>\r\n<li>Primes and Queries: Fahim Ferdous Neerjhor</li>\r\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1625979600000,"tasks":[{"analysis":"<p>\n  The integers $$$A, B$$$ and $$$C$$$ are in an\n  <a href=\"https://en.wikipedia.org/wiki/Arithmetic_progression\">arithmetic progression</a>\n   if $$$B - A = C - B$$$ , that is, $$$A + C = 2 \\times B$$$ .\n  As $$$B$$$ is an integer, $$$\\frac{(A + C)}{2}$$$ must also be an integer, which means $$$A + C$$$\n  must be an even integer. We will use this condition to find the solution to the problem.</p>\n<p>\n  In a $$$3 \\times 3$$$ grid of integers, there are\n  $$$8$$$ sequences which can be an arithmetic progression.</p>\n  <ol>\n    <li>$$$\\mathbf{G_{0,0}}, \\mathbf{G_{0,1}}, \\mathbf{G_{0,2}}$$$</li>\n    <li>$$$\\mathbf{G_{0,0}}, \\mathbf{G_{1,0}}, \\mathbf{G_{2,1}}$$$</li>\n    <li>$$$\\mathbf{G_{2,0}}, \\mathbf{G_{2,1}}, \\mathbf{G_{2,2}}$$$</li>\n    <li>$$$\\mathbf{G_{0,2}}, \\mathbf{G_{1,2}}, \\mathbf{G_{2,2}}$$$</li>\n    <li>$$$\\mathbf{G_{1,0}}, G_{1,1}, \\mathbf{G_{1,2}}$$$</li>\n    <li>$$$\\mathbf{G_{0,1}}, G_{1,1}, \\mathbf{G_{2,1}}$$$</li>\n    <li>$$$\\mathbf{G_{0,2}}, G_{1,1}, \\mathbf{G_{2,0}}$$$</li>\n    <li>$$$\\mathbf{G_{0,0}}, G_{1,1}, \\mathbf{G_{2,2}}$$$</li>\n</ol>\n<p>\n  We want to find, at max, how many of the above sequences can be arithmetic sequences at the same time.\n</p>\n<h3>\n    Test Set 1\n</h3>\n\n<p>\n  The first four sequences do not contain the missing value, and for each such sequence\n  we can find if they form an arithmetic sequence in $$$O(1)$$$ using the above condition that if\n  $$$A, B$$$ and $$$C$$$ form an arithmetic progression then $$$A + C = 2 \\times B$$$.\n  Now for the remaining four sequences, we iterate over all values from $$$-50$$$ to $$$50$$$ and\n  assign it to the missing value $$$G_{1,1}$$$ and check how many of the remaining four form\n  arithmetic progressions. The maximum number of sequences that can be created for a value\n  as we iterate gives us the number of arithmetic progressions in the last four sequences.\n</p>\n\n<p>\n<i>Complexity : $$$O(max(\\mathbf{G_{i,j}}))$$$ per test case</i>\n</p>\n\n<h3>\n    Test Set 2\n</h3>\n\n\n<p>\n  The first four sequences do not contain the missing value\n  and for each one of them we can check if they form an arithmetic progression using the\n  condition described above. For the remaining sequences,\n  we cannot iterate over all values from $$$-1000000000$$$ to $$$1000000000$$$ as it will result in a TLE.\n  We will use the fact that if $$$A, B$$$ and $$$C$$$ form an arithmetic progression for\n  given values of $$$A$$$ and $$$C$$$ then there will be exactly one\n  $$$B$$$ which will exist if and only if\n  $$$A + C$$$ is an even integer and $$$B$$$ will be equal to $$$\\frac{(A + C)}{2}$$$.\n  For each of the last four sequences, consider\n  $$$G_{1,1}$$$ as $$$B$$$ and the values in the other two squares as $$$A$$$ and $$$C$$$.\n  For the sequences where $$$A + C$$$ is even, evaluate\n  $$$B = \\frac{(A + C)}{2}$$$ and find the maximum number of sequences which evaluate to the same B.\n  If we consider such a $$$B$$$ as $$$G_{1,1}$$$, the number of arithmetic progressions in the last\n  four sequences will be maximised.\n\n<p>\n<i>Complexity : $$$O(1)$$$ per test case</i>\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1at5GSESLea4LwarXM70_6eJbjsDs58urB2bFjxedWyrQXsJUifu0Q_W97fJnkbbGXMTsfRxn4/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000082b813","statement":"<h3>Problem</h3>\n<p>\nYou are given a $$$3 \\times 3$$$ grid of integers. Let $$$\\mathbf{G_{i,j}}$$$ denote the integer in the\n$$$i$$$-th row and $$$j$$$-th column of the grid, where $$$i$$$ and $$$j$$$ are $$$0$$$-indexed.\nThe integer in the middle of the grid, $$$G_{1,1}$$$, is missing.\nFind the maximum number of rows, columns, and diagonals of this square,\nthat form sequences which are arithmetic progressions. You can replace the missing number with any\ninteger.\n</p>\n<p>\nAn arithmetic progression (also known as arithmetic sequence) is a sequence of numbers such that\nthe difference between consecutive terms is constant. In mathematical terms, this can be\nrepresented as $$$a_n = a_{n-1} + d$$$, where $$$d$$$ is the common difference. In this problem,\na sequence can be the $$$3$$$ numbers in either a row, column or diagonal.\nWe are looking to replace the missing value by an integer that maximizes the number of arithmetic\nprogressions that can be found in the resulting set of sequences.\n</p>\n\n<p>\nTwo sequences are considered different if they\nare from different rows, columns, or diagonals. For example, the sequence $$$\\{2, 4, 6\\}$$$\nacross the middle row and $$$\\{2, 4, 6\\}$$$ across the top row will be counted as two sequences but the\n  sequences $$$\\{2, 4, 6\\}$$$ and $$$\\{6, 4, 2\\}$$$ across the same row, column, or diagonal will be\ncounted as one sequence.\n</p>\n\n<h3>Input</h3>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.<br/>\nEach test case consists of 3 lines.<br/>\nThe first line of each test case contains 3 integers, $$$\\mathbf{G_{0,0}}$$$, $$$\\mathbf{G_{0,1}}$$$, and $$$\\mathbf{G_{0,2}}$$$.<br/>\nThe second line of each test case contains 2 integers, $$$\\mathbf{G_{1,0}}$$$ and $$$\\mathbf{G_{1,2}}$$$.<br/>\nThe last line of each test case contains 3 integers, $$$\\mathbf{G_{2,0}}$$$, $$$\\mathbf{G_{2,1}}$$$, and $$$\\mathbf{G_{2,2}}$$$.<br/>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the maximum possible number\nof arithmetic progressions that can be generated by the rows, columns, and diagonals of the grid\nafter setting the missing element.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1  \\le \\mathbf{T} \\le 100 $$$.<br/>\n\n$$$\\mathbf{G_{i,j}}$$$ are integers, for all $$$i, j$$$.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n$$$|\\mathbf{G_{i,j}}| \\le 50$$$, for all $$$i, j$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n$$$|\\mathbf{G_{i,j}}| \\le 10^9$$$, for all $$$i, j$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2J-qP-Ba44tawIC4X9rGNe8RbFMZtfCArzuA5wsTMdKme4OjNBJlm5LtyF8IbC-YHb_9qi1G4qXCZ-QtmxkRxiLsGonaNdLo6Y730heZkr5A/arithmetic_square_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n3 4 11\n10 9\n-1 6 7\n4 1 6\n3 5\n2 5 6\n9 9 9\n9 9\n9 9 9\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2bclrXAqpzObHUFhjQbLsaai86hVt-ECwl9HSEOQFg_R76uBdw-wv190tRXtJz663LUZgy2Tv5lneAbz9DX4aUZaLI5_-R5M217d2XjhrPckI/arithmetic_square_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4\nCase #2: 3\nCase #3: 8</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nIn Sample Case #1, if we set the missing number to be $$$5$$$, we have exactly $$$4$$$ arithmetic progressions.\n  <li> top left diagonal: $$$[3, 5, 7]$$$</li>\n  <li> top right diagonal: $$$[-1, 5, 11]$$$</li>\n  <li> middle column: $$$[4, 5, 6]$$$</li>\n  <li> right column: $$$[11, 9, 7]$$$</li>\nIf we set the missing number to any other integer, there would be only $$$1$$$ progression.\nThus, the answer is $$$4$$$.\n</p>\n\n<p>\nIn Sample Case #2, if we set the missing number to be $$$4$$$, we have exactly $$$3$$$ arithmetic progressions.\n  <li> top right diagonal: $$$[6, 4, 2]$$$</li>\n  <li> middle row: $$$[3, 4, 5]$$$</li>\n  <li> left column: $$$[4, 3, 2]$$$</li>\nSetting the missing number to any other integer results in fewer progressions, so we output $$$3$$$.\n</p>\n\n  <p>\nIn Sample Case #3, if we set the missing number to be $$$9$$$, we have all possible arithmetic progressions. There are\n$$$8$$$ total progressions (each one is $$$[9, 9, 9]$$$), so we output $$$8$$$. </p>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":6},{"type":1,"type__str":"VISIBLE","value":8}],"title":"Arithmetic Square","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  We are given $$$\\mathbf{N}$$$ intervals and are asked to find the maximum number of intervals we can\n  obtain if we perform a maximum of $$$\\mathbf{C}$$$ cuts. There are a few key observations required to\n  solve this problem.\n</p>\n<p>\n  First, performing a cut at the same point $$$X$$$ more than once will not result in any additional\n  intervals. After the initial cut, all intervals which contained $$$X$$$ will now be split into\n  intervals that have $$$X$$$ as an endpoint, and thus cannot be cut further at $$$X$$$.\n</p>\n<p>\n  Second, a cut at $$$X$$$ will result in the same number of additional intervals regardless of the\n  number of cuts performed earlier at other points. This implies that at most $$$N$$$ additional\n  intervals can be obtained with each cut.\n</p>\n<p>\n  Based on the aforementioned observations, we can solve this problem as follows. Let $$$A_{j}$$$\n  represent the number of points at which performing a cut will result in $$$j$$$ additional\n  intervals ($$$0 \\le j \\le \\mathbf{N}$$$). Iterating over $$$A$$$ in reverse order, we perform the cuts\n  greedily, adding $$$j \\cdot \\min(A_{j}, \\mathbf{C})$$$ to our result, and decrementing $$$\\mathbf{C}$$$ by\n  $$$\\min(A_{j}, \\mathbf{C})$$$ until $$$\\mathbf{C} = 0$$$. The final answer is the result.\n</p>\n<p>\n  Iterating over $$$A$$$ can be done in $$$O(\\mathbf{N})$$$. Now, we will go over how to\n  populate $$$A$$$ for the two test sets.\n</p>\n\n<h3>Test set 1</h3>\n<p>\n  For this test set, we can iterate\n  over each point coordinate and count the number of intervals it lies strictly within, i.e. for\n  each $$$X \\in [\\min(\\mathbf{L_i}),\\max(\\mathbf{R_i})]$$$, we count the number of intervals such that\n  $$$\\mathbf{L_i} \\lt X \\lt \\mathbf{R_i}$$$. Let that number be $$$k$$$. Then, we increment $$$A_k$$$.\n</p>\n<p>\n  This can be performed in $$$O(\\mathbf{N} \\cdot \\max(\\mathbf{R_i}))$$$.\n</p>\n\n<h3>Test set 2</h3>\n<p>\n  For this test set, the above solution would exceed the time limits.\n</p>\n<p>\n  We observe that the number of additional intervals obtained by a cut at two consecutive points\n  $$$X$$$ and $$$X+1$$$ are the same, except, possibly, when some intervals start or end at these\n  points.\n  We can construct a sorted map $$$M_X$$$ which maps the coordinate $$$X$$$ to the number of\n  <i>additional</i> intervals it lies <i>within</i> as compared to $$$X-1$$$. That is, for each\n  starting interval endpoint $$$\\mathbf{L_i}$$$, we increment $$$M_{\\mathbf{L_i}+1}$$$. And for each ending\n  interval endpoint $$$\\mathbf{R_i}$$$, we decrement $$$M_{\\mathbf{R_i}}$$$.\n</p>\n<p>\n  Consider an example with the following intervals: $$$[3, 7], [1, 5], [4, 7]$$$. The mappings\n  created are $$$M_2 = 1, M_4 = 1, M_5 = 0$$$, and $$$M_7 = -2$$$: because one interval begins at 1\n  ($$$M_2$$$ += $$$1$$$), one interval begins at 3 ($$$M_4$$$ += $$$1$$$),\n  one interval begins at 4 ($$$M_5$$$ += $$$1$$$), one intervals ends at 5\n  ($$$M_5$$$ -= $$$1$$$) and two intervals end at 7 ($$$M_7$$$ -= $$$2$$$).\n</p>\n<p>\n  Finally, we iterate over the map in sorted order of keys, keeping track of the number of\n  overlapping intervals $$$j$$$, the previous key $$$k_{prev}$$$, and the current key\n  $$$k_{curr}$$$. We increment $$$A_j$$$ by $$$k_{curr} - k_{prev}$$$. Now $$$A_j$$$ can be used\n  to compute the final solution as described above.\n</p>\n<p>\n  In the above example, we iterate over the keys of $$$M$$$, and start with $$$j = 0$$$. All points\n  smaller than the first key (2) will produce zero additional intervals.<br/>We increment $$$j$$$ by\n  $$$M_2$$$ and go to the next key. Now $$$j = 1, k_{curr} = 4, k_{prev} = 2$$$. We increment\n  $$$A_j = A_1$$$ by $$$k_{curr} - k_{prev} = 2$$$, because the 2 points (2, 3) will produce 1\n  additional interval if we perform a cut on them.<br/> Now we increment $$$j$$$ by $$$M_4$$$ and go\n  to the next key. Now $$$j = 2, k_{curr} = 5, k_{prev} = 4$$$. We increment $$$A_2$$$ by 1, because\n  there is 1 point (4) at which performing cuts will result in 2 additional intervals.<br/>Then, we\n  increment $$$j$$$ by $$$M_5 = 0$$$ and go to the next key, so\n  $$$j = 2, k_{curr} = 7, k_{prev} = 5$$$. Again we increment $$$A_2$$$ by 2, because the points 5,\n  6 also result in 2 additional intervals.<br/> Finally we increment $$$j$$$ by $$$M_7 = -2$$$ and\n  end.<br/> The final result is $$$A_1 = 2, A_2 = 3$$$, and we can start performing greedy cuts.\n</p>\n<p>\n  Constructing the map requires adding $$$2 \\cdot \\mathbf{N}$$$ endpoints to it, with each addition\n  requiring $$$O(\\log(\\mathbf{N}))$$$. Therefore, the overall time complexity is\n  $$$O(\\mathbf{N} \\cdot \\log(\\mathbf{N}))$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2ml26V5Fb_kCcZJXjmEZzbY1UBFhBvoooYuSbKKZWTsPD2F_AZZrlsqi4toLn1wTNtcpLAXC5k/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000082b933","statement":"<h3>Problem</h3>\n<p>\n  You are given $$$\\mathbf{N}$$$ intervals. An interval can be represented by two positive integers $$$\\mathbf{L_i}$$$ and $$$\\mathbf{R_i}$$$ - the\n  interval starts at $$$\\mathbf{L_i}$$$ and ends at $$$\\mathbf{R_i}$$$, represented as $$$[\\mathbf{L_i}, \\mathbf{R_i}]$$$. Intervals may\n  not be unique, so there might be multiple intervals with both equal $$$\\mathbf{L_i}$$$ and equal $$$\\mathbf{R_i}$$$.\n</p>\n<p>\n  You are allowed to perform a maximum of $$$\\mathbf{C}$$$ cuts. A cut at $$$X$$$ will cut all intervals $$$[L, R]$$$\n  for which $$$L \\lt X$$$ and $$$X \\lt R$$$. Cutting an interval at $$$X$$$ is defined as\n  splitting the interval into two intervals - $$$[L, X]$$$ and $$$[X, R]$$$. Note that cuts can only be\n  performed at integer points. Also, cutting at an endpoint of an interval ($$$X = L$$$ or $$$X = R$$$) has no\n  effect and does not split the interval.\n</p>\n<p>\n  You need to find the maximum number of intervals that can be obtained through a maximum of $$$\\mathbf{C}$$$\n  cuts.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input contains the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n</p>\n<p>\n  Each test case starts with a line containing two integers, $$$\\mathbf{N}$$$ and $$$\\mathbf{C}$$$, denoting the number of\n  intervals and the maximum number of cuts you can perform respectively. $$$\\mathbf{N}$$$ lines follow. <br/>\n  The $$$i$$$-th line contains two integers $$$\\mathbf{L_i}$$$ and $$$\\mathbf{R_i}$$$, describing the $$$i$$$-th\n  interval.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\n  where $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is the maximum number of\n  intervals that can be obtained through at most $$$\\mathbf{C}$$$ cuts, as described above.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n  $$$1 \\le \\mathbf{N} \\le 500$$$.<br/>\n  $$$1 \\le \\mathbf{C} \\le 10^{5}$$$.<br/>\n  $$$1 \\le \\mathbf{L_i} \\lt \\mathbf{R_i} \\le 10^{4}$$$ for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n  $$$1 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n  $$$1 \\le \\mathbf{C} \\le 10^{18}$$$.<br/>\n  $$$1 \\le \\mathbf{L_i} \\lt \\mathbf{R_i} \\le 10^{13}$$$ for all $$$i$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1crJJAt06qvopMYgE3oNXsKhqXwpVBDjc5YxSqVzZCTFfB-aI2G96HxIzFtKS2pTrfl-fg42X2dqPyUY2UQiQ2j9Rv4fj1UwtARNQfE3l_hQ/cutting_intervals_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">1\n3 3\n1 3\n2 4\n1 4\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2rxoySFGfRCeBMzCCOtvqH2gCsIs85ooC0FVvPEyjumP0Nwt3nKCk4GidSk3j2wxpTctHSo4o4zGH6K0myApFRHvb3rghSa7sGEK747oD961I/cutting_intervals_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 7\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  In the provided sample, cuts should be performed at $$$2$$$ and $$$3$$$ to get\n  the maximum number of intervals. <br/>\n  After the first cut at $$$2$$$, the intervals would be\n  $$$\\{[1, 2], [2, 3], [2, 4], [1, 2], [2, 4]\\}$$$. <br/>\n  After the second cut at $$$3$$$, the intervals would be\n  $$$\\{[1, 2], [2, 3], [2, 3], [3, 4], [1, 2], [2, 3], [3, 4]\\}$$$. <br/>\n  It can be seen that no interval can be cut further, so the answer is $$$7$$$.\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":9},{"type":1,"type__str":"VISIBLE","value":12}],"title":"Cutting Intervals","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Let us define $$$F(a, s) = V(a^{s} - (a \\enspace mod \\enspace \\mathbf{P})^{s})$$$.<br/>\n  The main idea is to use segment trees as there are range queries and point updates. If we can\n  calculate the $$$F(\\mathbf{A_i}, \\mathbf{S})$$$ efficiently, then we can query the range sum and also update the\n  values using segment tree operations. Calculating the $$$F(a, s)$$$ part needs\n  different approaches for different test sets.\n</p>\n\n<h3>\n  Test Set 1\n</h3>\n\n<p>\n  As $$$\\mathbf{S}$$$ can only be at most <i>4</i>, we can maintain individual segment trees for each $$$\\mathbf{S}$$$. So now\n  $$$\\mathbf{S}$$$ is fixed for a single segment tree. The values of $$$\\mathbf{A_i}$$$s are also small, so\n  we can calculate $$$\\mathbf{A_i}^{\\mathbf{S}}$$$ without overflowing. Let us say we have <i>2</i> segment tree\n  operations, $$$sum(start, end)$$$ which gives us the sum from index <i>start</i> to <i>end</i> and\n  $$$update(idx, val)$$$ which updates the index $$$idx$$$ with <i>val</i>. We are maintaining\n  <i>maxS</i> different segment trees. So initially in the <i>j'th</i> tree, we have the values\n  $$$F(\\mathbf{A_i}, \\mathbf{j})$$$s. When there is a query like $$$\\mathbf{2}$$$ $$$\\mathbf{S}$$$ $$$\\mathbf{L}$$$ $$$\\mathbf{R}$$$, we call $$$sum(\\mathbf{L}, \\mathbf{R})$$$ on\n  the $$$\\mathbf{S}$$$th tree. And when there is an update like $$$\\mathbf{1}$$$ $$$\\mathbf{pos}$$$ $$$\\mathbf{val}$$$, we have to update each tree, so\n  we call $$$update(\\mathbf{pos}, F(\\mathbf{val}, j))$$$ on the <i>j'th</i> tree.\n  <br/>\n  <br/>\n  Building the trees initially takes $$$O(maxS \\cdot \\mathbf{N})$$$.<br/>\n  Type 1 query (update) takes $$$O(\\mathbf{S} \\cdot \\log{\\mathbf{N}})$$$.<br/>\n  Type 2 query takes $$$O(\\log{\\mathbf{N}})$$$.<br/>\n  The time complexity of this solution is $$$O(maxS \\cdot \\mathbf{N} + \\mathbf{Q} \\cdot \\mathbf{S} \\cdot \\log{\\mathbf{N}})$$$.\n</p>\n\n<h3>\n  Test Set 2\n</h3>\n\n<p>\n  As $$$\\mathbf{S}$$$ and $$$\\mathbf{A_i}$$$s are huge now, we can't maintain a segment tree for each $$$\\mathbf{S}$$$ and also can't\n  calculate $$$\\mathbf{A_i}^{\\mathbf{S}}$$$ without overflowing. So a different approach is needed.<br/>\n  <br/>\n  The idea originates from <a href=\"https://en.wikipedia.org/wiki/Lifting-the-exponent_lemma\">\n  lifting-the-exponent-lemma</a>. The lemma states that, if <i>P</i> is a prime, and <i>P</i>\n  divides <i>a-b</i> but divides neither <i>a</i> nor <i>b</i>, then\n  $$$V(a^{n} - b^{n}) = V(a-b) + V(n)$$$. But it has a special case.<br/>\n  When $$$P = 2$$$ and <i>n</i> is even, then $$$V(a^{n} - b^{n}) = V(a-b) + V(a+b) + V(n) - 1$$$.\n  <br/>\n  Here $$$V(x)$$$ carries the same meaning as defined in the problem statement.\n  <br/>\n  Another observation is $$$\\mathbf{A_i} - (\\mathbf{A_i} \\enspace mod \\enspace \\mathbf{P})$$$ is always divisible by $$$\\mathbf{P}$$$,\n  which makes it possible for us to use the lemma.<br/>\n  <br/>\n  We will handle everything in $$$2$$$ cases.<br/>\n  <br/>\n  <i>Case 1 - $$$\\mathbf{A_i}$$$ or $$$\\mathbf{val}$$$ is divisible by $$$\\mathbf{P}$$$:</i><br/>\n  We will have a segment tree for this. Initially we will update the indices having $$$\\mathbf{A_i}$$$s\n  divisible by $$$\\mathbf{P}$$$ with $$$V(\\mathbf{A_i})$$$s. When there is an update like $$$\\mathbf{1}$$$ $$$\\mathbf{pos}$$$ $$$\\mathbf{val}$$$, we will\n  update index $$$\\mathbf{pos}$$$ with $$$V(\\mathbf{val})$$$.<br/>\n  When we have a query like $$$\\mathbf{2}$$$ $$$\\mathbf{S}$$$ $$$\\mathbf{L}$$$ $$$\\mathbf{R}$$$, we will call $$$sum(\\mathbf{L}, \\mathbf{R})$$$ and multiply that with\n  $$$\\mathbf{S}$$$, because $$$F(\\mathbf{A_i}, \\mathbf{S}) = \\mathbf{S} \\cdot V(\\mathbf{A_i})$$$ in this case.<br/>\n  <br/>\n  <i>Case 2 - $$$\\mathbf{A_i}$$$ or $$$\\mathbf{val}$$$ is not divisible by $$$\\mathbf{P}$$$:</i><br/>\n  This has <i>2</i> subcases because of the special case, so we will have <i>2</i> separate\n  segment trees. Initially we will update the indices having $$$\\mathbf{A_i}$$$s not divisible by $$$\\mathbf{P}$$$ with\n  $$$V(\\mathbf{A_i} - (\\mathbf{A_i} \\enspace mod \\enspace \\mathbf{P}))$$$ in one tree and with\n  $$$V(\\mathbf{A_i} + (\\mathbf{A_i} \\enspace mod \\enspace \\mathbf{P})) - 1$$$ in the other. When there is an update like\n  $$$\\mathbf{1}$$$ $$$\\mathbf{pos}$$$ $$$\\mathbf{val}$$$, we will update index $$$\\mathbf{pos}$$$ with $$$V(\\mathbf{val} - (\\mathbf{val} \\enspace mod \\enspace \\mathbf{P}))\n  $$$ in the first tree and with $$$V(\\mathbf{val} + (\\mathbf{val} \\enspace mod \\enspace \\mathbf{P})) - 1$$$ on the other\n  .<br/>\n  We will also maintain another segment tree that will help us query the number of values that are\n  not divisible by $$$\\mathbf{P}$$$ in a given range.<br/>\n  When we have a query like $$$\\mathbf{2}$$$ $$$\\mathbf{S}$$$ $$$\\mathbf{L}$$$ $$$\\mathbf{R}$$$, if $$$\\mathbf{P} = 2$$$ and $$$\\mathbf{S}$$$ is even, then we call\n  $$$sum(\\mathbf{L}, \\mathbf{R})$$$ on both segment trees and add them. Otherwise we call it only on the first\n  one. Also if there are <i>X</i> values not divisible by $$$\\mathbf{P}$$$ in the range $$$\\mathbf{L}$$$ to $$$\\mathbf{R}$$$, we will add\n  $$$X \\cdot V(\\mathbf{S})$$$ to the answer.<br/>\n  <br/>\n  The final answer is the summation of the queries from the <i>2</i> above cases.\n</p>\n<p>\n  $$$V(\\mathbf{S})$$$ can be calculated in $$$O(\\log\\mathbf{S})$$$. And when $$$\\mathbf{A_i}$$$ is divisible by $$$\\mathbf{P}$$$, the\n  value of $$$V(\\mathbf{A_i}^{\\mathbf{S}} - (\\mathbf{A_i} \\enspace mod \\enspace \\mathbf{P})^{\\mathbf{S}})$$$ is just\n  $$$V(\\mathbf{A_i}^{\\mathbf{S}})$$$, which is $$$\\mathbf{S} \\cdot V(\\mathbf{A_i})$$$, that can be calculated with brute force\n  with complexity of $$$O(\\log\\mathbf{A_i})$$$.\n  <br/><br/>\n  The time complexity of this solution is\n  $$$O(\\mathbf{N}\\log(\\max(\\mathbf{A_i})) + \\mathbf{Q} \\cdot (\\log\\mathbf{N} + \\log(\\max(\\mathbf{S}, \\mathbf{val}))))$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2URRO-KHxv2a_UXuZNnSwhtGGDJ8mdy4V2g_FcJrcGzQBL9bywGnSiB9i4AGncfpf8UkDlHjAp/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000082bcf4","statement":"<h3>Problem</h3>\n<p>\n  You are given a prime number $$$\\mathbf{P}$$$.\n</p>\n<p>\n  Let's define $$$V(x)$$$ as the degree of $$$\\mathbf{P}$$$ in the prime factorization of $$$x$$$.\n  To be clearer, if $$$V(x) = y$$$ then $$$x$$$ is divisible by $$$\\mathbf{P}^y$$$, but not divisible by\n  $$$\\mathbf{P}^{y+1}$$$.<br/>\n  Also we define $$$V(0) = 0$$$.\n  </p>\n<p>\n  For example, when $$$\\mathbf{P}=3$$$, and $$$x=45$$$, since $$$45=5\\cdot3^2$$$, therefore\n  $$$V(45)=2$$$.\n</p>\n\n<p>\n  You are also given an array $$$\\mathbf{A}$$$ with $$$\\mathbf{N}$$$ elements. You need to process $$$\\mathbf{Q}$$$ queries of $$$2$$$ types on\n  this array:\n  <ul>\n  <li>type $$$1$$$ query: <code>1 $$$\\mathbf{pos}$$$ $$$\\mathbf{val}$$$</code> - assign a value $$$\\mathbf{val}$$$ to the element at $$$\\mathbf{pos}$$$, i.e. $$$\\mathbf{A_{pos}}:= \\mathbf{val}$$$</li>\n  <li>type $$$2$$$ query: <code>2 $$$\\mathbf{S}$$$ $$$\\mathbf{L}$$$ $$$\\mathbf{R}$$$</code> - print $$$\\sum\\limits_{i=\\mathbf{L}}^{\\mathbf{R}} V(\\mathbf{A_i}^{\\mathbf{S}} - (\\mathbf{A_i} \\bmod \\mathbf{P})^{\\mathbf{S}})$$$.</li>\n    </ul>\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.<br/>\n  The first line of each test case contains $$$3$$$ space separated positive integers $$$\\mathbf{N}$$$, $$$\\mathbf{Q}$$$ and\n  $$$\\mathbf{P}$$$ - the number of elements in the array, the number of queries and a prime number. <br/>\n  The next line contains $$$\\mathbf{N}$$$ positive integers $$$\\mathbf{A_1}, \\mathbf{A_2}, \\dots, \\mathbf{A_N}$$$ representing\n  elements of array $$$\\mathbf{A}$$$.<br/>\n  Each of the next $$$\\mathbf{Q}$$$ lines describes a query, and contains either<br/>\n  <ul>\n    <li>$$$3$$$ space separated positive integers: <code>1 $$$\\mathbf{pos}$$$ $$$\\mathbf{val}$$$</code></li>\n    <li>or $$$4$$$ space separated positive integers: <code>2 $$$\\mathbf{S}$$$ $$$\\mathbf{L}$$$ $$$\\mathbf{R}$$$</code></li>\n  </ul>\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\n  where $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is a list of the answers for\n  each query of type $$$\\mathbf{2}$$$.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 90 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$<br/>\n  $$$2 \\le \\mathbf{P} \\le 10^9$$$ <br/>\n  $$$\\mathbf{P}$$$ is a prime number. <br/>\n  $$$1 \\le \\mathbf{pos} \\le \\mathbf{N}$$$ <br/>\n  $$$1 \\le\\mathbf{L} \\le \\mathbf{R} \\le \\mathbf{N}$$$ <br/>\n  <br/>\n  For at most 10 cases:<br/>\n  $$$1 \\le \\mathbf{N} \\le 5 \\times 10^5$$$ <br/>\n  $$$1 \\le \\mathbf{Q} \\le 10^5$$$ <br/>\n  <br/>\n  For the remaining test cases:<br/>\n  $$$1 \\le \\mathbf{N} \\le 10^3$$$ <br/>\n  $$$1 \\le \\mathbf{Q} \\le 10^3$$$ <br/>\n  <br/>\n  There will always be at least one query of type $$$\\mathbf{2}$$$.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{S} \\le 4$$$ <br/>\n  $$$1 \\le \\mathbf{A_i} \\le 10^3$$$ <br/>\n  $$$1 \\le \\mathbf{val} \\le 10^3$$$ <br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  $$$1 \\le \\mathbf{S} \\le 10^9$$$ <br/>\n  $$$1 \\le \\mathbf{A_i} \\le 10^{18}$$$ <br/>\n  $$$1 \\le \\mathbf{val} \\le 10^{18}$$$ <br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2acrmZIgSlE3nUVeKALA15l6Uq1YY1g6jbGf4PUpX8sABMf0ASY7v4PZkGS73EAR1cPEhruOuPd0DhSxs7IsnnWcO0Q8p8T2IkG65fiwSU5OM/primes_and_queries_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5 5 2\n16 94 62 67 91\n2 3 3 4\n1 1 69\n2 3 1 4\n2 1 1 1\n2 3 2 2\n5 5 5\n1 2 3 4 5\n2 1 1 5\n1 3 98\n2 3 2 4\n1 5 3\n2 2 1 5\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0ITj8M_fW8YNpxBbDvWkWiFivXe4-JftvDf5x56PMtEk6eSb8Dduv-0jUNNwjjuDR0u52AwKVvT5pxETYzxuC5v2artqiAVRum4ADxyFC_vftL/primes_and_queries_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4 9 2 3\nCase #2: 1 1 1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>In Sample Case #1</p>\nThe first query is a query of type $$$2$$$,\nwhere $$$\\mathbf{S}=3, \\mathbf{L}=3, \\mathbf{R}=4$$$. Let&apos;s calculate the result for this query: <br/>\n$$$i=3, V(62^3 - (62 \\bmod  2)^3) = 3$$$<br/>\n$$$i=4, V(67^3 - (67 \\bmod 2)^3) = 1$$$ <br/>\n$$$\\sum\\limits_{i=3}^{4} V(\\mathbf{A_i}^{3} - (\\mathbf{A_i} \\bmod \\mathbf{P})^{3})=3+1=4$$$ <br/>\nThe second query is of type $$$1$$$, where we need to assign $$$69$$$ to $$$\\mathbf{A_1}$$$, so our array\n$$$\\mathbf{A}$$$ now becomes: <code>$$$69 \\enspace 94 \\enspace 62 \\enspace 67 \\enspace 91$$$</code>.<br/>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":17},{"type":1,"type__str":"VISIBLE","value":22}],"title":"Primes and Queries","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3> Test set 1 </h3>\n\n<p>\n  For consistency, we will\n  use $$$maxDifficulty$$$ to represent the maximum difficulty of a problem which is equal to $$$1000$$$ for this test set.\n  As the difficulty of any problem can be at most $$$1000$$$, we can keep\n  track of all the problems that can be used to test the students. This can be done\n  by maintaining a boolean array $$$problemAvailable$$$ of size $$$maxDifficulty$$$ where\n  $$$problemAvailable[i]$$$ is true if a problem is still available for difficulty $$$i$$$.\n  We can iterate over the given $$$\\mathbf{N}$$$ sets of problems and for each set $$$i$$$, mark that a problem\n  exists for each difficulty $$$x$$$ such that $$$\\mathbf{A_i} \\le x \\le \\mathbf{B_i}$$$. As no two sets contain the problems with\n  same difficulty level, we will iterate over a particular difficulty level at most once. Hence, we can\n  fill the boolean array $$$problemAvailable$$$ in $$$O(maxDifficulty)$$$ time.\n</p>\n\n<p>\n  For each query $$$j$$$, we can iterate through all remaining problems and\n  find out which problem has the difficulty $$$d$$$ such that $$$abs(d-\\mathbf{S_j})$$$ is minimum.\n  This can be done in $$$O(maxDifficulty)$$$ time. After finding such problem, we can remove this problem\n  from the remaining problems by marking $$$problemAvailable[d]$$$ as false. This can be done in\n  constant time. Hence, we can answer each query in $$$O(maxDifficulty)$$$ time. The\n  overall complexity of the solution is $$$O(\\mathbf{M} \\times maxDifficulty)$$$.\n</p>\n\n<h3> Test set 2 </h3>\n\n<p>\n  We cannot list problems with all possible difficulties as maximum\n  difficulty can go upto $$$10^{18}$$$ in this test set. As the problem sets\n  contain problems with disjoint difficulties, we can store the problem sets as a range.\n  This can be done by using a map where key denotes the starting value of the range of difficulty\n  and value denotes the ending range of difficulty. To store the ranges from the initial problem\n  sets, we would need insertion operation in map. Hence,\n  we can store the ranges in $$$O(\\mathbf{N} \\times \\log \\mathbf{N})$$$ time complexity initially.\n</p>\n\n<p>\n  For a query $$$j$$$, we need to lookup into the map to find the problem with difficulty $$$d$$$\n  such that $$$abs(d-\\mathbf{S_j})$$$ is minimized. We can perform an upper bound operation on map. In C++, one can use\n      <a href=\"http://www.cplusplus.com/reference/map/map/upper_bound/\" target=\"_blank\">std::map::upper_bound</a> method.\n       upper_bound($$$z$$$) returns first element greater than $$$z$$$. Suppose\n      upper_bound($$$\\mathbf{S_j}$$$) returned $$$k$$$-th element of the map.\n  There are several cases that could occur:\n  <ul>\n    <li>\n      $$$k=1.$$$<br/>\n      <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2DJnYeRZiuh-V6QemdKy4tDVwnh0duKeGRfB302JAK_EpgSl3yKFuCCFRO4RuCJhXm2bH-t7RFUgzygDt7lZBZJg/kEquals1Case.png\" width=\"60%\" alt=\"Could not load image\"/><br/>\n      This means that there is no range in map which could contain $$$\\mathbf{S_j}$$$ as the first range in\n      map contains all values greater than $$$\\mathbf{S_j}$$$.  Let the range corresponding to\n      first entry by $$$(x,y)$$$. The problem with difficulty $$$x$$$ will be the one with\n      closest value to $$$\\mathbf{S_j}$$$. Thus, we can choose problem with difficulty $$$x$$$ for this query.\n      We can now update this range to $$$(x+1,y)$$$ as problem with difficulty $$$x$$$ is not available anymore.\n      If $$$x+1 \\gt y$$$, we can remove this range.\n    </li>\n    <li>\n      Let the range corresponding to $$$(k-1)$$$-th element in map be $$$(l,r)$$$.\n      There are two cases here:\n      <ul>\n        <li>\n          $$$l \\le \\mathbf{S_j} \\le r$$$.<br/>\n          <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0DHd3tPSLC1MRpQJvAp0jtlNqL16CRHc6VlYIE6uxxn48V5ZYfExrLIB2u0yPjpo1aV-1seiIkdihn1CDsjbDVyNrfUg/SjProblemExists.png\" width=\"60%\" alt=\"Could not load image\"/><br/>\n          This means that the problem with difficulty $$$\\mathbf{S_j}$$$ exists. The answer to this\n          query would be the problem with difficulty $$$\\mathbf{S_j}$$$. As this problem is not available\n          for the remaining queries, we can remove the range $$$(l,r)$$$ and insert 2 separate\n          ranges $$$(l,\\mathbf{S_j}-1)$$$ and $$$(\\mathbf{S_j}+1, r)$$$. If any of the ranges is invalid, we can\n          ignore that range.\n        </li>\n        <li>\n         $$$r \\lt \\mathbf{S_j}$$$.<br/>\n          <img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1w-XYX-I67IsAA5oyIGBBrUxxuh4pcRdl3HtjaBLqhX0yTiNHzvZV2nPOdMBTv55HEdVJEbgxamGuhlYZadUubxJQ7kkKZTDwfiQ/SjProblemDoesNotExist.png\" width=\"60%\" alt=\"Could not load image\"/><br/>\n         This means that there is no problem with difficulty $$$\\mathbf{S_j}$$$.\n         If $$$\\mathbf{S_j} - r \\le x - \\mathbf{S_j}$$$, then we can select the problem with difficulty $$$r$$$ as\n          it is closest to $$$\\mathbf{S_j}$$$. We can update the range $$$(l,r)$$$ to $$$(l,r-1)$$$ if it is\n          a valid range.\n          Otherwise, we can select the problem with difficulty $$$x$$$. We can update the range $$$(x,y)$$$\n          to $$$(x+1,y)$$$ if it is a valid range.\n        </li>\n      </ul>\n    </li>\n</ul>\n</p>\n\n<p>\n  Each query can lead to addition of at most $$$1$$$ new entry into the map. Hence, the size of the\n  map would be $$$O(\\mathbf{N} + \\mathbf{M})$$$. We perform $$$O(1)$$$ operations each of which takes\n  $$$O(\\log (\\mathbf{N} + \\mathbf{M}))$$$ time to compute answer\n  for a single query. So, we can\n  answer $$$\\mathbf{M}$$$ queries in $$$O(\\mathbf{M} \\times \\log (\\mathbf{N} + \\mathbf{M}))$$$ time.\n  Hence, the overall complexity of the solution is $$$O(\\mathbf{N} \\times \\log \\mathbf{N} + \\mathbf{M} \\times \\log (\\mathbf{N} + \\mathbf{M}))$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2b-w3OHnlVxCGs_K9HfPwabEBpO4gERa1ibeu8V895bK2RmRsyR5VfbiDooc8o9c0_OyHN2nnN/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000082bffc","statement":"<h3>Problem</h3>\n<p>\n  It's time for the final exam in algorithms and data structures!\n</p>\n\n<p>\n  Edsger prepared $$$\\mathbf{N}$$$ sets of problems.\n  Each set consists of problems in an increasing difficulty sequence;\n  the $$$i$$$-th set can be described by two integers $$$\\mathbf{A_i}$$$ and $$$\\mathbf{B_i}$$$ ($$$\\mathbf{A_i} \\le \\mathbf{B_i}$$$),\nwhich denotes that this set contains problems with difficulties $$$\\mathbf{A_i}, \\mathbf{A_i}+1, \\dots, \\mathbf{B_i}$$$.\nAmong all problems from all sets, it is guaranteed that no two problems have the same difficulty.\n</p>\n\n<p>This semester Edsger has to test $$$\\mathbf{M}$$$ students.\nHe wants to test each student with exactly one problem from one of his sets.\nNo two students can get the exact same problem,\nso when Edsger tests a student\nwith some problem, he cannot use this problem anymore.\nThrough countless lectures, exercises, and projects, Edsger has gauged student number $$$j$$$ to have\nskill level $$$\\mathbf{S_j}$$$, and wants to give that student a problem with difficulty $$$\\mathbf{S_j}$$$.\nUnfortunately, this is not always possible, as Edsger may have not prepared a problem of this difficulty,\nor he may have already asked  this problem to some other student earlier.\nTherefore, Edsger will choose for the $$$j$$$-th student a problem of difficulty $$$P_j$$$,\nin a way that $$$|P_j - \\mathbf{S_j}|$$$ is minimal and a question of difficulty $$$P_j$$$ was not already\ngiven to any of the students before the $$$j$$$-th student.\nIn case of ties, Edsger will always choose the easier problem.\nNote that the problem chosen for the $$$j$$$-th student may\naffect problems chosen for all the students tested later,\nso you have to process students in the same order as they appear in the input.\n</p>\n\n<p>\n  As keeping track of all the problems can be fairly complicated,\n  can you help Edsger and determine which problems he should give to all of his students?\n</p>\n\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$.\n  $$$\\mathbf{T}$$$ test cases follow.\n</p>\n<p>\n  Each test case begins with a line which contains\n  two integers $$$\\mathbf{N}$$$ and $$$\\mathbf{M}$$$: the number of problem sets,\n  and the number of students, respectively.\n  $$$\\mathbf{N}$$$ lines follow, describing the problem sets. Each of these $$$\\mathbf{N}$$$ lines\n  consists of two integers $$$\\mathbf{A_i}$$$ and $$$\\mathbf{B_i}$$$ denoting the easiest and the hardest\n  problem in the $$$i$$$-th problem set.\n  Finally, the test case ends with a single line with $$$\\mathbf{M}$$$ integers $$$\\mathbf{S_1}, \\mathbf{S_2}, \\dots,\\mathbf{S_M}$$$\n  denoting students' skill levels in the order they will be tested.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$P_1\\,P_2\\,\\dots\\,P_M$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$P_j$$$ is a difficulty of a problem that will\n  be given to the $$$j$$$-th student.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\nAmong all problem sets, no two problems have the same difficulty.<br/>\nThe number of problems in total is greater than or equal to the number of students.\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 1000$$$.<br/>\n$$$1 \\le \\mathbf{M} \\le 1000$$$.<br/>\n$$$1 \\le \\mathbf{A_i} \\le \\mathbf{B_i} \\le 1000$$$ for all $$$i$$$.<br/>\n$$$1 \\le \\mathbf{S_j} \\le 1000$$$ for all $$$j$$$.<br/>\n\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n$$$1 \\le \\mathbf{N} \\le 10^5$$$.<br/>\n$$$1 \\le \\mathbf{M} \\le 10^5$$$.<br/>\n$$$1 \\le \\mathbf{A_i} \\le \\mathbf{B_i} \\le 10^{18}$$$ for all $$$i$$$.<br/>\n$$$1 \\le \\mathbf{S_j} \\le 10^{18}$$$ for all $$$j$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1JKqPzCaEIOc6yCi-ZwLgvl13LORJjQ7UJjv16TpTwG-8pwlDDBRwm0EM0MCgJoJ43_uIvYEP4wnrAo3NBfRUj0za472tT3-IG/final_exam_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n5 4\n1 2\n6 7\n9 12\n24 24\n41 50\n14 24 24 4\n1 1\n42 42\n24\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U11B8oAnlM-HLe2z15jDA9Vcyl1agG5cfx2jSpxv8aNYyxHFFjca9BfvDZaxWbkGm342xVxYG-K82m_XqAsJHcJ_-Md11sdK274Ug/final_exam_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 12 24 11 2\nCase #2: 42</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, we have $$$\\mathbf{N} = 5$$$ problem sets and $$$\\mathbf{M} = 4$$$ students.\n  <ul>\n   <li> For the first student, we are looking for a problem with the difficulty closest to their skill level\n  $$$\\mathbf{S_1}= 14$$$. The problem with the minimum difference is problem with difficulty $$$12$$$, which we can\n    find in the third problem set, so $$$P_1 = 12$$$.</li>\n    <li>For the second student, we are looking for a problem with the difficulty closest to their skill level\n    $$$\\mathbf{S_2} = 24$$$. Fortunately, we can find a problem of this exact difficulty in the fourth problem set, so $$$P_2 = 24$$$.</li>\n    <li>For the third student, we are once again looking for a problem with the difficulty closest to the skill level\n    $$$\\mathbf{S_3} = 24$$$. As we already used the problem with difficulty $$$24$$$, we cannot use this problem. The problem closest\n    in difficulty is $$$11$$$, as $$$12$$$ was already used as well. Therefore $$$P_3 = 11$$$.</li>\n    <li>Finally, for the fourth student, we are looking for the problem\n      closest to his skill level $$$\\mathbf{S_4} = 4$$$. We have two problems with the same difference:\n    $$$2$$$ and $$$6$$$. We choose the easier problem, so $$$P_4 = 2$$$.</li>\n  </ul>\n</p>\n<p>\n  In Sample Case #2, we have $$$\\mathbf{N} = 1$$$ problem set and $$$\\mathbf{M} = 1$$$ student. In the only problem set, there is only one problem,\n  so we have to use this problem to examine the first and only student, so $$$P_1 = 42$$$.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":11},{"type":1,"type__str":"VISIBLE","value":15}],"title":"Final Exam","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000004361e3","type":1,"type__str":"SPECTATOR"},"title":"Round D 2021"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
