{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1434213000000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000433c84","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\nRound 3 was very tough!  The highest score was 73, which four coders reached by solving problems A through D. The lowest score of any of the advancers was only 50!\n</p>\n<p>\nProblems A and B, <i>Fairland</i> and <i>Smoothing Window</i>, were both relatively easy optimization problems.  The problems got much harder from there.  <i>Runaway Quail</i> was a dynamic programming problem, where it was not at all easy to find a polynomial-time solution. \n<i>Log Set</i> required some math and some more dynamic programming.  And for a change of topic, <i>River Flow</i> was a signal processing problem.\n</p>\n<p>\nCongratulations to all our finalists!  We're looking forward to the finals in Seattle this August!\n</p>\n<p>\nProblem A.  <i>Fairland</i> written by Brian Nachbar.  Prepared by Carlos Gu√≠a.\n</p>\n<p>\nProblem B.  <i>Smoothing Window</i> written by Igor Naverniouk.  Prepared by Steve Thomas.\n</p>\n<p>\nProblem C.  <i>Runaway Quail</i> written by Ian Tullis.  Prepared by Steve Thomas.\n</p>\n<p>\nProblem D.  <i>Log Set</i> written by David Arthur.  Prepared by Yiming Li.\n</p>\n<p>\nProblem E.  <i>River Flow</i> written by Steve Thomas.  Prepared by Yiming Li.\n</p>\n<p>\nSolutions and other preparation by\nPetr Mitrichev,\nJohn Dethridge,\nYiming Li,\nJonathan Wills,\nAhmed Aly,\nIan Tullis,\nDavid Arthur,\nIgor Naverniouk,\nJonathan Gunawan,\nSteve Thomas, and\nCarlos Guia.\n</p>","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1434204000000,"tasks":[{"analysis":"<p>\nThe optimal strategy will consist of running either to the left or right until we catch a particular quail, changing direction, then running until we catch a particular quail on the other side, changing direction again, etc., until we have caught every quail.  Changing direction at a time other than when catching a quail would be wasteful.\n</p>\n<p>\nConsider a partial solution where we have caught some of the quail on each side, and returned to the origin.  For each side, let Q be the fastest quail we have not caught.  (To simplify the analysis, if there is more than one quail on the same side with the same speed, we ignore all but the farthest one.)  Each other quail R on that side must fall into one of these categories:\n</p>\n<p>\n<ul>\n<li> R is faster than Q.  In this case, R has already been caught.\n<li> R is slower than Q, and is farther away.  R cannot have been caught in this case, because we would have had to run past Q to get to R.\n<li> R is slower than Q, and is not farther away.  In this case, we might have already caught R, or we might not.  But it doesn't affect our solution &mdash; if we have not yet caught R, we will run past R when we go to catch Q anyway.\n</ul>\n</p>\n<p>\nSo we can solve this problem with dynamic programming, where the states only need to include the identity of the fastest uncaught quail in each direction.  We will keep the fastest time at which we can achieve each state we generate.\n</p>\n<p>\nFor each state, starting from the initial state where we have caught nothing, we try running in either direction until we catch the fastest uncaught quail in that direction, and then run back to the origin.  We also try running to catch each quail farther than the fastest uncaught quail in each direction, and then running back.  For each of these options, we compute the new fastest uncaught quail in the direction we ran, which will tell us what the new state is when we return to the origin.  If we have achieved the new state with a faster time than we had for it before, we update the time for that state.\n</p>\n<p>\nWhenever we generate the state where every quail has been caught, we check the time at which we caught the last quail.  The fastest of these times is the answer.\n</p>","id":"0000000000433603","statement":"<h3>Problem</h3>\n<p>\nOh no -- your <b>N</b> pet quail have all gotten loose! You are currently at position 0 on a line; the <b>i</b>th quail starts off at some nonzero integer (positive or negative) position <b>P<sub>i</sub></b> on that line, in meters, and will continuously run away from you at a constant integer speed of <b>S<sub>i</sub></b> meters per second. You can run at a constant integer speed of <b>Y</b> meters per second, and can change direction instantaneously whenever you want. Note that quail constantly run away from you even if you are not running toward them at the time. Whenever you occupy the same point as a quail, that quail is caught (this takes no additional time).<br>\n<br>\nWhat is the minimum number of seconds it will take you to catch all of the quail?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each begins with one line with two space-separated integers <b>Y</b>, your speed, and <b>N</b>, the number of quail, and is followed by two more lines with <b>N</b> space-separated integers each. The first of these gives the positions <b>P<sub>i</sub></b> of the quail, and the second gives the speeds <b>S<sub>i</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the test case number (starting from 1) and y is the minimum number of seconds needed to catch all the quail.\n</p>\n<p>\ny will be considered correct if it is within an absolute or relative error of 10<sup>-6</sup> of the correct answer.  See the <a href=\"/codejam/faq.html#floating_point\" target=\"_blank\">FAQ</a> for an explanation of what that means, and what formats of real numbers we accept.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n1 &le; <b>T</b> &le; 100.<br/>\n<br>\n2 &le; <b>Y</b> &le; 1000.<br/>\n-10<sup>7</sup> &le; <b>P<sub>i</sub></b> &le; 10<sup>7</sup>; no <b>P<sub>i</sub></b> is 0.<br/>\n1 &le; <b>S<sub>i</sub></b> &lt; <b>Y</b>.<br/>\n</p>\n\n<h4>Small dataset</h4>\n<p>\nTime limit: 240 seconds.<br/>\n1 &le; <b>N</b> &le; 25.<br/>\n</p>\n\n<h4>Large dataset</h4>\n<p>\nTime limit: 480 seconds.<br/>\n1 &le; <b>N</b> &le; 500.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper\">\n  <table>\n  <tr>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Input</span>\n  <br/>&nbsp;\n  </td>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Output</span>\n  <br/>&nbsp;\n  </td>\n  </tr>\n  <tr>\n  <td>\n  <pre class=\"io-content\">2\n4 3\n-3 -6 -9\n3 2 1\n2 2\n1 -1\n1 1\n\n  </pre>\n  </td>\n  <td>\n  <pre class=\"io-content\">Case #1: 3.000000\nCase #2: 5.000000\n  </pre>\n  </td></tr></table>\n  </div>\n  \n\nIn Case #1, you can run to the left and catch all three quail at the same time, 12 meters to the left of the starting position, which takes 3 seconds.<br>\n<br>\nIn Case #2, one optimal strategy is to run to the left until the second quail is caught at -2 m, which takes one second, and then run to the right in pursuit of the first quail, which you will catch at 6 m, taking four more seconds.","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":8},{"type":2,"type__str":"HIDDEN","value":15}],"title":"Runaway Quail","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\nWe need to find a salary X such that all salaries at the company are between X and X+D, and the number of remaining employees is maximized.\n</p>\n<p>\nIf employee i is kept, then X must be in the interval [S<sub>i</sub>-D, S<sub>i</sub>].  Not only that, but X must be in the interval [S<sub>j</sub>-D, S<sub>j</sub>] for each employee j who is the manager of employee i, or the manager of the manager of employee i, and so forth.  So for each employee, we want to find the intersection of all those intervals.  This is easily done using a preorder traversal of the tree, computing the intersection of all the intervals in the path from the root node to the current node.  (If the intersection is empty, we can't keep that employee.)\n</p>\n<p>\nNow we want to find the maximum number of intervals that overlap at any point.  Let the interval we get for employee i be [A<sub>i</sub>, B<sub>i</sub>].  Create an array of pairs of integers, with two pairs for each employee: one containing (A<sub>i</sub>, +1) and the other containing (B<sub>i</sub>, -1).  Sort this array by the first numbers of the pairs, breaking ties using the second number, by putting entries with +1 before those with -1.  Then we start a counter at zero, and iterate through the array in sorted order.  Add the second number of each pair to the counter.  The maximum value of the counter is the answer to the problem.\n</p>","id":"00000000004336ea","statement":"<h3>Problem</h3>\n<p>\nThe country of Fairland has very strict laws governing how companies organize and pay their employees:<ol>\n  <li>Each company must have exactly one CEO, who has no manager.</li>\n  <li>Every employee except for the CEO must have exactly one manager. (This means that the org chart showing all of the employees in a company is a tree, without cycles.)</li>\n  <li>As long as an employee is working for the company, their manager must never change. This means that if a manager leaves, then all of the employees reporting to that manager must also leave.</li>\n  <li>The CEO must never leave the company.</li>\n  <li>Every employee receives a salary -- some amount of Fairland dollars per year. An employee's salary must never change.</li>\n  <li>Different employees may have different salaries, and an employee's salary is not necessarily correlated with where in the org chart that employee is.</li>\n</ol>\nThe government of Fairland has just passed one additional law:\n<ol start=7>\n<li>\nThe difference between the largest salary and the smallest salary in the whole company must be at most <b>D</b> Fairland dollars.\n</li>\n</ol>\n</p>\n\n<p>\nMarie is the CEO of the Fairland General Stuff Corporation, and she has to ensure that her company complies with the new law. This may require laying off some employees. She has the list of the company's employees, their managers, and their salaries. What is the largest number of employees she can keep, including herself?\n</p>\n\n\n<h3>Input</h3>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each case begins with one line containing two space-separated integers <b>N</b> (the number of employees) and <b>D</b> (the maximum allowed salary difference). This is followed by one line with four space-separated integers (<b>S<sub>0</sub></b>, <b>A<sub>s</sub></b>, <b>C<sub>s</sub></b>, <b>R<sub>s</sub></b>) and then another line with four more space-separated integers (<b>M<sub>0</sub></b>, <b>A<sub>m</sub></b>, <b>C<sub>m</sub></b> and <b>R<sub>m</sub></b>). These last eight integers define the following sequences:<ul>\n  <li><b>S<sub>i+1</sub></b> = (<b>S<sub>i</sub></b> * <b>A<sub>s</sub></b> + <b>C<sub>s</sub></b>) <i>mod</i> <b>R<sub>s</sub></b></li>\n  <li><b>M<sub>i+1</sub></b> = (<b>M<sub>i</sub></b> * <b>A<sub>m</sub></b> + <b>C<sub>m</sub></b>) <i>mod</i> <b>R<sub>m</sub></b></li>\n</ul>\n</p>\n\nMarie's employee ID is 0, and all other employees have IDs from 1 to <nobr><b>N</b> - 1,</nobr> inclusive. The salary of employee <b>i</b> is <b>S<sub>i</sub></b>. For every employee <b>i</b> other than Marie, the manager is <nobr><b>M<sub>i</sub></b> <i>mod</i> <b>i</b></nobr>. (Note that this means that <b>M<sub>0</sub></b> does not affect Marie's manager -- she has none!)\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the test case number (starting from 1) and y is the largest number of employees Marie can keep at the company, including herself, such that all of laws 1-7 are obeyed.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n</p>\n1 &le; <b>T</b> &le; 100.<br/>\n0 &le; <b>S<sub>0</sub></b> &lt; <b>R<sub>s</sub></b>.<br/>\n0 &le; <b>M<sub>0</sub></b> &lt; <b>R<sub>m</sub></b>.<br/>\n0 &le; <b>A<sub>s</sub></b>, <b>A<sub>m</sub></b> &le; 1000.<br/>\n0 &le; <b>C<sub>s</sub></b>, <b>C<sub>m</sub></b> &le; 10<sup>9</sup>.<br/>\n\n<h4>Small dataset</h4>\n<p>\nTime limit: 240 seconds.<br/>\n1 &le; <b>N</b> &le; 1000.<br/>\n1 &le; <b>D</b> &le; 1000.<br/>\n1 &le; <b>R<sub>s</sub></b>, <b>R<sub>m</sub></b> &le; 1000.<br/>\n</p>\n\n<h4>Large dataset</h4>\n<p>\nTime limit: 480 seconds.<br/>\n1 &le; <b>N</b> &le; 10<sup>6</sup>.<br/>\n1 &le; <b>D</b> &le; 10<sup>6</sup>.<br/>\n1 &le; <b>R<sub>s</sub></b>, <b>R<sub>m</sub></b> &le; 10<sup>6</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper\">\n  <table>\n  <tr>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Input</span>\n  <br/>&nbsp;\n  </td>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Output</span>\n  <br/>&nbsp;\n  </td>\n  </tr>\n  <tr>\n  <td>\n  <pre class=\"io-content\">3\n1 395\n18 246 615815 60\n73 228 14618 195\n6 5\n10 1 3 17\n5 2 7 19\n10 13\n28 931 601463 36\n231 539 556432 258\n\n  </pre>\n  </td>\n  <td>\n  <pre class=\"io-content\">Case #1: 1\nCase #2: 3\nCase #3: 5\n\n  </pre>\n  </td></tr></table>\n  </div>\n  \n\nIn Case #1, the company has only a CEO and no other employees, but it does not violate any of the laws, so no changes need to be made.<br>\n<br>\nHere is the org chart for Case #2:<br>\n<br>\n<img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2A6Rj6Tr4TbS3rUlkZBUq8QuIl9HLQttdpu4KxhubErE9Eqy5drX26PfbgkHAPYY3NpZN3ufB09KfILHBCJmo/fairland_sample_2.png\">\n<br>\nThe optimal strategy is to save employees 0, 1, and 5 (who have salaries of 10, 13, and 8, respectively). It is not possible to save employee 2, for example, because her salary is more than 5 away from employee 0's salary of 10; since employee 0 cannot be laid off, employee 2 must be laid off (along with all employees who report to her).<br>\n<br>\nIf you want to check your sequences for employees 1 through 5, they are:<br>\n<br>\n<b>S</b>: 13, 16, 2, 5, 8<br>\n<b>M</b>: 17, 3, 13, 14, 16<br>\nManager numbers: 17 % 1 = 0, 3 % 2 = 1, 13 % 3 = 1, 14 % 4 = 2, 16 % 5 = 1<br>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":3},{"type":2,"type__str":"HIDDEN","value":9}],"title":"Fairland","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>One approach towards a solution is to construct the temperature sequence that begins with K-1 zeroes, followed by a single pass through all the N-K+1 smoothing window sums to fill in the rest of the sequence. For example, running this construction for the sum array ‚Äú0 12 0 12 0‚Äù with K = 3 (from the third sample case) produces the sequence ‚Äú0 0 0 12 -12 12 0‚Äù, where the difference between the maximum and minimum temperatures is 24. To reach a sequence that minimizes this difference, we tweak some values in the sequence as explained below.</p>\n\n<p>Let‚Äôs define GROUP(i) where (0 ‚â§ i &lt; K) as the group containing the (i % K)-th temperatures in the sequence. The sequence ‚Äú0 <b>0</b> <u>0</u> 12 <b>-12</b> <u>12</u> 0‚Äù above is grouped as follows:\n<ol>\n<li>‚Äú0 12 0‚Äù from the first, fourth, and seventh temperatures\n<li>‚Äú<b>0</b> <b>-12</b>‚Äù from the second and fifth temperatures\n<li>‚Äú<u>0</u> <u>12</u>‚Äù from the third and sixth temperatures\n</ol>\n<p>Changing the i-th temperature by Z degrees means that we need to compensate for this addition with other temperatures in the sequence. One way is by adding Z to the other temperatures in the same group, and subtracting Z from all the temperatures in another group. For example, to increase the first temperature reading by 3 degrees, we also increase the fourth and seventh temperature readings by 3, and reduce the temperatures in the second (or third) group by 3. The resulting sequence is ‚Äú3 -3 0 15 -15 12 3‚Äù. Notice that its sum array stays the same: ‚Äú0 12 0 12 0‚Äù.</p>\n\n<p>Now let‚Äôs define: \n<ul>\n<li>lo(i) as the minimum element in GROUP(i)\n<li>hi(i) as the maximum element in GROUP(i)\n<li>interval(i) as a range [lo(i), hi(i)]\n<li>SHIFT(i, y) as an operation that adds y to each member of GROUP(i).\n</ul>\n<p>We can remodel the original problem as follows:\n<blockquote>You are given K intervals, where the i-th interval spans from lo(i) to hi(i). You can perform any number of interval adjustments by choosing i, j, and y (0 ‚â§ i, j &lt; K), shifting the i-th interval by y (i.e., SHIFT(i, y)), and shifting the j-th interval by -y (i.e., SHIFT(i, -y)). Find a sequence of adjustments (where order doesn‚Äôt matter) that minimizes the covering range of all intervals, where the covering range of the intervals is max{hi(i)} - min{lo(j)} for all 0 ‚â§ i, j &lt; K. The minimum covering range is equivalent to the smallest possible difference between the minimum and maximum temperatures in the original problem.</blockquote>\n<p>Another important insight is that the shifting can be done independently and can be aggregated. That is, we can accumulate all positive shifts and do it in bulk, similarly with the negative shifts. Therefore, we can ‚Äúnormalize‚Äù all intervals by shifting them such that the lower bound of all intervals becomes 0. Denote Q to be the total sum of shifts, which is the sum of all lo(i) where 0 ‚â§ i &lt; K. For example, if we have two intervals [-10, -8] and [333, 777], after normalization they become [0, 2] and [0, 444] with Q = -10 + 333 = 323. Finally, we have to shift back the normalized intervals by Q degrees, but with the flexibility to distribute the shifts such that the covering range of all intervals is minimized.</p>\n<p>Notice that if we increment (or decrement) all the intervals by one, the relative positioning of each interval to one another won't change and thus it does not change the covering range of the intervals. Using this insight, we can reduce Q to Q % K by distributing the excess shifts Q evenly among the intervals without affecting the final answer. When Q is negative we can keep adding K to Q until it is non-negative.</p>\n<p>Suppose we have three normalized intervals [0, 4], [0, 9], and [0, 7], and the total sum of shifts Q is 40. We can distribute back 39 shifts evenly to all three intervals where each interval is shifted by 13, ending with [13, 17], [13, 22], and [13, 20]. Then, we can shift all of them down back to [0, 4], [0, 9], [0, 7] without changing their relative positioning and and we are left with Q = 1.</p>\n<p>Finally, we must distribute back the remaining shifts to the intervals and minimize the covering range of all intervals. </p>\n<p>Suppose that L is the size of the largest interval. If Q = 0, then there is no excess shift to distribute, and the minimum covering range is L. Otherwise, we can assign L - (hi(i) - lo(i)) excess shifts to interval i without changing the answer. Using the previous example, the current minimum difference is L = 9. Without changing the minimum covering range, we can assign 1 excess shift to interval [0, 4], and get [1, 5].</p>\n<p>If there are still some excess shifts remaining, it means we cannot distribute any more excess shifts without increasing the minimum covering range. Increasing the minimum covering range by 1 will make room for distributing K more excess shifts, which is enough for the remaining Q (since Q = sum of shifts % K, and thus it is less than K).</p>\n<p>The complexity of this solution is O(N).</p>\n","id":"0000000000433793","statement":"<h3>Problem</h3>\n<p>\nAdamma is a climate scientist interested in temperature. Every minute, she records the current temperature as an integer, creating a long list of integers: <nobr>x<sub>1</sub>, x<sub>2</sub>, ..., x<sub><b>N</b></sub></nobr>. (Adamma uses her own special temperature scale rather than a familiar one like Celsius or Kelvin, so it's possible for the values to be large and negative!) She often plots these temperatures on her computer screen.\n</p>\n\n<p>\nThis morning, she decided to compute a sliding average of this list in order to get a smoother plot. She used a smoothing window of size <b>K</b>, which means that she converted the sequence of <b>N</b> temperatures into a sequence of <nobr>(<b>N</b> - <b>K</b> + 1)</nobr> average temperatures: <nobr>s<sub>1</sub>, s<sub>2</sub>, ..., s<sub><b>N</b>-<b>K</b>+1</sub>.</nobr> Each s<sub>i</sub> is the average of the values <nobr>x<sub>i</sub>, x<sub>i+1</sub>, ..., x<sub>i+<b>K</b>-1</sub>.</nobr> The original x<sub>i</sub> values were all integers, but some of the s<sub>i</sub> may be fractional.\n</p>\n\n<p>\nUnfortunately, Adamma forgot to save the original sequence of temperatures! And now she wants to answer a different question -- what was the difference between the largest temperature and the smallest temperature? In other words, she needs to compute <nobr>max{x<sub>1</sub>, ..., x<sub><b>N</b></sub>} - min{x<sub>1</sub>, ..., x<sub><b>N</b></sub>}.</nobr> But she only has <b>N</b>, <b>K</b>, and the smoothed sequence.\n</p>\n\n<p>\nAfter some thinking, Adamma has realized that this might be impossible because there may be several valid answers. In that case, she wants to know the smallest possible answer among all of the possible original sequences that could have produced her smoothed sequence with the given values of <b>N</b> and <b>K</b>.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>.  <b>T</b> test cases follow; each test case consists of two lines. The first line contains integers <b>N</b> and <b>K</b> separated by a space character. The second line contains integer values <nobr>sum<sub>1</sub>, sum<sub>2</sub>, ..., sum<sub><b>N</b>-<b>K</b>+1</sub>,</nobr> separated by space characters. s<sub>i</sub> is given by <nobr>sum<sub>i</sub> / <b>K</b></nobr>.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the test case number (starting from 1) and y is the smallest possible difference between the largest and smallest temperature.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n1 &le; <b>T</b> &le; 100.<br/>\n2 &le; <b>K</b> &le; <b>N</b>.<br/>\nThe sum<sub>i</sub> will be integers between -10000 and 10000, inclusive.\n</p>\n\n<h4>Small dataset</h4>\n<p>\nTime limit: 240 seconds.<br/>\n2 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n<h4>Large dataset</h4>\n<p>\nTime limit: 480 seconds.<br/>\n2 &le; <b>N</b> &le; 1000.<br/>\n2 &le; <b>K</b> &le; 100.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper\">\n  <table>\n  <tr>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Input</span>\n  <br/>&nbsp;\n  </td>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Output</span>\n  <br/>&nbsp;\n  </td>\n  </tr>\n  <tr>\n  <td>\n  <pre class=\"io-content\">3\n10 2\n1 2 3 4 5 6 7 8 9\n100 100\n-100\n7 3\n0 12 0 12 0\n\n  </pre>\n  </td>\n  <td>\n  <pre class=\"io-content\">Case #1: 5\nCase #2: 0\nCase #3: 12\n  </pre>\n  </td></tr></table>\n  </div>\n  \n\nIn Case #1, the smoothed sequence is:<br>\n<br>\n0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5<br>\n<br>\nThe integer sequence that gives the smallest difference is:<br>\n<br>\n0, 1, 1, 2, 2, 3, 3, 4, 4, 5<br>\n<br>\nNote that the sequence:<br>\n<br>\n0.5, 0.5, 1.5, 1.5, 2.5, 2.5, 3.5, 3.5, 4.5, 4.5<br>\n<br>\nWould give the same smoothed sequence with a maximum difference of 4, but this is not a valid answer because the original temperatures are known to have been integers.<br>\n<br>\nIn Case #2, all we know is that the sum of the 100 original values was -100. It's possible that all of the original values were exactly -1, in which case the difference between the largest and smallest temperatures would be 0, which is as small as differences get!<br>\n<br>\nIn Case #3, the original sequence could have been:<br>\n<br>\n-4, 8, -4, 8, -4, 8, -4","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":6},{"type":2,"type__str":"HIDDEN","value":7}],"title":"Smoothing Window","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\nAssume the farmers are not cheating.  The river flow data is periodic, with period 2D.  \n</p>\n<p>\nLet x<sub>i</sub> be d<sub>i</sub> - d<sub>i-1</sub> when i&gt;1, and x<sub>1</sub> = d<sub>1</sub> - d<sub>2D</sub>.  x<sub>i</sub> represents the difference in flow between day i and the previous day in the 2D-day cycle.\n</p>\n<p>\nEach farmer's actions change x<sub>i</sub> in the following way.  Let the first time a farmer changes between diverting water and allowing it to flow, or vice-versa, be T, and let the number of days for which that farmer performs the same action be P.  At times T, T+P, T+2P, etc., the farmer will alternate between adding 1 to x<sub>i</sub> and subtracting 1 from x<sub>i</sub>.  (Whether it adds 1 or subtracts 1 first depends on whether the farmer is diverting water or allowing it to flow at the start of the 2D-day cycle).  For example, a farmer that starts diverting water at time 3, and changes every 8 days, contributes -1 to x<sub>3</sub>, +1 to x<sub>11</sub>, -1 to x<sub>19</sub>, +1 to x<sub>27</sub>, etc.\n</p>\n<p>\nWe can assume that if two farmers share the same T and P, they either both start the cycle diverting water or both start the cycle allowing it to flow.  If they were performing different actions, we could remove the two farmers and their tributaries, and get the same data.\n</p>\n<p>\nNow consider the quantity F(T,P) = x<sub>T</sub> - x<sub>T+P</sub> + x<sub>T+2P</sub> - x<sub>T+3P</sub> + X<sub>T+4P</sub> - ... for some T and P.  Any farmers with those values of T and P will each contribute 2D/P or -2D/P to F(T,P), depending on which action they perform first.  Any farmers with a different value of T or P will contribute zero to F(T,P).  So the number of farmers for T and P is |F(T,P)| * P / 2D, and the sign of F(T,P) tells us their initial action.\n</p>\n<p>\nWe can try every valid value of T and P to find out how many farmers of each type there are.  Once we know this information, we can check that the original data matches it for some number of tributaries.  If it does not, we output <code>\"CHEATERS!\"</code>, otherwise we output the number of farmers.\n</p>\n","id":"0000000000433918","statement":"<h3>Problem</h3>\n<p>\nThe city you live in lies on the banks of the spectacular Binary river. The water in the river comes from some tributary streams that start way up in the mountains. Unfortunately for your city, there are farmers who live in the mountains who need to use up some of the water in the tributary streams for their crops.\n</p>\n<p>\nLong ago, the city struck a deal with the farmers to allow them to farm while keeping the river flowing: each farmer was allowed to use the water for her crops exactly half the time. The farmers would alternately divert water for their crops for a day and leave the water to run down the river for a day. The result was a disaster! Because the farmers' water usage was synchronized, with everyone either diverting or not diverting water at the same time, the river would run dry every other day and then flood the city the next.\n</p>\n<p>\nTo solve this problem, the city went back to the farmers and asked each one to choose some integer power of 2 (this is the Binary River after all) between 1 and <b>D</b>, inclusive, and toggle her water usage (either start or stop collecting water) every time that number of days has elapsed. (Not every power of 2 between 1 and <b>D</b> was necessarily represented, and multiple farmers may have selected the same integer. 1 counts as a power of 2.) The idea was that this would make the water usage more even overall, and so the droughts and flooding would become less frequent.\n</p>\n<p>\nThis all happened a long time ago, and you and the other citizens have recently become suspicious that the farmers aren't sticking to the agreement. (You're not even sure how many farmers there are right now!) However, the only data you have is <b>N</b> days' history of the amount of water flowing through the city. Can you tell if the farmers are being honest?\n</p>\n<p>\nEach tributary stream has flow 1 and the flow through the main river is the sum of all the tributary streams that are not being diverted for farming. (Before looking at the records, you don't know how many tributary streams there are.) At most 1 farmer will divert the water from each tributary stream, but there may be some tributary streams from which no farmers ever divert water. Note that the farmers started their water diversion cycles long before the city started recording the water flow, but there is no guarantee that they all started on the same day.\n</p>\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each test case starts with a line containing two space-separated integers <b>N</b> and <b>D</b>. The next line contains <b>N</b> space-separated integers, with the ith integer <b>d<sub>i</sub></b> giving the river flow on the ith day.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each case, output one line containing &quot;Case #x: <b>M</b>&quot;, where x is the test case number (starting from 1) and <b>M</b> is the smallest number of farmers who could be diverting water from the streams according to the described model, consistent with the observed flow through the river.\n</p>\n<p>\nIf you are sure that at least one farmer is active, but there is no way that the supplied input could be explained by farmers obeying the rules, then output <code>CHEATERS!</code> instead of a number.\n</p>\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n1 &le; <b>T</b> &le; 50.<br/>\n<b>D</b> will be a power of 2.<br/>\n1 &le; <b>D</b> &le; floor(<b>N</b> / 2).<br/>\n</p>\n<h4>Small dataset</h4>\n<p>\nTime limit: 240 seconds.<br/>\n1 &le; <b>N</b> &le; 50.<br/>\n0 &le; <b>d<sub>i</sub></b> &le; 5.<br/>\n</p>\n\n<h4>Large dataset</h4>\n<p>\nTime limit: 480 seconds.<br/>\n1 &le; <b>N</b> &le; 5000.<br/>\n0 &le; <b>d<sub>i</sub></b> &le; 1000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper\">\n  <table>\n  <tr>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Input</span>\n  <br/>&nbsp;\n  </td>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Output</span>\n  <br/>&nbsp;\n  </td>\n  </tr>\n  <tr>\n  <td>\n  <pre class=\"io-content\">4\n5 2\n2 2 2 2 2\n6 2\n1 1 1 0 0 0\n8 4\n2 1 1 0 0 1 1 2\n8 4\n0 1 1 3 1 2 2 2\n\n  </pre>\n  </td>\n  <td>\n  <pre class=\"io-content\">Case #1: 0\nCase #2: CHEATERS!\nCase #3: 2\nCase #4: 3\n\n  </pre>\n  </td></tr></table>\n  </div>\n  \n<h3>Explanation</h3>\n<p>Case #1 is consistent with two tributary streams with no farmers drawing from them.<p>\n\n<p>Case #2 could a single tributary stream being diverted every 4 days. However, <b>D</b> is 2 in this case, so this farmer is breaking the agreement.<p>\n\n<p>Case #3 could be two farmers each with a diversion cycle of 4 days.<p>\n\n<p>Case #4 could be three farmers with diversion cycles of 1, 2 and 4 days.<p>","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":17}],"title":"River Flow","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\nLet x be the largest element of S'.  Then x is the sum of all of the positive elements of S, and none of its negative elements.\n</p>\n<p>\nLet y be the second-largest element of S'.  Either this is the sum of all but the smallest of the non-negative elements, or it is the sum of all of the non-negative elements and the smallest negative element.  So if d = x-y, then the smallest magnitude of any element in S is d &mdash; either d &#x2208; S or -d &#x2208; S.\n</p>\n<p>\nThese two cases are basically identical.  Consider the process of building every subset of S, and finding the sum of each of those subsets.  To build a subset, we consider each element of S, and either include it in the subset or not.  If we include it, the sum increases by the value of the element.  If we don't include it, the sum increases by zero.  So in the case where d is an element of S, we will be choosing between adding 0 and adding d to the sum.  If -d is an element of S, we will be choosing between adding -d and adding 0.  These situations are equivalent, except that every element of S' is offset by a constant depending on whether d or -d is in S.\n</p>\n<p>\nWe can now scan through S' and match elements into pairs that are d apart, and keep only the smallest of each pair.  Then we can recursively apply this procedure to get the magnitudes of all the other elements of S.\n</p>\n<p>\nWhen we are done, we have the magnitudes of the elements of S.  Next we need to figure out which elements are positive and which are negative.  First, make them all negative.  The largest element of S' will be zero in this case.  Then we need to choose which elements to change from negative to positive in order to make the largest element of S' equal to x.  This is a Subset Sum problem, with required sum x, and elements equal to the magnitudes.  This is easily solvable with dynamic programming &mdash; the number of unique sums, and hence the number of states in the dynamic program, is guaranteed to be small because the number of unique values in S' is small.\n</p>","id":"0000000000433d3b","statement":"<h3>Problem</h3>\n<p>\nThe <i>power set</i> of a set S is the set of all subsets of S (including the empty set and S itself). It's easy to go from a set to a power set, but in this problem, we'll go in the other direction!<br>\n<br>\nWe've started with a set of (not necessarily unique) integers S, found its power set, and then replaced every element in the power set with the sum of elements of that element, forming a new set S'. For example, if S = {-1, 1}, then the power set of S is {{}, {-1}, {1}, {-1, 1}}, and so S' = {0, -1, 1, 0}. S' is allowed to contain duplicates, so if S has N elements, then S' always has exactly 2<sup>N</sup> elements.<br>\n<br>\nGiven a description of the elements in S' and their frequencies, can you determine our original S? It is guaranteed that S exists. If there are multiple possible sets S that could have produced S', we guarantee that our original set S was the <i>earliest</i> one of those possibilities. To determine whether a set S<sub>1</sub> is earlier than a different set S<sub>2</sub> of the same length, sort each set into nondecreasing order and then examine the leftmost position at which the sets differ. S<sub>1</sub> is earlier iff the element at that position in S<sub>1</sub> is smaller than the element at that position in S<sub>2</sub>.\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow. Each consists of one line with an integer <b>P</b>, followed by two more lines, each of which has <b>P</b> space-separated integers. The first of those lines will have all of the different elements E<sub>1</sub>, E<sub>2</sub>, ..., E<sub><b>P</b></sub> that appear in S', sorted in ascending order. The second of those lines will have the number of times F<sub>1</sub>, F<sub>2</sub>, ..., F<sub><b>P</b></sub> that each of those values appears in S'. That is, for any i, the element E<sub>i</sub> appears F<sub>i</sub> times in S'.<br>\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: \", where x is the test case number (starting from 1), followed by the elements of our original set S, separated by spaces, in nondecreasing order. (You will be listing the elements of S directly, and not providing two lists of elements and frequencies as we do for S'.)\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n1 &le; <b>T</b> &le; 100.<br/>\n1 &le; <b>P</b> &le; 10000.<br>\n<b>F<sub>i</sub></b> &ge; 1.<br/>\n</p>\n\n<h4>Small dataset</h4>\n<p>\nTime limit: 240 seconds.<br/>\nS will contain between 1 and 20 elements.<br>\n0 &le; each E<sub>i</sub> &le; 10<sup>8</sup>.\n</p>\n\n<h4>Large dataset</h4>\n<p>\nTime limit: 480 seconds.<br/>\nS will contain between 1 and 60 elements.<br>\n-10<sup>10</sup> &le; each E<sub>i</sub> &le; 10<sup>10</sup>.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper\">\n  <table>\n  <tr>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Input</span>\n  <br/>&nbsp;\n  </td>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Output</span>\n  <br/>&nbsp;\n  </td>\n  </tr>\n  <tr>\n  <td>\n  <pre class=\"io-content\">5\n8\n0 1 2 3 4 5 6 7\n1 1 1 1 1 1 1 1\n4\n0 1 2 3\n1 3 3 1\n4\n0 1 3 4\n4 4 4 4\n3\n-1 0 1\n1 2 1\n5\n-2 -1 0 1 2\n1 2 2 2 1\n\n  </pre>\n  </td>\n  <td>\n  <pre class=\"io-content\">Case #1: 1 2 4\nCase #2: 1 1 1\nCase #3: 0 0 1 3\nCase #4: -1 1\nCase #5: -2 1 1\n\n  </pre>\n  </td></tr></table>\n  </div>\n  \n\nNote that Cases #4 and #5 are not within the limits for the Small dataset.<br>\n<br>\nIn Case #4, S = {-1, 1} is the only possible set that satisfies the conditions. (Its subsets are {}, {-1}, {1}, and {-1, 1}. Those have sums 0, -1, 1, and 0, respectively, so S' has one copy of -1, two copies of 0, and one copy of 1, which matches the specifications in the input.)<br>\n<br>\nFor Case #5, note that S = {-1, -1, 2} also produces the same S' = {-2, -1, -1, 0, 0, 1, 1, 2}, but S = {-2, 1, 1} is earlier than {-1, -1, 2}, since at the first point of difference, -2 &lt; -1. So <code>-1 -1 2</code> would <b>not</b> be an acceptable answer. <code>1 -2 1</code> would also be unacceptable, even though it is the correct set, because the elements are not listed in nondecreasing order.\n\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":6},{"type":2,"type__str":"HIDDEN","value":19}],"title":"Log Set","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000433c84","type":1,"type__str":"SPECTATOR"},"title":"Round 3 2015"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
