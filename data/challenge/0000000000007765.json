{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1525519800000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000007765","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  The last of our Round 1s began with <i>A Whole New Word</i>; for those\n  of you who know the song \"A Whole New World\", good luck getting it out of\n  your heads! <i>Lollipop Shop</i> was another interactive problem with a\n  somewhat intuitive solution; it also might have gotten you thinking about a\n  certain 1950s song. <i>Ant Stack</i> was much harder than either of the\n  previous two problems, but still approachable with enough thought and\n  patience. It was easy to underestimate the limits of the second test set\n  and time out!\n</p><p>\n  This round was easier than 1B, and only 20 minutes into the contest, every\n  problem had been solved by someone. <b>Eryx</b> was the first to snag a\n  perfect score, after 35 minutes and 24 seconds. Full solutions to the first\n  two problems generally sufficed to crack the top 1500.\n</p><p>\n  That concludes Round 1 of Code Jam 2018! We will see our 1500 advancers from\n  Round 1C, along with the combined 3000 advancers from Rounds 1A and 1B, in\n  Round 2 in two weeks. 1000 of them will emerge with T-shirts and places in\n  Round 3 and the Distributed Code Jam Online Round. For those of you who did\n  not make it through the Round 1s, we encourage you to try again next year.\n  Even making it through the Qual Round and giving Round 1 your all is a\n  significant achievement!\n</p>\n<hr>\n<p>\n  <b>Cast</b>\n</p><p>\n  A Whole New Word: Written and prepared by Jonathan Irvin Gunawan.\n</p><p>\n  Lollipop Shop: Written and prepared by John Dethridge.\n</p><p>\n  Ant Stack: Written by Pablo Heiber. Prepared by Kevin Tran.\n</p><p>\n  Solutions and other problem preparation and review by Liang Bai, John\n  Dethridge, Md Mahbubul Hasan, Robin Lee, Igor Naverniouk, Trung Thanh Nguyen,\n  and Anqi (Joyce) Yang.\n</p><p>\n  Analysis authors:\n</p>\n<ul>\n  <li>A Whole New Word: Jonathan Irvin Gunawan</li>\n  <li>Lollipop Shop: John Dethridge and Ian Tullis</li>\n  <li>Ant Stack: Jonathan Irvin Gunawan</li>\n</ul>\n","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1525510800000,"tasks":[{"analysis":"<h3>Test set 1</h3>\n<p>\n  Since <b>L</b> &le; 2, this test set can be solved using a complete search.\n  First, we collect the letters that appear among the first characters of the\n  input words in a set C<sub>1</sub> and the letters that appear among the\n  second characters of the input words in a set C<sub>2</sub>. Any candidate\n  new word has the form c<sub>1</sub>c<sub>2</sub>, where c<sub>1</sub> is in\n  C<sub>1</sub> and c<sub>2</sub> is in C<sub>2</sub>. For each candidate new\n  word, we check whether this word is in the input. We can output any candidate\n  new word which does not appear in the input as our answer. If every candidate\n  new word already appears in the input, the case is impossible.\n</p>\n<p>\n  Since there are only at most 26<sup>2</sup> different candidate words that we\n  need to try, this solution will run very quickly.\n</p>\n<h3>Test set 2</h3>\n<p>\n  In early rounds of Code Jam, a complete search will often work for the first\n  test set, but will generally not work for subsequent test sets. This problem\n  is an exception! Our approach above will work just fine for test set 2.\n</p>\n<p>\n  We can create sets C<sub>1</sub>, C<sub>2</sub>, ..., C<sub><b>L</b></sub> as\n  in the solution above, and then use them to generate candidate words as\n  before, one at a time. If we encounter a word that is not in the input, we can\n  return it as our answer. If it turns out that there are exactly <b>N</b>\n  candidate words (which implies that every word that could be generated is\n  already in the input), the case is impossible. Otherwise, we can be sure that\n  we will have found an answer by the time we generate and check the\n  (<b>N</b> + 1)th candidate word, since there are only <b>N</b> words in the\n  input list.\n</p>\n","id":"000000000003e064","statement":"<h3>Problem</h3>\n<p>\n  Vincent and Desta are childhood friends. Today, Vincent is showing <b>N</b>\n  distinct <b>L</b>-letter words to Desta by using some letter tiles. Each tile\n  contains one uppercase English alphabet letter, and one number between 1 and\n  <b>L</b>. A word consists of the letters spelled out by <b>L</b> tiles with\n  numbers from 1 through <b>L</b>, in order. (Vincent's words are not\n  necessarily real English words.)\n</p>\n<p>\n  For example, if Vincent has <b>N</b> = 3 words with <b>L</b> = 4, and the\n  words are {<code>CAKE</code>, <code>TORN</code>, <code>SHOW</code>}, then\n  Vincent must show the following to Desta:\n</p>\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"240\" height=\"193\" viewBox=\"0 0 360 290\">\n<rect x=\"7\" y=\"9\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"5\" y=\"5\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"45\" y=\"45\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">C</text>\n<text x=\"73\" y=\"73\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">1</text>\n<rect x=\"97\" y=\"9\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"95\" y=\"5\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"135\" y=\"45\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">A</text>\n<text x=\"163\" y=\"73\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">2</text>\n<rect x=\"187\" y=\"9\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"185\" y=\"5\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"225\" y=\"45\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">K</text>\n<text x=\"253\" y=\"73\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">3</text>\n<rect x=\"277\" y=\"9\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"275\" y=\"5\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"315\" y=\"45\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">E</text>\n<text x=\"343\" y=\"73\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">4</text>\n<line x1=\"2\" y1=\"97\" x2=\"358\" y2=\"97\" style=\"stroke:#646464;stroke-width:1\" />\n<rect x=\"7\" y=\"109\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"5\" y=\"105\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"45\" y=\"145\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">T</text>\n<text x=\"73\" y=\"173\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">1</text>\n<rect x=\"97\" y=\"109\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"95\" y=\"105\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"135\" y=\"145\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">O</text>\n<text x=\"163\" y=\"173\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">2</text>\n<rect x=\"187\" y=\"109\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"185\" y=\"105\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"225\" y=\"145\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">R</text>\n<text x=\"253\" y=\"173\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">3</text>\n<rect x=\"277\" y=\"109\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"275\" y=\"105\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"315\" y=\"145\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">N</text>\n<text x=\"343\" y=\"173\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">4</text>\n<line x1=\"2\" y1=\"197\" x2=\"358\" y2=\"197\" style=\"stroke:#646464;stroke-width:1\" />\n<rect x=\"7\" y=\"209\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"5\" y=\"205\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"45\" y=\"245\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">S</text>\n<text x=\"73\" y=\"273\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">1</text>\n<rect x=\"97\" y=\"209\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"95\" y=\"205\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"135\" y=\"245\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">H</text>\n<text x=\"163\" y=\"273\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">2</text>\n<rect x=\"187\" y=\"209\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"185\" y=\"205\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"225\" y=\"245\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">O</text>\n<text x=\"253\" y=\"273\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">3</text>\n<rect x=\"277\" y=\"209\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"275\" y=\"205\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"315\" y=\"245\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">W</text>\n<text x=\"343\" y=\"273\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">4</text>\n</svg>\n<p>\n  Desta feels that creating words must be easy, and he wants to create a new\n  word that obeys the rules above and is not one of Vincent's existing words.\n  However, Desta does not have any tiles of his own, so he must use some of\n  Vincent's tiles.\n</p>\n<p>\n  For instance, if Vincent has the words from the previous example, then Desta\n  can make a new word such as <code>CORN</code> or <code>SAKE</code> or\n  <code>CHRE</code> (Desta's words are also not necessarily real English words).\n  Each of the example is illustrated in the following image:\n</p>\n<svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" width=\"240\" height=\"193\" viewBox=\"0 0 360 290\">\n<rect x=\"7\" y=\"9\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"5\" y=\"5\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"45\" y=\"45\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">C</text>\n<text x=\"73\" y=\"73\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">1</text>\n<rect x=\"97\" y=\"9\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"95\" y=\"5\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"135\" y=\"45\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">O</text>\n<text x=\"163\" y=\"73\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">2</text>\n<rect x=\"187\" y=\"9\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"185\" y=\"5\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"225\" y=\"45\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">R</text>\n<text x=\"253\" y=\"73\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">3</text>\n<rect x=\"277\" y=\"9\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"275\" y=\"5\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"315\" y=\"45\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">N</text>\n<text x=\"343\" y=\"73\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">4</text>\n<line x1=\"2\" y1=\"97\" x2=\"358\" y2=\"97\" style=\"stroke:#646464;stroke-width:1\" />\n<rect x=\"7\" y=\"109\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"5\" y=\"105\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"45\" y=\"145\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">S</text>\n<text x=\"73\" y=\"173\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">1</text>\n<rect x=\"97\" y=\"109\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"95\" y=\"105\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"135\" y=\"145\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">A</text>\n<text x=\"163\" y=\"173\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">2</text>\n<rect x=\"187\" y=\"109\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"185\" y=\"105\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"225\" y=\"145\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">K</text>\n<text x=\"253\" y=\"173\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">3</text>\n<rect x=\"277\" y=\"109\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"275\" y=\"105\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"315\" y=\"145\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">E</text>\n<text x=\"343\" y=\"173\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">4</text>\n<line x1=\"2\" y1=\"197\" x2=\"358\" y2=\"197\" style=\"stroke:#646464;stroke-width:1\" />\n<rect x=\"7\" y=\"209\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"5\" y=\"205\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"45\" y=\"245\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">C</text>\n<text x=\"73\" y=\"273\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">1</text>\n<rect x=\"97\" y=\"209\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"95\" y=\"205\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"135\" y=\"245\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">H</text>\n<text x=\"163\" y=\"273\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">2</text>\n<rect x=\"187\" y=\"209\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"185\" y=\"205\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"225\" y=\"245\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">R</text>\n<text x=\"253\" y=\"273\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">3</text>\n<rect x=\"277\" y=\"209\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#323232;stroke:#323232;stroke-width:2;\" />\n<rect x=\"275\" y=\"205\" width=\"80\" height=\"80\" rx=\"2\" ry=\"2\" style=\"fill:#B0AC6C;stroke:#000000;stroke-width:2;\" />\n<text x=\"315\" y=\"245\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 60px; text-anchor: middle\">E</text>\n<text x=\"343\" y=\"273\" dy=\"0.6ex\" style=\"stroke:none; font-family: sans-serif; font-weight: bold; font-size: 24px; text-anchor: middle\">4</text>\n</svg>\n<p>\n  Note that the three rows in the image above are independent. Desta only needs\n  to make one new word.\n</p>\n<p>\n  However, in the above example, Desta cannot make <code>WAKE</code>, for\n  example, because there is no W tile with a number 1. Nor can he make\n  <code>COO</code>, since it is not the right length.\n</p>\n<p>\n  Notice that it may be impossible for Desta to make a new word. For example, if\n  Vincent has only one word, then Desta cannot make anything new. Or, if Vincent\n  has the words {<code>AA</code>, <code>AB</code>, <code>BA</code>,\n  <code>BB</code>}, then any word that Desta can form is already present.\n</p>\n<p>\n  Help Desta to choose a word that he can show to Vincent using only the tiles\n  used by Vincent, or indicate that it is impossible to do so.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow. Each begins with one line with two integers\n  <b>N</b> and <b>L</b>: the number of Vincent's words, and the length of each\n  word. Then, <b>N</b> more lines follow. The i-th of these lines contains\n  a string of <b>L</b> uppercase English letters representing the i-th of\n  Vincent's words.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>y</code>\n  is a valid word to be chosen by Desta, or <code>-</code> (a single dash\n  character of ASCII value 45) if there is no valid word to be chosen by Desta.\n  If there is more than one valid word that Desta can make, you can output any\n  of them.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 15 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  No two of Vincent's words are the same.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  1 &le; <b>N</b> &le; 26<sup>2</sup>.<br/>\n  1 &le; <b>L</b> &le; 2.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  1 &le; <b>N</b> &le; 2000.<br/>\n  1 &le; <b>L</b> &le; 10.<br/>\n</p>\n\n\n<h3>Sample</h3>\n<div class=\"problem-io-wrapper\">\n<table>\n<tr>\n<td>\n<br/>\n<span class=\"io-table-header\">Input</span>\n<br/>&nbsp;\n</td>\n<td>\n<br/>\n<span class=\"io-table-header\">Output</span>\n<br/>&nbsp;\n</td>\n</tr>\n<tr>\n<td>\n<pre class=\"io-content\">5\n4 1\nA\nB\nC\nD\n4 2\nWW\nAA\nSS\nDD\n4 2\nAA\nAB\nBA\nBB\n3 4\nCAKE\nTORN\nSHOW\n5 7\nHELPIAM\nTRAPPED\nINSIDEA\nCODEJAM\nFACTORY\n\n</pre>\n</td>\n<td>\n<pre class=\"io-content\">Case #1: -\nCase #2: WA\nCase #3: -\nCase #4: CORN\nCase #5: HOLIDAY\n\n</pre>\n</td></tr></table>\n</div>\n\n<p>\n  Note that the last two sample cases would not appear in test set 1.\n</p>\n<p>\n  In Sample Case #1, the only words that can be construted using the tiles used\n  by Vincent are <code>A</code>, <code>B</code>, <code>C</code>, <code>D</code>.\n  However, all of those words already appear in Vincent's list of words, so\n  Desta is not allowed to choose them.\n</p>\n<p>\n  In Sample Case #2, there are 12 possible new words that Desta can make, one of\n  which is <code>WA</code>.\n</p>\n<p>\n  Sample Case #3 was explained in the problem description above; there is no new\n  word that Desta can make.\n</p>\n<p>\n  Sample Case #4 was explained in the problem description above; other answers\n  such as <code>SAKE</code> are possible.\n</p>\n<p>\n  In Sample Case #5, other answers such as <code>TRAPJAM</code> are possible.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":11},{"type":2,"type__str":"HIDDEN","value":17}],"title":"A Whole New Word","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  This problem's acceptance condition is based on <a href=\"https://en.wikipedia.org/wiki/Competitive_analysis_(online_algorithm)\">competitive analysis.</a>\n  The problem is a bit tough to test locally, even for an interactive problem.\n  It is easy to generate a particular set of customer preferences, but\n  determining the maximum possible number of lollipops we can sell requires\n  <a href=\"https://en.wikipedia.org/wiki/Matching_(graph_theory)#In_unweighted_bipartite_graphs\">bipartite matching</a>. However, we do not necessarily need to\n  do that; since there is only one test set, which is Visible, we have some\n  room for experimentation and for small leaps of faith.\n</p><p>\n  A solution that just picks random legal flavors is not good enough to pass,\n  so we need a couple of insights:\n</p>\n<ul>\n  <li>Selling a lollipop, if possible, is never worse than not selling a\n    lollipop. Assume that there is some good solution that involves not selling\n    a lollipop now, and selling L lollipops in total later. Selling a lollipop\n    now can only stop at most 1 lollipop from being sold later, so we can still\n    sell L-1 more lollipops.</li>\n  <li>If we have a choice of lollipops to sell, the best we can do is sell a\n    lollipop that has the lowest probability of being liked. Intuitively, this\n    saves the flavors that are more likely to show up later. (This intuition\n    can be proved mathematically.)</li>\n  <li>But we don't know the true probability for each flavor. The best estimate\n    we can get for a flavor at any point is the number of customers that have\n    liked that flavor so far, divided by the total number of customers seen so\n    far.</li>\n</ul>\n<p>\n  Therefore, our best strategy is to always sell a lollipop if possible;\n  whenever there are multiple flavors to choose from, we choose one of the\n  flavors that we have seen the minimal number of times among previous\n  customers' preferences. In problems like this, when we have to break a tie,\n  we should do so at random just in case the problem setters have tried to\n  anticipate and thwart particular strategies like always choosing the smallest\n  ID number. (In this problem, it would have been impossible for the setters\n  to penalize that, though!)\n</p><p>\n  Notice that our solution would not work for an arbitrary list of\n  probabilities, even with 200 customers. If every probability is 0.02, for\n  example, our strategy loses its power (since all flavors are equally likely),\n  and each flavor appears frequently enough to make our strategy do much\n  worse than matching, but infrequently enough that we have very few chances to\n  make the right choices. However, the problem guarantees that the\n  probabilities are drawn randomly from the range [0.005, 0.1]. This should\n  give us enough confidence that the probabilities will be different enough for\n  our strategy to exploit.\n</p><p>\n  The algorithm we have described can be shown to be at least as good as any\n  other solution. But what if we had been less certain? In a problem with\n  only Visible test sets, it is generally better to try (at the risk of a 4\n  minute penalty) than to spend more than 4 minutes worrying.\n</p>\n","id":"000000000003e068","statement":"<h3>Problem</h3>\n<p>\n  You own a lollipop shop. At the start of the day, you make <b>N</b>\n  lollipops, each of a single unique flavor, like huckleberry, cherry or lime.\n  <b>N</b> customers come into the shop during the day, one at a time. Each\n  customer gives you a list of which of your lollipop flavors they like. You\n  can sell them one lollipop of any of those flavors, as long as you have not\n  already sold someone else the same flavor earlier in the day (since there is\n  only one lollipop of each flavor). If none of the flavors they like are still\n  available, you cannot sell them a lollipop, and they leave your shop\n  disappointed.\n</p><p>\n  You do not know what each customer's flavor preferences are going to be until\n  they arrive. Each customer decides if they like or dislike each flavor\n  randomly, independently of whether they like any other flavor, or what\n  flavors anyone else likes. However, your market studies have shown that some\n  flavors may have a higher probability of being liked in general! For example,\n  the lime flavor might have a 10% chance of being liked by any particular\n  customer, whereas that chance might be 1% for the cherry flavor. These values\n  are always chosen independently and uniformly at random from the interval\n  [0.005, 0.1].\n</p><p>\n  Obviously, you want to sell lollipops to as many of the <b>N</b> customers\n  as possible! But, since you do not know what flavors your customers will ask\n  for ahead of time, you cannot always make an optimal decision &mdash;\n  sometimes you might sell a customer one flavor, and then later wish you had\n  sold them another.\n</p><p>\n  Suppose that you somehow knew all the customers' preferences in advance and\n  could plan ahead; then there is some maximum number M of lollipops that you\n  could possibly sell. You do not know the customers' preferences in advance,\n  but we require you to sell a number of lollipops that is at least 90% of M\n  for <u>each</u> input case.\n</p>\n\n<h3>Input and output</h3>\n<p>\n  This problem is\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq#interactive-problems\" target=\"_blank\">\n  interactive</a>, which means that the concepts of input and output are different\n  than in standard Code Jam problems. You will interact with a separate process\n  that both provides you with information and evaluates your responses.\n  All information comes into your program via standard input; anything that you\n  need to communicate should be sent via standard output.\n  Remember that many programming languages buffer the output by default, so\n  make sure your output actually goes out (for instance, by flushing the\n  buffer) before blocking to wait for a response. See the\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq#interactive-problems\" target=\"_blank\">FAQ</a>\n  for an explanation of what it means to flush the buffer.\n  Anything your program sends through standard error is ignored, but it might\n  consume some memory and be counted against your memory limit, so do not\n  overflow it.\n</p><p>\n  Initially, your program should read a single line containing a single integer\n  <b>T</b> indicating the number of test cases. Then, you need to process\n  <b>T</b> test cases.\n</p><p>\n  For each test case, your program should read a single line with one integer\n  <b>N</b>, the number of lollipops (which is the same as the number of\n  customers).\n</p><p>\n  Then, for each of the customers, your program should read a single line,\n  which will contain space-separated integers. The first integer is <b>D</b>,\n  the number of flavors that customer likes. Then, <b>D</b> integers follow,\n  the ID numbers of those flavors, in strictly increasing order. Flavors have\n  unique ID numbers in the range [0, <b>N</b> - 1]. Note that <b>D</b> might be\n  zero for some or all customers.\n</p><p>\n  After each of these lines, your program must write a single line to standard\n  output, containing the ID number of one of the <b>D</b> flavors to sell to the\n  customer, or <code>-1</code> if no lollipop is to be sold to the customer.\n  After you have written the <b>N</b>th line for the test case,\n  your program should terminate if it was the last test case; otherwise, it\n  should start reading data for the next test case.\n</p><p>\n  If your program gets something wrong (e.g., tries to sell a customer a flavor\n  that was already sold, or tries to sell a customer a flavor they don't like,\n  or uses the wrong output format, or outputs an out-of-bounds value), the\n  judge will send <code>-1</code> to your input\n  stream and it will not send any other output after that. If your program\n  continues to wait for the judge after receiving <code>-1</code>,\n  your program will time out, resulting in a Time Limit Exceeded error. Notice\n  that it is your responsibility to have your program exit in time to receive\n  the appropriate verdict (Wrong Answer, Runtime Error, etc.) instead of a Time\n  Limit Exceeded error. As usual, if the total time or memory is exceeded, or\n  your program gets a runtime error, you will receive the appropriate verdict.\n  Not selling enough lollipops for a test case will not cause you to get the\n  <code>-1</code> message.\n</p><p>\n  You should not send additional information to the judge after processing all\n  test cases. In other words, if your program keeps printing to standard output\n  after the last test case, you will get a Wrong Answer judgment.\n</p>\n\n<h3>A note on judge behavior</h3>\n<p>\n  At the start of each test case, the judge will determine all customers'\n  preferences. That is, it will use a (hidden) list of probabilities\n  P<sub>i</sub> between 0.005 and 0.1, one for each flavor; each customer has\n  a probability P<sub>i</sub> of liking the i-th flavor. That is, the random\n  variables indicating whether customer j likes flavor i are independent and\n  identically distributed. These preferences are constant throughout the test\n  and will not be modified e.g. in response to your choices.\n</p>\n\n<h3>Test set 1 (Visible)</h3>\n<p>\n  <b>T</b> = 50.<br/>\n  <b>N</b> = 200.<br/>\n  0 &le; <b>D</b> &le; <b>N</b>.<br/>\n  Time limit (for the entire test set): 25 seconds.<br/>\n  Memory limit: 1GB.<br/>\n</p>\n\n<h3>Sample Interaction</h3>\n\n<p>\n  Note that this sample interaction has smaller values of <b>T</b> and <b>N</b>\n  than the real data.  The local testing tool also uses smaller cases.\n</p>\n<pre>\n  t = readline_int()           // reads 10 into t\n  n = readline_int()           // reads 4 into n (four customers & flavors)\n  prefs = readline_int_list()  // reads 1 2 (customer only likes flavor 2)\n  printline 2 to stdout        // sells this customer flavor 2\n  flush stdout\n  prefs = readline_int_list()  // reads 0 (customer likes nothing)\n  printline -1 to stdout       // no flavor to sell to the customer!\n  flush stdout\n  prefs = readline_int_list()  // reads 1 2 (customer only likes flavor 2)\n  printline -1 to stdout       // already used flavor 2, so no flavor to sell\n  flush stdout\n  prefs = readline_int_list()  // reads 2 1 3 (customer likes 1 and 3)\n  printline 3 to stdout        // note: we could have also sold flavor 1\n  flush stdout\n  n = readline_int()           // (start of case 2) reads 1\n  prefs = readline_int_list()  // reads 1 0\n  printline -1 to stdout       // non-optimal but legal choice\n  flush stdout\n  n = readline_int()           // (start of case 3) reads 5\n  prefs = readline_int_list()  // reads 2 1 3\n  printline 1 to stdout\n  flush stdout\n  prefs = readline_int_list()  // reads 2 1 2\n  printline 1 to stdout        // error -- tried to give same flavor twice!\n  flush stdout\n  prefs = readline_int_list()  // reads -1 (judge has given up on us)\n  exit                         // exits to avoid an ambiguous TLE error\n</pre>\n<p>\n  The pseudocode above demonstrates the following scenario.\n</p>\n<ul>\n  <li>In the first test case, the program sells a total of two lollipops. It\n    would not have been possible to sell more than two, so the actual number\n    sold is definitely at least 90% of the maximum possible number sold.</li>\n  <li>In the second test case, the program chooses (for the sake of\n    demonstration here) not to sell the customer a lollipop, although it could\n    have. It sells a total of 0 when it could have sold a total of 1. So, the\n    program will not pass this test set, but note that this does not cause the\n    judge to stop sending input.</li>\n  <li>In the third case, the program makes an error (again for the sake of\n    demonstration) that causes the judge to stop sending input. The program\n    recognizes this and terminates. The user will see a Wrong Answer judgment.\n  </li>\n</ul>\n\n\n<h3>Local Testing Tool</h3>\n<p>\n  To better facilitate local testing, we provide you the following script.\n  Instructions are included inside. You are encouraged to add more test cases\n  for better testing. Please be advised that although the testing tool is\n  intended to simulate the judging system, it is <b>NOT</b> the real judging\n  system and might behave differently.\n</p><p>\n  If your code passes the testing tool but fails the real judge, please check\n  the <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq#coding\">\n  Coding section</a> of our FAQ to make sure that you are using the same\n  compiler as us.\n</p><p>\n<a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U388HrH81avVCo6anlv2u3F3Lqlw4Ck3BiDFH-QPNXBMyXpw_o9K-if2cwYNaO8VTZLszVkQBQkdSen71Il/local_testing_tool.py?dl=1\" download=\"local_testing_tool.py\">Download local testing tool</a>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":29}],"title":"Lollipop Shop","trial_input_type":2,"trial_input_type__str":"JUDGE_CODE"},{"analysis":"<h3>Test set 1</h3>\n<p>\n  To solve this test set, we can use\n  <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\">\n  dynamic programming</a> (DP). We define a function f(x, y) as the maximum\n  number of ants that can form a stack (following the stack requirements given\n  in the problem statement), in which we only consider ants from the first ant\n  to the x-th ant, inclusive, and the sum of the ants' weight is not more than\n  y.\n</p>\n<p>\n  We can compute the value of f(x, y) by considering two cases:\n</p>\n<ul>\n  <li>Suppose we don't put the x-th ant on the bottom of the stack. Then we can\n      ignore the x-th ant, and so the value of f(x, y) from this case becomes\n      f(x - 1, y).\n  <li>Suppose we put the x-th ant on the bottom of the stack. Then we need to\n      maximize the number of ants to be put on top of the x-th ant, which is the\n      value of f(x - 1, min(6<b>W<sub>x</sub></b>, y - <b>W<sub>x</sub></b>)).\n      Counting the x-th ant as well, the value of f(x, y) from this case becomes\n      f(x - 1, min(6<b>W<sub>x</sub></b>, y - <b>W<sub>x</sub></b>)) + 1. Note\n      that we only consider this case if y &ge; <b>W<sub>x</sub></b>.\n</ul>\n<p>\n  Between the two cases (or only one case if y &lt; <b>W<sub>x</sub></b>),\n  we take the larger value as the value of f(x, y).\n</p>\n<p>\n  The answer for the problem is the value of f(<b>N</b>, &infin;). Since there\n  are O(<b>N</b>) possible values for x, O(max(<b>W</b>)) possible values for y,\n  and O(1) iterations for each computation of f(x, y), this solution runs in\n  O(<b>N</b> &times; max(<b>W</b>)) time.\n</p>\n<p>\n  There is also another solution involving another DP formulation f', where\n  f'(x, y) only considers ants from the x-th ant to the <b>N</b>-th ant (instead\n  of the first ant to the x-th ant).\n</p>\n<h3>Test set 2</h3>\n<p>\n  To solve this test set, we need to find the value of K, the maximum possible\n  answer to the problem. To have a stack with as many ants as possible, where\n  the upper-bound of the ants' weight is fixed by a constant (i.e.\n  10<sup>9</sup> in this problem), we greedily put the lightest ant possible on\n  the bottom of the stack. In other words, a stack with as many ants as possible\n  will have ants with weights something like\n  (1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 5, 6, ...). We stop as soon as we\n  need to add an ant with a weight more than 10<sup>9</sup>. By creating a\n  simple script, we can determine that the value of K is 139, much smaller than\n  <b>N</b>.\n</p>\n<p>\n  Therefore, we can solve this test set with another DP formula. We define a\n  function g(x, y) as the minimum sum of the weights of the ants that can form a\n  stack of y ants where only the ants from the first ant to the x-th ant are\n  considered, or &infin; if no such stack exists.\n</p>\n<p>\n  Again, we can compute the value of g(x, y) by considering two cases:\n</p>\n<ul>\n  <li>Suppose we don't put the x-th ant on the bottom of the stack. Then we can\n      ignore the x-th ant, and so the value of g(x, y) from this case becomes\n      g(x - 1, y).\n  <li>Suppose we want to put the x-th ant on the bottom of the stack. We first\n      need to check whether this is possible. We can compute the value of\n      g(x - 1, y - 1), the minimum sum of the weights of the ants that can form\n      a stack of y - 1 ants where only the ants from the first ant to the\n      (x - 1)-th ant are considered. If g(x - 1, y - 1) &le;\n      6<b>W<sub>x</sub></b>, then it is possible to put the x-th ant on the\n      bottom of the stack. The value of g(x, y) from this case becomes\n      g(x - 1, y - 1) + <b>W<sub>x</sub></b>.\n</ul>\n<p>\n  Between the two cases (or only one case if g(x - 1, y - 1) &gt;\n  6<b>W<sub>x</sub></b>), we take the smaller value as the value of g(x, y).\n</p>\n<p>\n  The answer for the problem is the largest possible value S where\n  g(<b>N</b>, S) &lt; &infin;. Since there are O(<b>N</b>) possible values for\n  x, O(K) possible values for y, and O(1) iterations for each computation of\n  g(x, y), this solution runs in O(<b>N</b>K) time.\n</p>\n","id":"000000000003e0a8","statement":"<h3>Problem</h3>\n<p>\n  Scott has an ant farm containing <b>N</b> ants. Each ant has a certain\n  length and weight.\n</p><p>\n  Today, as a challenge for the ants, Scott has placed some food at the top of\n  the ant farm. The ants will try to reach it by arranging themselves into a\n  vertical stack, with each ant in the stack directly holding the next on its\n  back. In this way, each ant bears the weight of all ants above it. Scott's\n  ants are very strong for their size and are able to carry up to 6 times\n  their own weight. For example, an ant that weights 8 milligrams can carry\n  two other ants weighing 24 milligrams each! Each ant also has a body\n  length; the exact lengths are not important, except that they are all\n  different.\n</p>\n<ul>\n  <li>The stack must be linear. Each ant except for the top ant must be\n    directly below exactly one ant, and each ant except for the bottom ant must\n    be directly above exactly one ant.</li>\n  <li>The lengths of the ants in the stack must be strictly decreasing from the\n    bottom to the top of the stack; this ensures that each new ant that joins\n    the stack will be able to climb up to the top.</li>\n  <li>For each ant, the sum of the weights of all the ants above it in the stack\n  must be no more than 6 times the weight of that ant.</li>\n</ul>\n<p>\n  What is the maximum number of these ants that can form such a stack?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow. Each begins with one line with an integer\n  <b>N</b>: the number of ants in the colony.\n  Then, a second line follows containing <b>N</b> integers <b>W<sub>1</sub></b>,\n  <b>W<sub>2</sub></b>, ..., <b>W<sub>N</sub></b>, where <b>W<sub>i</sub></b>\n  is the weight in milligrams of the i-th ant. The ants are listed in strictly\n  increasing order of length. Notice that no actual length values are given;\n  only the order is important.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>,\n  where <code>x</code> is the test case number (starting from 1) and\n  <code>y</code> is the maximum number of the given ants that can form a stack\n  that obeys the rules above.\n</p>\n\n<h3>Limits</h3>\n<p>\n  7 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 15 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  For exactly 6 cases, <b>N</b> = 100; for the other <b>T</b> - 6 cases,\n    2 &le; <b>N</b> &le; 50.<br/>\n  1 &le; <b>W<sub>i</sub></b> &le; 1000, for all i.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  For exactly 6 cases, <b>N</b> = 10<sup>5</sup>; for the other <b>T</b> - 6\n    cases, 2 &le; <b>N</b> &le; 500.<br/>\n  1 &le; <b>W<sub>i</sub></b> &le; 10<sup>9</sup>, for all i.<br/>\n</p>\n\n\n<h3>Sample</h3>\n<div class=\"problem-io-wrapper\">\n<table>\n<tr>\n<td>\n<br/>\n<span class=\"io-table-header\">Input</span>\n<br/>&nbsp;\n</td>\n<td>\n<br/>\n<span class=\"io-table-header\">Output</span>\n<br/>&nbsp;\n</td>\n</tr>\n<tr>\n<td>\n<pre class=\"io-content\">3\n2\n9 1\n3\n8 4 100\n9\n10 10 10 10 10 10 10 10 100\n\n</pre>\n</td>\n<td>\n<pre class=\"io-content\">Case #1: 1\nCase #2: 3\nCase #3: 8\n\n</pre>\n</td></tr></table>\n</div>\n\n\n<p>\n  In Sample Case #1, there are two ants. The first weighs 9 mg; the second\n  weighs 1 mg, and is longer than the first ant.\n  The first ant is strong enough to hold the second ant (since it can hold up to\n  9 &times; 6 mg), but it cannot, because the second ant is longer.\n  The second ant is not strong enough to hold the first ant (since it can only\n  hold up to 1 &times; 6 mg, which is less than 9 mg).\n  So it is only possible to make a \"stack\" of one of the two ants.\n</p><p>\n  In Sample Case #2, it is possible for all three ants to form a stack, with\n  the third holding up the second, which holds up the first.\n</p><p>\n  In Sample Case #3, the optimal solution has the ninth ant on the bottom, and\n  then seven of the other ants above it.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":16},{"type":2,"type__str":"HIDDEN","value":27}],"title":"Ant Stack","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000007765","type":1,"type__str":"SPECTATOR"},"title":"Round 1C 2018"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
