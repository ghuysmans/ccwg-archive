{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1645153200000,"hide_scoreboard":true,"hide_scoreboard_config":{"embed_video_url":"https://www.youtube.com/embed/wZIQycr0F4c"},"id":"00000000008f4332","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"Thanks for participating in Coding Practice with Kick Start Session #1! Feel free to continue practicing the problems in practice-mode and <a target=\"_blank\" href=\"https://youtu.be/ys2akzpjl3k\">watch the welcome video</a> if you are just getting started. Read through the analyses and download the test set data by clicking on each problem statement to learn more about how to approach solving each problem. If you missed the Problem Walkthrough video or want to reference it, please find the <a target=\"_blank\" href=\"https://codingcompetitionsonair.withgoogle.com/events/cpwks-2022?talk=cpwks22-walkthrough1\">on-demand video here</a>. You can also try out other past problems at <a target=\"_blank\" href=\"https://g.co/kickstart/archive\">g.co/kickstart/archive</a>. <br><br>\n\nThanks again for participating and hope to see in <a target=\"_blank\" href=\"https://codingcompetitions.withgoogle.com/kickstart/schedule?utm_medium=email&utm_source=emailer&utm_campaign=cpwks&src=Online%2FTOPs%2FKS\"><b>future Kick Start rounds</a></b>. You can participate in as many rounds as you wish! ","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1644854400000,"tasks":[{"analysis":"<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a href=\"https://youtu.be/wZIQycr0F4c?t=261\" target=\"_blank\"\n    >View problem and solution walkthrough video\n  </a>\n</p>\n<h3>Test set 1</h3>\n<p>\n  For a set of papers, let us define a function $$$score(x)$$$, which denotes\n  the number of papers in the set with citations at least $$$x$$$. We can\n  calculate the score for every integer $$$x \\le n$$$, where $$$n$$$ is the\n  number of papers in the set. For each set of papers, the answer is the maximum\n  $$$x$$$ such that $$$score(x) \\ge x$$$. We can store the counts of each of the\n  citation numbers in the input in an array, and calculate cumulative sum to\n  find the score for any $$$x$$$.\n</p>\n<p>\n  We need to find the maximum $$$x$$$ where $$$score(x) \\ge x$$$, each time a\n  new paper is added. We can find that using the approach mentioned above in\n  $$$O(max(\\mathbf{A}))$$$ time, where $$$max(\\mathbf{A})$$$ is the maximum citation number in\n  the set of papers. An observation here is that we can consider all citations\n  $$$\\ge \\mathbf{N}$$$ as $$$\\mathbf{N}$$$, which allows us to find H-index for any set of papers in\n  $$$O(\\mathbf{N})$$$. This leads to a total time complexity of $$$O(\\mathbf{N}^2)$$$ per test\n  case, which is sufficient for test set 1.\n</p>\n<h3>Test set 2</h3>\n<p>\n  For test set 2, we initialize the H-index with 0, and after adding each paper,\n  we need to update the current H-index. We can use a minimum priority queue\n  data structure to store the citation numbers. As we go through each of the\n  papers, we keep updating the current H-index. We also keep updating the\n  priority queue so that it only contains numbers greater than the current\n  H-index and remove the rest. For each new paper, we can follow these steps:\n</p>\n<ol>\n  <li>\n    If the current citation number is bigger than the current answer, add it in\n    the priority queue\n  </li>\n  <li>\n    Remove all the citation numbers from the priority queue which are not\n    greater than the current answer\n  </li>\n  <li>\n    If the size of priority queue is not less than the current answer + $$$1$$$,\n    increment the current answer by $$$1$$$ and return to step 2\n  </li>\n</ol>\n<p>\n  A single operation of priority queue takes $$$O(\\log\\mathbf{N})$$$ time, and each\n  number is added and removed at most once. This leads to a total time\n  complexity of $$$O(\\mathbf{N}\\log\\mathbf{N})$$$ per test case, which is sufficient for test\n  set 2.\n</p>\n<p>\n  A solution with linear time complexity is also possible, if we store the\n  citation numbers in an array or a hashtable to calculate the answer. This is\n  left as an exercise for the readers.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U04H3w8EQ7yKuBYBxJMAXy0qlJPqDmRrZSk4xnsP1WiJgx6c7kRtyW_RqP1wIwANE0R4dsTMUVf/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000941e56","statement":"<h3>Problem</h3>\n<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a target=\"_blank\" href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0uo-T1W1VKh6wv8P20ybJWLjJ1IP1lzupnzQjfUfM7C-3aE_upObebKwbBhnIovJzqJ6T2Rkku8Jn3/starter_code.zip?dl=1\">Download the Starter Code!</a>\n</p>\n<p>\n  Jorge is a physicist who has published many research papers and wants to know\n  how much impact they have had in the academic community. To measure impact, he\n  has developed a metric,\n  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/H-index\" target=\"_blank\">H-index</a>,\n  to score each of his papers based on the number of times it has been cited by\n  other papers. Specifically, the <i>H-index score</i> of a\n  researcher is the largest integer $$$\\mathbf{H}$$$ such that the researcher has $$$\\mathbf{H}$$$ papers\n  with at least $$$\\mathbf{H}$$$ citations each.\n</p>\n<p>\n  Jorge has written $$$\\mathbf{N}$$$ papers in his lifetime. The $$$i$$$-th paper has $$$\\mathbf{C_i}$$$\n  citations. Each paper was written sequentially in the order provided, and the\n  number of citations that each paper has will never change. Please help Jorge\n  determine his <i>H-index score</i> after each paper he wrote.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow. Each test case begins with a line containing $$$\\mathbf{N}$$$, the number of\n  papers Jorge wrote. The second line contains $$$\\mathbf{N}$$$ integers. The $$$i$$$-th\n  integer is $$$\\mathbf{C_i}$$$, the number of citations that the $$$i$$$-th paper has.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing\n  <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the test case number\n  (starting from $$$1$$$) and $$$y$$$ is a space-separated list of $$$\\mathbf{N}$$$ integers.\n  The $$$i$$$-th integer is Jorge's <i>H-index</i> score after writing his $$$i$$$-th\n  paper.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 50 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  <p>\n  $$$1 \\le \\mathbf{T} \\le 100$$$<br />\n  $$$1 \\le \\mathbf{C_i} \\le 10^5$$$<br />\n  </p>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  <p>$$$1 \\le \\mathbf{N} \\le 1000$$$</p>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  <p>$$$1 \\le \\mathbf{N} \\le 10^5$$$.</p>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3fJdiNNW_cvqXWsxJZZ00nudRlYrQrk1YN6BeiAiu3tkvZs7fQOJ7e_ZSyanZz0-LAq-3lgTELu2b9YbghqrK1_v8Poz87/h-index_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3\n5 1 2\n6\n1 3 3 2 2 15\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3yGdkTPXoXMdfp-Fh5mJeGqgLU6S1zukbkbpcYhp1QYI2RsBvCB1PgcRBG9v1aAnNfCViEbubMmS1tf3vYA_N5Fpja6ABrmw/h-index_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1 1 2\nCase #2: 1 1 2 2 2 3\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    The input contains 2 test cases. In Sample Case #1, Jorge wrote $$$\\mathbf{N}$$$ = 3\n    papers.\n  </p>\n  <ul>\n    <li>\n      After the 1st paper, Jorge's <i>H-index</i> score is 1, since he has 1 paper with\n      at least 1 citation.\n    </li>\n    <li>After the 2nd paper, Jorge's <i>H-index</i> score is still 1.</li>\n    <li>\n      After the 3rd paper, Jorge's <i>H-index</i> score is 2, since he has 2 papers\n      with at least 2 citations (the 1st and 3rd papers).\n    </li>\n  </ul>\n  <p>In Sample Case #2, Jorge wrote $$$\\mathbf{N}$$$ = 6 papers.</p>\n  <ul>\n    <li>\n      After the 1st paper, Jorge's <i>H-index</i>  score is 1, since he has 1 paper with\n      at least 1 citation.\n    </li>\n    <li>After the 2nd paper, Jorge's <i>H-index</i>  score is still 1.</li>\n    <li>\n      After the 3rd paper, Jorge's <i>H-index</i>  score is 2, since he has 2 papers\n      with at least 2 citations (the 2nd and 3rd papers).\n    </li>\n    <li>After the 4th paper, Jorge's <i>H-index</i> score is still 2.</li>\n    <li>After the 5th paper, Jorge's <i>H-index</i> score is still 2.</li>\n    <li>\n      After the 6th paper, Jorge's <i>H-index</i> score is 3, since he has 3 papers\n      with at least 3 citations (the 2nd, 3rd and 6th papers).\n    </li>\n  </ul>\n</sampleio>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":6},{"type":1,"type__str":"VISIBLE","value":8}],"title":"H-index","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a href=\"https://youtu.be/wZIQycr0F4c?t=55\" target=\"_blank\"\n    >View problem and solution walkthrough video\n  </a>\n</p>\n<p>\n  Given the name of the kingdom, we need to determine the ruler of that kingdom.\n  Based on the information given in the problem, we can say that who the ruler\n  is depends on the last letter of the kingdom name.\n</p>\n<ul>\n  <li>\n    If the last letter is a vowel, then the kingdom is ruled by Alice.\n  </li>\n  <li>\n    If the last letter is a consonant other than 'y', then the kingdom is ruled by Bob.\n  </li>\n  <li>\n    If the last letter is <code>y</code>, then the kingdom is ruled by\n    <code>nobody</code>.\n  </li>\n</ul>\n<h3>Test Set 1</h3>\n<p>\n  Let us create a function <code>getRuler</code> which takes as input a string kingdom and\n  returns whether it is ruled by <code>Alice</code>, <code>Bob</code> or\n  <code>nobody</code>. Consider $$$x$$$ to be the last letter of $$$\\mathbf{kingdom}$$$.\n</p>\n<ul>\n  <li>\n    We will first check if $$$x$$$ is a vowel, for this we can create a hashset\n    consisting of all the vowels i.e. <code>{a, e, i, o, u}</code> and check if\n    $$$x$$$ is present in the hashset. If it is present return\n    <code>Alice</code>.\n  </li>\n  <li>\n    Now let us check if $$$x$$$ is equal to <code>y</code> if so, then return\n    <code>nobody</code>\n  </li>\n  <li>\n    If both the above conditions are not satisfied, then $$$x$$$ is a consonant\n    and not equal to <code>y</code>. In this case, return <code>Bob</code>.\n  </li>\n</ul>\n<h3>Test Set 2</h3>\n<p>\n  We can use the same approach for this test as well, but there is a small\n  catch. In Test Set 1, because of the constraints, $$$\\mathbf{kingdom}$$$ has at least\n  $$$3$$$ letters so $$$x$$$ is always lowercase. In Test Set 2, $$$\\mathbf{kingdom}$$$ can\n  have only one letter, so $$$x$$$ is an uppercase. We need to convert it to\n  lowercase and then check if it is a vowel or equal to\n  <code>y</code>.\n</p>\n<h3>Time Complexity</h3>\n<p>\n  Creating a hashset of vowels: $$$O(5)$$$, which is equivalent to $$$O(1)$$$.\n  <br />\n  For each test case:\n  <br />\n  Converting $$$x$$$ to a lowercase in case of $$$\\mathbf{kingdom}$$$ having only one letter:\n  $$$O(1)$$$.\n  <br />\n  Checking if $$$x$$$ is a vowel: $$$O(1)$$$.\n  <br />\n  Checking if $$$x$$$ is equal to <code>y</code>: $$$O(1)$$$.\n  <br />\n  We have $$$\\mathbf{T}$$$ test cases, hence the overall time complexity is $$$O(\\mathbf{T})$$$\n</p>\n\n<h3>Note</h3>\n<p>\n  Please take care of adding a <code>.</code>> (terminating period) at the end of the output\n  sentence.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2bSHPlVViTmniyEwSDyOnF_WPdjeJ0km2uYlBkgGZkiGmoTIpbufmmv9HeGJGOq9PwJ-H8O_ta/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000941ec5","statement":"<h3>Problem</h3>\n<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a target=\"_blank\" href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Xy4pmxiHhLQYW5CJCveJ0iTGP3paaZTk3PziCyNNeOewP7f9FjdCL-4ZB7V32K4aGwS68vEFMsWFk/starter_code.zip?dl=1\">Download the Starter Code!</a>\n</p>\n<p>\n  Alice and Bob are playing the game called Centauri Prime. Centauri Prime represents a planet which\n  is split into several independent kingdoms. Before they start playing the game, they have to choose\n  rulers for each kingdom. Alice and Bob mutually decided to distribute kingdoms based on\n  the letter the kingdom's name ended with. Alice loves vowels and decided to rule kingdoms whose\n  names ended in a vowel. Bob loves consonants and decided to rule kingdoms whose names ended in a\n  consonant. Both of them do not like the letter '<code>y</code>'(case insensitive) and thus, all kingdoms whose names ended in the\n  letter '<code>y</code>' are left without a ruler. Can you write a program\n  that will determine the rulers of several kingdoms, given the kingdoms' names?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$.\n  $$$\\mathbf{T}$$$ lines follow, each one containing the name of one kingdom. Kingdom\n  names will consist of only lower case English letters, starting with a capital\n  letter. There will be no other characters on any line, and no empty lines.<br/>\n  List of vowels for this problem is <code>['A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u']</code>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$K$$$ is\n  ruled by $$$Y.$$$</code>, where $$$x$$$ is the case number (starting from 1),\n  $$$K$$$ is the kingdom name, and $$$Y$$$ is either <code>Alice</code>, <code>Bob</code> or\n  <code>nobody</code>.\n</p><p>\n  Be careful with capitalization and the terminating period. Your output must be\n  in exactly this format. See the examples below.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 300$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  Each kingdom name will have between $$$3$$$ and $$$20$$$ letters.\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  Each kingdom name will have at most $$$100$$$ letters.\n</p>\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0i6bjqQoFTfzlzWiwEsLjSo7tmS7r37QyDQRqK5KBUNEvhhcvS4b3GSigLhxUsfQ642E_DgG6W-tXkx3ib2aB6e3ExOvWsmY71zbHQYQ/centauri_prime_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\nMollaristan\nAuritania\nZizily\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2GK2z_5r365bRHdwvp24gFjmSMY1Mj9BY1ebX15sqHYiIeKlYaMH8z91tbSvYbgc6Pw1YgQvYsRn1J07QWHNOJMxJJt6kcHsn9EFATSWQ/centauri_prime_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: Mollaristan is ruled by Bob.\nCase #2: Auritania is ruled by Alice.\nCase #3: Zizily is ruled by nobody.\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n  In Sample Case #1, the name of the kingdom ends with '<code>n</code>' which is a consonant and thus, it is ruled by Bob.\n</p><p>\n  In Sample Case #2, the name of the kingdom ends with an '<code>a</code>' which is a vowel and thus, it is ruled by Alice.\n</p><p>\n  In Sample Case #3, the name of the kingdom ends with '<code>y</code>' which is not liked by both of them and thus, it is ruled by nobody.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":1,"type__str":"VISIBLE","value":7}],"title":"Centauri Prime","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  Solving this problem involves a number of steps. First, we must determine the total number of\n  candies we have available to distribute. We can calculate this by summing together the number of\n  candies in each bag, $$${total} := \\sum_{i=1}^{\\mathbf{N}} \\mathbf{C_i}$$$. Once we have the total number\n  of candies, we must determine the number of candies that will remain after evenly distributing as\n  many as possible among $$$\\mathbf{M}$$$ kids. We can calculate this by dividing the total number of candies by\n  the number of kids. $$$\\mathbf{M}$$$ may not evenly divide $$$total$$$, so $$$({total} \\div \\mathbf{M})$$$\n  will have an integer part (the amount each kid receives) and a remainder part (the amount left\n  over). Because we only care about the remainder, we can use the\n  <a target=\"_blank\" href=\" https://en.wikipedia.org/wiki/Modulo_operation\">modulo operation</a> which\n  does exactly this.\n</p>\n<h3>Example solution:</h3>\n<p>\n<pre><code>\nSolve(<var>N</var>, <var>M</var>, <var>C</var>) {\n  <var>total</var> = 0\n  for <var>i</var> in 1:<var>N</var> {\n    <var>total</var> = <var>total</var> + <var>C</var>[<var>i</var>]\n  }\n  <var>remainder</var> = modulo(<var>total</var>, <var>M</var>)\n  return <var>remainder</var>\n}\n</code></pre>\n</p>\n<h3>Limits and complexity:</h3>\n<p>\n  With the input limits for this problem, the default integer size for most programming languages\n  will be sufficient to perform all arithmetic without risk of overflow. Specifically, the largest\n  possible value is $$${total}=({\\mathbf{N_{max}}} \\times {\\mathbf{{C_{i}}_{max}}})=10^8$$$, which is easily stored\n  in a 32-bit signed integer (<!-- NOTYPO -->$$${int_{max}} \\approx 2.147 \\times 10^9$$$). If the\n  limits were larger, we could take advantage of the transitive and symmetric properties of modular\n  arithmetic to calculate the remainder provided by each bag, and the running remainder after each\n  addition:\n<pre><code>\nSolve(<var>N</var>, <var>M</var>, <var>C</var>) {\n  <var>remainder</var> = 0\n  for <var>i</var> in 1:<var>N</var> {\n    <var>remainder</var> = <var>remainder</var> + modulo(<var>C</var>[<var>i</var>], <var>M</var>)\n    <var>remainder</var> = modulo(<var>remainder</var>, <var>M</var>)\n  }\n  return <var>remainder</var>\n}\n</code></pre>\n  This reduces the largest intermediate value to $$$2 \\times ({\\mathbf{M_{max}}} - 1)$$$ with only a small\n  amount of extra computation. When solving other problems in this competition, you are likely to\n  encounter limits that will require this kind of optimization.\n</p>\n<p>\n  Computational complexity is also an important factor to consider when deciding how to approach a\n  problem. Both approaches presented here have the same complexity, $$$O(\\mathbf{N})$$$, which is sufficient\n  to solve the problem within the time limit. Other problems in this competition can often be solved\n  using a variety of approaches, but only some will be sufficiently fast to solve all test sets\n  within the time limit. An algorithm with complexity $$$O(\\mathbf{G}^3)$$$ may work for a small test set\n  with $$$\\mathbf{G}_{max}=20$$$, but that same algorithm will be too slow for a large test set with\n  $$$\\mathbf{G}_{max}=10^6$$$.\n</p>\n<p>\n  In general, time and memory limits for the problems in this competition, and the bounds for their\n  test sets, are chosen so that algorithms pass or fail based on their overall time and memory\n  complexity order. In other words, if a problem has a time limit of 60 seconds, it is unlikely\n  that a fast algorithm would take 40 seconds while a slow one took 80 seconds. Instead, you will\n  find that a fast algorithm might take 5 seconds while a slow one takes 5 years. So if you find\n  your solution exceeding the time limit for a problem, take a moment to reevaluate your algorithm.\n  There may be another approach that is many times faster.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3-6TpJilQSGzc5LCJvoUiNqYULDs92FFSrgDONYKEpRalMCbwlgBnrGGQMxmjXn0Q3ryZpXSfE/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000942404","statement":"<h3>Problem</h3>\n<p>\n  You have gathered $$$\\mathbf{N}$$$ bags of candy and you want to distribute the candy\n  amongst $$$\\mathbf{M}$$$ kids. The $$$i$$$-th bag contains $$$\\mathbf{C_i}$$$ pieces of candy. You want\n  to make sure that every kid get the same amount of candy and that the number\n  of pieces of candy they receive is the greatest possible. You can open each\n  bag and mix all pieces of candy before distributing them to the kids.\n</p>\n<p>\n  How many pieces of candy will remain after you share the candy amongst kids,\n  based on the rules described above?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test\n  cases follow.\n</p>\n<p>\n  Each test case consists of two lines. The first line of each test case\n  contains two integers: integer $$$\\mathbf{N}$$$, the number of candy bags, and $$$\\mathbf{M}$$$, the\n  number of kids.\n</p>\n<p>\n  The next line contains $$$\\mathbf{N}$$$ non-negative integers $$$\\mathbf{C_1},\\mathbf{C_2},\\dots,\\mathbf{C_N}$$$\n  representing array $$$\\mathbf{C}$$$, where the $$$i$$$-th integer represents the number of\n  candies in the $$$i$$$-th bag.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from $$$1$$$) and\n  <code>y</code> is the number of candies that will remain if you divide candies\n  between kids according to the rules described above.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 40 seconds.<br/>\nMemory limit: 1 GB.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  $$$1 \\le \\mathbf{T} \\le 100$$$.<br />\n  $$$1 \\le \\mathbf{N} \\le 10^5$$$.<br />\n  $$$1 \\le \\mathbf{M} \\le 10^4$$$.<br />\n  $$$0 \\le \\mathbf{C_i} \\le 1000$$$, for all $$$i$$$ from $$$1$$$ to $$$\\mathbf{N}$$$.<br />\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1W1qlUsboFqMjdFm0G9vgQqiEJfZ0W2d84UZVNJ2hbuuPUVSeUw4zZ5foS3HWby86telhThQvAx_sEMypwRmhHLtyl7uzUxoT9h_JmMw/sample_problem_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n7 3\n1 2 3 4 5 6 7\n5 10\n7 7 7 7 7\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1qVGPj7g_EqX60A3EUtC-rPibbI9GaKL-BWZsP2mAREubk_OF8iZHTAgHSTU_gk25fM4aaGtb8IcEzOBwQJUzGVrgxEzpVkeJEXmx2fVI/sample_problem_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 1\nCase #2: 5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\nIn Sample Case #1, we have $$$\\mathbf{N}=7$$$ bags of candy. In total we have $$$1 + 2 + 3 + 4 + 5 + 6 + 7 = 28$$$\ncandies that we want to divide between $$$\\mathbf{M} = 3$$$ kids.\nEvery kid can get $$$9$$$ pieces of candy, so $$$28 - 3 \\times 9 = 1$$$ pieces of candy will remain.\n</p>\n<p>\nIn Sample Case #2, we have $$$\\mathbf{N}=5$$$ bags of candy. In total we have $$$7 + 7 + 7 + 7 + 7 = 35$$$\ncandies that we want to divide between $$$\\mathbf{M} = 10$$$ kids.\nEvery kid can get $$$3$$$ pieces of candy, so $$$35 - 10 \\times 3 = 5$$$ pieces of candy will remain.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":1}],"title":"Sample Problem","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a href=\"https://youtu.be/wZIQycr0F4c?t=726\" target=\"_blank\"\n    >View problem and solution walkthrough video\n  </a>\n</p>\n<p>\n  Given an $$$\\mathbf{N} \\times \\mathbf{N}$$$ grid representing a rhombus-shaped board with\n  hexagonal cells, we have to output one of four possible board states:\n  <code>Impossible</code>, <code>Red wins</code>, <code>Blue wins</code>, or\n  <code>Nobody wins</code>.\n</p>\n<p>\n  The square input grid does not fully indicate what it means for cells to be\n  connected. For example, consider the cells labeled <code>1</code> through\n  <code>9</code> in this $$$3 \\times 3$$$ grid:\n</p>\n<pre>\n123\n456\n789\n</pre>\n<p>Compare the equivalent cells in the game board:</p>\n<img alt=\"\" src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3wwgIgoFDtb4JmSgyzCrHlYnK3rHAAQu1XuN76VBhis6MXRwnQ6IHn2PxXgD8uSCE5hNiISElqZDuFfVqQc3M4Z7-t/cell_neighbors.png\" />\n<p>\n  The central cell <code>5</code> is not connected to cell <code>1</code> or\n  cell <code>9</code>. It is connected to cells <code>2</code>, <code>3</code>,\n  <code>4</code>, <code>6</code>, <code>7</code>, and <code>8</code>. This\n  adjacency rule applies throughout the solution.\n</p>\n<p>\n  Another important observation is that the game board is not symmetrical for\n  the Red and Blue players. This is not obvious from the square grid input. For\n  example, consider this $$$4 \\times 4$$$ grid:\n</p>\n<pre>\nBBBR\nRRBR\nRBRR\nRBBB\n</pre>\n<p>\n  The text representation looks symmetrical for Red and Blue. However, the\n  equivalent portion of the game board looks like this:\n</p>\n<img alt=\"\" src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3nHIIx1uDCF44S_Fc5n05pfPf0G9OYd63FuACCW2DBOQGsh--EyAcvw5TdjWgpjQisPMgltO542B2IKy3NwQMDEUaa9y7YEf3mi1c/asymmetrical_neighbors.png\" />\n<p>\n  Notice that the blue stones in the center are connected, but the red stones\n  are not.\n</p>\n\n<h3>Test set 1</h3>\n\n<p>\n  In test set 1, we are given cases with $$$1 \\le \\mathbf{N} \\le 10$$$. We can use\n  <a target=\"_blank\" href=\"https://en.wikipedia.org/wiki/Flood_fill\">flood fill</a>\n  to find connected sets of cells. We start by considering the blue cells at the\n  west side of the board. From a given blue cell, we visit each connected cell\n  to see if it is also blue. We keep track of which cells have been visited so\n  that we do not examine the same cell more than once.\n</p>\n<p>\n  If the flood fill reaches a blue cell at the east side of the board, we know\n  that there is a winning path for the Blue player. If this is not the case, we\n  flood-fill red cells starting from the north side of the board and check\n  whether we reach the south side. This tells us whether the Red player has a\n  winning path. (It is not physically possible for both Blue and Red to have a\n  winning connection, so we do not consider that case.)\n</p>\n<p>\n  Because we traverse the entire $$$\\mathbf{N} \\times \\mathbf{N}$$$ board, the time complexity\n  of the flood fill is $$$O(\\mathbf{N}^2)$$$. However, the solution is not complete\n  yet. We have to think about what would make a board state impossible.\n</p>\n<p>\n  The following state is impossible according to the game rules. By counting the\n  stones, we can see that Red must have placed a stone after Blue won:\n</p>\n<img alt=\"\" src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0Jitwdutm-EaLcSEv4R2z5E9JBLu_dK5UArKGesjZpYugwzYpcQGRaZd0g9rAxFJNIgPcmk4p0pXfMoJSCgR0Op5tVmCWA-e6-3ckUcA/red_moves_after_blue_win.png\" />\n<p>\n  Another kind of impossible state is when a player has a winning path, but\n  there is no single stone that could have been placed in the final move to\n  change the board from a non-winning state to a winning state. Consider the\n  following board:\n</p>\n<img alt=\"\" src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U28lzwqCmntNI7iMW0fsINcsg75Z6tVV-dbbzgQvIOMQ59W3JiqSQEzmuBq_4FsoBCMKtGqEtUvrYfvnk74W1pGuuySKA/blue_wins_twice.png\" />\n<p>\n  Blue has a winning path. Now consider what state the board was in before\n  Blue's final move. No matter which blue stone we remove from the board, Blue\n  still has a winning path. This tells us that the game did not end according to\n  the rules, so we say that the board is in an <code>Impossible</code> state.\n</p>\n<p>Bringing everything together, we can solve test set 1 as follows.</p>\n<ol>\n  <li>\n    Count the stones placed by each player and make sure they took no more moves\n    than allowed, or else the state is <code>Impossible</code>.\n  </li>\n  <li>\n    Use flood fill to look for a path of blue cells from the west side of the\n    board to the east side.\n  </li>\n  <li>\n    If there is a blue path, check whether the board state is possible. For each\n    blue stone on the board, temporarily remove the stone and use flood fill\n    again. If there is still a blue path in the temporary state for every single\n    blue stone, the board state is\n    <code>Impossible</code>. Otherwise, the state is <code>Blue wins</code>.\n  </li>\n  <li>\n    Perform steps 2 and 3 for the Red player, looking for a path of red cells\n    from the north side of the board to the south side.\n  </li>\n  <li>\n    If there is no blue path or red path, the state is <code>Nobody wins</code>.\n  </li>\n</ol>\n<p>\n  In step 3, for each of $$$O(\\mathbf{N}^2)$$$ stones, we run flood fill in\n  $$$O(\\mathbf{N}^2)$$$ time, making a total time complexity of $$$O(\\mathbf{N}^4)$$$.\n</p>\n\n<h3>Test set 2</h3>\n\n<p>\n  In test set 2, we are given cases with $$$1 \\le \\mathbf{N} \\le 100$$$. An\n  $$$O(\\mathbf{N}^4)$$$ solution may be too slow for $$$\\mathbf{N} = 100$$$.\n</p>\n<p>\n  A more efficient approach involves tracing paths <i>between</i> cells. Imagine\n  that we are walking between two cells with a blue stone on our left and a red\n  stone or empty cell on our right:\n</p>\n<img alt=\"\" src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2P9cvEaVIIEUq_Ix_bRsbmgW0DmFJ06IfyQjO20-gEceK9WmfM7IxFBEi68sYsRWjwRoT2jqme-inEjxC8kMv8eJrKAasYjg/walk_between_cells.png\" />\n<p>\n  There is a cell ahead of us. If the next cell has a blue stone on it, we go\n  right. Otherwise, we go left. We continue to traverse the grid, maintaining\n  the last moved direction and always turning left if the next cell is not blue.\n  We treat the sides of the board as colored stones for this purpose.\n</p>\n<p>\n  Using this traversal method, we start from the southwest corner and trace a\n  path between cells that always keeps blue stones on the left. We continue\n  until we reach the east side or the north side. No other outcome is possible.\n  If we reach the east side, there are blue stones connecting the west and east\n  sides. Otherwise, there are not.\n</p>\n<p>\n  If there is a connection from west to east, we now trace a path starting from\n  the northwest corner, this time keeping blue stones to the right. The result\n  will be two paths that enclose a connected set of blue stones from west to\n  east.\n</p>\n<p>\n  The following diagrams illustrate this approach. We start by padding the board\n  with colored stones to simplify the path-tracing procedure. You can convince\n  yourself that this does not affect the outcome.\n</p>\n<img alt=\"\" src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U04vSWeXiZ8V-s5urBTnN7FRLkSMaungOMKI8RU0dpy-VQhBBJgeLEHBj_p5fRymrpAqeXAURkOBtZONGrcHe6nfaSGt9DPzSAphug/path_tracing_blue_wins.png\" />\n<p>\n  Now we must decide whether Blue has won or the board state is\n  <code>Impossible</code>. To do this, we look for a blue stone that Blue could\n  have placed to win the game. If the two paths that we traced from west to east\n  share a stone, we can break the west-to-east connection by removing that\n  stone. This means that Blue could have placed that stone and won the game, so\n  the state is <code>Blue wins</code>. If the two paths do not share a stone,\n  there is no single stone that Blue could have placed to win, so the state is\n  <code>Impossible</code>.\n</p>\n<p>\n  If there is no blue path, we repeat the above procedure for red paths from\n  north to south. If there are no red paths either, the game state is\n  <code>Nobody wins</code>.\n</p>\n<p>\n  In the example above, notice that the two paths share a stone in the top right\n  cell of the original board. By removing this stone, it is clear that both\n  paths are broken, so this must have been the last stone that Blue placed. The\n  state is <code>Blue wins</code>.\n</p>\n<p>\n  In the example below, notice that the paths do not share any stones. There is\n  no stone that we can remove to break the connection. As discussed above, this\n  state is <code>Impossible</code>.\n</p>\n<img alt=\"\" src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0xDIoS4D_URFGmBQw85sQixczAtNsUm30RbCPxVOLovfObde57mmfn2Gh7DWhsRi_5dkqQe-vHV4NN2tHqMmkzv1o4y58pLaKDnjHY/path_tracing_impossible.png\" />\n<p>\n  In the final example, there is no path for Blue or Red. The state is\n  <code>Nobody wins</code>:\n</p>\n<img alt=\"\" src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U37tLnbSPTY6RVrbTud7-dcVTvZnQ5AgoUkGGLrmS7klkiZ8vhyzWIIQ48i61K_PE3NKb28VRG9zlY9ZASF-srRFeOdjVQn1bGD-sUeoA/path_tracing_nobody_wins.png\" />\n<p>\n  It takes $$$O(\\mathbf{N}^2)$$$ time to trace one path and we trace fewer than four\n  paths, so the total time complexity of the path-tracing approach is\n  $$$O(\\mathbf{N}^2)$$$.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Oa3I_fRW9oNMo9L7mIXmW63428_Jv4ks2vqGoUdTlaSdL9P9XwVApMulQYQYmhUpSSt033PTd/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000942527","statement":"<h3>Problem</h3>\n<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a target=\"_blank\" href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0-LbJbjJKTwhAyJ-t2rzo2ZWLaR74XeQO9AtvVPL8Ez89cyPTNyI8MLJCXxhAMUkOhMRfn9o2qJYAX/starter_code.zip?dl=1\">Download the Starter Code!</a>\n</p>\n<p>\nThis problem was inspired by a board game called Hex, designed independently by Piet Hein and John Nash. It has a similar idea, but does not assume you have played Hex.\n</p>\n<p>\nThis game is played on an $$$\\mathbf{N}\\times\\mathbf{N}$$$ board, where each cell is a hexagon. There are two players: Red side (using red stones) and Blue side (using blue stones). The board starts empty, and the two players take turns placing a stone of their color on a single cell within the overall playing board.  Each player can place their stone on any cell not occupied by another stone of any color.  There is no requirement that a stone must be placed beside another stone of the same color.  The player to start first is determined randomly (with equal probability among the two players).\n</p>\n<p>\nThe upper side and lower sides of the board are marked as red, and the other two sides are marked as blue. For each player, the goal of the game is to connect the two sides marked with their color by forming a connected path using stones of their color. The first player to achieve this wins. Note that the four corners are considered connected to both colors.\n</p>\n<p>\nThe game ends immediately when one player wins.\n</p>\n<p>\nGiven a game state, help someone new to the game determine the status of a game board. Say one of the following:\n<ul>\n<li><code>Impossible</code>: If it was impossible for two players to follow the rules and to have arrived at that game state.</li>\n<li><code>Red wins</code>: If the player playing the red stones has won.</li>\n<li><code>Blue wins</code>: If the player playing the blue stones has won.</li>\n<li><code>Nobody wins</code>: If nobody has yet won the game. Note that a game of Hex cannot end without a winner!</li>\n</ul>\n</p>\n<p>\nNote that in any impossible state, the only correct answer is <code>Impossible</code>, even if red or blue has formed a connected path of stones linking the opposing sides of the board marked by their colors.\n</p>\n<p>\nHere is a an example game on a $$$6\\times6$$$ gameboard where blue won. Blue was the first player to move, and placed a blue stone at cell marked as $$$1$$$. Then Red placed at cell $$$2$$$, then blue at cell $$$3$$$, etc. After the $$$11$$$-th stone is placed, blue wins.\n</p>\n<img alt=\"\" src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2SAheWoFa8PpfDSCpDXakSALd6Tf7NcOw6kFiH2ROc6Fofdm-T812cmvv3mvUgTMOWAksGnA/Hex_num.png\">\n\n<h3>Input</h3>\n<p>\nThe first line of input gives the number of test cases, $$$\\mathbf{T}$$$.  $$$\\mathbf{T}$$$ test cases follow. Each test case start with the size of the side of the board, $$$\\mathbf{N}$$$. This is followed by a board of $$$\\mathbf{N}$$$ rows and $$$\\mathbf{N}$$$ columns consisting of only <code>B</code>, <code>R</code>, and <code>.</code> characters. <code>B</code> indicates a cell occupied by blue stone, <code>R</code> indicates a cell occupied by red stone, and <code>.</code> indicates an empty cell.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the case number (starting from $$$1$$$) and $$$y$$$ is the status of the game board. It can be <code>\"Impossible\"</code>, <code>\"Blue wins\"</code>, <code>\"Red wins\"</code>, or <code>\"Nobody wins\"</code> (excluding the quotes). Note that the judge is case-sensitive, so answers of <code>\"impossible\"</code>, <code>\"blue wins\"</code>, <code>\"red wins\"</code>, and <code>\"nobody wins\"</code> will be judged incorrect.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n$$$1 \\le \\mathbf{N} \\le 10$$$.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n$$$1 \\le \\mathbf{N} \\le 100$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2NRvH0O62MqOybEZGTeu6kfIs5zI9p3ved0XDdkCP-IqQ-hhwdhmYyb7NyJ-eXD4RyjQkwbCUJHU7fgfQ6ROF4OF8/hex_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">7\n1\n.\n1\nB\n1\nR\n2\nBR\nBB\n4\nBBBB\nBBB.\nRRR.\nRRRR\n4\nBBBB\nBBBB\nRRR.\nRRRR\n6\n......\n..R...\nBBBBBB\n..R.R.\n..RR..\n......</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3X2FQlJxKy2JvRQMs0SYCtqd5dNYd3X9bwq7VCVQL3XMtppBVgxRZAxYg7NRkDElgP3Ja8jKqhth6IoCCf9SMWMb3T/hex_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: Nobody wins\nCase #2: Blue wins\nCase #3: Red wins\nCase #4: Impossible\nCase #5: Blue wins\nCase #6: Impossible\nCase #7: Blue wins</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":5},{"type":1,"type__str":"VISIBLE","value":12}],"title":"Hex","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a href=\"https://youtu.be/wZIQycr0F4c?t=1354\" target=\"_blank\"\n    >View problem and solution walkthrough video\n  </a>\n</p>\n<p>We are given two sets of binary strings:</p>\n<ol>\n  <li>Set of preferences of size $$$\\mathbf{N}$$$</li>\n  <li>Set of forbidden milk teas of size $$$\\mathbf{M}$$$</li>\n</ol>\n<p>Each binary string in these sets is of length $$$\\mathbf{P}$$$.</p>\n\n<h3>Test Set 1</h3>\n<p>\n  There are only $$$2^\\mathbf{P}$$$ different combinations of milk tea available. Since\n  $$$\\mathbf{P}$$$ is at most $$$10$$$ for this set, the maximum number of possible\n  combinations for a milk tea is $$$2^{10}$$$ or $$$1024$$$. This is a small\n  enough number to check each combination and calculate how many complaints you\n  will get. Take the combination that gives the fewest complaints and that is\n  not forbidden and output the number of complaints.\n</p>\n<h3>Test Set 2</h3>\n<p>\n  For the this test set, the above approach will take too long to compute, so we\n  need a different strategy.\n</p>\n<p>Notice the following:</p>\n<ul>\n  <li>\n    Each option is represented by a bit. We select the best string of bits that\n    fits the requirements.\n  </li>\n  <li>\n    Disregarding forbidden combinations, a decision for which bit to choose for\n    an option is independent of other bit decisions. This is because the options\n    are independent from each other - every option will have a complaint or not\n    for each friend, regardless of other options picked.\n  </li>\n  <li>\n    Disregarding forbidden combinations again, we can get the best milk tea\n    combination by selecting the most occurring bit in the set of preferences\n    for each position in the string of bits. For example, given the set of\n    preferences:\n    <br />\n    &nbsp;<code>{ 1100 </code>\n    <br />\n    &emsp;&ensp;<code>1010</code>\n    <br />\n    &emsp;&ensp;<code>0000 }</code>\n    the best milk tea would be:\n    <br />\n    &emsp;&ensp;<code>1000</code>\n  </li>\n</ul>\n<p>\n  So how do we deal with forbidden combinations? First notice that there are at\n  most $$$100$$$ forbidden combinations. The size of the forbidden set is $$$\\mathbf{M}$$$;\n  if we make $$$\\mathbf{M} + 1$$$ milk tea combinations, at least one of these\n  combinations is not in the set of forbidden combinations. Since $$$\\mathbf{M}$$$ is at most\n  $$$100$$$, it is feasible to create the best $$$\\mathbf{M} + 1$$$ combinations and\n  take the best one that is not forbidden.\n</p>\n<p>\n  To generate these combinations, we can preprocess how many complaints we would\n  get for each option. Then, we build up the best combinations one option at a\n  time. We iterate through the options, at each option adding both possibilities\n  ($$$0$$$ and $$$1$$$) to the previous set of binary strings we created and\n  select the best $$$\\mathbf{M} + 1$$$ results. We can tiebreak the results\n  arbitrarily.\n</p>\n<p>\n  Let's consider why this works. Let $$$S_k$$$ denote the best $$$\\mathbf{M} + 1$$$\n  combinations when we consider only the first $$$k$$$ options. The key idea is\n  to note that each combination in $$$S_{k+1}$$$ has a combination from\n  $$$S_k$$$ as a prefix.\n</p>\n<p>\n  This is easy to show by contradiction. Take any binary string $$$X$$$ from\n  $$$S_{k+1}$$$ and remove the last bit to get the prefix $$$X'$$$. Suppose, for\n  contradiction, that $$$X'$$$ is not $$$S_k$$$, thus all strings in $$$S_k$$$\n  must have fewer complaints than $$$X'$$$. Take any of these strings in\n  $$$S_k$$$ and append the removed bit. This gives a combination which will have\n  strictly fewer (when considering the tiebreak) complaints than $$$X$$$. This\n  results in $$$\\mathbf{M} + 1$$$ binary strings with fewer complaints than $$$X$$$,\n  which contradicts $$$S$$$ being in $$$S_{k+1}$$$.\n</p>\n\n<p>The final algorithm is as follows:</p>\n<ol>\n  <li>\n    Precompute the scores (i.e. the number of complaints) for setting each bit\n    in $$$\\mathbf{P}$$$ to $$$0$$$. The scores for setting a bit to $$$1$$$ can then be\n    computed by subtracting the score for $$$0$$$ from $$$\\mathbf{N}$$$, so we do not have to\n    store these. To do this, iterate through $$$0$$$ to $$$\\mathbf{P}-1$$$, and at each\n    iteration, iterate through the set of preferences, summing the number of\n    $$$1$$$s at that position.\n  </li>\n  <li>Start with an empty set $$$S_0$$$: $$$S_0 =$$$ <code>{\"\"}</code></li>\n  <li>\n    Iterate from $$$1$$$ to $$$\\mathbf{P}$$$, generating $$$S_{k}$$$. To generate $$$S_{k}$$$\n    (for $$$k > 0$$$):\n    <ol>\n      <li type=\"i\">\n        Take each binary string in $$$S_{k-1}$$$ and append both a $$$0$$$ and a\n        $$$1$$$. Since the set $$$S_{k-1}$$$ has at most $$$\\mathbf{M}+1$$$ strings,\n        this will give at most $$$(\\mathbf{M} + 1)\\cdot2$$$ potential answers.\n      </li>\n      <li type=\"i\">\n        Remove extra strings so that the set has (at most) the best $$$\\mathbf{M} +\n        1$$$. To do this, you can maintain a dictionary of precomputed scores\n        for each binary string in $$$S_{k-1}$$$ and add the score for the\n        appended bit to it. Then you can sort these scores and remove the\n        largest ones.\n      </li>\n    </ol>\n  </li>\n  <li>Take the best combination from $$$S_{\\mathbf{P}}$$$ that is not forbidden.</li>\n</ol>\n<h3>Time complexity</h3>\n<ol>\n  <li>Precomputing the scores for each bit: $$$O(\\mathbf{P}\\mathbf{N})$$$</li>\n  <li>Generating the empty set: $$$O(1)$$$</li>\n  <li>\n    Iterating from $$$1$$$ to $$$\\mathbf{P}$$$: $$$O(\\mathbf{P})$$$; in total for generating\n    $$$S_{k}$$$: $$$O(\\mathbf{M}\\log\\mathbf{M})$$$. So the total for generating all sets:\n    $$$O(\\mathbf{P}\\mathbf{M}\\log\\mathbf{M})$$$\n  </li>\n  <ol>\n    <li type=\"i\">For each string in $$$S_{k-1}$$$: $$$O(\\mathbf{M})$$$</li>\n    <ol>\n      <li type=\"a\">Appending $$$0$$$ and $$$1$$$: $$$O(1)$$$</li>\n      <li type=\"a\">\n        Computing the score for these two binary strings (remember, these are\n        precomputed, you just need to add the score for the last bit to the\n        score from the dictionary) and storing them in a dictionary takes:\n        $$$O(1)$$$\n      </li>\n    </ol>\n    <li type=\"i\">\n      Sorting the set and removing extra strings: $$$O(\\mathbf{M}\\log\\mathbf{M})$$$\n    </li>\n  </ol>\n  <li>\n    Finding the best combination from $$$S_{\\mathbf{P}}$$$ that is not forbidden:\n    $$$O(\\mathbf{M})$$$\n  </li>\n</ol>\n<p>Thus, the total time complexity is $$$O(\\mathbf{P}\\mathbf{N} + \\mathbf{P}\\mathbf{M}\\log\\mathbf{M} + \\mathbf{M})$$$.</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2Zgn68prDKp3u1SfQ912p_uVnLd12X1A1b5bNuEiYlEtEkRk1rakW9eCbSkUEKnqj3-qkLNKal/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000943934","statement":"<h3>Problem</h3>\n<p\n  style=\"\n    display: inline-block;\n    padding: 5px;\n    background-color: #f1f3f4;\n    border: 2px solid #34a853;\n  \"\n>\n  <a target=\"_blank\" href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1nAqZULbAdII0_646751s1Ww4I15_R6beM5UMJyXnEOC4WCtd0uoPlD25E9SW2GCkxaYUXq6JpCMV6/starter_code.zip?dl=1\">Download the Starter Code!</a>\n</p>\n<p>\n  The milk tea in China is very delicious. There are many binary (\"either-or\")\n  options for customizing a milk tea order, such as:\n</p>\n<ul>\n  <li>\"with ice\" OR \"no ice\"</li>\n  <li>\"with sugar\" OR \"no sugar\"</li>\n  <li>\"with bubbles\" OR \"no bubbles\"</li>\n  <li>\"with pudding\" OR \"no pudding\"</li>\n  <li>and so on.</li>\n</ul>\n<p>\n  A customer's preferences for their milk tea can be represented as a\n  binary string. For example, using the four properties above (in the order they\n  are given), the string <code>1100</code>\n  means \"with ice, with sugar, no bubbles, no pudding\".\n</p>\n<p>\n  Today, Shakti is on duty to buy each of his $$$\\mathbf{N}$$$ friends a milk tea, at a\n  shop that offers $$$\\mathbf{P}$$$ binary options. But after collecting everyone's\n  preferences, Shakti found that the order was getting too complicated, so\n  Shakti has decided to buy the same type of milk tea for everyone. Shakti knows\n  that for every friend, for every preference that is not satisfied, they will\n  complain once. For example, if two of the friends have preferences for types\n  <code>101</code> and <code>010</code>, and Shakti chooses type\n  <code>001</code>, then the first friend will complain once and the second\n  friend will complain twice, for a total of three complaints.\n</p>\n<p>\n  Moreover, there are $$$\\mathbf{M}$$$ different forbidden types of milk tea that the\n  shop will not make, and Shakti cannot choose any of those forbidden types.\n</p>\n<p>What is the smallest number of complaints that Shakti can get?</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$.\n  $$$\\mathbf{T}$$$ test cases follow. Each test case starts with a line containing 3\n  integers $$$\\mathbf{N}$$$, $$$\\mathbf{M}$$$, and $$$\\mathbf{P}$$$, as described above. Then, there are\n  $$$\\mathbf{N}$$$ more lines, each of which contains a binary string; these represent\n  the preferences of the $$$\\mathbf{N}$$$ friends. Finally, there are $$$\\mathbf{M}$$$ more\n  lines, each of which contains a binary string; these represent the forbidden\n  types of milk tea that the shop will not make. Binary strings consist only of\n  <code>0</code> and/or <code>1</code> characters.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from $$$1$$$) and <code>y</code> is\n  the minimum number of complaints that Shakti can get, per the rules described\n  above.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  <p>\n    $$$1 &le; \\mathbf{T} &le; 100$$$.<br />\n    All of the forbidden types of milk tea are different.<br />\n  </p>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  <p>\n    $$$1 &le; \\mathbf{N} &le; 10$$$.<br />\n    $$$1 &le; \\mathbf{M} &le; min(10, 2^\\mathbf{P} - 1)$$$.<br />\n    $$$1 &le; \\mathbf{P} &le; 10$$$.<br />\n  </p>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  <p>\n    $$$1 &le; \\mathbf{N} &le; 100$$$.<br />\n    $$$1 &le; \\mathbf{M} &le; min(100, 2^\\mathbf{P} - 1)$$$.<br />\n    $$$1 &le; \\mathbf{P} &le; 100$$$.<br />\n  </p>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1ku_nSGZQET8iG_dMBPzZmVB09Zpdiom_kEmnLsmARv6AU4ovm9t5Uvb_mgfSc93zIR0fd-L_1dsUGF15h_H23F9tfw6003A/milk_tea_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3 1 4\n1100\n1010\n0000\n1000\n2 4 4\n1111\n1111\n1111\n0111\n1011\n1101\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0jJLnh9DrJi5vIBT2cVPKJ-ypqxj9HDlXtlSZBxnQtJL2qjgzJtWdcdI4rXkukiT4Hsi2YFOiIQTzT5PL9_dFYnu_kLF6i13w/milk_tea_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4\nCase #2: 2\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n  <p>\n    In Sample Case #1, there are 3 friends, and they want milk teas of types\n    <code>1100</code>, <code>1010</code>, and <code>0000</code>. If Shakti could\n    choose type <code>1000</code>, then each friend would complain once, for a\n    total of 3 complaints. However, type <code>1000</code> is not available in\n    the shop. So, given these constraints, an optimal solution is to choose type\n    <code>1100</code>. Then, his friends will complain 0, 2, and 2 times,\n    respectively, for a total of 4 complaints.\n  </p>\n  <p>\n    In Sample Case #2, Shakti's best option is to choose type <code>1110</code>.\n    Each friend will complain once, for a total of 2 complaints. Notice that\n    different friends might have the same preferences. Also notice that the\n    limits for both the Small and Large datasets guarantee that there is always\n    at least one possible type of milk tea that is not forbidden.\n  </p>\n</sampleio>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":12},{"type":1,"type__str":"VISIBLE","value":20}],"title":"Milk Tea","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000008f4332","type":1,"type__str":"SPECTATOR"},"title":"Coding Practice with Kick Start Session #1","ui_appearance":1,"ui_appearance__str":"APPEARANCE_TYPE_CODING_PRACTICE_WITH_KS"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
