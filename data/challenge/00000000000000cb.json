{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1523152800000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"00000000000000cb","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  This was our first round of Code Jam 2018, and also the very first round on\n  our new platform. With over 62,000 registrants, it was one of our biggest\n  years ever!\n</p><p>\n  We hope that you enjoyed the new platform, and we are continuously working to\n  smooth down rough edges and add your favorite features from the old platform.\n  We had one period of high server load midway through the contest, and we\n  apologize to those of you who encountered difficulties submitting attempts\n  before we were able to fix the issue.\n</p><p>\n  On to the problems! The title of <i>Saving The Universe Again</i> was a\n  callback to the first problem from our old platform,\n  but the two problems were quite different. Fortunately, this decade's\n  threat to the universe turned out to be fairly simple to defeat if you came\n  up with the right rule. <i>Trouble Sort</i> was also quite approachable if\n  you thought through what our (bad!) new sorting algorithm was actually doing.\n  It's not the first\n  bad sorting algorithm from the Code Jam team,\n  either (see Kicksort); we should really stop poring over advanced algorithms journal\n  articles and get back to the basics!\n</p><p>\n  <i>Go, Gopher!</i> was our first interactive problem, and it was open to\n  various approaches; the main challenge lay in getting used to the new\n  problem type. Finally, we had our traditional oddball Qualification Round D\n  problem, though in this case, it was more of an \"oddcube\" problem:\n  <i>Cubic UFO</i> riffed on the plot of the 2017 movie Arrival, and it\n  required some serious geometric thinking. Constant-time answers were\n  possible, but not required.\n</p><p>\n  In all, over 24,000 contestants made at least one attempt, and over 21,000\n  successfully solved at least one test set. Over 14,000 earned the 25 points\n  or more needed to advance to Round 1; official advancement emails will go out\n  early next week. If you were one of our qualifiers, we will see you in just a\n  week for Round 1A! (After a suspiciously pancake-free Qualification Round,\n  what might lie in store?) For those of you who did not qualify, we hope that\n  you had fun, and please join us again next year!\n</p>\n<hr>\n<p>\n  <b>Cast</b>\n</p><p>\n  Saving The Universe Again: Written and prepared by Jonathan Irvin Gunawan.\n</p><p>\n  Trouble Sort: Written by Ian Tullis. Prepared by Micah Stairs.\n</p><p>\n  Go, Gopher!: Written by Pablo Heiber. Prepared by Anqi (Joyce) Yang.\n</p><p>\n  Cubic UFO: Written by Igor Naverniouk. Prepared by Petr Mitrichev.\n</p><p>\n  Solutions and other problem preparation and review by Liang Bai, Shane Carr,\n  John Dethridge, Md Mahbubul Hasan, Brian Hirashiki, Samuel Huang, Ray\n  Robinson, Mihai-Emilian Scortaru, Micah Stairs, and Sasan Tavakkol.\n</p><p>\n  Analysis authors:\n</p>\n<ul>\n  <li>Saving The Universe Again: Jonathan Irvin Gunawan, Md Mahbubul Hasan,\n    and Shi-Jie Khor</li>\n  <li>Trouble Sort: Shane Carr</li>\n  <li>Go, Gopher!: Md Mahbubul Hasan</li>\n  <li>Cubic UFO: Md Mahbubul Hasan and Samuel Huang</li>\n</ul>\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1523055600000,"tasks":[{"analysis":"<h3>Test set 1</h3>\n<p>\n  Since there is at most one <code>C</code> instruction in this test set, we\n  can solve the two cases independently.\n</p>\n<p>\n  If there is no <code>C</code> instruction in <b>P</b>, then none of our swaps\n  will have any effect, so all we can do is check whether the damage of the\n  beam exceeds <b>D</b>.\n</p>\n<p>\n  If there is one <code>C</code> instruction in <b>P</b>, then we can try every\n  possible position for the <code>C</code> instruction in the program. Assuming\n  that there is at least one position for the <code>C</code> instruction that\n  causes the total damage not to exceed <b>D</b>, we can choose the scenario\n  that requires the fewest swaps; the number of required swaps for a scenario\n  is equal to the distance between the original and final positions of the\n  <code>C</code> instruction.\n</p>\n<h3>Test set 2</h3>\n<p>\n  To solve test set 2, we will first derive a formula to compute the total\n  damage based on the positions of the <code>C</code> and <code>S</code>\n  instructions in <b>P</b>. Let N<sub>C</sub> and N<sub>S</sub> be the number of\n  <code>C</code> and <code>S</code> instructions in <b>P</b>, respectively.\n  Let C<sub>i</sub> be the number of <code>S</code> instructions to the right of\n  the i-th <code>C</code> instruction, where i uses 1-based indexing.\n</p>\n<p>\n  Note that the i-th <code>C</code> instruction will increase the damage of the\n  subsequent beams by 2<sup>i-1</sup>. For example, in the input program\n  <code>CSSCSSCSS</code>, initially, all of the <code>S</code> instructions will\n  inflict a damage of 1. Consider the damage dealt by the last <code>S</code>\n  instruction. Since the robot has been charged twice, the damage output by the\n  last instruction will be 4. Alternatively, we see that the damage, 4 = 1\n  (initial damage) + 2<sup>0</sup> (damage caused by the first <code>C</code>)\n  + 2<sup>1</sup> (damage caused by the second <code>C</code>). By breaking\n  down the damage by each <code>S</code> instruction in the same manner, the\n  total damage output, D, of the input program is given by:\n</p>\n<pre>\n  D = N<sub>S</sub> + C<sub>1</sub> &times; 1 + C<sub>2</sub> &times; 2 + ... + C<sub>N<sub>C</sub></sub> &times; 2<sup>N<sub>C</sub> - 1 </sup>.\n</pre>\n<p>\n  Next, we investigate how each swap affects the amount of damage. A swap on\n  adjacent characters which are the same will not affect the equation. When we\n  swap the i-th <code>C</code> instruction with a <code>S</code> instruction to\n  its right, the value of C<sub>i</sub> will decrease by 1 since now there is\n  one less S than before. On the other hand, swapping the i-th <code>C</code>\n  instruction with an <code>S</code> instruction on its left will increase the\n  value of C<sub>i</sub> by 1. Note that in either case, we will only modify\n  the value of C<sub>i</sub>, and the other C values will remain the same. This\n  suggests that we should only ever swap adjacent instructions of the form\n  <code>CS</code>.\n</p>\n<p>\n  Therefore, executing M swaps is equivalent to reducing the values of\n  C<sub>i</sub>s such that the total amount of reduction across all\n  C<sub>i</sub>s is M. We want the total damage (according to the above\n  equation) to be minimized. Clearly, we should reduce the values of\n  C<sub>i</sub> that contribute to the largest damage output, while making sure\n  that each of the C<sub>i</sub>s is nonnegative.\n</p>\n<p>\n  Intuitively, all of this math boils down to a very simple algorithm! As long\n  as there is an instance of <code>CS</code> in the current program, we always\n  swap the latest (rightmost) instance. After each swap, we can recompute the\n  damage and check whether it is still more than <b>D</b>. If it is not, then\n  we can terminate the program. If we ever run out of instances of\n  <code>CS</code> to swap, but the damage that the program will cause is still\n  more than <b>D</b>, then the universe is doomed.\n</p>\n","id":"0000000000007966","statement":"<h3>Problem</h3>\n<p>\n  An alien robot is threatening the universe, using a beam that will destroy\n  all algorithms knowledge. We have to stop it!\n</p><p>\n  Fortunately, we understand how the robot works. It starts off with a beam\n  with a strength of 1, and it will run a program that is a series of\n  instructions, which will be executed one at a time, in left to right order.\n  Each instruction is of one of the following two types:\n</p>\n<ul>\n  <li><code>C</code> (for \"charge\"): Double the beam's strength.</li>\n  <li><code>S</code> (for \"shoot\"): Shoot the beam, doing damage equal to the\n    beam's current strength.</li>\n</ul>\n<p>\n  For example, if the robot's program is <code>SCCSSC</code>, the robot will\n  do the following when the program runs:\n</p>\n<ul>\n  <li>Shoot the beam, doing 1 damage.</li>\n  <li>Charge the beam, doubling the beam's strength to 2.</li>\n  <li>Charge the beam, doubling the beam's strength to 4.</li>\n  <li>Shoot the beam, doing 4 damage.</li>\n  <li>Shoot the beam, doing 4 damage.</li>\n  <li>Charge the beam, increasing the beam's strength to 8.</li>\n</ul>\n<p>\n  In that case, the program would do a total of 9 damage.\n</p><p>\n  The universe's top algorithmists have developed a shield that can withstand\n  a maximum total of <b>D</b> damage. But the robot's current program might do\n  more damage than that when it runs.\n</p><p>\n  The President of the Universe has volunteered to fly into space to hack the\n  robot's program before the robot runs it. The only way the President can hack\n  (without the robot noticing) is by swapping two adjacent instructions. For\n  example, the President could hack the above program once by swapping the\n  third and fourth instructions to make it <code>SCSCSC</code>. This would\n  reduce the total damage to 7. Then, for example, the president could hack the\n  program again to make it <code>SCSSCC</code>, reducing the damage to 5, and\n  so on.\n</p><p>\n  To prevent the robot from getting too suspicious, the President does not\n  want to hack too many times. What is this smallest possible number of hacks\n  which will ensure that the program does no more than <b>D</b> total damage,\n  if it is possible to do so?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow. Each consists of one line containing an integer\n  <b>D</b> and a string <b>P</b>: the maximum total damage our shield can\n  withstand, and the robot's program.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>,\n  where <code>x</code> is the test case number (starting from 1) and\n  <code>y</code> is either the minimum number of hacks needed to accomplish\n  the goal, or <code>IMPOSSIBLE</code> if it is not possible.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>D</b> &le; 10<sup>9</sup>.<br/>\n  2 &le; length of <b>P</b> &le; 30.<br/>\n  Every character in <b>P</b> is either <code>C</code> or <code>S</code>.<br/>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  The robot's program contains either zero or one <code>C</code> characters.\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  No additional restrictions to the Limits section.\n</p>\n\n\n<h3>Sample</h3>\n<div class=\"problem-io-wrapper\">\n<table>\n<tr>\n<td>\n<br/>\n<span class=\"io-table-header\">Input</span>\n<br/>&nbsp;\n</td>\n<td>\n<br/>\n<span class=\"io-table-header\">Output</span>\n<br/>&nbsp;\n</td>\n</tr>\n<tr>\n<td>\n<pre class=\"io-content\">6\n1 CS\n2 CS\n1 SS\n6 SCCSSC\n2 CC\n3 CSCSS\n\n</pre>\n</td>\n<td>\n<pre class=\"io-content\">Case #1: 1\nCase #2: 0\nCase #3: IMPOSSIBLE\nCase #4: 2\nCase #5: 0\nCase #6: 5\n\n</pre>\n</td></tr></table>\n</div>\n\n\n<p>\n  Note that the last three sample cases would not appear in test set 1.\n</p><p>\n  In Sample Case #1, the President can swap the two instructions to reduce the\n  total damage to 1, which the shield can withstand.\n</p><p>\n  In Sample Case #2, the President does not need to hack the program at all,\n  since the shield can already withstand the 2 total damage it will cause.\n</p><p>\n  In Sample Case #3, the program will do more damage than the shield can\n  withstand, and hacking will do nothing to change this. The universe is doomed.\n</p><p>\n  Sample Case #4 uses the program described in the problem statement. The\n  statement demonstrates one way to reduce the total damage to 5 using two\n  hacks. It is not possible to reduce the damage to 6 or less by using only one\n  hack; remember that the President can only swap adjacent instructions.\n</p><p>\n  In Sample Case #5, the robot will never shoot, and so it will never do any\n  damage. No hacking is required.\n</p><p>\n  In Sample Case #6, five hacks are required. Notice that even if two hacks\n  swap the instructions at the same two positions, they still count as separate\n  hacks.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":5},{"type":2,"type__str":"HIDDEN","value":10}],"title":"Saving The Universe Again","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test set 1</h3>\n<p>\n  Like bubble sort, Trouble Sort has O(<b>N</b><sup>2</sup>) time complexity; the proof is explained\n  below. With <b>N</b> &le; 100 for test set 1, we can run Trouble Sort to completion and simply iterate\n  over the result list to find the first sorting error, if any (that is, a value that is greater\n  than the value that follows it in the list).\n</p>\n<h3>Test set 2</h3>\n<p>\n  Running O(<b>N</b><sup>2</sup>) Trouble Sort to completion is too slow for <b>N</b> &le;\n  10<sup>5</sup>.\n</p>\n<p>\n  Instead, let's break down what Trouble Sort is doing at each step. Let's consider an input list of\n  6 elements. Trouble Sort makes the following comparisons on each pass through the array:\n</p>\n<ul>\n  <li>element 0 &#x2194; element 2</li>\n  <li>element 1 &#x2194; element 3</li>\n  <li>element 2 &#x2194; element 4</li>\n  <li>element 3 &#x2194; element 5</li>\n</ul>\n<p>\n  Regardless of the length of the list, this table illustrates the fundamental flaw in Trouble Sort:\n  even-index elements are compared with other even-index elements, and odd-index elements are\n  compared with other odd-index elements, but even-index and odd-index elements are never compared\n  with each other! This means that Trouble Sort is just bubble sort run separately on the even-index\n  elements and the odd-index elements, interleaving them into the output list. Trouble Sort is\n  correct only if interleaving the two sub-lists (the even-index list and the odd-index list)\n  happens to produce another sorted list. Since there are O(<b>N</b>) even-index and O(<b>N</b>)\n  odd-index elements, and since bubble sort is O(<b>N</b><sup>2</sup>), Trouble Sort is also\n  O(<b>N</b><sup>2</sup>).\n</p>\n<p>\n  To solve test set 2, we can can run our favorite O(<b>N</b> log <b>N</b>) sorting algorithm\n  independently on the two sub-lists described above, interleave the sorted sub-lists, and then find\n  the first sorting error as in our solution for test set 1.\n</p>\n","id":"00000000000079cb","statement":"<h3>Problem</h3>\n<p>\n  Deep in Code Jam's secret algorithm labs, we devote countless hours to\n  wrestling with one of the most complex problems of our time: efficiently\n  sorting a list of integers into non-decreasing order. We have taken a careful\n  look at the classic\n  <a href=\"https://en.wikipedia.org/wiki/Bubble_sort\">bubble sort</a>\n  algorithm, and we are pleased to announce a new variant.\n</p><p>\n  The basic operation of the standard bubble sort algorithm is to examine a\n  pair of adjacent numbers, and reverse that pair if the left number is\n  larger than the right number. But our algorithm examines a group of\n  <i>three</i> adjacent numbers, and if the leftmost number is larger than the\n  rightmost number, it reverses that entire group. Because our algorithm is a\n  \"triplet bubble sort\", we have named it Trouble Sort for short.\n</p>\n<pre>\n  TroubleSort(L): // L is a 0-indexed list of integers\n    let done := false\n    while not done:\n      done = true\n      for i := 0; i &lt; len(L)-2; i++:\n        if L[i] > L[i+2]:\n          done = false\n          reverse the sublist from L[i] to L[i+2], inclusive\n</pre>\n<p>\n  For example, for L = 5 6 6 4 3, Trouble Sort would proceed as follows:\n</p>\n<ul>\n  <li>First pass:\n    <ul>\n      <li>inspect 5 6 6, do nothing: 5 6 6 4 3</li>\n      <li>inspect 6 6 4, see that 6 > 4, reverse the triplet: 5 4 6 6 3</li>\n      <li>inspect 6 6 3, see that 6 > 3, reverse the triplet: 5 4 3 6 6</li>\n    </ul>\n  </li>\n  <li>Second pass:\n    <ul>\n      <li>inspect 5 4 3, see that 5 > 3, reverse the triplet: 3 4 5 6 6</li>\n      <li>inspect 4 5 6, do nothing: 3 4 5 6 6</li>\n      <li>inspect 5 6 6, do nothing: 3 4 5 6 6</li>\n    </ul>\n  <li>Then the third pass inspects the three triplets and does nothing, so the\n    algorithm terminates.</li>\n</ul>\n<p>\n  We were looking forward to presenting Trouble Sort at the Special Interest\n  Group in Sorting conference in Hawaii, but one of our interns has just\n  pointed out a problem: it is possible that Trouble Sort does not correctly\n  sort the list! Consider the list 8 9 7, for example.\n</p><p>\n  We need your help with some further research. Given a list of <b>N</b>\n  integers, determine whether Trouble Sort will successfully sort the list into\n  non-decreasing order. If it will not, find the index (counting starting from\n  0) of the first sorting error after the algorithm has finished: that is, the\n  first value that is larger than the value that comes directly after it when\n  the algorithm is done.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow. Each test case consists of two lines: one line\n  with an integer <b>N</b>, the number of values in the list, and then another\n  line with <b>N</b> integers <b>V<sub>i</sub></b>, the list of values.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where\n  <code>x</code> is the test case number (starting from 1) and <code>y</code>\n  is <code>OK</code> if Trouble Sort correctly sorts the list, or the index\n  (counting starting from 0) of the first sorting error, as described above.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  0 &le; <b>V<sub>i</sub></b> &le; 10<sup>9</sup>, for all i.<br/>\n  Memory limit: 1GB.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  3 &le; <b>N</b> &le; 100.<br/>\n  Time limit (for the entire test set): 10 seconds.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  3 &le; <b>N</b> &le; 10<sup>5</sup>.<br/>\n  Time limit (for the entire test set): 20 seconds.<br/>\n</p>\n\n<h4>Special Note</h4>\n<p>\n  Notice that test set 2 for this problem has a large amount of input, so\n  using a non-buffered reader might lead to slower input reading. In addition,\n  keep in mind that certain languages have a small input buffer size by default.\n</p>\n\n\n<h3>Sample</h3>\n<div class=\"problem-io-wrapper\">\n<table>\n<tr>\n<td>\n<br/>\n<span class=\"io-table-header\">Input</span>\n<br/>&nbsp;\n</td>\n<td>\n<br/>\n<span class=\"io-table-header\">Output</span>\n<br/>&nbsp;\n</td>\n</tr>\n<tr>\n<td>\n<pre class=\"io-content\">2\n5\n5 6 8 4 3\n3\n8 9 7\n\n</pre>\n</td>\n<td>\n<pre class=\"io-content\">Case #1: OK\nCase #2: 1\n\n</pre>\n</td></tr></table>\n</div>\n\n\n<p>\n  Sample Case #1 is similar to the first one described in the problem\n  statement. Trouble Sort correctly sorts this list, so the answer is\n  <code>OK</code>.\n</p><p>\n  Sample Case #2 is the second one described in the problem statement. Trouble\n  Sort does not correctly sort this list, since it terminates with the list\n  7 9 8. The 9 is the first value in the list that is larger than\n  the next value, so the index of the first sorting error is 1.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":8},{"type":2,"type__str":"HIDDEN","value":15}],"title":"Trouble Sort","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  This is an ad hoc geometry problem with many different solutions.\n</p>\n\n<h3>Test Set 1 (Visible)</h3>\n\n<p>\n  Suppose the cube is initially axis-aligned. Let us rotate it about the z-axis\n  by angle t, from +x towards +y, and study the shadow:\n</p>\n<p>\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 870 290\" preserveAspectRatio=\"xMinYMin meet\" stroke-width=\"1\" stroke=\"transparent\" fill=\"transparent\" data-size=\"870 290\" font-family=\"arial\" font-size=\"14\" style=\"overflow: visible; width: 870px; height: 290px;\"><path fill=\"#F88\" d=\"M94 193.4L227.5 211.6L227.1 215.2L239.5 212.8L228.1 207.2L227.7 210.8L94.1 192.6L94 193.4\"></path><text x=\"250.2\" y=\"214.3\" fill=\"#F88\" text-anchor=\"middle\" alignment-baseline=\"middle\">x</text><path fill=\"#5A5\" d=\"M94.5 193L90.2 58.2L93.8 58.1L89.5 46.2L85.8 58.3L89.4 58.2L93.7 193L94.5 193\"></path><text x=\"89.1\" y=\"35.5\" fill=\"#5A5\" text-anchor=\"middle\" alignment-baseline=\"middle\">y</text><path fill=\"#88F\" d=\"M93.8 192.7L21.8 255.4L19.4 252.6L13 263.5L24.7 258.7L22.3 256L94.3 193.3L93.8 192.7\"></path><text x=\"5.5\" y=\"270\" fill=\"#88F\" text-anchor=\"middle\" alignment-baseline=\"middle\">z</text><path stroke=\"#00F\" stroke-width=\"1.5\" d=\"M159.5 141.7L158 138.2L155.8 135.2L153 132.6L149.7 130.8L146.2 129.8L142.6 129.6L139.2 130.3L136.1 131.7L133.5 134L131.6 136.8L130.4 140L130.1 143.5L130.5 147.1L131.7 150.5L133.7 153.6L136.3 156.3L139.3 158.3L142.7 159.7L146.2 160.2L149.6 159.9L138.6 161.7L149.6 159.9L142.4 158.3L149.6 159.9\"></path><path stroke=\"#00F\" stroke-width=\"1.5\" d=\"M128 159.5L159.4 132.8\"></path><path stroke=\"#000\" fill=\"#aaa\" d=\"M127.7 230.8L105.6 257.4L165 267.9L181.8 239.3L127.7 230.8\"></path><line x1=\"126.9\" y1=\"162\" x2=\"127.7\" y2=\"230.8\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"103.7\" y1=\"182\" x2=\"105.6\" y2=\"257.4\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"166\" y1=\"190\" x2=\"165\" y2=\"267.9\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"183.4\" y1=\"168.4\" x2=\"181.8\" y2=\"239.3\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"126.9\" y1=\"162\" x2=\"126.3\" y2=\"104.9\" stroke=\"rgba(0,0,0,0.22)\" stroke-width=\"2\"></line><line x1=\"126.9\" y1=\"162\" x2=\"183.4\" y2=\"168.4\" stroke=\"rgba(0,0,0,0.23)\" stroke-width=\"2\"></line><line x1=\"126.3\" y1=\"104.9\" x2=\"184.8\" y2=\"109.4\" stroke=\"rgba(0,0,0,0.44)\" stroke-width=\"2\"></line><line x1=\"126.9\" y1=\"162\" x2=\"103.7\" y2=\"182\" stroke=\"rgba(0,0,0,0.44)\" stroke-width=\"2\"></line><line x1=\"183.4\" y1=\"168.4\" x2=\"184.8\" y2=\"109.4\" stroke=\"rgba(0,0,0,0.44)\" stroke-width=\"2\"></line><line x1=\"126.3\" y1=\"104.9\" x2=\"102.1\" y2=\"118.8\" stroke=\"rgba(0,0,0,0.64)\" stroke-width=\"2\"></line><line x1=\"183.4\" y1=\"168.4\" x2=\"166\" y2=\"190\" stroke=\"rgba(0,0,0,0.66)\" stroke-width=\"2\"></line><line x1=\"103.7\" y1=\"182\" x2=\"102.1\" y2=\"118.8\" stroke=\"rgba(0,0,0,0.86)\" stroke-width=\"2\"></line><line x1=\"184.8\" y1=\"109.4\" x2=\"166.8\" y2=\"124.4\" stroke=\"rgba(0,0,0,0.86)\" stroke-width=\"2\"></line><line x1=\"103.7\" y1=\"182\" x2=\"166\" y2=\"190\" stroke=\"rgba(0,0,0,0.86)\" stroke-width=\"2\"></line><line x1=\"102.1\" y1=\"118.8\" x2=\"166.8\" y2=\"124.4\" stroke=\"rgba(0,0,0,1.07)\" stroke-width=\"2\"></line><line x1=\"166\" y1=\"190\" x2=\"166.8\" y2=\"124.4\" stroke=\"rgba(0,0,0,1.08)\" stroke-width=\"2\"></line><ellipse cx=\"172.8\" cy=\"202.5\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"172.8\" y=\"204.5\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">V</text><ellipse cx=\"88.2\" cy=\"108.4\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"88.2\" y=\"110.4\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">W</text><path fill=\"#F88\" d=\"M384 193.4L517.5 211.6L517.1 215.2L529.5 212.8L518.1 207.2L517.7 210.8L384.1 192.6L384 193.4\"></path><text x=\"540.2\" y=\"214.3\" fill=\"#F88\" text-anchor=\"middle\" alignment-baseline=\"middle\">x</text><path fill=\"#5A5\" d=\"M384.5 193L380.2 58.2L383.8 58.1L379.5 46.2L375.8 58.3L379.4 58.2L383.7 193L384.5 193\"></path><text x=\"379.1\" y=\"35.5\" fill=\"#5A5\" text-anchor=\"middle\" alignment-baseline=\"middle\">y</text><path fill=\"#88F\" d=\"M383.8 192.7L311.8 255.4L309.4 252.6L303 263.5L314.7 258.7L312.3 256L384.3 193.3L383.8 192.7\"></path><text x=\"295.5\" y=\"270\" fill=\"#88F\" text-anchor=\"middle\" alignment-baseline=\"middle\">z</text><path stroke=\"#00F\" stroke-width=\"1.5\" d=\"M449.5 141.7L448 138.2L445.8 135.2L443 132.6L439.7 130.8L436.2 129.8L432.6 129.6L429.2 130.3L426.1 131.7L423.5 134L421.6 136.8L420.4 140L420.1 143.5L420.5 147.1L421.7 150.5L423.7 153.6L426.3 156.3L429.3 158.3L432.7 159.7L436.2 160.2L439.6 159.9L428.6 161.7L439.6 159.9L432.4 158.3L439.6 159.9\"></path><path stroke=\"#00F\" stroke-width=\"1.5\" d=\"M418 159.5L449.4 132.8\"></path><path stroke=\"#000\" fill=\"#aaa\" d=\"M409.7 229.5L386.9 255.8L464.5 269.6L480.4 240.7L409.7 229.5\"></path><line x1=\"407.9\" y1=\"117.7\" x2=\"409.7\" y2=\"229.5\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"383.1\" y1=\"132.8\" x2=\"386.9\" y2=\"255.8\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"466.3\" y1=\"176.6\" x2=\"464.5\" y2=\"269.6\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"482.8\" y1=\"156.2\" x2=\"480.4\" y2=\"240.7\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"429.6\" y1=\"171.9\" x2=\"407.9\" y2=\"117.7\" stroke=\"rgba(0,0,0,0.19)\" stroke-width=\"2\"></line><line x1=\"429.6\" y1=\"171.9\" x2=\"482.8\" y2=\"156.2\" stroke=\"rgba(0,0,0,0.28)\" stroke-width=\"2\"></line><line x1=\"407.9\" y1=\"117.7\" x2=\"461.1\" y2=\"99\" stroke=\"rgba(0,0,0,0.39)\" stroke-width=\"2\"></line><line x1=\"429.6\" y1=\"171.9\" x2=\"407.7\" y2=\"193.1\" stroke=\"rgba(0,0,0,0.46)\" stroke-width=\"2\"></line><line x1=\"482.8\" y1=\"156.2\" x2=\"461.1\" y2=\"99\" stroke=\"rgba(0,0,0,0.47)\" stroke-width=\"2\"></line><line x1=\"407.9\" y1=\"117.7\" x2=\"383.1\" y2=\"132.8\" stroke=\"rgba(0,0,0,0.56)\" stroke-width=\"2\"></line><line x1=\"482.8\" y1=\"156.2\" x2=\"466.3\" y2=\"176.6\" stroke=\"rgba(0,0,0,0.74)\" stroke-width=\"2\"></line><line x1=\"407.7\" y1=\"193.1\" x2=\"383.1\" y2=\"132.8\" stroke=\"rgba(0,0,0,0.83)\" stroke-width=\"2\"></line><line x1=\"461.1\" y1=\"99\" x2=\"441.5\" y2=\"112.7\" stroke=\"rgba(0,0,0,0.84)\" stroke-width=\"2\"></line><line x1=\"407.7\" y1=\"193.1\" x2=\"466.3\" y2=\"176.6\" stroke=\"rgba(0,0,0,0.91)\" stroke-width=\"2\"></line><line x1=\"383.1\" y1=\"132.8\" x2=\"441.5\" y2=\"112.7\" stroke=\"rgba(0,0,0,1.02)\" stroke-width=\"2\"></line><line x1=\"466.3\" y1=\"176.6\" x2=\"441.5\" y2=\"112.7\" stroke=\"rgba(0,0,0,1.11)\" stroke-width=\"2\"></line><ellipse cx=\"476.6\" cy=\"185\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"476.6\" y=\"187\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">V</text><ellipse cx=\"366.6\" cy=\"127\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"366.6\" y=\"129\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">W</text><path fill=\"#F88\" d=\"M674 193.4L807.5 211.6L807.1 215.2L819.5 212.8L808.1 207.2L807.7 210.8L674.1 192.6L674 193.4\"></path><text x=\"830.2\" y=\"214.3\" fill=\"#F88\" text-anchor=\"middle\" alignment-baseline=\"middle\">x</text><path fill=\"#5A5\" d=\"M674.5 193L670.2 58.2L673.8 58.1L669.5 46.2L665.8 58.3L669.4 58.2L673.7 193L674.5 193\"></path><text x=\"669.1\" y=\"35.5\" fill=\"#5A5\" text-anchor=\"middle\" alignment-baseline=\"middle\">y</text><path fill=\"#88F\" d=\"M673.8 192.7L601.8 255.4L599.4 252.6L593 263.5L604.7 258.7L602.3 256L674.3 193.3L673.8 192.7\"></path><text x=\"585.5\" y=\"270\" fill=\"#88F\" text-anchor=\"middle\" alignment-baseline=\"middle\">z</text><path stroke=\"#000\" fill=\"#aaa\" d=\"M696.9 229.1L673.8 255.3L757.9 270.2L773.4 241.2L696.9 229.1\"></path><line x1=\"695.2\" y1=\"132.9\" x2=\"696.9\" y2=\"229.1\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"670.4\" y1=\"149.7\" x2=\"673.8\" y2=\"255.3\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"760.2\" y1=\"159.3\" x2=\"757.9\" y2=\"270.2\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"776.5\" y1=\"140.6\" x2=\"773.4\" y2=\"241.2\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"734.6\" y1=\"176.7\" x2=\"695.2\" y2=\"132.9\" stroke=\"rgba(0,0,0,0.18)\" stroke-width=\"2\"></line><line x1=\"695.2\" y1=\"132.9\" x2=\"735.1\" y2=\"94.6\" stroke=\"rgba(0,0,0,0.33)\" stroke-width=\"2\"></line><line x1=\"734.6\" y1=\"176.7\" x2=\"776.5\" y2=\"140.6\" stroke=\"rgba(0,0,0,0.34)\" stroke-width=\"2\"></line><line x1=\"776.5\" y1=\"140.6\" x2=\"735.1\" y2=\"94.6\" stroke=\"rgba(0,0,0,0.48)\" stroke-width=\"2\"></line><line x1=\"695.2\" y1=\"132.9\" x2=\"670.4\" y2=\"149.7\" stroke=\"rgba(0,0,0,0.5)\" stroke-width=\"2\"></line><line x1=\"734.6\" y1=\"176.7\" x2=\"714.3\" y2=\"198.6\" stroke=\"rgba(0,0,0,0.51)\" stroke-width=\"2\"></line><line x1=\"735.1\" y1=\"94.6\" x2=\"713.7\" y2=\"107.6\" stroke=\"rgba(0,0,0,0.79)\" stroke-width=\"2\"></line><line x1=\"776.5\" y1=\"140.6\" x2=\"760.2\" y2=\"159.3\" stroke=\"rgba(0,0,0,0.8)\" stroke-width=\"2\"></line><line x1=\"714.3\" y1=\"198.6\" x2=\"670.4\" y2=\"149.7\" stroke=\"rgba(0,0,0,0.82)\" stroke-width=\"2\"></line><line x1=\"670.4\" y1=\"149.7\" x2=\"713.7\" y2=\"107.6\" stroke=\"rgba(0,0,0,0.96)\" stroke-width=\"2\"></line><line x1=\"714.3\" y1=\"198.6\" x2=\"760.2\" y2=\"159.3\" stroke=\"rgba(0,0,0,0.97)\" stroke-width=\"2\"></line><line x1=\"760.2\" y1=\"159.3\" x2=\"713.7\" y2=\"107.6\" stroke=\"rgba(0,0,0,1.12)\" stroke-width=\"2\"></line><ellipse cx=\"772.1\" cy=\"162.1\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"772.1\" y=\"164.1\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">V</text><ellipse cx=\"653.3\" cy=\"149.1\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"653.3\" y=\"151.1\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">W</text><path fill=\"#000\" d=\"M261 145.6L301 145.6L301 151L319 145L301 139L301 144.4L261 144.4L261 145.6\"></path><path fill=\"#000\" d=\"M551 145.6L591 145.6L591 151L609 145L591 139L591 144.4L551 144.4L551 145.6\"></path></svg>\n</p>\n<p>Key observations:</p>\n<ul>\n  <li>The shadow is a rectangle aligned to x- and z-axes, starting out as a\n    square for t = 0.</li>\n  <li>For 0 &le; t &le; &pi;/4 (45 degrees): z-length = 1 always, and\n    x-length = V<sub>x</sub> &minus; W<sub>x</sub>, where V<sub>x</sub> and\n    W<sub>x</sub> are x-components of vertices V and W in the figure. Therefore\n    this is really a 2-D problem; we can ignore z!</li>\n  <li>The shadow area is <b>A</b> =\n    1 &times (V<sub>x</sub> &minus; W<sub>x</sub>) = 2 V<sub>x</sub>,\n    since W<sub>x</sub> = &minus;V<sub>x</sub>.</li>\n</ul>\n<p>\n  For this setup, maximal area is attached when t = &pi;/4, which corresponds to\n  V<sub>x</sub> = &radic;(&half;), resulting in <b>A</b> = &radic;2 &approx;\n  1.414214. This exceeds all Test Set 1 inputs, so the setup is sound.\n</p>\n<p>\n  Next, we find the shadow area <b>A</b> as a function of angle t. From basic\n  geometry, V<sub>x</sub> = &radic;(&half;) &times; cos(t &minus; &pi;/4).\n  Therefore\n  <b>A</b> = 2V<sub>x</sub> = &radic;2 &times; cos(t &minus; &pi;/4),\n  for 0 &le; t &le; &pi;/4.\n</p>\n<p>\n  Given <b>A</b>, naively we'd invert the formula and get t as sum of &pi;/4\n  and cos<sup>&minus;1</sup>(<b>A</b> / &radic;2).\n  However, to satisfy 0 &le; t &le; &pi;/4, we need the negative branch of\n  cos<sup>&minus;1</sup>! Therefore the inverse is:\n</p>\n<p>\n  t = &pi;/4 &minus; |cos<sup>&minus;1</sup>(<b>A</b> / &radic;2)|.\n</p>\n<p>Once t is obtained, the final outputs are the centers of three non-parallel\n  faces. One such face (invariant for all t) is (0, 0, &half;). The other\n  two can be obtained from rotating (&half;, 0), and (0, &half;) by angle t,\n  and assigning z to 0. Using the\n  <a href=\"https://en.wikipedia.org/wiki/Rotation_matrix#In_two_dimensions\" target=\"_blank\">rotation formula</a>\n  yields (&half; cos(t), &half; sin(t), 0) and\n  (&minus;&half; sin(t), &half; cos(t), 0).\n</p>\n\n<h3>Test Set 2 (Hidden)</h3>\n\n<p>Our solution hinges on the following two crucial observations:</p>\n<ul>\n  <li>The cube will cast the smallest possible shadow, which has a square\n    shape, when one of its faces is parallel to the xz-plane.</li>\n  <li>The cube will cast the largest possible shadow, which has the shape of a\n    regular hexagon, when one of its vertices is on the y-axis.</li>\n</ul>\n<p>\n  To simplify the computations, let's rotate the cube about the y-axis by 45\n  degrees. (The direction of the rotation does not matter, since the cube would\n  end up in the same orientation either way.) After that, the cube will look\n  like this:\n</p>\n<p>\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 580 290\" preserveAspectRatio=\"xMinYMin meet\" stroke-width=\"1\" stroke=\"transparent\" fill=\"transparent\" data-size=\"580 290\" font-family=\"arial\" font-size=\"14\" style=\"overflow: visible; width: 580px; height: 290px;\"><path fill=\"#F88\" d=\"M94 193.4L227.5 211.6L227.1 215.2L239.5 212.8L228.1 207.2L227.7 210.8L94.1 192.6L94 193.4\"></path><text x=\"250.2\" y=\"214.3\" fill=\"#F88\" text-anchor=\"middle\" alignment-baseline=\"middle\">x</text><path fill=\"#5A5\" d=\"M94.5 193L90.2 58.2L93.8 58.1L89.5 46.2L85.8 58.3L89.4 58.2L93.7 193L94.5 193\"></path><text x=\"89.1\" y=\"35.5\" fill=\"#5A5\" text-anchor=\"middle\" alignment-baseline=\"middle\">y</text><path fill=\"#88F\" d=\"M93.8 192.7L21.8 255.4L19.4 252.6L13 263.5L24.7 258.7L22.3 256L94.3 193.3L93.8 192.7\"></path><text x=\"5.5\" y=\"270\" fill=\"#88F\" text-anchor=\"middle\" alignment-baseline=\"middle\">z</text><path stroke=\"#080\" stroke-width=\"1.5\" d=\"M135.2 148.8L138.5 149.4L142.1 149.7L146 149.8L149.8 149.6L153.3 149.1L156.3 148.4L158.7 147.5L160.2 146.5L160.9 145.4L160.7 144.4L159.7 143.3L157.8 142.4L155.3 141.6L152.3 141L148.9 140.6L145.3 140.5L141.6 140.6L138.2 140.9L135.1 141.5L132.5 142.2L139.7 135.1L132.5 142.2L139.7 145.8L132.5 142.2\"></path><path stroke=\"#080\" stroke-width=\"1.5\" d=\"M145 98L145 189.5\"></path><path stroke=\"#000\" fill=\"#aaa\" d=\"M127.7 230.8L105.6 257.4L165 267.9L181.8 239.3L127.7 230.8\"></path><line x1=\"126.9\" y1=\"162\" x2=\"127.7\" y2=\"230.8\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"103.7\" y1=\"182\" x2=\"105.6\" y2=\"257.4\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"166\" y1=\"190\" x2=\"165\" y2=\"267.9\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"183.4\" y1=\"168.4\" x2=\"181.8\" y2=\"239.3\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"126.9\" y1=\"162\" x2=\"126.3\" y2=\"104.9\" stroke=\"rgba(0,0,0,0.22)\" stroke-width=\"2\"></line><line x1=\"126.9\" y1=\"162\" x2=\"183.4\" y2=\"168.4\" stroke=\"rgba(0,0,0,0.23)\" stroke-width=\"2\"></line><line x1=\"126.3\" y1=\"104.9\" x2=\"184.8\" y2=\"109.4\" stroke=\"rgba(0,0,0,0.44)\" stroke-width=\"2\"></line><line x1=\"126.9\" y1=\"162\" x2=\"103.7\" y2=\"182\" stroke=\"rgba(0,0,0,0.44)\" stroke-width=\"2\"></line><line x1=\"183.4\" y1=\"168.4\" x2=\"184.8\" y2=\"109.4\" stroke=\"rgba(0,0,0,0.44)\" stroke-width=\"2\"></line><line x1=\"126.3\" y1=\"104.9\" x2=\"102.1\" y2=\"118.8\" stroke=\"rgba(0,0,0,0.64)\" stroke-width=\"2\"></line><line x1=\"183.4\" y1=\"168.4\" x2=\"166\" y2=\"190\" stroke=\"rgba(0,0,0,0.66)\" stroke-width=\"2\"></line><line x1=\"103.7\" y1=\"182\" x2=\"102.1\" y2=\"118.8\" stroke=\"rgba(0,0,0,0.86)\" stroke-width=\"2\"></line><line x1=\"184.8\" y1=\"109.4\" x2=\"166.8\" y2=\"124.4\" stroke=\"rgba(0,0,0,0.86)\" stroke-width=\"2\"></line><line x1=\"103.7\" y1=\"182\" x2=\"166\" y2=\"190\" stroke=\"rgba(0,0,0,0.86)\" stroke-width=\"2\"></line><line x1=\"102.1\" y1=\"118.8\" x2=\"166.8\" y2=\"124.4\" stroke=\"rgba(0,0,0,1.07)\" stroke-width=\"2\"></line><line x1=\"166\" y1=\"190\" x2=\"166.8\" y2=\"124.4\" stroke=\"rgba(0,0,0,1.08)\" stroke-width=\"2\"></line><ellipse cx=\"122.1\" cy=\"164.6\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"122.1\" y=\"166.6\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">A</text><ellipse cx=\"194.2\" cy=\"173\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"194.2\" y=\"175\" fill=\"#000\" text-anchor=\"middle\" alignment-baseline=\"middle\">B</text><ellipse cx=\"121.1\" cy=\"91.8\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"121.1\" y=\"93.8\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">E</text><ellipse cx=\"196.5\" cy=\"96.9\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"196.5\" y=\"98.9\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">F</text><ellipse cx=\"91\" cy=\"191.4\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"91\" y=\"193.4\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">D</text><ellipse cx=\"172.8\" cy=\"202.5\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"172.8\" y=\"204.5\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">C</text><ellipse cx=\"88.2\" cy=\"108.4\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"88.2\" y=\"110.4\" fill=\"#000\" text-anchor=\"middle\" alignment-baseline=\"middle\">H</text><ellipse cx=\"174.3\" cy=\"115.4\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"174.3\" y=\"117.4\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">G</text><path fill=\"#F88\" d=\"M384 193.4L517.5 211.6L517.1 215.2L529.5 212.8L518.1 207.2L517.7 210.8L384.1 192.6L384 193.4\"></path><text x=\"540.2\" y=\"214.3\" fill=\"#F88\" text-anchor=\"middle\" alignment-baseline=\"middle\">x</text><path fill=\"#5A5\" d=\"M384.5 193L380.2 58.2L383.8 58.1L379.5 46.2L375.8 58.3L379.4 58.2L383.7 193L384.5 193\"></path><text x=\"379.1\" y=\"35.5\" fill=\"#5A5\" text-anchor=\"middle\" alignment-baseline=\"middle\">y</text><path fill=\"#88F\" d=\"M383.8 192.7L311.8 255.4L309.4 252.6L303 263.5L314.7 258.7L312.3 256L384.3 193.3L383.8 192.7\"></path><text x=\"295.5\" y=\"270\" fill=\"#88F\" text-anchor=\"middle\" alignment-baseline=\"middle\">z</text><path stroke=\"#000\" fill=\"#aaa\" d=\"M396 241.5L420.1 269L476.1 254.9L447.8 230L396 241.5\"></path><line x1=\"394.2\" y1=\"170.1\" x2=\"396\" y2=\"241.5\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"419.3\" y1=\"190.8\" x2=\"420.1\" y2=\"269\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"478.1\" y1=\"180.1\" x2=\"476.1\" y2=\"254.9\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"448.4\" y1=\"161.4\" x2=\"447.8\" y2=\"230\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"448.4\" y1=\"161.4\" x2=\"448.8\" y2=\"104.5\" stroke=\"rgba(0,0,0,0.2)\" stroke-width=\"2\"></line><line x1=\"394.2\" y1=\"170.1\" x2=\"448.4\" y2=\"161.4\" stroke=\"rgba(0,0,0,0.25)\" stroke-width=\"2\"></line><line x1=\"448.4\" y1=\"161.4\" x2=\"478.1\" y2=\"180.1\" stroke=\"rgba(0,0,0,0.4)\" stroke-width=\"2\"></line><line x1=\"392.7\" y1=\"110.5\" x2=\"448.8\" y2=\"104.5\" stroke=\"rgba(0,0,0,0.45)\" stroke-width=\"2\"></line><line x1=\"394.2\" y1=\"170.1\" x2=\"392.7\" y2=\"110.5\" stroke=\"rgba(0,0,0,0.5)\" stroke-width=\"2\"></line><line x1=\"448.8\" y1=\"104.5\" x2=\"479.7\" y2=\"117.5\" stroke=\"rgba(0,0,0,0.61)\" stroke-width=\"2\"></line><line x1=\"394.2\" y1=\"170.1\" x2=\"419.3\" y2=\"190.8\" stroke=\"rgba(0,0,0,0.69)\" stroke-width=\"2\"></line><line x1=\"478.1\" y1=\"180.1\" x2=\"479.7\" y2=\"117.5\" stroke=\"rgba(0,0,0,0.8)\" stroke-width=\"2\"></line><line x1=\"419.3\" y1=\"190.8\" x2=\"478.1\" y2=\"180.1\" stroke=\"rgba(0,0,0,0.85)\" stroke-width=\"2\"></line><line x1=\"392.7\" y1=\"110.5\" x2=\"418.7\" y2=\"125\" stroke=\"rgba(0,0,0,0.9)\" stroke-width=\"2\"></line><line x1=\"418.7\" y1=\"125\" x2=\"479.7\" y2=\"117.5\" stroke=\"rgba(0,0,0,1.05)\" stroke-width=\"2\"></line><line x1=\"419.3\" y1=\"190.8\" x2=\"418.7\" y2=\"125\" stroke=\"rgba(0,0,0,1.1)\" stroke-width=\"2\"></line><ellipse cx=\"382.7\" cy=\"175.2\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"382.7\" y=\"177.2\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">A</text><ellipse cx=\"451.9\" cy=\"163.8\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"451.9\" y=\"165.8\" fill=\"#000\" text-anchor=\"middle\" alignment-baseline=\"middle\">B</text><ellipse cx=\"380.2\" cy=\"98.3\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"380.2\" y=\"100.3\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">E</text><ellipse cx=\"452.7\" cy=\"91.3\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"452.7\" y=\"93.3\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">F</text><ellipse cx=\"414.2\" cy=\"203.7\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"414.2\" y=\"205.7\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">D</text><ellipse cx=\"491.1\" cy=\"188.8\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"491.1\" y=\"190.8\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">C</text><ellipse cx=\"413.1\" cy=\"116.1\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"413.1\" y=\"118.1\" fill=\"#000\" text-anchor=\"middle\" alignment-baseline=\"middle\">H</text><ellipse cx=\"494\" cy=\"106.8\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"494\" y=\"108.8\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">G</text><path fill=\"#000\" d=\"M261 145.6L301 145.6L301 151L319 145L301 139L301 144.4L261 144.4L261 145.6\"></path></svg>\n</p>\n<p>\n  It might not be immediately clear why this simplifies our life, but it will\n  make sense soon!\n</p>\n<p>\n  According to the above observations, the cube currently has the smallest\n  possible shadow. To maximize that shadow, we can rotate the cube about the\n  x-axis from +z towards +y, and bring the vertex H (from our diagram\n  above) onto the y-axis. A useful property of this rotation is that the area\n  of the shadow consistently increases throughout this rotation. Since we start\n  with the smallest possible shadow and continuously rotate until we get the\n  largest possible shadow, we achieve every possible shadow area at some point\n  during this rotation. So, we can use\n  <a href=\"https://en.wikipedia.org/wiki/Binary_search_algorithm\" target=\"_blank\">binary search</a>\n  to figure out the exact angle by which we need to rotate the cube about the\n  x-axis to achieve the desired area.\n</p>\n<p>\n<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 870 290\" preserveAspectRatio=\"xMinYMin meet\" stroke-width=\"1\" stroke=\"transparent\" fill=\"transparent\" data-size=\"870 290\" font-family=\"arial\" font-size=\"14\" style=\"overflow: visible; width: 870px; height: 290px;\"><path fill=\"#F88\" d=\"M94 193.4L227.5 211.6L227.1 215.2L239.5 212.8L228.1 207.2L227.7 210.8L94.1 192.6L94 193.4\"></path><text x=\"250.2\" y=\"214.3\" fill=\"#F88\" text-anchor=\"middle\" alignment-baseline=\"middle\">x</text><path fill=\"#5A5\" d=\"M94.5 193L90.2 58.2L93.8 58.1L89.5 46.2L85.8 58.3L89.4 58.2L93.7 193L94.5 193\"></path><text x=\"89.1\" y=\"35.5\" fill=\"#5A5\" text-anchor=\"middle\" alignment-baseline=\"middle\">y</text><path fill=\"#88F\" d=\"M93.8 192.7L21.8 255.4L19.4 252.6L13 263.5L24.7 258.7L22.3 256L94.3 193.3L93.8 192.7\"></path><text x=\"5.5\" y=\"270\" fill=\"#88F\" text-anchor=\"middle\" alignment-baseline=\"middle\">z</text><path stroke=\"#F00\" stroke-width=\"1.5\" d=\"M146.6 129.1L147.7 129.8L148.6 131.3L149.3 133.5L149.8 136.3L150 139.6L150 143.1L149.7 146.7L149.1 150.3L148.3 153.5L147.3 156.4L146.2 158.6L145 160.1L143.8 160.8L142.6 160.7L141.6 159.6L140.7 157.8L140.1 155.1L139.7 151.9L139.7 148.3L139.9 144.5L134 153.7L139.9 144.5L145.1 154.9L139.9 144.5\"></path><path stroke=\"#F00\" stroke-width=\"1.5\" d=\"M101 140.6L191.6 149.7\"></path><path stroke=\"#000\" fill=\"#aaa\" d=\"M106 241.5L130.1 269L186.1 254.9L157.8 230L106 241.5\"></path><line x1=\"104.2\" y1=\"170.1\" x2=\"106\" y2=\"241.5\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"129.3\" y1=\"190.8\" x2=\"130.1\" y2=\"269\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"188.1\" y1=\"180.1\" x2=\"186.1\" y2=\"254.9\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"158.4\" y1=\"161.4\" x2=\"157.8\" y2=\"230\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"158.4\" y1=\"161.4\" x2=\"158.8\" y2=\"104.5\" stroke=\"rgba(0,0,0,0.2)\" stroke-width=\"2\"></line><line x1=\"104.2\" y1=\"170.1\" x2=\"158.4\" y2=\"161.4\" stroke=\"rgba(0,0,0,0.25)\" stroke-width=\"2\"></line><line x1=\"158.4\" y1=\"161.4\" x2=\"188.1\" y2=\"180.1\" stroke=\"rgba(0,0,0,0.4)\" stroke-width=\"2\"></line><line x1=\"102.7\" y1=\"110.5\" x2=\"158.8\" y2=\"104.5\" stroke=\"rgba(0,0,0,0.45)\" stroke-width=\"2\"></line><line x1=\"104.2\" y1=\"170.1\" x2=\"102.7\" y2=\"110.5\" stroke=\"rgba(0,0,0,0.5)\" stroke-width=\"2\"></line><line x1=\"158.8\" y1=\"104.5\" x2=\"189.7\" y2=\"117.5\" stroke=\"rgba(0,0,0,0.61)\" stroke-width=\"2\"></line><line x1=\"104.2\" y1=\"170.1\" x2=\"129.3\" y2=\"190.8\" stroke=\"rgba(0,0,0,0.69)\" stroke-width=\"2\"></line><line x1=\"188.1\" y1=\"180.1\" x2=\"189.7\" y2=\"117.5\" stroke=\"rgba(0,0,0,0.8)\" stroke-width=\"2\"></line><line x1=\"129.3\" y1=\"190.8\" x2=\"188.1\" y2=\"180.1\" stroke=\"rgba(0,0,0,0.85)\" stroke-width=\"2\"></line><line x1=\"102.7\" y1=\"110.5\" x2=\"128.7\" y2=\"125\" stroke=\"rgba(0,0,0,0.9)\" stroke-width=\"2\"></line><line x1=\"128.7\" y1=\"125\" x2=\"189.7\" y2=\"117.5\" stroke=\"rgba(0,0,0,1.05)\" stroke-width=\"2\"></line><line x1=\"129.3\" y1=\"190.8\" x2=\"128.7\" y2=\"125\" stroke=\"rgba(0,0,0,1.1)\" stroke-width=\"2\"></line><ellipse cx=\"92.7\" cy=\"175.2\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"92.7\" y=\"177.2\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">A</text><ellipse cx=\"161.9\" cy=\"163.8\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"161.9\" y=\"165.8\" fill=\"#000\" text-anchor=\"middle\" alignment-baseline=\"middle\">B</text><ellipse cx=\"90.2\" cy=\"98.3\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"90.2\" y=\"100.3\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">E</text><ellipse cx=\"162.7\" cy=\"91.3\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"162.7\" y=\"93.3\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">F</text><ellipse cx=\"124.2\" cy=\"203.7\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"124.2\" y=\"205.7\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">D</text><ellipse cx=\"201.1\" cy=\"188.8\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"201.1\" y=\"190.8\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">C</text><ellipse cx=\"123.1\" cy=\"116.1\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"123.1\" y=\"118.1\" fill=\"#000\" text-anchor=\"middle\" alignment-baseline=\"middle\">H</text><ellipse cx=\"204\" cy=\"106.8\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"204\" y=\"108.8\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">G</text><path fill=\"#F88\" d=\"M384 193.4L517.5 211.6L517.1 215.2L529.5 212.8L518.1 207.2L517.7 210.8L384.1 192.6L384 193.4\"></path><text x=\"540.2\" y=\"214.3\" fill=\"#F88\" text-anchor=\"middle\" alignment-baseline=\"middle\">x</text><path fill=\"#5A5\" d=\"M384.5 193L380.2 58.2L383.8 58.1L379.5 46.2L375.8 58.3L379.4 58.2L383.7 193L384.5 193\"></path><text x=\"379.1\" y=\"35.5\" fill=\"#5A5\" text-anchor=\"middle\" alignment-baseline=\"middle\">y</text><path fill=\"#88F\" d=\"M383.8 192.7L311.8 255.4L309.4 252.6L303 263.5L314.7 258.7L312.3 256L384.3 193.3L383.8 192.7\"></path><text x=\"295.5\" y=\"270\" fill=\"#88F\" text-anchor=\"middle\" alignment-baseline=\"middle\">z</text><path stroke=\"#F00\" stroke-width=\"1.5\" d=\"M436.6 129.1L437.7 129.8L438.6 131.3L439.3 133.5L439.8 136.3L440 139.6L440 143.1L439.7 146.7L439.1 150.3L438.3 153.5L437.3 156.4L436.2 158.6L435 160.1L433.8 160.8L432.6 160.7L431.6 159.6L430.7 157.8L430.1 155.1L429.7 151.9L429.7 148.3L429.9 144.5L424 153.7L429.9 144.5L435.1 154.9L429.9 144.5\"></path><path stroke=\"#F00\" stroke-width=\"1.5\" d=\"M391 140.6L481.6 149.7\"></path><path stroke=\"#000\" fill=\"#aaa\" d=\"M401.2 235.7L390.6 247.7L416.6 274L472.4 261.7L479.6 248.4L450.3 226.4L401.2 235.7\"></path><line x1=\"398.5\" y1=\"110.8\" x2=\"401.2\" y2=\"235.7\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"388.4\" y1=\"171.4\" x2=\"390.6\" y2=\"247.7\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"415.4\" y1=\"169.7\" x2=\"416.6\" y2=\"274\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"474.3\" y1=\"181.8\" x2=\"472.4\" y2=\"261.7\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"483.3\" y1=\"117.7\" x2=\"479.6\" y2=\"248.4\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"451.3\" y1=\"124.5\" x2=\"450.3\" y2=\"226.4\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"442.7\" y1=\"182.2\" x2=\"451.3\" y2=\"124.5\" stroke=\"rgba(0,0,0,0.19)\" stroke-width=\"2\"></line><line x1=\"398.5\" y1=\"110.8\" x2=\"451.3\" y2=\"124.5\" stroke=\"rgba(0,0,0,0.29)\" stroke-width=\"2\"></line><line x1=\"388.4\" y1=\"171.4\" x2=\"442.7\" y2=\"182.2\" stroke=\"rgba(0,0,0,0.4)\" stroke-width=\"2\"></line><line x1=\"451.3\" y1=\"124.5\" x2=\"483.3\" y2=\"117.7\" stroke=\"rgba(0,0,0,0.44)\" stroke-width=\"2\"></line><line x1=\"388.4\" y1=\"171.4\" x2=\"398.5\" y2=\"110.8\" stroke=\"rgba(0,0,0,0.5)\" stroke-width=\"2\"></line><line x1=\"442.7\" y1=\"182.2\" x2=\"474.3\" y2=\"181.8\" stroke=\"rgba(0,0,0,0.55)\" stroke-width=\"2\"></line><line x1=\"398.5\" y1=\"110.8\" x2=\"426.1\" y2=\"102\" stroke=\"rgba(0,0,0,0.75)\" stroke-width=\"2\"></line><line x1=\"474.3\" y1=\"181.8\" x2=\"483.3\" y2=\"117.7\" stroke=\"rgba(0,0,0,0.8)\" stroke-width=\"2\"></line><line x1=\"388.4\" y1=\"171.4\" x2=\"415.4\" y2=\"169.7\" stroke=\"rgba(0,0,0,0.86)\" stroke-width=\"2\"></line><line x1=\"426.1\" y1=\"102\" x2=\"483.3\" y2=\"117.7\" stroke=\"rgba(0,0,0,0.9)\" stroke-width=\"2\"></line><line x1=\"415.4\" y1=\"169.7\" x2=\"474.3\" y2=\"181.8\" stroke=\"rgba(0,0,0,1.01)\" stroke-width=\"2\"></line><line x1=\"415.4\" y1=\"169.7\" x2=\"426.1\" y2=\"102\" stroke=\"rgba(0,0,0,1.11)\" stroke-width=\"2\"></line><ellipse cx=\"374.7\" cy=\"177.1\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"374.7\" y=\"179.1\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">A</text><ellipse cx=\"444.8\" cy=\"190.4\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"444.8\" y=\"192.4\" fill=\"#000\" text-anchor=\"middle\" alignment-baseline=\"middle\">B</text><ellipse cx=\"388\" cy=\"99.1\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"388\" y=\"101.1\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">E</text><ellipse cx=\"455.7\" cy=\"117\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"455.7\" y=\"119\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">F</text><ellipse cx=\"408.7\" cy=\"176.1\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"408.7\" y=\"178.1\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">D</text><ellipse cx=\"486.8\" cy=\"191.4\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"486.8\" y=\"193.4\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">C</text><ellipse cx=\"423.1\" cy=\"85.7\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"423.1\" y=\"87.7\" fill=\"#000\" text-anchor=\"middle\" alignment-baseline=\"middle\">H</text><ellipse cx=\"498.1\" cy=\"107.3\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"498.1\" y=\"109.3\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">G</text><path fill=\"#F88\" d=\"M674 193.4L807.5 211.6L807.1 215.2L819.5 212.8L808.1 207.2L807.7 210.8L674.1 192.6L674 193.4\"></path><text x=\"830.2\" y=\"214.3\" fill=\"#F88\" text-anchor=\"middle\" alignment-baseline=\"middle\">x</text><path fill=\"#5A5\" d=\"M674.5 193L670.2 58.2L673.8 58.1L669.5 46.2L665.8 58.3L669.4 58.2L673.7 193L674.5 193\"></path><text x=\"669.1\" y=\"35.5\" fill=\"#5A5\" text-anchor=\"middle\" alignment-baseline=\"middle\">y</text><path fill=\"#88F\" d=\"M673.8 192.7L601.8 255.4L599.4 252.6L593 263.5L604.7 258.7L602.3 256L674.3 193.3L673.8 192.7\"></path><text x=\"585.5\" y=\"270\" fill=\"#88F\" text-anchor=\"middle\" alignment-baseline=\"middle\">z</text><path stroke=\"#000\" fill=\"#aaa\" d=\"M695 231.3L676.2 252.7L707.6 272.6L759.4 267.3L772.2 243.6L739.6 227.4L695 231.3\"></path><line x1=\"692.9\" y1=\"117.6\" x2=\"695\" y2=\"231.3\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"673.4\" y1=\"165.7\" x2=\"676.2\" y2=\"252.7\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"706.1\" y1=\"141.4\" x2=\"707.6\" y2=\"272.6\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"761.5\" y1=\"176.1\" x2=\"759.4\" y2=\"267.3\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"775.7\" y1=\"124.6\" x2=\"772.2\" y2=\"243.6\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"740.4\" y1=\"147.9\" x2=\"739.6\" y2=\"227.4\" stroke=\"rgba(0,0,0,0.4)\" stroke-dasharray=\"5,5\"></line><line x1=\"692.9\" y1=\"117.6\" x2=\"740.4\" y2=\"147.9\" stroke=\"rgba(0,0,0,0.19)\" stroke-width=\"2\"></line><line x1=\"725\" y1=\"196.2\" x2=\"740.4\" y2=\"147.9\" stroke=\"rgba(0,0,0,0.27)\" stroke-width=\"2\"></line><line x1=\"740.4\" y1=\"147.9\" x2=\"775.7\" y2=\"124.6\" stroke=\"rgba(0,0,0,0.34)\" stroke-width=\"2\"></line><line x1=\"673.4\" y1=\"165.7\" x2=\"692.9\" y2=\"117.6\" stroke=\"rgba(0,0,0,0.5)\" stroke-width=\"2\"></line><line x1=\"692.9\" y1=\"117.6\" x2=\"725\" y2=\"90.4\" stroke=\"rgba(0,0,0,0.56)\" stroke-width=\"2\"></line><line x1=\"673.4\" y1=\"165.7\" x2=\"725\" y2=\"196.2\" stroke=\"rgba(0,0,0,0.58)\" stroke-width=\"2\"></line><line x1=\"725\" y1=\"90.4\" x2=\"775.7\" y2=\"124.6\" stroke=\"rgba(0,0,0,0.72)\" stroke-width=\"2\"></line><line x1=\"725\" y1=\"196.2\" x2=\"761.5\" y2=\"176.1\" stroke=\"rgba(0,0,0,0.74)\" stroke-width=\"2\"></line><line x1=\"761.5\" y1=\"176.1\" x2=\"775.7\" y2=\"124.6\" stroke=\"rgba(0,0,0,0.8)\" stroke-width=\"2\"></line><line x1=\"673.4\" y1=\"165.7\" x2=\"706.1\" y2=\"141.4\" stroke=\"rgba(0,0,0,0.96)\" stroke-width=\"2\"></line><line x1=\"706.1\" y1=\"141.4\" x2=\"725\" y2=\"90.4\" stroke=\"rgba(0,0,0,1.03)\" stroke-width=\"2\"></line><line x1=\"706.1\" y1=\"141.4\" x2=\"761.5\" y2=\"176.1\" stroke=\"rgba(0,0,0,1.11)\" stroke-width=\"2\"></line><ellipse cx=\"657.8\" cy=\"170\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"657.8\" y=\"172\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">A</text><ellipse cx=\"725\" cy=\"209\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"725\" y=\"211\" fill=\"#000\" text-anchor=\"middle\" alignment-baseline=\"middle\">B</text><ellipse cx=\"683.9\" cy=\"108\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"683.9\" y=\"110\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">E</text><ellipse cx=\"744.4\" cy=\"146.7\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"744.4\" y=\"148.7\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">F</text><ellipse cx=\"699.6\" cy=\"138.2\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"699.6\" y=\"140.2\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">D</text><ellipse cx=\"773.4\" cy=\"184.2\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"773.4\" y=\"186.2\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">C</text><ellipse cx=\"725\" cy=\"71.4\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"725\" y=\"73.4\" fill=\"#000\" text-anchor=\"middle\" alignment-baseline=\"middle\">H</text><ellipse cx=\"790.8\" cy=\"116.6\" rx=\"9\" ry=\"9\" fill=\"rgba(255,255,255,0.5)\"></ellipse><text x=\"790.8\" y=\"118.6\" fill=\"#F0F\" text-anchor=\"middle\" alignment-baseline=\"middle\">G</text><path fill=\"#000\" d=\"M261 145.6L301 145.6L301 151L319 145L301 139L301 144.4L261 144.4L261 145.6\"></path><path fill=\"#000\" d=\"M551 145.6L591 145.6L591 151L609 145L591 139L591 144.4L551 144.4L551 145.6\"></path></svg>\n</p>\n<p>\n  However, two questions remain:\n</p>\n<ul>\n  <li>If we rotate the cube about the x-axis by a certain angle, what will be\n    the coordinates of the vertices of the cube?</li>\n  <li>Given the coordinates of the vertices, how can we calculate the area of\n    the shadow?</li>\n</ul>\n<h4>Rotating a cube about the x-axis</h4>\n<p>\n  Notice that, since we are rotating the cube about the x-axis, the\n  x-coordinates of the points will remain the same; only the y- and z-\n  coordinates will change. So, instead of performing rotations in 3-D, we will\n  project the point onto the yz-plane (the x = 0 plane) and perform the\n  rotations in 2-D.\n</p>\n<p>\n  For example, suppose that we want to rotate point P = (P<sub>x</sub>,\n  P<sub>y</sub>, P<sub>z</sub>) about the x-axis from +z towards +x by\n  angle t. First, we project the point onto the yz-plane, where it will have\n  coordinates (0, P<sub>y</sub>, P<sub>z</sub>). We will ignore the x component\n  and treat the point as (P<sub>y</sub>, P<sub>z</sub>) on a 2-D plane.\n</p>\n<p>\n  Now, rotation about the x-axis by angle t in the indicated direction is\n  equivalent to rotating (P<sub>y</sub>, P<sub>z</sub>) about (0, 0) by angle\n  t in a clockwise direction. The resulting 2-D point will be\n</p>\n<p>\n  (P<sub>y</sub>', P<sub>z</sub>') =\n  (P<sub>y</sub> &times; cos(t) + P<sub>z</sub> &times; sin(t),\n  &minus;P<sub>y</sub> &times; sin(t) + P<sub>z</sub> &times; cos(t)),\n</p>\n<p>\n  which in 3-D becomes (P<sub>x</sub>, P<sub>y</sub>', P<sub>z</sub>'). We can\n  get this from the rotation formula, or the complex expression\n  (P<sub>y</sub> + <i>i</i>P<sub>z</sub>) &times; e<sup>&minus;<i>i</i>t</sup>.\n</p>\n<h4>Shadow area</h4>\n<p>\n  As H approaches the y-axis, the shadow on the y = &minus;3 plane takes the\n  shape of a convex hexagon. More specifically, the vertices of the hexagon are\n  the projection of points D, C, G, F, E, and A onto the y = &minus;3 plane.\n  For a point P with coordinates (P<sub>x</sub>, P<sub>y</sub>, P<sub>z</sub>),\n  the coordinates of its projection onto the y = &minus;3 plane are\n  (P<sub>x</sub>, &minus;3, P<sub>z</sub>).\n</p>\n<p>\n  Now, to find the area of the shadow, we can treat the six projected vertices\n  as if they were on a 2-D plane, with only their x- and z-coordinates. By\n  construction, these already form a\n  <a href=\"https://en.wikipedia.org/wiki/Convex_hull\">convex hull</a> with\n  vertices properly oriented (otherwise one would need to explicitly compute\n  the convex hull, although shortcuts exist for the special case). This enables\n  us to apply the\n  <a href=\"https://en.wikipedia.org/wiki/Shoelace_formula\" target=\"_blank\">standard formula</a>\n  to compute area of a convex polygon. Note that area computation can also be\n  simplified by using symmetry with respect to the z-axis, and apply the\n  trapezoid area formula instead of the general convex polygon.\n</p>\n<p>\n  Once we have a set of coordinates that produces the desired area, we can\n  compute the coordinates of the face-centers of any three\n  non-pairwise-parallel faces, and we have solved the problem. With the setup\n  above, these are simply &half;(A + C), &half;(C + F), and\n  &half;(F + A).\n</p>\n<h4>Other approaches</h4>\n<p>\n  There are many other ways to solve this problem:\n</p>\n<ul>\n  <li>Instead of binary searching, the angle of rotation can be solved directly.\n    In fact, final coordinates can be computed using a closed form without\n    using trig functions!</li>\n  <li>We could avoid computing the area of the shadow by using\n    <a href=\"https://www.youtube.com/watch?v=rAHcZGjKVvg\" target=\"_blank\">this amazing cube shadow theorem.</a></li>\n  <li>Instead of doing two rotations (one about the y-axis and another about\n    the x-axis), we could rotate the cube about line connecting points\n    (0, 0, 0) and (1, 0, 1), or some other similar axis, to bring a vertex onto\n    the y-axis. The general rotation formula can be found\n    <a href=\"https://en.wikipedia.org/wiki/Rotation_matrix#Rotation_matrix_from_axis_and_angle\" target=\"_blank\">here</a>.</li>\n</ul>\n","id":"00000000000079cc","statement":"<h3>Problem</h3>\n<p>\n  A mysterious cubic alien ship has appeared in the sky over Toronto! In this\n  problem, Toronto is a plane in three-dimensional space that is parallel to\n  the xz plane at y = -3 km. The alien ship is a solid cube with side length\n  1 km, centered at (0 km, 0 km, 0 km), with its eight corners at (+/- 0.5 km,\n  +/- 0.5 km, +/- 0.5 km). The ship is casting an ominous shadow onto the\n  plane; formally, the shadow is the orthogonal projection of the cube onto the\n  plane. (We consider the sun to be a point infinitely far above the Toronto\n  plane along the y-axis.)\n</p><p>\n  The military is willing to tolerate the ship as long as the aliens meet their\n  bureaucratic demand: the shadow must cover an area of the plane that is\n  acceptably close to <b>A</b> km<sup>2</sup> (see the Output section for a\n  precise definition). They have hired you, a geometric linguistics expert, to\n  convey this demand to the aliens. In your communications so far, you have\n  learned that the ship cannot change size, and the center of the ship cannot\n  move, but the ship is able to rotate arbitrarily in place.\n</p><p>\n  Please find a way that the aliens can rotate the ship so that the shadow's\n  area is close to <b>A</b>. Express your rotation using three points: the\n  centers of any three non-pairwise-opposing faces.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow; each consists of one line with a rational\n  <b>A</b>, the desired area of the shadow, in km<sup>2</sup>,\n  with exactly six digits after the decimal point.\n</p>\n<p>\n  It is guaranteed that there is always a way to rotate the ship in the desired\n  manner for the values of <b>A</b> allowed in this problem.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, first output one line containing <code>Case #x:</code>,\n  where <code>x</code> is the test case number (starting from 1). Then, output\n  three more lines with three rational values each: the x, y, and z coordinates\n  of one of your three provided face-centers, as described above. You are\n  welcome to use decimal (e.g., 0.000123456) or scientific notation (e.g.,\n  1.23456e-4).\n</p><p>\n  Your answer will be considered correct if and only if all of the following\n  are true:\n</p>\n<ol>\n  <li>The distance (in km) from each point to the origin must be between\n    0.5 - 10<sup>-6</sup> and 0.5 + 10<sup>-6</sup>, inclusive.</li>\n  <li>The angles (in radians) between segments connecting the origin to each\n    point must be between &pi;/2 - 10<sup>-6</sup> and\n    &pi;/2 + 10<sup>-6</sup>, inclusive.\n  </li>\n  <li>The area of the shadow (in km<sup>2</sup>), computed by projecting all 8\n    vertices onto the y = -3 plane and finding the area of the convex hull of\n    those projected points, must be between <b>A</b> - 10<sup>-6</sup> and\n    <b>A</b> + 10<sup>-6</sup>, inclusive. We will compute the vertices as\n    +/- p<sub>1</sub> +/- p<sub>2</sub> +/- p<sub>3</sub> (that is,\n    for each p<sub>i</sub> we add either p<sub>i</sub> or -p<sub>i</sub> to the\n    total using vector addition), where p<sub>1</sub>,  p<sub>2</sub>, and\n    p<sub>3</sub> are the face-centers that you provide.\n  </li>\n</ol>\n<p>\n  Please note that you might need to output more than 6 digits after the\n  decimal point to safely pass the checks mentioned above. If there are\n  multiple acceptable answers, you may output any one of them.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 30 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  1.000000 &le; <b>A</b> &le; 1.414213<br/>\n</p>\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  1.000000 &le; <b>A</b> &le; 1.732050<br/>\n</p>\n\n\n<h3>Sample</h3>\n<div class=\"problem-io-wrapper\">\n<table>\n<tr>\n<td>\n<br/>\n<span class=\"io-table-header\">Input</span>\n<br/>&nbsp;\n</td>\n<td>\n<br/>\n<span class=\"io-table-header\">Output</span>\n<br/>&nbsp;\n</td>\n</tr>\n<tr>\n<td>\n<pre class=\"io-content\">2\n1.000000\n1.414213\n\n</pre>\n</td>\n<td>\n<pre class=\"io-content\">Case #1:\n0.5 0 0\n0 0.5 0\n0 0 0.5\nCase #2:\n0.3535533905932738 0.3535533905932738 0\n-0.3535533905932738 0.3535533905932738 0\n0 0 0.5\n</pre>\n</td></tr></table>\n</div>\n\n\n<p>\n  In Sample Case #1, there is no need to rotate the cube at all; with two of its\n  faces already parallel to the plane, the cube is already casting a shadow\n  that is a square with side length 1.\n</p><p>\n  In Sample Case #2, one possible solution is to tell the aliens to give the\n  cube a 45 degree turn around the x = y = 0 line, creating a shadow that is a\n  rectangle with dimensions of 1 and sqrt(2).\n</p><p>\n  The following rough image shows the cubes and shadows for Sample Cases #1 and\n  #2. The sun is shown for clarity, but remember that it is actually a point\n  infinitely far away along the y-axis.\n</p>\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" height=\"500px\" width=\"500px\"\n\t viewBox=\"0 0 72 72\" enable-background=\"new 0 0 72 72\" xml:space=\"preserve\">\n<polygon fill=\"#4095D1\" points=\"3.8,31.7 3.8,45.3 14.4,49.1 14.4,35.6 \"/>\n<polygon fill=\"#EF4637\" points=\"13.9,27.6 3.8,31.7 14.3,35.6 24.5,31.5 \"/>\n<polygon fill=\"#30B455\" points=\"24.5,31.5 24.5,45 14.4,49.1 14.3,35.6 \"/>\n<polygon fill=\"#EF4637\" points=\"61.6,26 54.3,28.6 62.9,40.1 70.2,37.5 \"/>\n<polygon fill=\"#4095D1\" points=\"62.9,40.1 53.6,48.8 45,37.3 54.3,28.6 \"/>\n<polygon fill=\"#30B455\" points=\"70.2,37.5 61,46.1 53.6,48.8 62.9,40.1 \"/>\n<circle fill=\"#FEEA39\" cx=\"57.6\" cy=\"10.7\" r=\"3.1\"/>\n<polygon fill=\"#939598\" points=\"14.2,52.1 1.2,57.3 14.2,62.3 27.1,57.2 \"/>\n<polygon fill=\"#939598\" points=\"54,52.1 41,57.3 59.2,64.4 70.8,58.9 \"/>\n<circle fill=\"#FEEA39\" cx=\"14.2\" cy=\"10.7\" r=\"3.1\"/>\n<radialGradient id=\"SVGID_1_\" cx=\"13.9311\" cy=\"61.1319\" r=\"3.4011\" fx=\"16.5038\" fy=\"58.9074\" gradientTransform=\"matrix(1 0 0 -1 0 72)\" gradientUnits=\"userSpaceOnUse\">\n\t<stop  offset=\"0\" style=\"stop-color:#FFFFFF\"/>\n\t<stop  offset=\"0.3652\" style=\"stop-color:#FDFDFD;stop-opacity:0.6348\"/>\n\t<stop  offset=\"0.5102\" style=\"stop-color:#F6F6F6;stop-opacity:0.4898\"/>\n\t<stop  offset=\"0.6161\" style=\"stop-color:#EAEAEA;stop-opacity:0.3839\"/>\n\t<stop  offset=\"0.703\" style=\"stop-color:#D9D8D9;stop-opacity:0.297\"/>\n\t<stop  offset=\"0.7782\" style=\"stop-color:#C2C2C2;stop-opacity:0.2218\"/>\n\t<stop  offset=\"0.8454\" style=\"stop-color:#A6A6A7;stop-opacity:0.1546\"/>\n\t<stop  offset=\"0.9065\" style=\"stop-color:#858586;stop-opacity:9.353757e-02\"/>\n\t<stop  offset=\"0.9612\" style=\"stop-color:#605F61;stop-opacity:3.881031e-02\"/>\n\t<stop  offset=\"1\" style=\"stop-color:#414042;stop-opacity:0\"/>\n</radialGradient>\n<circle opacity=\"0.3\" fill=\"url(#SVGID_1_)\" enable-background=\"new    \" cx=\"14.2\" cy=\"10.7\" r=\"3.1\"/>\n<ellipse transform=\"matrix(0.5772 -0.8166 0.8166 0.5772 -0.6958 16.7075)\" opacity=\"0.35\" fill=\"#FFFFFF\" enable-background=\"new    \" cx=\"15.8\" cy=\"9\" rx=\"0.5\" ry=\"0.7\"/>\n<radialGradient id=\"SVGID_2_\" cx=\"57.3721\" cy=\"61.1319\" r=\"3.4011\" fx=\"59.9448\" fy=\"58.9074\" gradientTransform=\"matrix(1 0 0 -1 0 72)\" gradientUnits=\"userSpaceOnUse\">\n\t<stop  offset=\"0\" style=\"stop-color:#FFFFFF\"/>\n\t<stop  offset=\"0.3652\" style=\"stop-color:#FDFDFD;stop-opacity:0.6348\"/>\n\t<stop  offset=\"0.5102\" style=\"stop-color:#F6F6F6;stop-opacity:0.4898\"/>\n\t<stop  offset=\"0.6161\" style=\"stop-color:#EAEAEA;stop-opacity:0.3839\"/>\n\t<stop  offset=\"0.703\" style=\"stop-color:#D9D8D9;stop-opacity:0.297\"/>\n\t<stop  offset=\"0.7782\" style=\"stop-color:#C2C2C2;stop-opacity:0.2218\"/>\n\t<stop  offset=\"0.8454\" style=\"stop-color:#A6A6A7;stop-opacity:0.1546\"/>\n\t<stop  offset=\"0.9065\" style=\"stop-color:#858586;stop-opacity:9.353757e-02\"/>\n\t<stop  offset=\"0.9612\" style=\"stop-color:#605F61;stop-opacity:3.881031e-02\"/>\n\t<stop  offset=\"1\" style=\"stop-color:#414042;stop-opacity:0\"/>\n</radialGradient>\n<circle opacity=\"0.3\" fill=\"url(#SVGID_2_)\" enable-background=\"new    \" cx=\"57.6\" cy=\"10.7\" r=\"3.1\"/>\n<ellipse transform=\"matrix(0.5772 -0.8166 0.8166 0.5772 17.6741 52.1437)\" opacity=\"0.35\" fill=\"#FFFFFF\" enable-background=\"new    \" cx=\"59.2\" cy=\"9\" rx=\"0.5\" ry=\"0.7\"/>\n</svg>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":11},{"type":2,"type__str":"HIDDEN","value":21}],"title":"Cubic UFO","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test set 1 (Visible)</h3>\n<p>\n  For test set 1, we need to prepare all the cells within a grid-aligned rectangle of size\n  at least 20. Before starting to deploy the gopher, let's choose a rectangular target region of\n  size at least 20. We will try to prepare all the cells within this target region. One option is to\n  choose a 4 x 5 target region. We could have chosen 3 x 7,\n  5 x 5 etc, but it should not be too big. It does not matter where we place this\n  target region in our initial 1000 x 1000 matrix. So let's place it such that one\n  corner of the rectangle is at (1, 1) and the opposite corner is at (4, 5). Here (r, c) refers to\n  the cell in the r-th row and the c-th column of the original matrix. Now the question is: can we\n  come up with a strategy that will prepare all of the cells in this target region, and no other\n  cells?\n</p>\n<p>\n  Let's visualize our 4 x 5 target region as follows (row and column numbers are given\n  for convenience):\n</p>\n<p>\n  <code>\n  &nbsp;&nbsp;12345<br/>\n  1 xxxxx<br/>\n  2 x@@@x<br/>\n  3 x@@@x<br/>\n  4 xxxxx<br/>\n  </code>\n</p>\n<p>\n  We marked the internal cells with <code>@</code> and the border cells with <code>x</code>. The\n  gopher should not be deployed on the border cells, because that might cause it to prepare a cell\n  outside of our target region. We will only deploy on the internal cells (cells marked with\n  <code>@</code> in the above picture). We can deploy the gopher 1000 times in total and we have 6\n  internal cells. Let's deploy the gopher to each of the internal cells\n  <code>floor(1000 / 6) = 166</code> times. Will this be enough to solve test set 1?\n</p>\n<p>\n  To answer this crucial question, let us compute the probability that after deploying the gopher as\n  described above, the (1, 1)\n  cell is still unprepared. Notice that this cell can only be prepared by deploying the gopher at\n  (2, 2). Every time we do this, it has a 1/9 probability of preparing (1, 1). Looking at it from\n  another angle, every time we do this, it has an 8/9 probability of not preparing (1, 1). So the\n  probability that (1, 1) will not be prepared after 166 deployments to (2, 2) is\n  (8/9)<sup>166</sup> = 3.226 x 10<sup>-9</sup>, which is quite small. Realistically, we do not need\n  to worry about this happening to any of the four corners (since the probability of this happening\n  to at least one of\n  the four corners is 1 - (1 - 3.226 x 10<sup>-9</sup>)<sup>4</sup> = 1.29 x 10 <sup>-8</sup>).\n  Other cells are adjacent to more than one internal cell, and thus they are more likely to be\n  prepared than the corners. So this solution is sufficient to pass test set 1.\n</p>\n<p>\n  To convince you further we ran a simulation. We deployed the\n  gopher to the center of a 3 x 3 region until all the nine cells in the region is\n  prepared. We ran this 100000 times and following is the result:\n</p>\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg height=\"345pt\" version=\"1.1\" viewBox=\"0 0 460 345\" width=\"460pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n <defs>\n  <style type=\"text/css\">\n*{stroke-linecap:butt;stroke-linejoin:round;}\n  </style>\n </defs>\n <g id=\"figure_1\">\n  <g id=\"patch_1\">\n   <path d=\"M 0 345.6\nL 460.8 345.6\nL 460.8 0\nL 0 0\nz\n\" style=\"fill:#ffffff;\"/>\n  </g>\n  <g id=\"axes_1\">\n   <g id=\"patch_2\">\n    <path d=\"M 57.6 307.584\nL 414.72 307.584\nL 414.72 41.472\nL 57.6 41.472\nz\n\" style=\"fill:#ffffff;\"/>\n   </g>\n   <g id=\"patch_3\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 73.832727 307.584\nL 81.949091 307.584\nL 81.949091 284.548562\nL 73.832727 284.548562\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_4\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 81.949091 307.584\nL 90.065455 307.584\nL 90.065455 194.464444\nL 81.949091 194.464444\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_5\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 90.065455 307.584\nL 98.181818 307.584\nL 98.181818 97.153521\nL 90.065455 97.153521\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_6\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 98.181818 307.584\nL 106.298182 307.584\nL 106.298182 142.103572\nL 98.181818 142.103572\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_7\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 106.298182 307.584\nL 114.414545 307.584\nL 114.414545 54.144\nL 106.298182 54.144\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_8\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 114.414545 307.584\nL 122.530909 307.584\nL 122.530909 87.28358\nL 114.414545 87.28358\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_9\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 122.530909 307.584\nL 130.647273 307.584\nL 130.647273 182.587057\nL 122.530909 182.587057\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_10\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 130.647273 307.584\nL 138.763636 307.584\nL 138.763636 156.757925\nL 130.647273 156.757925\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_11\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 138.763636 307.584\nL 146.88 307.584\nL 146.88 191.587105\nL 138.763636 191.587105\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_12\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 146.88 307.584\nL 154.996364 307.584\nL 154.996364 247.026059\nL 146.88 247.026059\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_13\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 154.996364 307.584\nL 163.112727 307.584\nL 163.112727 240.51859\nL 154.996364 240.51859\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_14\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 163.112727 307.584\nL 171.229091 307.584\nL 171.229091 257.832808\nL 163.112727 257.832808\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_15\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 171.229091 307.584\nL 179.345455 307.584\nL 179.345455 272.855192\nL 171.229091 272.855192\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_16\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 179.345455 307.584\nL 187.461818 307.584\nL 187.461818 289.567176\nL 179.345455 289.567176\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_17\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 187.461818 307.584\nL 195.578182 307.584\nL 195.578182 288.814384\nL 187.461818 288.814384\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_18\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 195.578182 307.584\nL 203.694545 307.584\nL 203.694545 294.000285\nL 195.578182 294.000285\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_19\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 203.694545 307.584\nL 211.810909 307.584\nL 211.810909 300.675042\nL 203.694545 300.675042\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_20\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 211.810909 307.584\nL 219.927273 307.584\nL 219.927273 299.955707\nL 211.810909 299.955707\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_21\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 219.927273 307.584\nL 228.043636 307.584\nL 228.043636 302.013339\nL 219.927273 302.013339\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_22\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 228.043636 307.584\nL 236.16 307.584\nL 236.16 304.907406\nL 228.043636 304.907406\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_23\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 236.16 307.584\nL 244.276364 307.584\nL 244.276364 304.807034\nL 236.16 304.807034\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_24\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 244.276364 307.584\nL 252.392727 307.584\nL 252.392727 305.392539\nL 244.276364 305.392539\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_25\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 252.392727 307.584\nL 260.509091 307.584\nL 260.509091 306.145331\nL 252.392727 306.145331\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_26\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 260.509091 307.584\nL 268.625455 307.584\nL 268.625455 306.764293\nL 260.509091 306.764293\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_27\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 268.625455 307.584\nL 276.741818 307.584\nL 276.741818 306.781022\nL 268.625455 306.781022\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_28\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 276.741818 307.584\nL 284.858182 307.584\nL 284.858182 307.06541\nL 276.741818 307.06541\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_29\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 284.858182 307.584\nL 292.974545 307.584\nL 292.974545 307.232697\nL 284.858182 307.232697\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_30\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 292.974545 307.584\nL 301.090909 307.584\nL 301.090909 307.316341\nL 292.974545 307.316341\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_31\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 301.090909 307.584\nL 309.207273 307.584\nL 309.207273 307.349798\nL 301.090909 307.349798\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_32\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 309.207273 307.584\nL 317.323636 307.584\nL 317.323636 307.483628\nL 309.207273 307.483628\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_33\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 317.323636 307.584\nL 325.44 307.584\nL 325.44 307.433442\nL 317.323636 307.433442\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_34\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 325.44 307.584\nL 333.556364 307.584\nL 333.556364 307.517085\nL 325.44 307.517085\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_35\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 333.556364 307.584\nL 341.672727 307.584\nL 341.672727 307.500356\nL 333.556364 307.500356\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_36\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 341.672727 307.584\nL 349.789091 307.584\nL 349.789091 307.550543\nL 341.672727 307.550543\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_37\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 349.789091 307.584\nL 357.905455 307.584\nL 357.905455 307.533814\nL 349.789091 307.533814\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_38\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 357.905455 307.584\nL 366.021818 307.584\nL 366.021818 307.567271\nL 357.905455 307.567271\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_39\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 366.021818 307.584\nL 374.138182 307.584\nL 374.138182 307.550543\nL 366.021818 307.550543\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_40\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 374.138182 307.584\nL 382.254545 307.584\nL 382.254545 307.584\nL 374.138182 307.584\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_41\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 382.254545 307.584\nL 390.370909 307.584\nL 390.370909 307.567271\nL 382.254545 307.567271\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_42\">\n    <path clip-path=\"url(#p8a8f22f5f1)\" d=\"M 390.370909 307.584\nL 398.487273 307.584\nL 398.487273 307.550543\nL 390.370909 307.550543\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"matplotlib.axis_1\">\n    <g id=\"xtick_1\">\n     <g id=\"line2d_1\">\n      <defs>\n       <path d=\"M 0 0\nL 0 3.5\n\" id=\"m58e40bf267\" style=\"stroke:#000000;stroke-width:0.8;\"/>\n      </defs>\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"106.899394\" xlink:href=\"#m58e40bf267\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_1\">\n      <!-- 20 -->\n      <defs>\n       <path d=\"M 19.1875 8.296875\nL 53.609375 8.296875\nL 53.609375 0\nL 7.328125 0\nL 7.328125 8.296875\nQ 12.9375 14.109375 22.625 23.890625\nQ 32.328125 33.6875 34.8125 36.53125\nQ 39.546875 41.84375 41.421875 45.53125\nQ 43.3125 49.21875 43.3125 52.78125\nQ 43.3125 58.59375 39.234375 62.25\nQ 35.15625 65.921875 28.609375 65.921875\nQ 23.96875 65.921875 18.8125 64.3125\nQ 13.671875 62.703125 7.8125 59.421875\nL 7.8125 69.390625\nQ 13.765625 71.78125 18.9375 73\nQ 24.125 74.21875 28.421875 74.21875\nQ 39.75 74.21875 46.484375 68.546875\nQ 53.21875 62.890625 53.21875 53.421875\nQ 53.21875 48.921875 51.53125 44.890625\nQ 49.859375 40.875 45.40625 35.40625\nQ 44.1875 33.984375 37.640625 27.21875\nQ 31.109375 20.453125 19.1875 8.296875\n\" id=\"DejaVuSans-32\"/>\n       <path d=\"M 31.78125 66.40625\nQ 24.171875 66.40625 20.328125 58.90625\nQ 16.5 51.421875 16.5 36.375\nQ 16.5 21.390625 20.328125 13.890625\nQ 24.171875 6.390625 31.78125 6.390625\nQ 39.453125 6.390625 43.28125 13.890625\nQ 47.125 21.390625 47.125 36.375\nQ 47.125 51.421875 43.28125 58.90625\nQ 39.453125 66.40625 31.78125 66.40625\nM 31.78125 74.21875\nQ 44.046875 74.21875 50.515625 64.515625\nQ 56.984375 54.828125 56.984375 36.375\nQ 56.984375 17.96875 50.515625 8.265625\nQ 44.046875 -1.421875 31.78125 -1.421875\nQ 19.53125 -1.421875 13.0625 8.265625\nQ 6.59375 17.96875 6.59375 36.375\nQ 6.59375 54.828125 13.0625 64.515625\nQ 19.53125 74.21875 31.78125 74.21875\n\" id=\"DejaVuSans-30\"/>\n      </defs>\n      <g transform=\"translate(100.536894 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-32\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_2\">\n     <g id=\"line2d_2\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"167.020606\" xlink:href=\"#m58e40bf267\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_2\">\n      <!-- 40 -->\n      <defs>\n       <path d=\"M 37.796875 64.3125\nL 12.890625 25.390625\nL 37.796875 25.390625\nz\nM 35.203125 72.90625\nL 47.609375 72.90625\nL 47.609375 25.390625\nL 58.015625 25.390625\nL 58.015625 17.1875\nL 47.609375 17.1875\nL 47.609375 0\nL 37.796875 0\nL 37.796875 17.1875\nL 4.890625 17.1875\nL 4.890625 26.703125\nz\n\" id=\"DejaVuSans-34\"/>\n      </defs>\n      <g transform=\"translate(160.658106 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-34\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_3\">\n     <g id=\"line2d_3\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"227.141818\" xlink:href=\"#m58e40bf267\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_3\">\n      <!-- 60 -->\n      <defs>\n       <path d=\"M 33.015625 40.375\nQ 26.375 40.375 22.484375 35.828125\nQ 18.609375 31.296875 18.609375 23.390625\nQ 18.609375 15.53125 22.484375 10.953125\nQ 26.375 6.390625 33.015625 6.390625\nQ 39.65625 6.390625 43.53125 10.953125\nQ 47.40625 15.53125 47.40625 23.390625\nQ 47.40625 31.296875 43.53125 35.828125\nQ 39.65625 40.375 33.015625 40.375\nM 52.59375 71.296875\nL 52.59375 62.3125\nQ 48.875 64.0625 45.09375 64.984375\nQ 41.3125 65.921875 37.59375 65.921875\nQ 27.828125 65.921875 22.671875 59.328125\nQ 17.53125 52.734375 16.796875 39.40625\nQ 19.671875 43.65625 24.015625 45.921875\nQ 28.375 48.1875 33.59375 48.1875\nQ 44.578125 48.1875 50.953125 41.515625\nQ 57.328125 34.859375 57.328125 23.390625\nQ 57.328125 12.15625 50.6875 5.359375\nQ 44.046875 -1.421875 33.015625 -1.421875\nQ 20.359375 -1.421875 13.671875 8.265625\nQ 6.984375 17.96875 6.984375 36.375\nQ 6.984375 53.65625 15.1875 63.9375\nQ 23.390625 74.21875 37.203125 74.21875\nQ 40.921875 74.21875 44.703125 73.484375\nQ 48.484375 72.75 52.59375 71.296875\n\" id=\"DejaVuSans-36\"/>\n      </defs>\n      <g transform=\"translate(220.779318 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-36\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_4\">\n     <g id=\"line2d_4\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"287.26303\" xlink:href=\"#m58e40bf267\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_4\">\n      <!-- 80 -->\n      <defs>\n       <path d=\"M 31.78125 34.625\nQ 24.75 34.625 20.71875 30.859375\nQ 16.703125 27.09375 16.703125 20.515625\nQ 16.703125 13.921875 20.71875 10.15625\nQ 24.75 6.390625 31.78125 6.390625\nQ 38.8125 6.390625 42.859375 10.171875\nQ 46.921875 13.96875 46.921875 20.515625\nQ 46.921875 27.09375 42.890625 30.859375\nQ 38.875 34.625 31.78125 34.625\nM 21.921875 38.8125\nQ 15.578125 40.375 12.03125 44.71875\nQ 8.5 49.078125 8.5 55.328125\nQ 8.5 64.0625 14.71875 69.140625\nQ 20.953125 74.21875 31.78125 74.21875\nQ 42.671875 74.21875 48.875 69.140625\nQ 55.078125 64.0625 55.078125 55.328125\nQ 55.078125 49.078125 51.53125 44.71875\nQ 48 40.375 41.703125 38.8125\nQ 48.828125 37.15625 52.796875 32.3125\nQ 56.78125 27.484375 56.78125 20.515625\nQ 56.78125 9.90625 50.3125 4.234375\nQ 43.84375 -1.421875 31.78125 -1.421875\nQ 19.734375 -1.421875 13.25 4.234375\nQ 6.78125 9.90625 6.78125 20.515625\nQ 6.78125 27.484375 10.78125 32.3125\nQ 14.796875 37.15625 21.921875 38.8125\nM 18.3125 54.390625\nQ 18.3125 48.734375 21.84375 45.5625\nQ 25.390625 42.390625 31.78125 42.390625\nQ 38.140625 42.390625 41.71875 45.5625\nQ 45.3125 48.734375 45.3125 54.390625\nQ 45.3125 60.0625 41.71875 63.234375\nQ 38.140625 66.40625 31.78125 66.40625\nQ 25.390625 66.40625 21.84375 63.234375\nQ 18.3125 60.0625 18.3125 54.390625\n\" id=\"DejaVuSans-38\"/>\n      </defs>\n      <g transform=\"translate(280.90053 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-38\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_5\">\n     <g id=\"line2d_5\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"347.384242\" xlink:href=\"#m58e40bf267\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_5\">\n      <!-- 100 -->\n      <defs>\n       <path d=\"M 12.40625 8.296875\nL 28.515625 8.296875\nL 28.515625 63.921875\nL 10.984375 60.40625\nL 10.984375 69.390625\nL 28.421875 72.90625\nL 38.28125 72.90625\nL 38.28125 8.296875\nL 54.390625 8.296875\nL 54.390625 0\nL 12.40625 0\nz\n\" id=\"DejaVuSans-31\"/>\n      </defs>\n      <g transform=\"translate(337.840492 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_6\">\n     <g id=\"line2d_6\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"407.505455\" xlink:href=\"#m58e40bf267\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_6\">\n      <!-- 120 -->\n      <g transform=\"translate(397.961705 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-32\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n   </g>\n   <g id=\"matplotlib.axis_2\">\n    <g id=\"ytick_1\">\n     <g id=\"line2d_7\">\n      <defs>\n       <path d=\"M 0 0\nL -3.5 0\n\" id=\"m34d5a0e7c7\" style=\"stroke:#000000;stroke-width:0.8;\"/>\n      </defs>\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m34d5a0e7c7\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_7\">\n      <!-- 0 -->\n      <g transform=\"translate(44.2375 311.383219)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_2\">\n     <g id=\"line2d_8\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m34d5a0e7c7\" y=\"274.126574\"/>\n      </g>\n     </g>\n     <g id=\"text_8\">\n      <!-- 2000 -->\n      <g transform=\"translate(25.15 277.925793)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-32\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_3\">\n     <g id=\"line2d_9\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m34d5a0e7c7\" y=\"240.669149\"/>\n      </g>\n     </g>\n     <g id=\"text_9\">\n      <!-- 4000 -->\n      <g transform=\"translate(25.15 244.468367)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-34\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_4\">\n     <g id=\"line2d_10\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m34d5a0e7c7\" y=\"207.211723\"/>\n      </g>\n     </g>\n     <g id=\"text_10\">\n      <!-- 6000 -->\n      <g transform=\"translate(25.15 211.010942)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-36\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_5\">\n     <g id=\"line2d_11\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m34d5a0e7c7\" y=\"173.754297\"/>\n      </g>\n     </g>\n     <g id=\"text_11\">\n      <!-- 8000 -->\n      <g transform=\"translate(25.15 177.553516)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-38\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_6\">\n     <g id=\"line2d_12\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m34d5a0e7c7\" y=\"140.296871\"/>\n      </g>\n     </g>\n     <g id=\"text_12\">\n      <!-- 10000 -->\n      <g transform=\"translate(18.7875 144.09609)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"254.492188\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_7\">\n     <g id=\"line2d_13\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m34d5a0e7c7\" y=\"106.839446\"/>\n      </g>\n     </g>\n     <g id=\"text_13\">\n      <!-- 12000 -->\n      <g transform=\"translate(18.7875 110.638664)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-32\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"254.492188\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_8\">\n     <g id=\"line2d_14\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m34d5a0e7c7\" y=\"73.38202\"/>\n      </g>\n     </g>\n     <g id=\"text_14\">\n      <!-- 14000 -->\n      <g transform=\"translate(18.7875 77.181239)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-34\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"254.492188\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n   </g>\n   <g id=\"patch_43\">\n    <path d=\"M 57.6 307.584\nL 57.6 41.472\n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_44\">\n    <path d=\"M 414.72 307.584\nL 414.72 41.472\n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_45\">\n    <path d=\"M 57.6 307.584\nL 414.72 307.584\n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_46\">\n    <path d=\"M 57.6 41.472\nL 414.72 41.472\n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n  </g>\n </g>\n <defs>\n  <clipPath id=\"p8a8f22f5f1\">\n   <rect height=\"266.112\" width=\"357.12\" x=\"57.6\" y=\"41.472\"/>\n  </clipPath>\n </defs>\n</svg>\n<p>\n  The above figure shows how many of our 100000 simulations (y axis) required each possible\n  number of deployments (x axis). As we can see, out of 100000 simulations the maximum number of\n  times we needed to\n  deploy the gopher was not more than 120. So 166 deployments would be more than enough to prepare\n  an internal cell and all of its surroundings.\n  Moreover, once we have prepared an internal cell and all eight of its neighbors, there is no\n  reason to deploy the gopher there again, so we will almost certainly have more than 166\n  deployments to use to fill in the last stubborn cell if necessary.\n</p>\n\n<h3>Test set 2 (Hidden)</h3>\n<p>\n  Now we need to create a rectagular region of area at least 200. If we used the same strategy\n  described above, for, say a 10 x 20 size rectangle, we could make\n  <code>floor(1000/(18 * 8)) = 6</code> deployments to each of the internal cells. But then the\n  probability of (1, 1) being not prepared would be: (8/9)<sup>6</sup> = 0.49327, which is way\n  too high!\n</p>\n<p>\n  How can we improve this strategy? We can observe that most of the cells can be prepared\n  from a number of locations. For example, the cell (2, 2) can potentially be prepared on a\n  deployment to any of the internal cells around it, or to the cell itself. What if\n  we divide our rectangular region into disjoint 3 x 3 regions and\n  only deploy the gopher to the center cells of those regions? This way each of the cells can be\n  prepared from only one cell. To sum things up, our plan is:\n</p>\n<ul>\n  <li>Select a large enough rectangle, say 3 x 69.\n  <li>For convenience, we will place the corner of this 3 x 69 rectangle at (1, 1).\n  <li>We will divide our initial 3 x 69 region into 69/3 = 23 disjoint\n    3 x 3 regions. That is, we will deploy the gopher only to (2, 2), (2, 5), (2, 8)\n    ... (2, 68): the center cells of those regions.\n  <li>We will keep deploying the gopher at (2, 2) until all the cells inside the 3 x 3 grid centered\n    on (2, 2) are prepared.\n  <li>Then we will deploy at (2, 5) and so on.\n</ul>\n<p>\n  Is that enough? As the above simulation showed, sometimes it requires 120 deployments to prepare\n  entire 3 x 3. So in the worst case 23 x 120 = 2760 deployments to prepare entire 3 x 69 region\n  which is more than out limit 1000. However, such worst case will not happen always. We ran\n  another simulation to examine our new strategy:\n</p>\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg height=\"345pt\" version=\"1.1\" viewBox=\"0 0 460 345\" width=\"460pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n <defs>\n  <style type=\"text/css\">\n*{stroke-linecap:butt;stroke-linejoin:round;}\n  </style>\n </defs>\n <g id=\"figure_1\">\n  <g id=\"patch_1\">\n   <path d=\"M 0 345.6\nL 460.8 345.6\nL 460.8 0\nL 0 0\nz\n\" style=\"fill:#ffffff;\"/>\n  </g>\n  <g id=\"axes_1\">\n   <g id=\"patch_2\">\n    <path d=\"M 57.6 307.584\nL 414.72 307.584\nL 414.72 41.472\nL 57.6 41.472\nz\n\" style=\"fill:#ffffff;\"/>\n   </g>\n   <g id=\"patch_3\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 139.412945 307.584\nL 145.565149 307.584\nL 145.565149 307.371535\nL 139.412945 307.371535\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_4\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 145.565149 307.584\nL 151.717353 307.584\nL 151.717353 307.068014\nL 145.565149 307.068014\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_5\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 151.717353 307.584\nL 157.869556 307.584\nL 157.869556 306.187804\nL 151.717353 306.187804\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_6\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 157.869556 307.584\nL 164.02176 307.584\nL 164.02176 304.154213\nL 157.869556 304.154213\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_7\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 164.02176 307.584\nL 170.173964 307.584\nL 170.173964 300.026328\nL 164.02176 300.026328\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_8\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 170.173964 307.584\nL 176.326167 307.584\nL 176.326167 294.957528\nL 170.173964 294.957528\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_9\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 176.326167 307.584\nL 182.478371 307.584\nL 182.478371 282.725634\nL 176.326167 282.725634\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_10\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 182.478371 307.584\nL 188.630575 307.584\nL 188.630575 270.94902\nL 182.478371 270.94902\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_11\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 188.630575 307.584\nL 194.782778 307.584\nL 194.782778 244.269528\nL 188.630575 244.269528\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_12\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 194.782778 307.584\nL 200.934982 307.584\nL 200.934982 223.933624\nL 194.782778 223.933624\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_13\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 200.934982 307.584\nL 207.087185 307.584\nL 207.087185 180.894352\nL 200.934982 180.894352\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_14\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 207.087185 307.584\nL 213.239389 307.584\nL 213.239389 163.927531\nL 207.087185 163.927531\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_15\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 213.239389 307.584\nL 219.391593 307.584\nL 219.391593 113.755516\nL 213.239389 113.755516\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_16\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 219.391593 307.584\nL 225.543796 307.584\nL 225.543796 107.229816\nL 219.391593 107.229816\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_17\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 225.543796 307.584\nL 231.696 307.584\nL 231.696 60.457236\nL 225.543796 60.457236\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_18\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 231.696 307.584\nL 237.848204 307.584\nL 237.848204 80.095042\nL 231.696 80.095042\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_19\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 237.848204 307.584\nL 244.000407 307.584\nL 244.000407 54.144\nL 237.848204 54.144\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_20\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 244.000407 307.584\nL 250.152611 307.584\nL 250.152611 89.170319\nL 244.000407 89.170319\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_21\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 250.152611 307.584\nL 256.304815 307.584\nL 256.304815 76.634903\nL 250.152611 76.634903\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_22\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 256.304815 307.584\nL 262.457018 307.584\nL 262.457018 121.040019\nL 256.304815 121.040019\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_23\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 262.457018 307.584\nL 268.609222 307.584\nL 268.609222 144.016556\nL 262.457018 144.016556\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_24\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 268.609222 307.584\nL 274.761425 307.584\nL 274.761425 160.194223\nL 268.609222 160.194223\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_25\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 274.761425 307.584\nL 280.913629 307.584\nL 280.913629 197.314836\nL 274.761425 197.314836\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_26\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 280.913629 307.584\nL 287.065833 307.584\nL 287.065833 211.883842\nL 280.913629 211.883842\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_27\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 287.065833 307.584\nL 293.218036 307.584\nL 293.218036 239.048968\nL 287.065833 239.048968\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_28\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 293.218036 307.584\nL 299.37024 307.584\nL 299.37024 249.672201\nL 293.218036 249.672201\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_29\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 299.37024 307.584\nL 305.522444 307.584\nL 305.522444 269.64388\nL 299.37024 269.64388\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_30\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 305.522444 307.584\nL 311.674647 307.584\nL 311.674647 277.74789\nL 305.522444 277.74789\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_31\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 311.674647 307.584\nL 317.826851 307.584\nL 317.826851 288.917461\nL 311.674647 288.917461\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_32\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 317.826851 307.584\nL 323.979055 307.584\nL 323.979055 291.922319\nL 317.826851 291.922319\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_33\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 323.979055 307.584\nL 330.131258 307.584\nL 330.131258 298.356963\nL 323.979055 298.356963\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_34\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 330.131258 307.584\nL 336.283462 307.584\nL 336.283462 300.603018\nL 330.131258 300.603018\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_35\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 336.283462 307.584\nL 342.435665 307.584\nL 342.435665 303.638228\nL 336.283462 303.638228\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_36\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 342.435665 307.584\nL 348.587869 307.584\nL 348.587869 304.609495\nL 342.435665 304.609495\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_37\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 348.587869 307.584\nL 354.740073 307.584\nL 354.740073 306.096747\nL 348.587869 306.096747\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_38\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 354.740073 307.584\nL 360.892276 307.584\nL 360.892276 306.612733\nL 354.740073 306.612733\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_39\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 360.892276 307.584\nL 367.04448 307.584\nL 367.04448 306.825198\nL 360.892276 306.825198\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_40\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 367.04448 307.584\nL 373.196684 307.584\nL 373.196684 307.250127\nL 367.04448 307.250127\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_41\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 373.196684 307.584\nL 379.348887 307.584\nL 379.348887 307.371535\nL 373.196684 307.371535\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_42\">\n    <path clip-path=\"url(#p4d8facfb81)\" d=\"M 379.348887 307.584\nL 385.501091 307.584\nL 385.501091 307.43224\nL 379.348887 307.43224\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"matplotlib.axis_1\">\n    <g id=\"xtick_1\">\n     <g id=\"line2d_1\">\n      <defs>\n       <path d=\"M 0 0\nL 0 3.5\n\" id=\"m87f62d4df3\" style=\"stroke:#000000;stroke-width:0.8;\"/>\n      </defs>\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m87f62d4df3\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_1\">\n      <!-- 300 -->\n      <defs>\n       <path d=\"M 40.578125 39.3125\nQ 47.65625 37.796875 51.625 33\nQ 55.609375 28.21875 55.609375 21.1875\nQ 55.609375 10.40625 48.1875 4.484375\nQ 40.765625 -1.421875 27.09375 -1.421875\nQ 22.515625 -1.421875 17.65625 -0.515625\nQ 12.796875 0.390625 7.625 2.203125\nL 7.625 11.71875\nQ 11.71875 9.328125 16.59375 8.109375\nQ 21.484375 6.890625 26.8125 6.890625\nQ 36.078125 6.890625 40.9375 10.546875\nQ 45.796875 14.203125 45.796875 21.1875\nQ 45.796875 27.640625 41.28125 31.265625\nQ 36.765625 34.90625 28.71875 34.90625\nL 20.21875 34.90625\nL 20.21875 43.015625\nL 29.109375 43.015625\nQ 36.375 43.015625 40.234375 45.921875\nQ 44.09375 48.828125 44.09375 54.296875\nQ 44.09375 59.90625 40.109375 62.90625\nQ 36.140625 65.921875 28.71875 65.921875\nQ 24.65625 65.921875 20.015625 65.03125\nQ 15.375 64.15625 9.8125 62.3125\nL 9.8125 71.09375\nQ 15.4375 72.65625 20.34375 73.4375\nQ 25.25 74.21875 29.59375 74.21875\nQ 40.828125 74.21875 47.359375 69.109375\nQ 53.90625 64.015625 53.90625 55.328125\nQ 53.90625 49.265625 50.4375 45.09375\nQ 46.96875 40.921875 40.578125 39.3125\n\" id=\"DejaVuSans-33\"/>\n       <path d=\"M 31.78125 66.40625\nQ 24.171875 66.40625 20.328125 58.90625\nQ 16.5 51.421875 16.5 36.375\nQ 16.5 21.390625 20.328125 13.890625\nQ 24.171875 6.390625 31.78125 6.390625\nQ 39.453125 6.390625 43.28125 13.890625\nQ 47.125 21.390625 47.125 36.375\nQ 47.125 51.421875 43.28125 58.90625\nQ 39.453125 66.40625 31.78125 66.40625\nM 31.78125 74.21875\nQ 44.046875 74.21875 50.515625 64.515625\nQ 56.984375 54.828125 56.984375 36.375\nQ 56.984375 17.96875 50.515625 8.265625\nQ 44.046875 -1.421875 31.78125 -1.421875\nQ 19.53125 -1.421875 13.0625 8.265625\nQ 6.59375 17.96875 6.59375 36.375\nQ 6.59375 54.828125 13.0625 64.515625\nQ 19.53125 74.21875 31.78125 74.21875\n\" id=\"DejaVuSans-30\"/>\n      </defs>\n      <g transform=\"translate(48.05625 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-33\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_2\">\n     <g id=\"line2d_2\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"122.530909\" xlink:href=\"#m87f62d4df3\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_2\">\n      <!-- 400 -->\n      <defs>\n       <path d=\"M 37.796875 64.3125\nL 12.890625 25.390625\nL 37.796875 25.390625\nz\nM 35.203125 72.90625\nL 47.609375 72.90625\nL 47.609375 25.390625\nL 58.015625 25.390625\nL 58.015625 17.1875\nL 47.609375 17.1875\nL 47.609375 0\nL 37.796875 0\nL 37.796875 17.1875\nL 4.890625 17.1875\nL 4.890625 26.703125\nz\n\" id=\"DejaVuSans-34\"/>\n      </defs>\n      <g transform=\"translate(112.987159 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-34\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_3\">\n     <g id=\"line2d_3\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"187.461818\" xlink:href=\"#m87f62d4df3\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_3\">\n      <!-- 500 -->\n      <defs>\n       <path d=\"M 10.796875 72.90625\nL 49.515625 72.90625\nL 49.515625 64.59375\nL 19.828125 64.59375\nL 19.828125 46.734375\nQ 21.96875 47.46875 24.109375 47.828125\nQ 26.265625 48.1875 28.421875 48.1875\nQ 40.625 48.1875 47.75 41.5\nQ 54.890625 34.8125 54.890625 23.390625\nQ 54.890625 11.625 47.5625 5.09375\nQ 40.234375 -1.421875 26.90625 -1.421875\nQ 22.3125 -1.421875 17.546875 -0.640625\nQ 12.796875 0.140625 7.71875 1.703125\nL 7.71875 11.625\nQ 12.109375 9.234375 16.796875 8.0625\nQ 21.484375 6.890625 26.703125 6.890625\nQ 35.15625 6.890625 40.078125 11.328125\nQ 45.015625 15.765625 45.015625 23.390625\nQ 45.015625 31 40.078125 35.4375\nQ 35.15625 39.890625 26.703125 39.890625\nQ 22.75 39.890625 18.8125 39.015625\nQ 14.890625 38.140625 10.796875 36.28125\nz\n\" id=\"DejaVuSans-35\"/>\n      </defs>\n      <g transform=\"translate(177.918068 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-35\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_4\">\n     <g id=\"line2d_4\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"252.392727\" xlink:href=\"#m87f62d4df3\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_4\">\n      <!-- 600 -->\n      <defs>\n       <path d=\"M 33.015625 40.375\nQ 26.375 40.375 22.484375 35.828125\nQ 18.609375 31.296875 18.609375 23.390625\nQ 18.609375 15.53125 22.484375 10.953125\nQ 26.375 6.390625 33.015625 6.390625\nQ 39.65625 6.390625 43.53125 10.953125\nQ 47.40625 15.53125 47.40625 23.390625\nQ 47.40625 31.296875 43.53125 35.828125\nQ 39.65625 40.375 33.015625 40.375\nM 52.59375 71.296875\nL 52.59375 62.3125\nQ 48.875 64.0625 45.09375 64.984375\nQ 41.3125 65.921875 37.59375 65.921875\nQ 27.828125 65.921875 22.671875 59.328125\nQ 17.53125 52.734375 16.796875 39.40625\nQ 19.671875 43.65625 24.015625 45.921875\nQ 28.375 48.1875 33.59375 48.1875\nQ 44.578125 48.1875 50.953125 41.515625\nQ 57.328125 34.859375 57.328125 23.390625\nQ 57.328125 12.15625 50.6875 5.359375\nQ 44.046875 -1.421875 33.015625 -1.421875\nQ 20.359375 -1.421875 13.671875 8.265625\nQ 6.984375 17.96875 6.984375 36.375\nQ 6.984375 53.65625 15.1875 63.9375\nQ 23.390625 74.21875 37.203125 74.21875\nQ 40.921875 74.21875 44.703125 73.484375\nQ 48.484375 72.75 52.59375 71.296875\n\" id=\"DejaVuSans-36\"/>\n      </defs>\n      <g transform=\"translate(242.848977 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-36\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_5\">\n     <g id=\"line2d_5\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"317.323636\" xlink:href=\"#m87f62d4df3\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_5\">\n      <!-- 700 -->\n      <defs>\n       <path d=\"M 8.203125 72.90625\nL 55.078125 72.90625\nL 55.078125 68.703125\nL 28.609375 0\nL 18.3125 0\nL 43.21875 64.59375\nL 8.203125 64.59375\nz\n\" id=\"DejaVuSans-37\"/>\n      </defs>\n      <g transform=\"translate(307.779886 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-37\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_6\">\n     <g id=\"line2d_6\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"382.254545\" xlink:href=\"#m87f62d4df3\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_6\">\n      <!-- 800 -->\n      <defs>\n       <path d=\"M 31.78125 34.625\nQ 24.75 34.625 20.71875 30.859375\nQ 16.703125 27.09375 16.703125 20.515625\nQ 16.703125 13.921875 20.71875 10.15625\nQ 24.75 6.390625 31.78125 6.390625\nQ 38.8125 6.390625 42.859375 10.171875\nQ 46.921875 13.96875 46.921875 20.515625\nQ 46.921875 27.09375 42.890625 30.859375\nQ 38.875 34.625 31.78125 34.625\nM 21.921875 38.8125\nQ 15.578125 40.375 12.03125 44.71875\nQ 8.5 49.078125 8.5 55.328125\nQ 8.5 64.0625 14.71875 69.140625\nQ 20.953125 74.21875 31.78125 74.21875\nQ 42.671875 74.21875 48.875 69.140625\nQ 55.078125 64.0625 55.078125 55.328125\nQ 55.078125 49.078125 51.53125 44.71875\nQ 48 40.375 41.703125 38.8125\nQ 48.828125 37.15625 52.796875 32.3125\nQ 56.78125 27.484375 56.78125 20.515625\nQ 56.78125 9.90625 50.3125 4.234375\nQ 43.84375 -1.421875 31.78125 -1.421875\nQ 19.734375 -1.421875 13.25 4.234375\nQ 6.78125 9.90625 6.78125 20.515625\nQ 6.78125 27.484375 10.78125 32.3125\nQ 14.796875 37.15625 21.921875 38.8125\nM 18.3125 54.390625\nQ 18.3125 48.734375 21.84375 45.5625\nQ 25.390625 42.390625 31.78125 42.390625\nQ 38.140625 42.390625 41.71875 45.5625\nQ 45.3125 48.734375 45.3125 54.390625\nQ 45.3125 60.0625 41.71875 63.234375\nQ 38.140625 66.40625 31.78125 66.40625\nQ 25.390625 66.40625 21.84375 63.234375\nQ 18.3125 60.0625 18.3125 54.390625\n\" id=\"DejaVuSans-38\"/>\n      </defs>\n      <g transform=\"translate(372.710795 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-38\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n   </g>\n   <g id=\"matplotlib.axis_2\">\n    <g id=\"ytick_1\">\n     <g id=\"line2d_7\">\n      <defs>\n       <path d=\"M 0 0\nL -3.5 0\n\" id=\"m526b8e69bb\" style=\"stroke:#000000;stroke-width:0.8;\"/>\n      </defs>\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m526b8e69bb\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_7\">\n      <!-- 0 -->\n      <g transform=\"translate(44.2375 311.383219)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_2\">\n     <g id=\"line2d_8\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m526b8e69bb\" y=\"277.231904\"/>\n      </g>\n     </g>\n     <g id=\"text_8\">\n      <!-- 1000 -->\n      <defs>\n       <path d=\"M 12.40625 8.296875\nL 28.515625 8.296875\nL 28.515625 63.921875\nL 10.984375 60.40625\nL 10.984375 69.390625\nL 28.421875 72.90625\nL 38.28125 72.90625\nL 38.28125 8.296875\nL 54.390625 8.296875\nL 54.390625 0\nL 12.40625 0\nz\n\" id=\"DejaVuSans-31\"/>\n      </defs>\n      <g transform=\"translate(25.15 281.031123)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-31\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_3\">\n     <g id=\"line2d_9\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m526b8e69bb\" y=\"246.879808\"/>\n      </g>\n     </g>\n     <g id=\"text_9\">\n      <!-- 2000 -->\n      <defs>\n       <path d=\"M 19.1875 8.296875\nL 53.609375 8.296875\nL 53.609375 0\nL 7.328125 0\nL 7.328125 8.296875\nQ 12.9375 14.109375 22.625 23.890625\nQ 32.328125 33.6875 34.8125 36.53125\nQ 39.546875 41.84375 41.421875 45.53125\nQ 43.3125 49.21875 43.3125 52.78125\nQ 43.3125 58.59375 39.234375 62.25\nQ 35.15625 65.921875 28.609375 65.921875\nQ 23.96875 65.921875 18.8125 64.3125\nQ 13.671875 62.703125 7.8125 59.421875\nL 7.8125 69.390625\nQ 13.765625 71.78125 18.9375 73\nQ 24.125 74.21875 28.421875 74.21875\nQ 39.75 74.21875 46.484375 68.546875\nQ 53.21875 62.890625 53.21875 53.421875\nQ 53.21875 48.921875 51.53125 44.890625\nQ 49.859375 40.875 45.40625 35.40625\nQ 44.1875 33.984375 37.640625 27.21875\nQ 31.109375 20.453125 19.1875 8.296875\n\" id=\"DejaVuSans-32\"/>\n      </defs>\n      <g transform=\"translate(25.15 250.679027)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-32\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_4\">\n     <g id=\"line2d_10\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m526b8e69bb\" y=\"216.527713\"/>\n      </g>\n     </g>\n     <g id=\"text_10\">\n      <!-- 3000 -->\n      <g transform=\"translate(25.15 220.326931)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-33\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_5\">\n     <g id=\"line2d_11\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m526b8e69bb\" y=\"186.175617\"/>\n      </g>\n     </g>\n     <g id=\"text_11\">\n      <!-- 4000 -->\n      <g transform=\"translate(25.15 189.974836)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-34\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_6\">\n     <g id=\"line2d_12\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m526b8e69bb\" y=\"155.823521\"/>\n      </g>\n     </g>\n     <g id=\"text_12\">\n      <!-- 5000 -->\n      <g transform=\"translate(25.15 159.62274)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-35\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_7\">\n     <g id=\"line2d_13\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m526b8e69bb\" y=\"125.471425\"/>\n      </g>\n     </g>\n     <g id=\"text_13\">\n      <!-- 6000 -->\n      <g transform=\"translate(25.15 129.270644)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-36\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_8\">\n     <g id=\"line2d_14\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m526b8e69bb\" y=\"95.119329\"/>\n      </g>\n     </g>\n     <g id=\"text_14\">\n      <!-- 7000 -->\n      <g transform=\"translate(25.15 98.918548)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-37\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_9\">\n     <g id=\"line2d_15\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m526b8e69bb\" y=\"64.767234\"/>\n      </g>\n     </g>\n     <g id=\"text_15\">\n      <!-- 8000 -->\n      <g transform=\"translate(25.15 68.566452)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-38\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n   </g>\n   <g id=\"patch_43\">\n    <path d=\"M 57.6 307.584\nL 57.6 41.472\n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_44\">\n    <path d=\"M 414.72 307.584\nL 414.72 41.472\n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_45\">\n    <path d=\"M 57.6 307.584\nL 414.72 307.584\n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_46\">\n    <path d=\"M 57.6 41.472\nL 414.72 41.472\n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n  </g>\n </g>\n <defs>\n  <clipPath id=\"p4d8facfb81\">\n   <rect height=\"266.112\" width=\"357.12\" x=\"57.6\" y=\"41.472\"/>\n  </clipPath>\n </defs>\n</svg>\n<p>\n  The above figure shows how many of our 100000 simulations (y axis) required each possible\n  number of deployments (x axis) to prepare all the cells inside 3 x 69 target region. As we can\n  see, the maximum we\n  needed is no more than 850 and our limit was 1000. So we can be confident that this strategy is\n  good enough to pass test set 2.\n</p>\n<p>\n  There are many other strategies. One may be, to deploy the gopher to the cell that has the largest\n  number of unprepared cells in 3 x 3 region centering at that cell. This strategy yields\n  following simulation result (100000 runs), which looks better than the one before:\n</p>\n<?xml version=\"1.0\" encoding=\"utf-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n  \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<svg height=\"345pt\" version=\"1.1\" viewBox=\"0 0 460 345\" width=\"460pt\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n <defs>\n  <style type=\"text/css\">\n*{stroke-linecap:butt;stroke-linejoin:round;}\n  </style>\n </defs>\n <g id=\"figure_1\">\n  <g id=\"patch_1\">\n   <path d=\"M 0 345.6\nL 460.8 345.6\nL 460.8 0\nL 0 0\nz\n\" style=\"fill:#ffffff;\"/>\n  </g>\n  <g id=\"axes_1\">\n   <g id=\"patch_2\">\n    <path d=\"M 57.6 307.584\nL 414.72 307.584\nL 414.72 41.472\nL 57.6 41.472\nz\n\" style=\"fill:#ffffff;\"/>\n   </g>\n   <g id=\"patch_3\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 84.221673 307.584\nL 90.438807 307.584\nL 90.438807 307.503941\nL 84.221673 307.503941\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_4\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 90.438807 307.584\nL 96.655942 307.584\nL 96.655942 307.503941\nL 90.438807 307.503941\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_5\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 96.655942 307.584\nL 102.873076 307.584\nL 102.873076 306.996901\nL 96.655942 306.996901\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_6\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 102.873076 307.584\nL 109.090211 307.584\nL 109.090211 305.449094\nL 102.873076 305.449094\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_7\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 109.090211 307.584\nL 115.307345 307.584\nL 115.307345 301.739695\nL 109.090211 301.739695\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_8\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 115.307345 307.584\nL 121.52448 307.584\nL 121.52448 293.947289\nL 115.307345 293.947289\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_9\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 121.52448 307.584\nL 127.741615 307.584\nL 127.741615 279.323185\nL 121.52448 279.323185\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_10\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 127.741615 307.584\nL 133.958749 307.584\nL 133.958749 262.564175\nL 127.741615 262.564175\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_11\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 133.958749 307.584\nL 140.175884 307.584\nL 140.175884 224.21593\nL 133.958749 224.21593\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_12\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 140.175884 307.584\nL 146.393018 307.584\nL 146.393018 201.772733\nL 140.175884 201.772733\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_13\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 146.393018 307.584\nL 152.610153 307.584\nL 152.610153 144.744063\nL 146.393018 144.744063\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_14\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 152.610153 307.584\nL 158.827287 307.584\nL 158.827287 127.397954\nL 152.610153 127.397954\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_15\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 158.827287 307.584\nL 165.044422 307.584\nL 165.044422 73.865192\nL 158.827287 73.865192\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_16\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 165.044422 307.584\nL 171.261556 307.584\nL 171.261556 55.104708\nL 165.044422 55.104708\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_17\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 171.261556 307.584\nL 177.478691 307.584\nL 177.478691 68.768104\nL 171.261556 68.768104\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_18\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 177.478691 307.584\nL 183.695825 307.584\nL 183.695825 54.144\nL 177.478691 54.144\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_19\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 183.695825 307.584\nL 189.91296 307.584\nL 189.91296 95.454426\nL 183.695825 95.454426\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_20\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 189.91296 307.584\nL 196.130095 307.584\nL 196.130095 104.954757\nL 189.91296 104.954757\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_21\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 196.130095 307.584\nL 202.347229 307.584\nL 202.347229 152.563156\nL 196.130095 152.563156\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_22\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 202.347229 307.584\nL 208.564364 307.584\nL 208.564364 165.986375\nL 202.347229 165.986375\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_23\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 208.564364 307.584\nL 214.781498 307.584\nL 214.781498 199.130787\nL 208.564364 199.130787\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_24\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 214.781498 307.584\nL 220.998633 307.584\nL 220.998633 237.025365\nL 214.781498 237.025365\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_25\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 220.998633 307.584\nL 227.215767 307.584\nL 227.215767 248.847405\nL 220.998633 248.847405\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_26\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 227.215767 307.584\nL 233.432902 307.584\nL 233.432902 269.582677\nL 227.215767 269.582677\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_27\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 233.432902 307.584\nL 239.650036 307.584\nL 239.650036 279.93697\nL 233.432902 279.93697\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_28\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 239.650036 307.584\nL 245.867171 307.584\nL 245.867171 290.638186\nL 239.650036 290.638186\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_29\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 245.867171 307.584\nL 252.084305 307.584\nL 252.084305 295.041429\nL 245.867171 295.041429\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_30\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 252.084305 307.584\nL 258.30144 307.584\nL 258.30144 300.61887\nL 252.084305 300.61887\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_31\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 258.30144 307.584\nL 264.518575 307.584\nL 264.518575 303.260816\nL 258.30144 303.260816\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_32\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 264.518575 307.584\nL 270.735709 307.584\nL 270.735709 304.568446\nL 264.518575 304.568446\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_33\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 270.735709 307.584\nL 276.952844 307.584\nL 276.952844 305.929448\nL 270.735709 305.929448\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_34\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 276.952844 307.584\nL 283.169978 307.584\nL 283.169978 306.56992\nL 276.952844 306.56992\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_35\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 283.169978 307.584\nL 289.387113 307.584\nL 289.387113 307.07696\nL 283.169978 307.07696\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_36\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 289.387113 307.584\nL 295.604247 307.584\nL 295.604247 307.263764\nL 289.387113 307.263764\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_37\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 295.604247 307.584\nL 301.821382 307.584\nL 301.821382 307.477255\nL 295.604247 307.477255\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_38\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 301.821382 307.584\nL 308.038516 307.584\nL 308.038516 307.503941\nL 301.821382 307.503941\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_39\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 308.038516 307.584\nL 314.255651 307.584\nL 314.255651 307.557314\nL 308.038516 307.557314\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_40\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 314.255651 307.584\nL 320.472785 307.584\nL 320.472785 307.584\nL 314.255651 307.584\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_41\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 320.472785 307.584\nL 326.68992 307.584\nL 326.68992 307.557314\nL 320.472785 307.557314\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"patch_42\">\n    <path clip-path=\"url(#p8cdc4fb095)\" d=\"M 326.68992 307.584\nL 332.907055 307.584\nL 332.907055 307.557314\nL 326.68992 307.557314\nz\n\" style=\"fill:#1f77b4;\"/>\n   </g>\n   <g id=\"matplotlib.axis_1\">\n    <g id=\"xtick_1\">\n     <g id=\"line2d_1\">\n      <defs>\n       <path d=\"M 0 0\nL 0 3.5\n\" id=\"m6df6b1d6ba\" style=\"stroke:#000000;stroke-width:0.8;\"/>\n      </defs>\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m6df6b1d6ba\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_1\">\n      <!-- 300 -->\n      <defs>\n       <path d=\"M 40.578125 39.3125\nQ 47.65625 37.796875 51.625 33\nQ 55.609375 28.21875 55.609375 21.1875\nQ 55.609375 10.40625 48.1875 4.484375\nQ 40.765625 -1.421875 27.09375 -1.421875\nQ 22.515625 -1.421875 17.65625 -0.515625\nQ 12.796875 0.390625 7.625 2.203125\nL 7.625 11.71875\nQ 11.71875 9.328125 16.59375 8.109375\nQ 21.484375 6.890625 26.8125 6.890625\nQ 36.078125 6.890625 40.9375 10.546875\nQ 45.796875 14.203125 45.796875 21.1875\nQ 45.796875 27.640625 41.28125 31.265625\nQ 36.765625 34.90625 28.71875 34.90625\nL 20.21875 34.90625\nL 20.21875 43.015625\nL 29.109375 43.015625\nQ 36.375 43.015625 40.234375 45.921875\nQ 44.09375 48.828125 44.09375 54.296875\nQ 44.09375 59.90625 40.109375 62.90625\nQ 36.140625 65.921875 28.71875 65.921875\nQ 24.65625 65.921875 20.015625 65.03125\nQ 15.375 64.15625 9.8125 62.3125\nL 9.8125 71.09375\nQ 15.4375 72.65625 20.34375 73.4375\nQ 25.25 74.21875 29.59375 74.21875\nQ 40.828125 74.21875 47.359375 69.109375\nQ 53.90625 64.015625 53.90625 55.328125\nQ 53.90625 49.265625 50.4375 45.09375\nQ 46.96875 40.921875 40.578125 39.3125\n\" id=\"DejaVuSans-33\"/>\n       <path d=\"M 31.78125 66.40625\nQ 24.171875 66.40625 20.328125 58.90625\nQ 16.5 51.421875 16.5 36.375\nQ 16.5 21.390625 20.328125 13.890625\nQ 24.171875 6.390625 31.78125 6.390625\nQ 39.453125 6.390625 43.28125 13.890625\nQ 47.125 21.390625 47.125 36.375\nQ 47.125 51.421875 43.28125 58.90625\nQ 39.453125 66.40625 31.78125 66.40625\nM 31.78125 74.21875\nQ 44.046875 74.21875 50.515625 64.515625\nQ 56.984375 54.828125 56.984375 36.375\nQ 56.984375 17.96875 50.515625 8.265625\nQ 44.046875 -1.421875 31.78125 -1.421875\nQ 19.53125 -1.421875 13.0625 8.265625\nQ 6.59375 17.96875 6.59375 36.375\nQ 6.59375 54.828125 13.0625 64.515625\nQ 19.53125 74.21875 31.78125 74.21875\n\" id=\"DejaVuSans-30\"/>\n      </defs>\n      <g transform=\"translate(48.05625 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-33\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_2\">\n     <g id=\"line2d_2\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"122.530909\" xlink:href=\"#m6df6b1d6ba\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_2\">\n      <!-- 400 -->\n      <defs>\n       <path d=\"M 37.796875 64.3125\nL 12.890625 25.390625\nL 37.796875 25.390625\nz\nM 35.203125 72.90625\nL 47.609375 72.90625\nL 47.609375 25.390625\nL 58.015625 25.390625\nL 58.015625 17.1875\nL 47.609375 17.1875\nL 47.609375 0\nL 37.796875 0\nL 37.796875 17.1875\nL 4.890625 17.1875\nL 4.890625 26.703125\nz\n\" id=\"DejaVuSans-34\"/>\n      </defs>\n      <g transform=\"translate(112.987159 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-34\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_3\">\n     <g id=\"line2d_3\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"187.461818\" xlink:href=\"#m6df6b1d6ba\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_3\">\n      <!-- 500 -->\n      <defs>\n       <path d=\"M 10.796875 72.90625\nL 49.515625 72.90625\nL 49.515625 64.59375\nL 19.828125 64.59375\nL 19.828125 46.734375\nQ 21.96875 47.46875 24.109375 47.828125\nQ 26.265625 48.1875 28.421875 48.1875\nQ 40.625 48.1875 47.75 41.5\nQ 54.890625 34.8125 54.890625 23.390625\nQ 54.890625 11.625 47.5625 5.09375\nQ 40.234375 -1.421875 26.90625 -1.421875\nQ 22.3125 -1.421875 17.546875 -0.640625\nQ 12.796875 0.140625 7.71875 1.703125\nL 7.71875 11.625\nQ 12.109375 9.234375 16.796875 8.0625\nQ 21.484375 6.890625 26.703125 6.890625\nQ 35.15625 6.890625 40.078125 11.328125\nQ 45.015625 15.765625 45.015625 23.390625\nQ 45.015625 31 40.078125 35.4375\nQ 35.15625 39.890625 26.703125 39.890625\nQ 22.75 39.890625 18.8125 39.015625\nQ 14.890625 38.140625 10.796875 36.28125\nz\n\" id=\"DejaVuSans-35\"/>\n      </defs>\n      <g transform=\"translate(177.918068 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-35\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_4\">\n     <g id=\"line2d_4\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"252.392727\" xlink:href=\"#m6df6b1d6ba\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_4\">\n      <!-- 600 -->\n      <defs>\n       <path d=\"M 33.015625 40.375\nQ 26.375 40.375 22.484375 35.828125\nQ 18.609375 31.296875 18.609375 23.390625\nQ 18.609375 15.53125 22.484375 10.953125\nQ 26.375 6.390625 33.015625 6.390625\nQ 39.65625 6.390625 43.53125 10.953125\nQ 47.40625 15.53125 47.40625 23.390625\nQ 47.40625 31.296875 43.53125 35.828125\nQ 39.65625 40.375 33.015625 40.375\nM 52.59375 71.296875\nL 52.59375 62.3125\nQ 48.875 64.0625 45.09375 64.984375\nQ 41.3125 65.921875 37.59375 65.921875\nQ 27.828125 65.921875 22.671875 59.328125\nQ 17.53125 52.734375 16.796875 39.40625\nQ 19.671875 43.65625 24.015625 45.921875\nQ 28.375 48.1875 33.59375 48.1875\nQ 44.578125 48.1875 50.953125 41.515625\nQ 57.328125 34.859375 57.328125 23.390625\nQ 57.328125 12.15625 50.6875 5.359375\nQ 44.046875 -1.421875 33.015625 -1.421875\nQ 20.359375 -1.421875 13.671875 8.265625\nQ 6.984375 17.96875 6.984375 36.375\nQ 6.984375 53.65625 15.1875 63.9375\nQ 23.390625 74.21875 37.203125 74.21875\nQ 40.921875 74.21875 44.703125 73.484375\nQ 48.484375 72.75 52.59375 71.296875\n\" id=\"DejaVuSans-36\"/>\n      </defs>\n      <g transform=\"translate(242.848977 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-36\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_5\">\n     <g id=\"line2d_5\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"317.323636\" xlink:href=\"#m6df6b1d6ba\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_5\">\n      <!-- 700 -->\n      <defs>\n       <path d=\"M 8.203125 72.90625\nL 55.078125 72.90625\nL 55.078125 68.703125\nL 28.609375 0\nL 18.3125 0\nL 43.21875 64.59375\nL 8.203125 64.59375\nz\n\" id=\"DejaVuSans-37\"/>\n      </defs>\n      <g transform=\"translate(307.779886 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-37\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"xtick_6\">\n     <g id=\"line2d_6\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"382.254545\" xlink:href=\"#m6df6b1d6ba\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_6\">\n      <!-- 800 -->\n      <defs>\n       <path d=\"M 31.78125 34.625\nQ 24.75 34.625 20.71875 30.859375\nQ 16.703125 27.09375 16.703125 20.515625\nQ 16.703125 13.921875 20.71875 10.15625\nQ 24.75 6.390625 31.78125 6.390625\nQ 38.8125 6.390625 42.859375 10.171875\nQ 46.921875 13.96875 46.921875 20.515625\nQ 46.921875 27.09375 42.890625 30.859375\nQ 38.875 34.625 31.78125 34.625\nM 21.921875 38.8125\nQ 15.578125 40.375 12.03125 44.71875\nQ 8.5 49.078125 8.5 55.328125\nQ 8.5 64.0625 14.71875 69.140625\nQ 20.953125 74.21875 31.78125 74.21875\nQ 42.671875 74.21875 48.875 69.140625\nQ 55.078125 64.0625 55.078125 55.328125\nQ 55.078125 49.078125 51.53125 44.71875\nQ 48 40.375 41.703125 38.8125\nQ 48.828125 37.15625 52.796875 32.3125\nQ 56.78125 27.484375 56.78125 20.515625\nQ 56.78125 9.90625 50.3125 4.234375\nQ 43.84375 -1.421875 31.78125 -1.421875\nQ 19.734375 -1.421875 13.25 4.234375\nQ 6.78125 9.90625 6.78125 20.515625\nQ 6.78125 27.484375 10.78125 32.3125\nQ 14.796875 37.15625 21.921875 38.8125\nM 18.3125 54.390625\nQ 18.3125 48.734375 21.84375 45.5625\nQ 25.390625 42.390625 31.78125 42.390625\nQ 38.140625 42.390625 41.71875 45.5625\nQ 45.3125 48.734375 45.3125 54.390625\nQ 45.3125 60.0625 41.71875 63.234375\nQ 38.140625 66.40625 31.78125 66.40625\nQ 25.390625 66.40625 21.84375 63.234375\nQ 18.3125 60.0625 18.3125 54.390625\n\" id=\"DejaVuSans-38\"/>\n      </defs>\n      <g transform=\"translate(372.710795 322.182437)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-38\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n   </g>\n   <g id=\"matplotlib.axis_2\">\n    <g id=\"ytick_1\">\n     <g id=\"line2d_7\">\n      <defs>\n       <path d=\"M 0 0\nL -3.5 0\n\" id=\"m66da2ce0d3\" style=\"stroke:#000000;stroke-width:0.8;\"/>\n      </defs>\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m66da2ce0d3\" y=\"307.584\"/>\n      </g>\n     </g>\n     <g id=\"text_7\">\n      <!-- 0 -->\n      <g transform=\"translate(44.2375 311.383219)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_2\">\n     <g id=\"line2d_8\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m66da2ce0d3\" y=\"254.211356\"/>\n      </g>\n     </g>\n     <g id=\"text_8\">\n      <!-- 2000 -->\n      <defs>\n       <path d=\"M 19.1875 8.296875\nL 53.609375 8.296875\nL 53.609375 0\nL 7.328125 0\nL 7.328125 8.296875\nQ 12.9375 14.109375 22.625 23.890625\nQ 32.328125 33.6875 34.8125 36.53125\nQ 39.546875 41.84375 41.421875 45.53125\nQ 43.3125 49.21875 43.3125 52.78125\nQ 43.3125 58.59375 39.234375 62.25\nQ 35.15625 65.921875 28.609375 65.921875\nQ 23.96875 65.921875 18.8125 64.3125\nQ 13.671875 62.703125 7.8125 59.421875\nL 7.8125 69.390625\nQ 13.765625 71.78125 18.9375 73\nQ 24.125 74.21875 28.421875 74.21875\nQ 39.75 74.21875 46.484375 68.546875\nQ 53.21875 62.890625 53.21875 53.421875\nQ 53.21875 48.921875 51.53125 44.890625\nQ 49.859375 40.875 45.40625 35.40625\nQ 44.1875 33.984375 37.640625 27.21875\nQ 31.109375 20.453125 19.1875 8.296875\n\" id=\"DejaVuSans-32\"/>\n      </defs>\n      <g transform=\"translate(25.15 258.010575)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-32\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_3\">\n     <g id=\"line2d_9\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m66da2ce0d3\" y=\"200.838712\"/>\n      </g>\n     </g>\n     <g id=\"text_9\">\n      <!-- 4000 -->\n      <g transform=\"translate(25.15 204.637931)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-34\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_4\">\n     <g id=\"line2d_10\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m66da2ce0d3\" y=\"147.466068\"/>\n      </g>\n     </g>\n     <g id=\"text_10\">\n      <!-- 6000 -->\n      <g transform=\"translate(25.15 151.265287)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-36\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n    <g id=\"ytick_5\">\n     <g id=\"line2d_11\">\n      <g>\n       <use style=\"stroke:#000000;stroke-width:0.8;\" x=\"57.6\" xlink:href=\"#m66da2ce0d3\" y=\"94.093424\"/>\n      </g>\n     </g>\n     <g id=\"text_11\">\n      <!-- 8000 -->\n      <g transform=\"translate(25.15 97.892643)scale(0.1 -0.1)\">\n       <use xlink:href=\"#DejaVuSans-38\"/>\n       <use x=\"63.623047\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"127.246094\" xlink:href=\"#DejaVuSans-30\"/>\n       <use x=\"190.869141\" xlink:href=\"#DejaVuSans-30\"/>\n      </g>\n     </g>\n    </g>\n   </g>\n   <g id=\"patch_43\">\n    <path d=\"M 57.6 307.584\nL 57.6 41.472\n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_44\">\n    <path d=\"M 414.72 307.584\nL 414.72 41.472\n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_45\">\n    <path d=\"M 57.6 307.584\nL 414.72 307.584\n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n   <g id=\"patch_46\">\n    <path d=\"M 57.6 41.472\nL 414.72 41.472\n\" style=\"fill:none;stroke:#000000;stroke-linecap:square;stroke-linejoin:miter;stroke-width:0.8;\"/>\n   </g>\n  </g>\n </g>\n <defs>\n  <clipPath id=\"p8cdc4fb095\">\n   <rect height=\"266.112\" width=\"357.12\" x=\"57.6\" y=\"41.472\"/>\n  </clipPath>\n </defs>\n</svg>\n","id":"0000000000007a30","statement":"<h3>Problem</h3>\n<p>\n  The Code Jam team has just purchased an orchard that is a two-dimensional\n  matrix of cells of unprepared soil, with 1000 rows and 1000 columns. We plan\n  to use this orchard to grow a variety of trees &mdash; AVL, binary, red-black,\n  splay, and so on &mdash; so we need to <i>prepare</i> some of the cells by\n  digging holes:\n</p>\n<ul>\n  <li>In order to have enough trees to use for each year's tree problems, we\n    need there to be at least <b>A</b> prepared cells.</li>\n  <li>In order to care for our trees properly, the set of all prepared cells\n    must form a single grid-aligned rectangle in which every cell within the\n    rectangle is prepared.</li>\n</ul>\n<p>\n  Note that the above also implies that none of the cells outside of that\n  rectangle can be prepared. We want the orchard to look tidy!\n</p>\n<p>\n  For example, when <b>A</b>=11, although the eleven prepared cells in the left\n  figure below form a 3x4 rectangle (that is, with 3 rows and 4 columns), the\n  cell in the center of the rectangle is not prepared. As a result, we have not\n  yet completed preparing our orchard, since not every cell of the 3x4 rectangle\n  is prepared. However, after just preparing the center cell, the rectangle of\n  size at least 11 is fully filled, and the orchard is ready.\n</p>\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"525px\"\n   height=\"200px\"\n   viewBox=\"0 0 555.62496 211.66667\"\n   version=\"1.1\"\n   id=\"svg8\"\n   inkscape:version=\"0.92.1 r15371\"\n   sodipodi:docname=\"Figure-1.svg\">\n  <defs\n     id=\"defs2\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.35\"\n     inkscape:cx=\"899.44547\"\n     inkscape:cy=\"217.14286\"\n     inkscape:document-units=\"mm\"\n     inkscape:current-layer=\"layer1\"\n     showgrid=\"false\"\n     inkscape:window-width=\"1600\"\n     inkscape:window-height=\"837\"\n     inkscape:window-x=\"-8\"\n     inkscape:window-y=\"-8\"\n     inkscape:window-maximized=\"1\"\n     units=\"px\"\n     inkscape:snap-page=\"false\"\n     inkscape:snap-text-baseline=\"false\" />\n  <metadata\n     id=\"metadata5\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\"\n     transform=\"translate(0,-85.333303)\">\n    <rect\n       id=\"rect3717\"\n       width=\"140\"\n       height=\"105\"\n       x=\"70\"\n       y=\"121.99997\"\n       style=\"fill:#34a853;fill-opacity:1;fill-rule:nonzero;stroke-width:1.17875695\" />\n    <rect\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke-width:0.34027782\"\n       y=\"156.99997\"\n       x=\"105\"\n       height=\"35\"\n       width=\"35\"\n       id=\"rect4640\" />\n    <rect\n       style=\"fill:#34a853;fill-opacity:1;fill-rule:nonzero;stroke-width:1.17875695\"\n       y=\"121.99997\"\n       x=\"350\"\n       height=\"105\"\n       width=\"140\"\n       id=\"rect4638\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.35358882;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M -4.7761905e-5,261.33851 H 557.94595\"\n       id=\"path4590\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path4592\"\n       d=\"M -2.2679049,226.33851 H 555.6781\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.35358882;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.35358882;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M -2.2679049,121.33851 H 555.6781\"\n       id=\"path4594\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path4596\"\n       d=\"M -2.2679049,156.33851 H 555.6781\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.35358882;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.35358882;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M -2.2679049,191.33851 H 555.6781\"\n       id=\"path4598\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 35.661458,80.041636 V 306.82735\"\n       id=\"path4604\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path4606\"\n       d=\"M 70.661458,80.041636 V 306.82735\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 105.66146,80.041636 V 306.82735\"\n       id=\"path4608\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path4610\"\n       d=\"M 140.66146,80.041636 V 306.82735\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 175.66146,80.041636 V 306.82735\"\n       id=\"path4612\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 210.66146,80.041636 V 306.82735\"\n       id=\"path4616\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path4618\"\n       d=\"M 245.66146,80.041636 V 306.82735\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 280.66146,80.041636 V 306.82735\"\n       id=\"path4620\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path4622\"\n       d=\"M 315.66146,80.041636 V 306.82735\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 385.66146,80.041636 V 306.82735\"\n       id=\"path4624\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path4626\"\n       d=\"M 385.66146,80.041636 V 306.82735\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 350.66146,80.041636 V 306.82735\"\n       id=\"path4630\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 420.66146,80.041636 V 306.82735\"\n       id=\"path4632\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path4634\"\n       d=\"M 455.66146,80.041636 V 306.82735\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 490.66146,80.041636 V 306.82735\"\n       id=\"path4636\"\n       inkscape:connector-curvature=\"0\" />\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-weight:normal;font-size:10.58333302px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#34a853;fill-opacity:1;stroke:none;stroke-width:0.26458332\"\n       x=\"394.29492\"\n       y=\"276.38663\"\n       id=\"text4644\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan4642\"\n         x=\"394.29492\"\n         y=\"276.38663\"\n         style=\"font-size:50.79999924px;fill:#34a853;fill-opacity:1;stroke-width:0.26458332\">✔</tspan></text>\n    <text\n       id=\"text4656\"\n       y=\"276.38663\"\n       x=\"114.87968\"\n       style=\"font-style:normal;font-weight:normal;font-size:10.58333302px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#ea4335;fill-opacity:1;stroke:none;stroke-width:0.26458332\"\n       xml:space=\"preserve\"><tspan\n         style=\"font-size:50.79999924px;fill:#ea4335;fill-opacity:1;stroke-width:0.26458332\"\n         y=\"276.38663\"\n         x=\"114.87968\"\n         id=\"tspan4654\"\n         sodipodi:role=\"line\">✘</tspan></text>\n    <text\n       id=\"text4660\"\n       y=\"209.40831\"\n       x=\"221.6158\"\n       style=\"font-style:normal;font-weight:normal;font-size:10.58333302px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#ea4335;fill-opacity:1;stroke:none;stroke-width:0.26458332\"\n       xml:space=\"preserve\"><tspan\n         style=\"font-size:123.47222137px;fill:#fbbc04;fill-opacity:1;stroke-width:0.26458332\"\n         y=\"209.40831\"\n         x=\"221.6158\"\n         id=\"tspan4658\"\n         sodipodi:role=\"line\">⇨</tspan></text>\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path5285\"\n       d=\"M 525.66146,80.041256 V 306.82697\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n  </g>\n</svg>\n<p>\n  See below for another example. In this case, <b>A</b>=6. Note that the middle\n  figure prepares a cell outside the 3x2 rectangle, so although the rightmost\n  figure prepares a rectangle of size 6, the entire set of the prepared cells\n  does not form a rectangle (due to the extra cell on the left). As a result,\n  the orchard is not ready.\n</p>\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   width=\"525px\"\n   height=\"200px\"\n   viewBox=\"0 0 555.62496 211.66667\"\n   version=\"1.1\"\n   id=\"svg8\"\n   inkscape:version=\"0.92.1 r15371\"\n   sodipodi:docname=\"Figure-3.svg\">\n  <defs\n     id=\"defs2\" />\n  <sodipodi:namedview\n     id=\"base\"\n     pagecolor=\"#ffffff\"\n     bordercolor=\"#666666\"\n     borderopacity=\"1.0\"\n     inkscape:pageopacity=\"0.0\"\n     inkscape:pageshadow=\"2\"\n     inkscape:zoom=\"0.35\"\n     inkscape:cx=\"652.36863\"\n     inkscape:cy=\"217.14286\"\n     inkscape:document-units=\"mm\"\n     inkscape:current-layer=\"layer1\"\n     showgrid=\"false\"\n     inkscape:window-width=\"1600\"\n     inkscape:window-height=\"837\"\n     inkscape:window-x=\"-8\"\n     inkscape:window-y=\"-8\"\n     inkscape:window-maximized=\"1\"\n     units=\"px\"\n     inkscape:snap-page=\"false\"\n     inkscape:snap-text-baseline=\"false\" />\n  <metadata\n     id=\"metadata5\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title></dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <g\n     inkscape:label=\"Layer 1\"\n     inkscape:groupmode=\"layer\"\n     id=\"layer1\"\n     transform=\"translate(0,-85.333303)\">\n    <rect\n       id=\"rect4722\"\n       width=\"35\"\n       height=\"35\"\n       x=\"210.15475\"\n       y=\"156.99997\"\n       style=\"fill:#34a853;fill-opacity:1;fill-rule:nonzero;stroke-width:0.34027782\" />\n    <rect\n       id=\"rect3717\"\n       width=\"70\"\n       height=\"105\"\n       x=\"35\"\n       y=\"121.99997\"\n       style=\"fill:#34a853;fill-opacity:1;fill-rule:nonzero;stroke-width:0.833507\" />\n    <rect\n       id=\"rect5277\"\n       width=\"35\"\n       height=\"35\"\n       x=\"35\"\n       y=\"156.99997\"\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke-width:0.34027782\" />\n    <rect\n       id=\"rect5271\"\n       width=\"35\"\n       height=\"35\"\n       x=\"420\"\n       y=\"156.99997\"\n       style=\"fill:#34a853;fill-opacity:1;fill-rule:nonzero;stroke-width:0.34027782\" />\n    <rect\n       id=\"rect4700\"\n       width=\"70\"\n       height=\"105\"\n       x=\"455\"\n       y=\"121.99997\"\n       style=\"fill:#34a853;fill-opacity:1;fill-rule:nonzero;stroke-width:0.833507\" />\n    <rect\n       style=\"fill:#34a853;fill-opacity:1;fill-rule:nonzero;stroke-width:0.833507\"\n       y=\"121.99997\"\n       x=\"245\"\n       height=\"105\"\n       width=\"70\"\n       id=\"rect4698\" />\n    <rect\n       style=\"fill:#ffffff;fill-opacity:1;fill-rule:nonzero;stroke-width:0.34027782\"\n       y=\"156.99997\"\n       x=\"245\"\n       height=\"35\"\n       width=\"35\"\n       id=\"rect4640\" />\n    <rect\n       style=\"fill:#34a853;fill-opacity:1;fill-rule:nonzero;stroke-width:0.34027782\"\n       y=\"156.99997\"\n       x=\"210.15475\"\n       height=\"35\"\n       width=\"35\"\n       id=\"rect5267\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.35358882;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M -4.7761905e-5,261.33851 H 557.94595\"\n       id=\"path4590\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path4592\"\n       d=\"M -2.2679049,226.33851 H 555.6781\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.35358882;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.35358894;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M -2.2679049,121.33851 H 555.6781\"\n       id=\"path4594\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path4596\"\n       d=\"M -2.2679049,156.33851 H 555.6781\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.35358882;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.35358882;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M -2.2679049,191.33851 H 555.6781\"\n       id=\"path4598\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 35.661458,80.041636 V 306.82735\"\n       id=\"path4604\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path4606\"\n       d=\"M 70.661458,80.041636 V 306.82735\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 105.66146,80.041636 V 306.82735\"\n       id=\"path4608\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path4610\"\n       d=\"M 140.66146,80.041636 V 306.82735\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 175.66146,80.041636 V 306.82735\"\n       id=\"path4612\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 210.66146,80.041636 V 306.82735\"\n       id=\"path4616\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path4618\"\n       d=\"M 245.66146,80.041636 V 306.82735\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 280.66146,80.041636 V 306.82735\"\n       id=\"path4620\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path4622\"\n       d=\"M 315.66146,80.041636 V 306.82735\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 385.66146,80.041636 V 306.82735\"\n       id=\"path4624\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path4626\"\n       d=\"M 385.66146,80.041636 V 306.82735\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 350.66146,80.041636 V 306.82735\"\n       id=\"path4630\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 420.66146,80.041636 V 306.82735\"\n       id=\"path4632\"\n       inkscape:connector-curvature=\"0\" />\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path4634\"\n       d=\"M 455.66146,80.041636 V 306.82735\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n    <path\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\"\n       d=\"M 490.66146,80.041636 V 306.82735\"\n       id=\"path4636\"\n       inkscape:connector-curvature=\"0\" />\n    <text\n       id=\"text4656\"\n       y=\"276.50388\"\n       x=\"44.879688\"\n       style=\"font-style:normal;font-weight:normal;font-size:10.58333302px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#ea4335;fill-opacity:1;stroke:none;stroke-width:0.26458332\"\n       xml:space=\"preserve\"><tspan\n         style=\"font-size:50.79999924px;fill:#ea4335;fill-opacity:1;stroke-width:0.26458332\"\n         y=\"276.50388\"\n         x=\"44.879688\"\n         id=\"tspan4654\"\n         sodipodi:role=\"line\">✘</tspan></text>\n    <text\n       id=\"text4660\"\n       y=\"208.65236\"\n       x=\"105.95508\"\n       style=\"font-style:normal;font-weight:normal;font-size:10.58333302px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#ea4335;fill-opacity:1;stroke:none;stroke-width:0.26458332\"\n       xml:space=\"preserve\"><tspan\n         style=\"font-size:123.47222137px;fill:#fbbc04;fill-opacity:1;stroke-width:0.26458332\"\n         y=\"208.65236\"\n         x=\"105.95508\"\n         id=\"tspan4658\"\n         sodipodi:role=\"line\">⇨</tspan></text>\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-weight:normal;font-size:10.58333302px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#ea4335;fill-opacity:1;stroke:none;stroke-width:0.26458332\"\n       x=\"317.62173\"\n       y=\"209.40831\"\n       id=\"text4712\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan4710\"\n         x=\"317.62173\"\n         y=\"209.40831\"\n         style=\"font-size:123.47222137px;fill:#fbbc04;fill-opacity:1;stroke-width:0.26458332\">⇨</tspan></text>\n    <text\n       xml:space=\"preserve\"\n       style=\"font-style:normal;font-weight:normal;font-size:10.58333302px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#ea4335;fill-opacity:1;stroke:none;stroke-width:0.26458332\"\n       x=\"254.87968\"\n       y=\"276.50388\"\n       id=\"text4720\"><tspan\n         sodipodi:role=\"line\"\n         id=\"tspan4718\"\n         x=\"254.87968\"\n         y=\"276.50388\"\n         style=\"font-size:50.79999924px;fill:#ea4335;fill-opacity:1;stroke-width:0.26458332\">✘</tspan></text>\n    <text\n       id=\"text5281\"\n       y=\"276.50388\"\n       x=\"464.8797\"\n       style=\"font-style:normal;font-weight:normal;font-size:10.58333302px;line-height:1.25;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#ea4335;fill-opacity:1;stroke:none;stroke-width:0.26458332\"\n       xml:space=\"preserve\"><tspan\n         style=\"font-size:50.79999924px;fill:#ea4335;fill-opacity:1;stroke-width:0.26458332\"\n         y=\"276.50388\"\n         x=\"464.8797\"\n         id=\"tspan5279\"\n         sodipodi:role=\"line\">✘</tspan></text>\n    <path\n       inkscape:connector-curvature=\"0\"\n       id=\"path5283\"\n       d=\"M 525.66146,80.041636 V 306.82735\"\n       style=\"fill:none;stroke:#000000;stroke-width:1.32291663;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-opacity:1\" />\n  </g>\n</svg>\n<p>\n  Digging is hard work for humans, so we have borrowed the\n  <a href=\"https://blog.golang.org/gopher\">Go gopher</a> from the\n  <a href=\"https://golang.org/\">Google Go</a> team and trained it to help us\n  out by preparing cells. We can <i>deploy</i> the gopher by giving it the\n  coordinates of a <i>target cell</i> in the matrix that is not along any of\n  the borders of the matrix. However, we have not yet perfected the gopher's\n  training, so it will choose a cell uniformly at <a href=\"https://en.wikipedia.org/wiki/Pseudorandom_number_generator\">\n  (pseudo-)random</a> from the 3x3 block of nine cells centered on the target\n  cell, and then prepare the cell it has chosen. (If it chooses a cell that\n  was already prepared, it will uselessly prepare it again.)\n</p>\n<p>\n  We can only deploy the gopher up to 1000 times before it gets too tired to\n  keep digging, so we need your help in figuring out how to deploy it\n  strategically. When you deploy the gopher, you will be told which cell the\n  gopher actually prepared, and you can take this information into account\n  before deploying it again, if needed. Note that you do not have to declare\n  the dimensions or location of a rectangle in advance.\n</p>\n<h3>Input and output </h3>\n<p>\n  This problem is\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq#interactive-problems\">\n  interactive</a>, which means that the concepts of input and output are different\n  than in standard Code Jam problems. You will interact with a separate process\n  that both provides you with information and evaluates your responses.\n  All information comes into your program via standard input; anything that you\n  need to communicate should be sent via standard output.\n  Remember that many programming languages buffer the output by default, so\n  make sure your output actually goes out (for instance, by flushing the\n  buffer) before blocking to wait for a response. See the\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq\" target=\"_blank\">FAQ</a>\n  for an explanation of what it means to flush the buffer.\n  Anything your program sends through standard error is ignored, but it might\n  consume some memory and be counted against your memory limit, so do not\n  overflow it. To help you debug, a local testing tool script (in Python) is\n  provided at the very end of the problem statement. In addition, sample solutions\n  to a previous Code Jam interactive problem (in all of our supported languages) are\n  provided in the analysis for\n  <a href=\"https://codingcompetitions.withgoogle.com/codejam/round/0000000000000130/0000000000000523\" target=\"_blank\">Number Guessing</a>.\n</p><p>\n  Initially, your program should read a single line containing a single integer\n  <b>T</b> indicating the number of test cases. Then, you need to process\n  <b>T</b> test cases.\n</p><p>\n  For each test case, your program will read a single line containing a single\n  integer <b>A</b> indicating the minimum required prepared rectangular area.\n  Then, your program will process up to 1000 exchanges with our judge.\n</p><p>\n  For each exchange, your program needs to use standard output to send a single\n  line containing two integers I and J: the row and column number you want to\n  deploy the gopher to. The two integers must be between 2 and 999, and written\n  in base-10 without leading zeroes. If your output format is wrong (e.g., out\n  of bounds values), your program will fail, and the judge will send you a single\n  line with <code>-1 -1</code> which signals that\n  your test has failed, and it will not send anything to your input stream after\n  that. Otherwise, in response to your deployment, the judge will print a single\n  line containing two integers I&#39; and J&#39; to your input stream, which your\n  program must read through standard input.\n</p><p>\n  If the last deployment caused the set of prepared cells to be a rectangle\n  of area at least <b>A</b>, you will get I&#39; = J&#39; = 0, signaling the end of the\n  test case. Otherwise, I&#39; and J&#39; are the row and column numbers of the cell\n  that was actually prepared by the gopher, with abs(I&#39;-I) &le; 1 and abs(J&#39;-J) &le; 1.\n  Then, you can start another exchange.\n</p><p>\n  If your program gets something wrong (e.g. wrong output format, or\n  out-of-bounds values), as mentioned above, the judge will send I&#39; = J&#39; = -1,\n  and stop sending output to your input stream afterwards. If your program\n  continues to wait for the judge after reading in I&#39; = J&#39; = -1, your program\n  will time out, resulting in a Time Limit Exceeded error. Notice that it is\n  your responsibility to have your program exit in time to receive the\n  appropriate verdict (Wrong Answer, Runtime Error, etc.) instead of a Time\n  Limit Exceeded error. As usual, if the total time or memory is exceeded, or\n  your program gets a runtime error, you will receive the appropriate verdict.\n</p><p>\n  If the test case is solved within 1000 deployments, you will receive the\n  I&#39; = J&#39; = 0 message from the judge, as mentioned above, and then continue to\n  solve the next test case. After 1000 exchanges, if the test case is not\n  solved, the judge will send the I&#39; = J&#39; = -1 message, and stop sending output\n  to your input stream after.\n</p><p>\n  You should not send additional information to the judge after solving all test\n  cases. In other words, if your program keeps printing to standard output after\n  receiving I&#39; = J&#39; = 0 message from the judge for the last test case, you will\n  receive a Wrong Answer judgment.\n</p><p>\n  Please be advised that for a given test case, the cells that the gopher will pick\n  from each 3x3 block are (pseudo-)random and independent of each other, but\n  they are determined using the same seed each time for the same test case,\n  so a solution that gives an incorrect result for a test case will do so\n  consistently across all attempts for the same test case. We have also set\n  different seeds for different test cases.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 20.<br/>\n  Memory limit: 1 GB.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  <b>A</b> = 20.<br/>\n  Time limit (for the entire test set): 20 seconds.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  <b>A</b> = 200.<br/>\n  Time limit (for the entire test set): 60 seconds.<br/>\n</p>\n\n<h3>Sample interaction</h3>\n<pre>\n  t = readline_int()         // reads 2 into t\n  a = readline_int()         // reads 3 into a\n  printline 10 10 to stdout  // sends out cell 10 10 to prepare\n  flush stdout\n  x, y = readline_two_int()  // reads 10 11, since cell 10 11 is prepared\n  printline 10 10 to stdout  // sends out cell 10 10 again to prepare\n  flush stdout\n  x, y = readline_two_int()  // reads 10 10, since cell 10 10 is prepared\n  printline 10 12 to stdout  // sends out cell 10 12 to prepare\n  flush stdout\n  x, y = readline_two_int()  // reads 10 11, since cell 10 11 is prepared again\n  printline 10 10 to stdout  // sends out cell 10 10 to prepare\n  flush stdout\n  x, y = readline_two_int()  // reads 11 10, since cell 11 10 is prepared\n  printline 11 10 to stdout  // sends out cell 11 10 to prepare\n  flush stdout\n  x, y = readline_two_int()  // reads 0 0; since cell 11 11 is prepared, a rectangle of size 4\n</pre>\n<p>\n  The pseudocode above is the first half of a sample interaction for one test set.\n  Suppose there are only two test cases in this test set. The pseudocode first reads\n  the number of test cases into an integer <code>t</code>. Then the first test case begins.\n  For the first test case, suppose <b>A</b> is 3 (although, in the real test sets,\n  <b>A</b> is always either 20 or 200). The pseudocode first reads the value of <b>A</b>\n  into an integer <code>a</code>, and outputs <code>10 10</code> the location of\n  the cell to prepare. By (pseudo-)random choice, the cell at location 10 11 is\n  prepared, so the code reads <code>10 11</code> in response. Next, the code\n  outputs cell <code>10 10</code> again for preparation, and the gopher prepares\n  <code>10 10</code> this time. The code subsequently sends <code>10 12</code> with\n  the goal of finishing preparing a rectangle of size 3, but only gets cell\n  <code>10 11</code> prepared again. <code>10 10</code> is then sent out, and this time\n  <code>11 10</code> is prepared. Notice that although the prepared area is of size 3,\n  a rectangle has not been formed, so the preparation goes on. In the end, the pseudocode\n  decides to try out cell <code>11 10</code>, and <code>0 0</code> is sent back, which\n  implies that cell 11 11 has been prepared, completing a rectangle (or square, rather)\n  or size 4. As a result, the first test case is successfully solved.\n</p>\n<pre>\n  a = readline_int()         // reads 3 into a\n  printline 10 10 to stdout  // sends out cell 10 10 to prepare\n  x, y = readline_two_int()  // does not flush stdout; hangs on the judge\n</pre>\n<p>\n  Now the pseudocode is ready for the second test case. It again first reads an integer\n  <code>a = 3</code> and decides to send cell <code>10 10</code> to prepare.\n  However, this time, the code forgets to\n    flush the stdout buffer! As a result, 10 10 is buffered and not sent to the judge.\n  Both the judge and the code wait on each other, leading to a deadlock and eventually a\n  Time Limit Exceeded error.\n</p>\n<pre>\n  a = readline_int()         // reads 3 into a\n  printline 1 1 to stdout    // sends out cell 1 1 to prepare\n  x, y = readline_two_int()  // reads -1 -1, since 1 is outside the range [2, 999]\n  printline 10 10 to stdout  // sends a cell location anyway\n  x, y = readline_two_int()  // hangs since the judge stops sending info to stdin\n</pre>\n<p>\n  The code above is another example. Suppose for the second test case, the code\n  remembers to flush the output buffer, but sends out cell <code>1 1</code> to prepare.\n  Remember that the row and column of the chosen cell must both be in the range\n  [2, 999], so 1 1 is illegal! As a result, the judge sends back <code>-1 -1</code>.\n  However, after reading <code>-1 -1</code> into x and y, the code proceeds to\n  send another cell location to the judge, and wait. Since there is nothing in\n  the input stream (the judge has stopped sending info), the code hangs and will\n  eventually receive a Time Limit Exceeded error.\n</p>\n<p>\n  Note that if the code in the example above exits immediately after reading\n  <code>-1 -1</code>, it will receive a Wrong Answer instead:\n</p>\n<pre>\n  a = readline_int()         // reads 3 into a\n  printline 1 1 to stdout    // sends out cell 1 1 to prepare\n  x, y = readline_two_int()  // reads -1 -1, since 1 is outside the range [2, 999]\n  exit                       // receives a Wrong Answer judgment\n</pre>\n\n\n<h3>Local Testing Tool</h3>\n<p>\n  To better facilitate local testing, we provide you the following script.\n  Instructions are included inside. You are encouraged to add more test cases\n  for better testing. Please be advised that although the testing tool is\n  intended to simulate the judging system, it is <b>NOT</b> the real judging\n  system and might behave differently.\n</p><p>\n  If your code passes the testing tool but fails the real judge, please check\n  the <a href=\"https://codingcompetitions.withgoogle.com/codejam/faq#coding\">\n  Coding section</a> of our FAQ to make sure that you are using the same\n  compiler as us.\n</p><p>\n<a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U05SPAdbdBHzdSGILURf5iP6jkCDuYyPDT-zlZlEge4xWwmuw5N0IVxl62GzqN3qZo4mTXUofCkjMnwPFI/local_testing_tool.py?dl=1\" download=\"local_testing_tool.py\">Download local testing tool</a>\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":20}],"title":"Go, Gopher!","trial_input_type":2,"trial_input_type__str":"JUDGE_CODE"}],"ticket":{"challenge_id":"00000000000000cb","type":1,"type__str":"SPECTATOR"},"title":"Qualification Round 2018"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
