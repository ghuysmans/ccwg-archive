{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1571502600000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000050e02","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\n  Thank you for participating in Kick Start 2019 Round G.\n</p>\n<p>\n</p>\n<hr>\n<p>\n<b>Cast</b>\n</p><p>\n  Book Reading: Written and prepared by Jonathan Irvin Gunawan.\n</p><p>\n  The Equation: Written by Zhang Chen and prepared by Jonathan Irvin Gunawan.\n</p><p>\n  Shifts: Written by Himanshu Jaju and prepared by Raihat Zaman Neloy.\n</p><p>\n  Solutions, other problem preparation, reviews and contest monitoring by\n  Bartosz Kostka,\n  Himanshu Jaju,\n  Hsin-Yi Wang,\n  Jonathan Irvin Gunawan,\n  Kevin Tran,\n  Lalit Kundu,\n  Raihat Zaman Neloy,\n  Yang Xiao, and\n  Zhang Chen.\n</p>\n<p>\nAnalysis authors:\n</p>\n<ul>\n  <li>Book Reading: Jonathan Irvin Gunawan</li>\n  <li>The Equation: Reyno Tilikaynen</li>\n  <li>Shifts: Sadia Atique</li>\n</ul>\n","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1571491800000,"tasks":[{"analysis":"<h3>Test set 1</h3>\n<p>\n  We can solve this test set by naively computing the number of pages that each lazy readers will\n  read. We can do this by initially having an array <code>torn</code> of <b>N</b> booleans, where\n  <code>torn[x]</code> is true if and only if page x is torn out, and then for each lazy reader i,\n  we can iterate from 1 to <b>N</b>, incrementing our answer only if the value that we iterate is a\n  multiple of <b>R<sub>i</sub></b> and not torn out.\n</p><p>\n  The running time of this solution is O(<b>N</b> &times; <b>Q</b>).\n</p>\n<h3>Test set 2</h3>\n<p>\n  Let f(x) be the number of pages that are multiples of x and not torn out. To compute f(x), we can\n  only check whether the pages x, 2x, 3x, ..., floor(<b>N</b>/x)x are torn out. Therefore, we can do\n  this in <b>N</b>/x time.\n</p><p>\n  This means that we can compute f(1), f(2), ..., f(<b>N</b>) in a total of\n  <b>N</b>(1/1 + 1/2 + ... + 1/<b>N</b>) time. 1/1 + 1/2 + ... + 1/<b>N</b> is approximately\n  O(log <b>N</b>) (since the n-th <a href=\"https://en.wikipedia.org/wiki/Harmonic_number\">harmonic\n  number</a> is approximately O(log <b>N</b>)), so in total f(1), f(2), ..., f(<b>N</b>) can be\n  computed in a total of O(<b>N</b> log <b>N</b>) time.\n</p><p>\n  After precomputing f(x), we can easily count the number of pages that each lazy readers will read\n  in O(1). The running time of this solution is O(<b>N</b> log <b>N</b> + <b>Q</b>).\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0vuYI1lCbN8H98P-zBUaBsSqcjFdoQdFDQw-FfZVvJL8BLB4WMFScN1oLU_N9fK2KNRjYkKA/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000018fd0d","statement":"<h3>Problem</h3>\n<p>\n  Supervin is a librarian handling an ancient book with <b>N</b> pages, numbered from 1 to <b>N</b>.\n  Since the book is too old, unfortunately <b>M</b> pages are torn out: page number\n  <b>P<sub>1</sub></b>, <b>P<sub>2</sub></b>, ..., <b>P<sub>M</sub></b>.\n</p><p>\n  Today, there are <b>Q</b> lazy readers who are interested in reading the ancient book.\n  Since they are lazy, each reader will not necessarily read all the pages.\n  Instead, the i-th reader will only read the pages that are numbered multiples of\n  <b>R<sub>i</sub></b> and not torn out.\n  Supervin would like to know the sum of the number of pages read by each reader.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>.\n  <b>T</b> test cases follow.\n  Each test case begins with a line containing the three integers <b>N</b>, <b>M</b>, and <b>Q</b>,\n  the number of pages in the book, the number of torn out pages in the book, and the number of\n  readers, respectively.\n  The second line contains <b>M</b> integers, the i-th of which is <b>P<sub>i</sub></b>.\n  The third line contains <b>Q</b> integers, the i-th of which is <b>R<sub>i</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is the total number of pages that will\n  be read by all readers.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 40 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>P<sub>1</sub></b> &lt; <b>P<sub>2</sub></b> &lt; ... &lt; <b>P<sub>M</sub></b> &le; <b>N</b>.<br/>\n  1 &le; <b>R<sub>i</sub></b> &le; <b>N</b>, for all i.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  1 &le; <b>M</b> &le; <b>N</b> &le; 1000.<br/>\n  1 &le; <b>Q</b> &le; 1000.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  1 &le; <b>M</b> &le; <b>N</b> &le; 10<sup>5</sup>.<br/>\n  1 &le; <b>Q</b> &le; 10<sup>5</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Eld_5TtTA1RS203jZu8g12oo84bDofOp4N6LS90SxfNdve7kI_VNdkmHi2zQptHLyNF_8hvjJFzXZ34bQmZzhJ0qAeM2HLQYz/book_reading_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\n11 1 2\n8\n2 3\n11 11 11\n1 2 3 4 5 6 7 8 9 10 11\n1 2 3 4 5 6 7 8 9 10 11\n1000 6 1\n4 8 15 16 23 42\n1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3kQfFPw62WwIREF3i47e6rNiK6YBd2kSQJjv2RISm8SPXGYTFm23IqtcN79y2Ac-4jHiNfd-yEJO4z2MDD9ORWJASIbVcl2y_vRw/book_reading_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 7\nCase #2: 0\nCase #3: 994\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In sample case #1, the first reader will read the pages numbered 2, 4, 6, and 10.\n  Note that the page numbered 8 will not be read since it is torn out.\n  The second reader will read the pages numbered 3, 6, and 9.\n  Therefore, the total number of pages that will be read by all readers is 4 + 3 = 7.\n</p><p>\n  In sample case #2, all pages are torn out so all readers will read 0 pages.\n</p><p>\n  In sample case #3, the first reader will read all the pages other than the six given pages.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":10},{"type":2,"type__str":"HIDDEN","value":15}],"title":"Book Reading","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test set 1 (Visible)</h3>\n<p>\n  For each shift, we have three choices,\n</p>\n<ol>\n  <li>\n    Aninda alone guards the shift\n  </li>\n  <li>\n    Boon-Nam alone guards the shift\n  </li>\n  <li>\n    Both of them guard the shift\n  </li>\n</ol>\n<p>\n  We can go through all possible choices for all shifts, and check for how many combinations both of their happiness score is at least <b>H</b>.\n  There are total 3<sup><b>N</b></sup> such combinations possible, enumerating through all of them fits the time limit for test set 1.\n</p>\n\n<h3>Test set 2 (Hidden)</h3>\n<p>\n  For test set 2, we can divide the shifts into 2 sets, each having the size of at most ceil(<b>N</b>/2).\n  We can divide them into two sets, because the choices for each shift are independent of each other.\n  For each set, we can enumerate every possible combination, and compute happiness score for both of the guards for each combination, which gives us a list of happiness score pairs\n  for those two sets. Then for each happiness score pair (h<sub>1</sub>, h<sub>2</sub>) of the combinations of set 1, we need to count the number of happiness score pairs (p<sub>1</sub>, p<sub>2</sub>) of the combinations of set 2, such that\n  p<sub>1</sub>+h<sub>1</sub> &ge; <b>H</b> and p<sub>2</sub>+h<sub>2</sub> &ge; <b>H</b>, which can be converted to p<sub>1</sub> &ge; <b>H</b>-h<sub>1</sub> and p<sub>2</sub> &ge; <b>H</b>-h<sub>2</sub>.\n</p>\n<p>\n  Essentially, we can follow these steps below to find the answer.\n</p>\n<ol>\n  <li>Store the happiness score pairs of combinations of both set 1 and set 2 in two arrays, let's call them A<sub>1</sub> and A<sub>2</sub>.</li>\n  <li>Sort both A<sub>1</sub> and A<sub>2</sub>, by the first value in the pair in decreasing order, then by the second value of the pair in decreasing order.</li>\n  <li>Iterate through A<sub>1</sub>. For each pair (h<sub>1</sub>, h<sub>2</sub>) in A<sub>1</sub>, do the following:</li>\n  <ul>\n    <li>Find the pairs (p<sub>1</sub>, p<sub>2</sub>) in A<sub>2</sub> where p<sub>1</sub> is not less <b>H</b> - h<sub>1</sub>.</li>\n    <li>For each of the pair (p<sub>1</sub>, p<sub>2</sub>) found, add p<sub>2</sub> to a data structure.</li>\n    <li>Find the number of elements not less than <b>H</b> - h<sub>2</sub> in the data structure, add that to answer.</li>\n  </ul>\n</ol>\n<p>\n<p>\n  For this approach, we need a data structure that supports these two operations:\n</p>\n<ol>\n  <li>Insert a number in the data structure</li>\n  <li>Count number of elements in the data structure not less than a given integer</li>\n</ol>\n<p>\n  These two operations can be done in O(log<sub>2</sub>(X)) time using <a href = \"https://en.wikipedia.org/wiki/Range_tree\">range tree</a>,\n  where X is the number of elements in the data structure. Here upper bound of X is 3<sup>(<b>N</b>/2)</sup>.\n  The total complexity of this approach will be\n  O(3<sup>(<b>N</b>/2)</sup> &times; log<sub>2</sub>(3<sup>(<b>N</b>/2)</sup>)) ~ O(3<sup>(<b>N</b>/2)</sup> &times; <b>N</b>) which is sufficient for test set 2.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3USiXurfzL4m--CjTzF--sOEU4AQLKV7dW8h6_aFrq999YbG0asGqtmFdAMjsC71EAXWafQA/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000018fd5e","statement":"<h3>Problem</h3>\n<p>\n  Aninda and Boon-Nam are security guards at a small art museum.\n  Their job consists of <b>N</b> shifts.\n  During each shift, at least one of the two guards must work.\n</p><p>\n  The two guards have different preferences for each shift.\n  For the i-th shift,\n  Aninda will gain <b>A<sub>i</sub></b> happiness points if he works,\n  while Boon-Nam will gain <b>B<sub>i</sub></b> happiness points if she works.\n</p><p>\n  The two guards will be happy if both of them receive at least <b>H</b> happiness points.\n  How many different assignments of shifts are there where the guards will be happy?\n</p><p>\n  Two assignments are considered different if\n  there is a shift where Aninda works   in one assignment but not in the other, or\n  there is a shift where Boon-Nam works in one assignment but not in the other.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the two integers <b>N</b> and <b>H</b>, the number of shifts and the minimum happiness points required, respectively.\n  The second line contains <b>N</b> integers. The i-th of these integers is <b>A<sub>i</sub></b>, the amount of happiness points Aninda   gets if he works during the i-th shift.\n  The third  line contains <b>N</b> integers. The i-th of these integers is <b>B<sub>i</sub></b>, the amount of happiness points Boon-Nam gets if she works during the i-th shift.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the number of different assignments of shifts where the guards will be happy.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 40 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n  0 &le; <b>H</b> &le; 10<sup>9</sup>.<br/>\n  0 &le; <b>A<sub>i</sub></b> &le; 10<sup>9</sup>.<br/>\n  0 &le; <b>B<sub>i</sub></b> &le; 10<sup>9</sup>.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  1 &le; <b>N</b> &le; 12.<br/>\n</p>\n\n<h4>Test set 2 (Hidden)</h4>\n<p>\n  1 &le; <b>N</b> &le; 20.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3SetPSpabhMFXI3bO7whMJ1HGJU-nAtU1l_e2AOyvZwhLzcKCrPd8fab20ubc-lodJ8hVOEQiy83t9D0aFGPxSPZBX/shifts_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n2 3\n1 2\n3 3\n2 5\n2 2\n10 30\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0vxGnIroBYS5HoZNaszZTxYOk8mYRaoRCvj9pYbiiZx2ewElAKGi8ptROFaMpYiX7Lhp_JZrs6_vJS4D-CHfvFZLxC1w/shifts_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n</sampleio>\n\n<p>\n  In Sample Case #1, there are <b>N</b> = 2 shifts and <b>H</b> = 3. There are three possible ways\n  for both Aninda and Boon-Nam to be happy:\n  <ul>\n    <li>Only Aninda works on the first shift, while both Aninda and Boon-Nam work on the second shift.</li>\n    <li>Aninda and Boon-Nam work on the first shift, while only Aninda works on the second shift.</li>\n    <li>Both security guards work on both shifts.</li>\n  </ul>\n</p><p>\n  In Sample Case #2, there are <b>N</b> = 2 shifts and <b>H</b> = 5. It is impossible for both Aninda and\n  Boon-Nam to be happy, so the answer is 0.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":20},{"type":2,"type__str":"HIDDEN","value":23}],"title":"Shifts","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\n  Test set 1 (Visible)\n</h3>\n<p>\n  For the first test set, notice that the maximum value of <b>k</b> is 127. This is because each\n  <b>A<sub>i</sub></b> is at most 100, so the leading digit of <b>A<sub>i</sub></b> is at most\n  2<sup>6</sup> = 64. If <b>k</b> &ge; 128, then the leading digit of <b>k</b> is at least\n  2<sup>7</sup> = 128, meaning that (<b>A<sub>i</sub></b> xor k) &ge; 128 &gt; <b>M</b>.\n</p>\n<p>\n  Hence, we can compute the answer by checking each value of <b>k</b> less than 128 and finding the\n  largest one which produces a sum less than <b>M</b>.\n</p>\n\n<h3>\n  Test set 2 (Hidden)\n</h3>\n<p>\n  For the second test set, the reasoning above tells us that <b>k</b> &lt; 2<sup>50</sup>, which is\n  too big for us to check every value.\n</p>\n<p>\n  Instead, notice that each bit of <b>k</b> only affects a single bit of each <b>A<sub>i</sub></b>.\n  We can use this property to compute each bit of <b>k</b> separately.\n</p>\n<p>\n  For each 1 &le; <i>i</i> &le; 50, define <i>ones(i)</i> to be the number of rules\n  <b>A<sub>i</sub></b> with the <i>i</i>-th bit (numbered starting from the least significant bit)\n  equal to 1. Likewise, define <i>zeroes(i)</i> to be the number of rules with the <i>i</i>-th\n  bit equal to 0. Then we can re-write the sum:\n</p>\n<p>\n  &Sigma;<sub>1 &le; j &le; <b>N</b></sub> <b>A<sub>j</sub></b> xor <b>k</b>\n</p>\n<p>\n  as:\n</p>\n<p>\n  &Sigma;<sub><i>i</i> : <i>i</i>-th bit of <b>k</b> is 1</sub>\n      2<sup><i>i</i></sup>&times;<i>zeroes(i)</i> +\n  &Sigma;<sub><i>i</i> : <i>i</i>-th bit of <b>k</b> is 0</sub>\n      2<sup><i>i</i></sup>&times;<i>ones(i)</i>\n</p>\n<p>\n  Note that we can minimize this sum by choosing the <i>i</i>-th bit of <b>k</b> to be 1 if\n  <i>ones(i)</i> &ge; <i>zeroes(i)</i>, or 0 otherwise. Define <i>f(j)</i> to be the minimum value\n  of the above sum over all bits <i>i</i> &le; <i>j</i>. We can use <i>f(j)</i> to determine if a\n  feasible value of <b>k</b> exists for the lowest <i>j</i> bits, which lets us solve this problem\n  greedily.\n\n  The greedy solution is as follows: starting from the most significant bit <i>i</i>, check if we\n  can set it to be one (by adding cost of setting this bit to one and <i>f(i-1)</i>). If this value\n  is less than or equal to <b>m</b>, there exists a feasible <b>k</b> with the <i>i</i>-th bit set\n  to one. Since we want to set to maximize <b>k</b>, it is optimal for us to set this bit to 1.\n  Otherwise, if the sum is larger than <b>m</b>, set the bit to zero. Then iterate by decreasing\n  <b>m</b> by the cost at the current bit and checking the next most significant bit (<i>i</i>-1).\n  In this way, we are able to find the largest feasible <b>k</b>.\n\n  If <i>f(i)</i> is precomputed, the runtime of this algorithm is\n  O(<b>N</b>log(max(<b>A<sub>i</sub></b>))).\n</p>\n<p>\n  Note that since <b>A<sub>i</sub></b> &le; 10<sup>15</sup> and <b>N</b> &le; 1000, the maximum sum\n  is a little more than 10<sup>18</sup>, so using 64-bit integers is sufficient for this problem.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3Hku9xkJmzEcS6d2z6Z1Nzmv7UiveSItPYpHncc77Mi8DMUuctNgSp5xoC3EgpfclPxxIVLw/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"000000000018fe36","statement":"<h3>Problem</h3>\n<p>\n  The laws of the universe can be represented by an array of <b>N</b> non-negative integers. The i-th of these integers is <b>A<sub>i</sub></b>.\n</p><p>\n  The universe is <i>good</i> if there is a non-negative integer k such that the following equation is satisfied:\n  (<b>A<sub>1</sub></b> xor k) +\n  (<b>A<sub>2</sub></b> xor k) + ...\n  (<b>A<sub><b>N</b></sub></b> xor k) &le; <b>M</b>,\n  where xor denotes the <a href=\"https://en.wikipedia.org/wiki/Bitwise_operation#XOR\">bitwise exclusive or</a>.\n</p><p>\n  What is the largest value of k for which the universe is good?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the two integers <b>N</b> and <b>M</b>, the number of\n  integers in <b>A</b> and the limit on the equation, respectively.\n</p><p>\n  The second line contains <b>N</b> integers, the i-th of which is <b>A<sub>i</sub></b>, the i-th\n  integer in the array.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the largest value of k for which the universe is good, or <code>-1</code> if there is no such k.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 15 seconds per test set.<br/>\n  Memory limit: 1GB.<br/>\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>N</b> &le; 1000.<br/>\n</p>\n\n<h4>Test set 1 (Visible)</h4>\n<p>\n  0 &le; <b>M</b> &le; 100.<br/>\n  0 &le; <b>A<sub>i</sub></b> &le; 100, for all i.\n</p>\n\n<h4>Test set 2 (Hidden)</h4\n<p>\n  0 &le; <b>M</b> &le; 10<sup>15</sup>.<br/>\n  0 &le; <b>A<sub>i</sub></b> &le; 10<sup>15</sup>, for all i.\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1SkGbPLVXIWQzfyX95dJxgwdjQ4m4qgiqtfR1_-2hUHoSvfSq89AyZn2qDxroHPiG805g97UZZAMnayUj1qtLMPvsVHohAkXOh/the_equation_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n3 27\n8 2 4\n4 45\n30 0 4 11\n1 0\n100\n6 2\n5 5 1 5 1 0\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3yq7GAnJHapmpcr5_b-1doaEUr546A8rtHA2SaIxo53ZN79i2eqwwnzMjhXlXZMslhiaAYjX21hBgwqktPayVMXfk98H56qKeSEQ/the_equation_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 12\nCase #2: 14\nCase #3: 100\nCase #4: -1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n</sampleio>\n\n<p>\n  In sample case #1, the array contains <b>N</b> = 3 integers and <b>M</b> = 27.\n  The largest possible value of k that gives a good universe is 12\n  ((8 xor 12) + (2 xor 12) + (4 xor 12) = 26).\n</p><p>\n  In sample case #2, the array contains <b>N</b> = 4 integers and <b>M</b> = 45.\n  The largest possible value of k that gives a good universe is 14\n  ((30 xor 14) + (0 xor 14) + (4 xor 14) + (11 xor 14) = 45).\n</p><p>\n  In sample case #3, the array contains <b>N</b> = 1 integer and <b>M</b> = 0.\n  The largest possible value of k that gives a good universe is 100\n  (100 xor 100 = 0).\n</p><p>\n  In sample case #4, there is no value of k that gives a good universe, so the answer is -1.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":12},{"type":2,"type__str":"HIDDEN","value":20}],"title":"The Equation","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000050e02","type":1,"type__str":"SPECTATOR"},"title":"Round G 2019"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
