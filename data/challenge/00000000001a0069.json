{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1603033200000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"00000000001a0069","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\r\n  Thank you for participating in Kick Start 2020 Round G.\r\n</p>\r\n<p>\r\n</p>\r\n<hr>\r\n<p>\r\n<b>Cast</b>\r\n</p><p>\r\n  Kick_Start: Written by Changyu Zhu and prepared by Sherry Wu.\r\n</p><p>\r\n  Maximum Coins: Written by Swapnil Gupta and prepared by Anson Ho.\r\n</p><p>\r\n  Combination Lock: Written by Pablo Heiber and prepared by Swapnil Gupta.\r\n</p><p>\r\n  Merge Cards: Written by Yossi Matsumoto and prepared by Nikhil Hassija.\r\n</p><p>\r\n  Solutions, other problem preparation, reviews and contest monitoring by\r\n  Akul Siddalingaswamy,\r\n  Anson Ho,\r\n  Anushi Maheshwari,\r\n  Bartosz Kostka,\r\n  Bohdan Pryshchenko,\r\n  Cristhian Bonilha,\r\n  Devanshu Agarwal,\r\n  Diksha Saxena,\r\n  Gagan Madan,\r\n  Jared Gillespie,\r\n  Jayant Sharma,\r\n  Jie Zhou,\r\n  Kevin Tran,\r\n  Krists Boitmanis,\r\n  Lalit Kundu,\r\n  Lizzie Sapiro,\r\n  Marcin Wawerka,\r\n  Nikhil Hassija,\r\n  Phil Sun,\r\n  Raihat Zaman Neloy,\r\n  Ruoyu Zhang,\r\n  Sadia Atique,\r\n  Sai Surya Upadrasta,\r\n  Seunghyun Jo,\r\n  Sherry Wu,\r\n  Shweta Karwa,\r\n  Swapnil Gupta,\r\n  Teja Vardhan Reddy Dasannagari,\r\n  Tejendra Patel,\r\n  Wajeb Saab,\r\n  Wei Zhou, and\r\n  Yossi Matsumoto.\r\n</p>\r\n<p>\r\nAnalysis authors:\r\n</p>\r\n<ul>\r\n  <li>Kick_Start: Kashish Bansal</li>\r\n  <li>Maximum Coins: Swapnil Gupta</li>\r\n  <li>Combination Lock: Swapnil Gupta</li>\r\n  <li>Merge Cards: Anson Ho</li>\r\n</ul>","registration_gives_participant":true,"result_status":30,"result_status__str":"FINALIZED","start_ms":1603022400000,"tasks":[{"analysis":"<p>\n  Terminology: In what follows, when we refer to a <i>diagonal</i> starting from (x, y), we mean all cells (p, q) such that x - y &equals; p - q.\n  Only cells satisfying these conditions are considered, because Mike can only move diagonally.\n</p>\n\n<h3>\nTest Set 1\n</h3>\n\n<p>\n  Mike is allowed to go from cell (i,j) to cell (i+1,j+1) or to cell (i-1,j-1). We can consider each possible starting point and try calculating the value of each possible path Mike can traverse. Initialize the answer as 0.\n  For each starting cell (i,j), Mike can either go diagonally upwards or diagonally downwards. First consider all the paths which start\n  at cell (i,j) and end diagonally above it. We keep on adding the value of coins by traversing upwards diagonally and updating the answer. Similarly,\n  we consider all paths which start at cell (i,j) and end diagonally below it and update the answer. Each path can contain at most O(<b>N</b>)\n  elements. Thus, it takes O(<b>N</b>) time for each starting position. There can be O(<b>N<sup>2</sup></b>) starting positions. Thus, the overall\n  complexity of the solution is O(<b>N<sup>3</sup></b>).\n</p>\n\n<h5>Sample Code(C++)</h5>\n<pre><code class=\"language-cpp\">\n<var>int</var> GetMaximumCoins(const vector< vector< <var>int</var> > >& coins) {\n  <var>int</var> answer = 0;\n  for(<var>int</var> i = 0; i < coins.size(); i++) {\n    for(<var>int</var> j = 0; j < coins[0].size(); j++) {\n    int currx = i, curry = j, currval = 0;\n    // Go above.\n    while(currx >= 0 and curry >= 0) {\n      currval += coins[currx][curry];\n      answer = max(answer, currval);\n      currx--;\n      curry--;\n    }\n    currx = i;\n    curry = j;\n    currval = 0;\n    // Go below.\n    while(currx < coins.size() and curry < coins[0].size()) {\n      currval += coins[currx][curry];\n      answer = max(answer, currval);\n      currx++;\n      curry++;\n    }\n   }\n  }\n  return answer;\n}\n</code></pre>\n\n<h3>\nTest Set 2\n</h3>\n\n<p>\n  An important observation here is that all the numbers are positive. Thus, it is always optimal to collect the coins for each cell present on a\n  particular diagonal instead of choosing some of the cells on the diagonal. This can be done by starting on the top left of each diagonal and\n  traversing down and adding the coins collected. For each diagonal it would take O(<b>N</b>) time to calculate the coins present in that diagonal.\n  There are O(<b>N</b>) diagonals present in the matrix. Thus, the overall time complexity of the solution is O(<b>N<sup>2</sup></b>).\n</p>\n\n<h5>Sample Code(C++)</h5>\n<pre><code class=\"language-cpp\">\n\n<var>long long int</var> GetDiagonalSum(const vector< vector< <var>int</var> > >& coins, int i, int j) {\n   <var>long long int</var> currval = 0;\n   <var>int</var> currx = i, curry = j;\n   while(currx < coins.size() 0 && curry < coins[0].size()) {\n     currval += coins[currx][curry];\n     currx++;\n     curry++;\n   }\n  return currval;\n}\n\n<var>long long int</var> GetMaximumCoins(const vector< vector< <var>int</var> > >& coins) {\n  <var>long long int</var> answer = 0;\n  // Top row.\n  for(<var>int</var> i = 0; i < coins[0].size(); i++)\n    answer = max(answer, GetDiagonalSum(coins, 0, i));\n  // Left column.\n  for(<var>int</var> i = 0; i < coins.size(); i++)\n    answer = max(answer, GetDiagonalSum(coins, i, 0));\n  return answer;\n}\n</code></pre>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0mJaKGiq6MuACHb8ZxrAWDxmi88YHVik66P3PRfLtIrkV6pwFMtAUDBrQibBNQFJfbRuJGDCU/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000414a23","statement":"<h3>Problem</h3>\n<p>\n  Mike has a square matrix with <b>N</b> rows and <b>N</b> columns. Cell (i,j) denotes the cell present at row i and column j. Cell (1,1) denotes\n  the top left corner of the matrix. Each cell has some amount of coins associated with it and Mike can collect them\n  only if he visits that cell.\n  <b>C<sub>i,j</sub></b> represents the number of coins in cell with row i and column j.\n  From a cell (i,j), Mike can decide to go to cell (i+1,j+1) or cell (i-1,j-1), as long as the cell lies within the boundaries of the matrix and has not been visited yet. He can choose to start the journey from any\n  cell and choose to stop at any point. Mike wants to maximize the number of coins he can collect. Please help him\n  determine the maximum number of coins he can collect.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the integer <b>N</b>. The next <b>N</b> lines contain <b>N</b> integers each.\n  The j-th integer in the i-th line represents the number of coins <b>C<sub>i,j</sub></b> in cell (i,j).\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is the maximum number of coins Mike can collect.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 20 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  0 &le; <b>C<sub>i,j</sub></b> &le; 10<sup>7</sup>.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  1 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  1 &le; <b>N</b> &le; 10<sup>3</sup> in at most 10 cases.<br/>\n  1 &le; <b>N</b> &le; 100 in all other cases.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3ei4Naua5mwi9luviYh-qcZ2VLmnqnnc5e9LLzAly4_AJxQ577qfxXNSSua8QWiiJnsNnv6ZzuJ18MpPogEd2VZGiPwSRxUUvqFQs/maximum_coins_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3\n1 2 5\n3 6 1\n12 2 7\n5\n0 0 0 0 0\n1 1 1 1 0\n2 2 2 8 0\n1 1 1 0 0\n0 0 0 0 0\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3UwY4QL05lz7DcdwF6a5VvZx7wWBKj9CfrF5n9-v4MQcXvo9R1t0WIk56DonKZfSGwdp5DL5XLTwgcA66IdDRdmkYhkT7Y0tzwZK4K/maximum_coins_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 14\nCase #2: 9\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the maximum number of coins collected can be 14, if Mike follows this path: (1,1) -> (2,2) -> (3,3)\n</p>\n  <p>\n  In Sample Case #2, the maximum number of coins collected can be 9, if Mike follows this path: (2,3) -> (3,4).\n  </p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":1,"type__str":"VISIBLE","value":8}],"title":"Maximum Coins","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  We can see that if we decide a final value at which all wheels should be in the end, moves for each wheel\n  to reach that value are independent of the moves performed on other wheels. Thus, we can calculate number of moves for each wheel separately.\n  Consider a wheel i which is at value x currently. We want the wheel to finally reach the value y. There are 2 cases here:\n  <ul>\n    <li>\n      Case 1: x &le; y. Increasing the value of the wheel i would take y-x steps. Decreasing the value\n      of wheel i would take <b>N</b> - y + x steps. Hence, the minimum number of moves in this case would be minimum of y-x and <b>N</b> - y + x.\n    </li>\n    <li>\n      Case 2: x &gt; y. Decreasing the value of the wheel i would take x-y steps. Increasing the value\n      of wheel i would take <b>N</b> + y - x steps. Hence, the minimum number of moves in this case would be minimum of x-y and <b>N</b> + y - x.\n    </li>\n</ul>\n</p>\n\n<h3>\nTest Set 1\n</h3>\n\n<p>\n  We can solve this test set by trying all possible <b>N</b> values that all the wheels should have in the end. For each value, we\n  calculate the total number of moves to get all of the wheels to this value using Case 1 and Case 2. The answer is the minimum possible\n  moves performed over all such X.\n  There are <b>N</b> possible values and for each value, we perform O(<b>W</b>) operations.\n  Thus, the time complexity of the solution would be O(<b>W</b> &times; <b>N</b>).\n</p>\n\n<h3>\nTest Set 2\n</h3>\n\n<p>\n  A major observation is that we could always get the minimum possible moves by finally bringing all the wheels to one of the\n  initial values of the given wheels. We can prove this by considering a value Val which is not among the initial values\n  of wheels and then showing that we can get a same or better answer by moving all the wheels to one of the initial values. Consider the initial\n  values of the wheels in the sorted order. Let the index of the wheel with\n  smallest initial value greater than Val be j, if no such value exists, then we can consider j &equals; 1 as it is first wheel next to value Val in cyclic order.\n  Let the index of wheel with largest initial value smaller than Val be i, if no such value exists, then we can consider i &equals; <b>W</b> as it is the first wheel before value Val in cyclic order. Now to reach the value Val,\n  each value will either reach <b>X<sub>i</sub></b> or <b>X<sub>j</sub></b>. Now say there are y wheels at value <b>X<sub>i</sub></b> currently which\n  leaves us with <b>W</b> - y wheels at value <b>X<sub>j</sub></b>. The number of moves for all wheels to reach value Val would be\n  y &times; (Val - <b>X<sub>i</sub></b>) + (<b>W</b> - y) &times; (<b>X<sub>j</sub></b> - Val). We can get the same or better result than this.\n  There are 2 possibilities:\n  <ul>\n    <li>\n      y &le; <b>W</b> - y. If we choose to bring all the wheels to value <b>X<sub>j</sub></b>, we will have number of moves\n      as y &times; (Val - <b>X<sub>i</sub></b>) + y &times; (<b>X<sub>j</sub></b> - Val), which is never large than the number of moves required for all wheels to\n      reach value Val. Hence, we have a better answer if we bring all the wheels to value <b>X<sub>j</sub></b>.\n    </li>\n    <li>\n      y &ge; <b>W</b> - y. If we choose to bring all the wheels to value <b>X<sub>i</sub></b>, we will have number of moves\n      as (<b>W</b> - y) &times; (Val - <b>X<sub>i</sub></b>) + (<b>W</b> - y) &times; (<b>X<sub>j</sub></b> - Val), which is never large than the number of moves required for\n      all wheels to reach value Val. Hence, we have a better answer if we bring all the wheels to value <b>X<sub>i</sub></b>.\n    </li>\n  </ul>\n</p>\n\n<p>\n  Now instead of trying all possible values from 1 to <b>N</b>, we would try the initial values of the wheels and calculate\n  moves required for all wheels to reach that value. For each value, we take O(<b>W</b>) time to calculate the moves required for all wheels to reach that\n  value. There are <b>W</b> values. Hence the complexity is O(<b>W</b><sup>2</sup>).\n</p>\n\n<h3>\nTest Set 3\n</h3>\n\n<p>\n  We have already proved that we only need to consider one of the initial values of the wheels. We need to calculate the number of moves required for\n  all wheels to reach a particular value efficiently. We can do the following. Sort the initial values of the wheels. Maintain a prefix sum array Pre.\n  Pre[i] denotes the sum of initial values of wheels from 1 to i. We define a method GetSum(i,j) which gives the sum of values between indexes i\n  and j. This can be calulated in O(1) using Pre array.\n</p>\n\n<p>\n  Suppose that currently we are calulating the number of moves required for all wheels\n  to reach <b>X<sub>i</sub></b>. Consider any wheel j from index 1 to i. Minimum number of moves required for wheel j to reach value\n  <b>X<sub>i</sub></b> would be minimum of <b>X<sub>i</sub></b> - <b>X<sub>j</sub></b> and <b>N</b> - <b>X<sub>i</sub></b> + <b>X<sub>j</sub></b>.\n  Consider 2 indexes k and l such that 1 &le; k &lt; l &le; i. We can prove that it is not possible to have\n  <b>X<sub>i</sub></b> - <b>X<sub>k</sub></b> &lt; <b>N</b> - <b>X<sub>i</sub></b> + <b>X<sub>k</sub></b> and\n  <b>N</b> - <b>X<sub>i</sub></b> + <b>X<sub>l</sub></b> &lt; <b>X<sub>i</sub></b> - <b>X<sub>l</sub></b>\n  simultaneously. This is because if we add the two inequalities, we get <b>N</b> - <b>X<sub>k</sub></b> + <b>X<sub>l</sub></b>\n  &lt; <b>N</b> + <b>X<sub>k</sub></b> - <b>X<sub>l</sub></b> which implies\n  <b>X<sub>l</sub></b> &lt; <b>X<sub>k</sub></b>. But it is not possible to have such condition because we know\n  that <b>X<sub>k</sub></b> &le; <b>X<sub>l</sub></b>.\n  Thus, we can say that there exists an index p such that 1 &le; p &le; i and for each wheel q such that p &le; q &le; i\n  will have minimum number of moves as <b>X<sub>i</sub></b> - <b>X<sub>q</sub></b> and for each wheel r such that 1 &le; r &le; p-1\n  will have minimum number of moves as <b>N</b> - <b>X<sub>i</sub></b> + <b>X<sub>r</sub></b>.\n  We can find this index p using binary search on wheels 1 to i. Now we need to find sum of <b>X<sub>i</sub></b> - <b>X<sub>q</sub></b> for each q.\n  This can be calculated in O(1) by (i - p + 1) &times; <b>X<sub>i</sub></b> - GetSum(p,i).\n  Now we need to find sum of <b>N</b> - <b>X<sub>i</sub></b> + <b>X<sub>r</sub></b> for each r. This can be calculated in O(1)\n  by (p-1) &times; (<b>N</b> - <b>X<sub>i</sub></b>) + GetSum(1,p-1). We have calculated number of moves required for wheels 1 to i to reach value <b>X<sub>i</sub></b>.\n</p>\n\n<p>\n  Similarly, we can say that there exists an index b such that i &le; b &le; <b>W</b> and for each wheel c such that i &le; c &le; b\n  will have the minimum number of moves as <b>X<sub>c</sub></b> - <b>X<sub>i</sub></b> and for each wheel d such that b+1 &le; d &le; <b>W</b>\n  will have the minimum number of moves as <b>N</b> - <b>X<sub>d</sub></b> + <b>X<sub>i</sub></b>.\n  We can find this index b by using binary search on wheels 1 to <b>W</b>. Now we need to find sum of <b>X<sub>c</sub></b> - <b>X<sub>i</sub></b> for each c.\n  This can be calculated in O(1) by GetSum(i+1,c) - (c-i) &times; <b>X<sub>i</sub></b>.\n  Now we need to find sum of <b>N</b> - <b>X<sub>d</sub></b> + <b>X<sub>i</sub></b> for each d. This can be calculated in O(1)\n  by (<b>W</b> - b) &times; (<b>N</b> + <b>X<sub>i</sub></b>) - GetSum(b+1,<b>W</b>).\n</p>\n\n<p>\n   We have calculated the number of moves required for all wheels to reach a particular value in O(log <b>W</b>). Now we need to take the minimum over all such values. Thus we can calculate moves for all the initial values\n  of all wheels in O(<b>W</b> &times; log <b>W</b>) time complexity. Note that instead of using binary search to find indexes p and b, we can\n  use two pointers approach to find them. We can prove that indexes p and b will keep on increasing as we increment i. The overall complexity\n  of the solution remains same due to the sorting part.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U15OlqfQU2ZBJ_qQVwCGgbZN3M__2fsaCvVLT9pRAPXQpMPWhrmgAmlX21h_SZLZ_yyJqSPTsQ/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000414a24","statement":"<h3>Problem</h3>\n<p>\n  A combination lock has <b>W</b> wheels, each of which has the integer values 1 through <b>N</b>\n  on it, in ascending order.\n</p>\n<p>\n  At any moment, each wheel shows a specific value on it.\n  <b>X<sub>i</sub></b> is the initial value shown on the i-th wheel.\n</p>\n<p>\n  You can use a single move to change a wheel from showing the value X\n  to showing either X+1 or X-1, wrapping around between 1 and <b>N</b>.\n  For example, if a wheel currently shows the value 1, in one move\n  you can change its value to 2 or <b>N</b>.\n</p>\n<p>\n  Given all wheels' initial values, what is the minimum number of moves to get all wheels\n  to show the same value?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n</p>\n<p>\n  The first line of each test case contains the two integers <b>W</b> and <b>N</b>.\n</p>\n<p>\n  The second line contains <b>W</b> integers.\n  The i-th integer is <b>X<sub>i</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>,\n  where <code>x</code> is the test case number (starting from 1)\n  and <code>y</code> is the minimum number of moves to get all wheels to show the same value.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 40 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  1 &le; <b>T</b> &le; 100.<br/>\n  1 &le; <b>X<sub>i</sub></b> &le; <b>N</b>.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  1 &le; <b>W</b> &le; 1000.<br/>\n  2 &le; <b>N</b> &le; 1000.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n  1 &le; <b>W</b> &le; 1000.<br/>\n  2 &le; <b>N</b> &le; 10<sup>9</sup>.<br/>\n</p>\n\n<h4>Test Set 3</h4>\n<p>\n\n  1 &le; <b>W</b> &le; 10<sup>5</sup>.<br/>\n  2 &le; <b>N</b> &le; 10<sup>9</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2BRGKLkyqdCzsVGUscZTKVd9eKW1ATIHyj7q3AP_Ar-TUqzWIuoglTYXfr_TA1wzCWklNhkBcA7AXnfplozjoMrpHROQLWSfFRTrUuAks/combination_lock_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3 5\n2 3 4\n4 10\n2 9 3 8\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U25_KMjp5c4V98-NRI4aEpNfvhQLTtwnGk-2SaIK91NRWT96Ypp4j091OWGnb1DDsUbArU09QQvZyteJY8N9VuVS3wJX9W4cHWXZQ0wy6fD/combination_lock_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 2\nCase #2: 8</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the best solution is to get all wheels to show value 3, which would take a\n  total of 2 moves:\n  the first wheel would move once (from value 2 to value 3),\n  the second wheel would not move (it already shows value 3),\n  and the third wheel would move once (from value 4 to value 3).\n</p>\n<p>\n  For reference, it would take 5 moves to get all wheels to show value 1,\n  3 moves to get all wheels to show value 2,\n  3 moves to get all wheels to show value 4,\n  and 5 moves to get all wheels to show value 5.\n</p>\n<p>\n  In Sample Case #2, the best solutions are to get all wheels to show either value 1, 2, 9 or 10,\n  which would take a total of 8 moves.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":8},{"type":1,"type__str":"VISIBLE","value":12},{"type":1,"type__str":"VISIBLE","value":17}],"title":"Combination Lock","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\n  The given problem statement can be rephrased as counting the number of substrings (fragments) which\n  begin with string 'KICK' and end with string 'START'. Another thing to note is that a substring starting\n  with 'KICK' can form multiple lucky fragments ending at different 'START'. For example, consider the\n  string 'KICKSTARTSTART'. This string contains two lucky fragments, first being 'KICKSTART' and\n  second being 'KICKSTARTSTART'.\n</p>\n<h3>Test Set 1</h3>\n<p>\n  For a substring to be considered as a lucky fragment, we can check if it starts with 'KICK' and\n  ends with 'START'. For every substring from i-th to j-th index, where 0 &le; i &lt; j &lt; <b>N</b>,\n  we can check if the substring begins with 'KICK' by comparing whether i-th index is equal to\n  'K', (i+1)-th index is equal to 'I', ... , (i+3)-th index is equal to 'K'. Similarly we can check\n  if the substring ends with 'START' by comparing whether (j-4)-th index is equal to 'S',\n  (j-3)-th index is equal to 'T', ... , j-th index is equal to 'T'. Note that we only check the\n  characters if the indices are within the bounds of the substring. Hence, it takes constant number\n  of operations to check whether a substring is lucky fragment or not. In total, we have\n  O(<b>N</b><sup>2</sup>) substrings to check. Therefore, total time complexity for the approach is\n  O(<b>N</b><sup>2</sup>).\n</p>\n<p>\n  Another solution could be to use two loops iterating over the string. Outer loop is used\n  to scan the string for 'KICK'. Whenever 'KICK' is encountered, we use the inner loop to scan the\n  remaining string i.e. substring to the right of 'KICK' to count the occurrences of string 'START'.\n  We repeat this for every 'KICK' encountered using the outer loop and keep summing up the count\n  of occurrences of string 'START' to get the total number of lucky fragments. Rationale is that\n  every 'START' encountered can be paired up with the 'KICK' found using outer loop to create a\n  lucky fragment for Ksenia.<br>\n  As we iterate over the string using two loops, the overall time complexity for this solution\n  is O(<b>N</b><sup>2</sup>).\n</p>\n<h3>Test Set 2</h3>\n<p>\n  We take a single pass over the string. During this pass, we perform following two checks:\n  <ul>\n    <li>\n      If we encounter string 'KICK', we increase a counter, let it be X.\n    </li>\n    <li>\n      If we encounter string 'START', we add the number of 'KICK' encountered till now to the final\n      answer, in other words add the current value of X to the final answer.\n    </li>\n  </ul>\n</p>\n<p>\n  Rationale is that every 'START' we encounter can be paired up with any 'KICK' encountered before to\n  create a lucky fragment.<br>\n  Time complexity is O(<b>N</b>) for the solution as we take a single pass over the string.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3pHj90P_maTj45QrZ1bUg3GXI58b8JjgwS2chp6kmR33ggk49DEEXuFXdokx7Rcpz1O94xWNg/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000414bfb","statement":"<h3>Problem</h3>\n<p>\n  Ksenia is very fond of reading so she kicks off each day by reading a fragment from her favourite\n  book before starting with the rest of her morning routine. A fragment is simply a\n  <a href=\"https://en.wikipedia.org/wiki/Substring\">substring</a>\n  of the text. Ksenia is somewhat superstitious and\n  believes that her day will be lucky if the fragment she reads starts with the string KICK, then\n  goes on with 0 or more characters, and eventually ends with the string START, even if the overall\n  fragment makes little sense.\n</p>\n\n<p>\n  Given the text of the book, count the number of different lucky fragments that Ksenia can read\n  before the book gets old and she needs to buy another one. Two fragments are considered to be\n  different if they start or end at different positions in the text, even if the fragments read\n  the same. Also note that different lucky fragments may overlap.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases <b>T</b>. <b>T</b> lines follow, each\n  containing a single string <b>S</b> consisting of upper case English letters only.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is\n  the test case number (starting from 1) and <code>y</code> is the number of different lucky\n  fragments in the text of this test case.\n</p>\n\n<h3>Limits</h3>\n<p>\nMemory limit: 1 GB.<br/>\n\n1 &le; <b>T</b> &le; 100.<br/>\n<b>S</b> consists of upper-case English letters only.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\nTime limit: 20 seconds.<br/>\n\n1 &le; |<b>S</b>| &le; 1000.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\nTime limit: 40 seconds.<br/>\n\n1 &le; |<b>S</b>| &le; 10<sup>5</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3gZJe4y20O2uCO-MY4SxmceCADz4NrrQRZV6oho3PaGK3TlmD5ZGQP62LzlwpLlXCxG22UxDs2hZATjEwZtShoR0o_PP2sf2c/kick_start_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">3\nAKICKSTARTPROBLEMNAMEDKICKSTART\nSTARTUNLUCKYKICK\nKICKXKICKXSTARTXKICKXSTART\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0sQmC7gQ5nlrtGCZAH0RPStysLyDzhujp5rsN4jYdtov2H7D1u05zudtEfLaxaumWZxFcDNtN6pa8LqohSq7_hkVhIv4OubabM/kick_start_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 3\nCase #2: 0\nCase #3: 5\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  There are three lucky fragments in the first test case, namely, KICKSTARTPROBLEMNAMEDKICKSTART\n  and two occurrences of KICKSTART. The text in the second test case has no lucky fragments\n  at all.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":4},{"type":1,"type__str":"VISIBLE","value":7}],"title":"Kick_Start","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>Test Set 1</h3>\n\n<p>\n  In the i-th round, Panko will have <b>N</b> - i choices. In total, there are (<b>N</b> - 1)!\n  possibilities. Using an exhaustive approach, the expected value can be computed by definition.\n</p>\n\n<h3>Test Set 2</h3>\n\n<p>\n  After each round, the number on each card equals to the sum of a subarray of <b>A</b>. In the last\n  round, there are <b>N</b> - 1 cases:\n</p>\n<ul>\n  <li>\n    <b>A<sub>1</sub></b>,\n    <b>A<sub>2</sub></b> + <b>A<sub>3</sub></b> + ... + <b>A<sub>N</sub></b>\n  </li>\n  <li>\n    <b>A<sub>1</sub></b> + <b>A<sub>2</sub></b>,\n    <b>A<sub>3</sub></b> + <b>A<sub>4</sub></b> + ... + <b>A<sub>N</sub></b>\n  </li>\n  <li style=\"list-style-type:none;\">&vellip;</li>\n  <li>\n    <b>A<sub>1</sub></b> + <b>A<sub>2</sub></b> + ... + <b>A<sub>i</sub></b>,\n    <b>A<sub>i + 1</sub></b> + <b>A<sub>i + 2</sub></b> + ... + <b>A<sub>N</sub></b>\n  </li>\n  <li style=\"list-style-type:none;\">&vellip;</li>\n  <li>\n    <b>A<sub>1</sub></b> + <b>A<sub>2</sub></b> + ... + <b>A<sub>N - 1</sub></b>,\n    <b>A<sub>N</sub></b>\n  </li>\n</ul>\n<p>\n  The last round contributes a fixed number,\n  <b>A<sub>1</sub></b> + <b>A<sub>2</sub></b> + ... + <b>A<sub>N</sub></b>,\n  to the answer. But in each case, the part contributed by the previous rounds is actually the\n  sum of the answers of two variants of the original problem:\n</p>\n<ul>\n  <li>\n    Replace <b>A</b> by <b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>, ..., <b>A<sub>i</sub></b>\n  </li>\n  <li>\n    Replace <b>A</b> by <b>A<sub>i + 1</sub></b>, <b>A<sub>2</sub></b>, ..., <b>A<sub>N</sub></b>\n  </li>\n</ul>\n<p>\n  This part is then a weighted average of those <b>N</b> - 1 sums. However, each case is equally\n  likely to occur. To reach a specific case in the last round, Panko has to avoid exactly one choice\n  in each of the previous rounds. Thus arithmetic mean can be used here.\n</p>\n<p>\n  There are O(<b>N</b><sup>2</sup>) different subproblems. The answer of each of subproblem can be\n  computed in O(<b>N</b>) by\n  <a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\" target=\"_blank\">\n    dynamic programming\n  </a>. The overall time complexity is then O(<b>N</b><sup>3</sup>).\n</p>\n\n<h3>Test Set 3</h3>\n\n<p>\n  The above solution can be optimized to achieve O(<b>N</b><sup>2</sup>) time complexity by\n  maintaining the prefix sums and suffix sums of the answers to the subproblems. But there is\n  a faster approach that the O(<b>N</b><sup>2</sup>) part is in precomputation instead of having\n  O(<b>N</b><sup>2</sup>) per test.\n</p>\n<p>\n  Let\n  solve<sub><b>N</b></sub>(<b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>, ..., <b>A<sub>N</sub></b>)\n  be a function that takes the <b>N</b> numbers written on the cards as parameters and returns the\n  expected total score. It can be expressed as the average of <b>N</b> - 1 numbers. Each corresponds\n  to a different choice in the first round. In particular, they are:\n</p>\n<ul>\n  <li>\n    <b>A<sub>1</sub></b> + <b>A<sub>2</sub></b> +\n    solve<sub><b>N</b> - 1</sub>(<b>A<sub>1</sub></b> + <b>A<sub>2</sub></b>,\n    <b>A<sub>3</sub></b>, ...,\n    <b>A<sub>i</sub></b>, <b>A<sub>i + 1</sub></b>, ...,\n    <b>A<sub>N - 1</sub></b>, <b>A<sub>N</sub></b>)\n  </li>\n  <li>\n    <b>A<sub>2</sub></b> + <b>A<sub>3</sub></b> +\n    solve<sub><b>N</b> - 1</sub>(<b>A<sub>1</sub></b>, <b>A<sub>2</sub></b> +\n    <b>A<sub>3</sub></b>, ...,\n    <b>A<sub>i</sub></b>, <b>A<sub>i + 1</sub></b>, ...,\n    <b>A<sub>N - 1</sub></b>, <b>A<sub>N</sub></b>)\n  </li>\n  <li style=\"list-style-type:none;\">&vellip;</li>\n  <li>\n    <b>A<sub>i</sub></b> + <b>A<sub>i + 1</sub></b> +\n    solve<sub><b>N</b> - 1</sub>(<b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>,\n    <b>A<sub>3</sub></b>, ...,\n    <b>A<sub>i</sub></b> + <b>A<sub>i + 1</sub></b>, ...,\n    <b>A<sub>N - 1</sub></b>, <b>A<sub>N</sub></b>)\n  </li>\n  <li style=\"list-style-type:none;\">&vellip;</li>\n  <li>\n    <b>A<sub>N - 1</sub></b> + <b>A<sub>N</sub></b> +\n    solve<sub><b>N</b> - 1</sub>(<b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>,\n    <b>A<sub>3</sub></b>, ...,\n    <b>A<sub>i</sub></b>, <b>A<sub>i + 1</sub></b>, ...,\n    <b>A<sub>N - 1</sub></b> + <b>A<sub>N</sub></b>)\n  </li>\n</ul>\n<p>\n  By using mathematical induction with\n  solve<sub>2</sub>(<b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>) =\n  <b>A<sub>1</sub></b> + <b>A<sub>2</sub></b>\n  as the base case, it can be shown that\n  solve<sub><b>N</b></sub>(<b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>, ..., <b>A<sub>N</sub></b>)\n  is a linear combination of\n  <b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>, ..., <b>A<sub>N</sub></b>,\n  which means\n  solve<sub><b>N</b></sub>(<b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>, ..., <b>A<sub>N</sub></b>) =\n  k<sub><b>N</b>, 1</sub> &times; <b>A<sub>1</sub></b> +\n  k<sub><b>N</b>, 2</sub> &times; <b>A<sub>2</sub></b> +\n  ... +\n  k<sub><b>N</b>, <b>N</b></sub> &times; <b>A<sub>N</sub></b>\n  where k<sub>i, j</sub> are constants. If all k<sub>i, j</sub> are precomputed, the answer for each\n  test can be computed in time complexity O(<b>N</b>).\n</p>\n<p>\n  Starting from\n  k<sub>2, 1</sub> = k<sub>2, 2</sub> = 1,\n  k<sub>i, j</sub> can be computed in increasing order of i. The transition formulas can be obtained\n  by transforming the formula of\n  solve<sub><b>N</b></sub>(<b>A<sub>1</sub></b>, <b>A<sub>2</sub></b>, ..., <b>A<sub>N</sub></b>).\n  For example, the transition formula of k<sub><b>N</b>, 1</sub> can be obtained by replacing\n  solve<sub><b>N</b> - 1</sub>(...) and solve<sub><b>N</b></sub>(...) by the expressions with\n  k<sub>i, j</sub>, then comparing the coefficients of the <b>A<sub>1</sub></b> term.\n</p>\n<p>\n  The j-th card will become either (part of) the (j - 1)-th card or (part of) the j-th card after a\n  round. Correspondingly, only the coefficients of the k<sub>i - 1, j - 1</sub> term, the\n  k<sub>i - 1, j</sub> term and the constant term can be non-zero in the transition formula of\n  k<sub>i, j</sub>. By grouping the like terms, the number of terms in each transition formula is\n  reduced to at most 3. Then the overall time complexity becomes O(<b>N</b><sup>2</sup>).\n</p>\n<p>\n  The error analysis is straightforward since <b>A<sub>i</sub></b> cannot be negative. It should not\n  be a problem in most of the implementations.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0L63M8ExvX7jAGSciic0WR7FhPUTf1ZLB0OIgHy1RRNKKM_OoEnBmoR5OauujmPcgoemV5HMg/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000415054","statement":"<h3>Problem</h3>\n<p>\n  Panko is playing a game with <b>N</b> cards laid out in a row. The i-th card has the integer <b>A<sub>i</sub></b>\n  written on it.\n</p><p>\n  The game is played in <b>N</b> - 1 rounds. During each round Panko will pick an adjacent pair of cards\n  and <i>merge</i> them. Suppose that the cards have the integers X and Y written on them. To merge two cards,\n  Panko creates a new card with X + Y written on it.\n  He then removes the two original cards from the row and places the new card in their old position.\n  Finally Panko receives X + Y points for the merge.\n  During each round Panko will pick a pair of adjacent cards uniformly at random amongst the set of all available adjacent pairs.\n</p><p>\n  After all <b>N</b> - 1 rounds, Panko's total score is the sum of points he received for each merge.\n  What is the <a href=\"https://en.wikipedia.org/wiki/Expected_value\">expected value</a> of Panko's total score at the end of the game?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, <b>T</b>. <b>T</b> test cases follow.\n  Each test case begins with a line containing the integer <b>N</b>.\n  A second line follows containing <b>N</b> integers, describing the initial row of cards.\n  The i-th integer is <b>A<sub>i</sub></b>.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #x: y</code>, where <code>x</code> is the test case number (starting from 1) and <code>y</code> is\n  the expected total score at the end of the game.\n</p>\n<p>\n  <code>y</code> will be considered correct if it is within an absolute or\n  relative error of 10<sup>-6</sup> of the correct answer.\n  See the <a href=\"https://codingcompetitions.withgoogle.com/kickstart/faq#how-does-kick-start-handle-real-numbers\">FAQ</a> for an explanation of what that means,\n  and what formats of real numbers we accept.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 40 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n1 &le; <b>T</b> &le; 100.<br/>\n1 &le; <b>A<sub>i</sub></b> &le; 10<sup>9</sup> for all i.<br/>\n</p>\n\n<h4>Test Set 1</h4>\n<p>\n\n  2 &le; <b>N</b> &le; 9.<br/>\n</p>\n\n<h4>Test Set 2</h4>\n<p>\n\n2 &le; <b>N</b> &le; 100.<br/>\n</p>\n\n<h4>Test Set 3</h4>\n<p>\n\n2 &le; <b>N</b> &le; 5000.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2cJ034_vJwvEYxwMar39Nh3GZuTCMre8glbD-gMZVvdByN-GoT9aPz4-Bb3K8p-M7p_Rfx8cScbkIDukuJ7dF9I4oLhadproIe/merge_cards_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">2\n3\n2 1 10\n5\n19 3 78 2 31\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0H221x3TgzNqmeAdsh147UPjj2uscZkXciE8cQx0X7YCOg5Og2ajdb3bUD6u19UaNu6HkphrjIRtDW_3qM6dnLJHRalXQIclrEwg/merge_cards_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 20.000000\nCase #2: 352.33333333\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\nIn sample case #1, <b>N</b> = 3. The initial row of cards is <code>[2, 1, 10]</code>.\nIn the first round, Panko has two choices, of which he will choose one at random.\n<ul>\n  <li>If Panko merges the first pair (<code>2, 1</code>), then the row of cards becomes <code>[3, 10]</code>, adding 2 + 1 = 3 points to his total score.\n      In the second round, there is only one pair remaining (<code>3, 10</code>). If he merges them, the row of cards becomes <code>[13]</code>, adding 3 + 10 = 13 points to his total score.\n      Panko ends the game with 3 + 13 = 16 points.</li>\n  <li>If Panko merges the second pair (<code>1, 10</code>), then the row of cards becomes <code>[2, 11]</code>, adding 1 + 10 = 11 points to his total score.\n      In the second round, there is only one pair remaining (<code>2, 11</code>). If he merges them, the row of cards becomes <code>[13]</code>, adding 2 + 11 = 13 points to his total score.\n      Panko ends the game with 11 + 13 = 24 points.</li>\n</ul>\nThus, the expected number of points Panko ends the game with is (16 + 24)/2 = 20.\n</p>\n\n<p>\nIn sample case #2, <b>N</b> = 5. The initial row of cards is <code>[19, 3, 78, 2, 31]</code>.\nThere are too many possibilities to list here, so we will only go through one possible game:\n\n<ul>\n   <li>In the first round, if Panko merges the pair (<code>78, 2</code>), then the row of cards becomes <code>[19, 3, 80, 31]</code>, adding 78 + 2 = 80 to his score.</li>\n   <li>In the second round, if Panko merges the pair (<code>80, 31</code>), then the row of cards becomes <code>[19, 3, 111]</code>, adding 80 + 31 = 111 to his score.</li>\n   <li>In the third round, if Panko merges the pair (<code>19, 3</code>), then the row of cards becomes <code>[22, 111]</code>, adding 19 + 3 = 22 to his score.</li>\n   <li>In the fourth round, if Panko merges the pair (<code>22, 111</code>), then the row of cards becomes <code>[133]</code>, adding 22 + 111 = 133 to his score.</li>\n</ul>\nAt the end of the game explained above, Panko's total score is 80 + 111 + 22 + 133 = 346.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":9},{"type":1,"type__str":"VISIBLE","value":13},{"type":1,"type__str":"VISIBLE","value":15}],"title":"Merge Cards","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"00000000001a0069","type":1,"type__str":"SPECTATOR"},"title":"Round G 2020"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
