{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1618025400000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"000000000043585d","is_practice_available":true,"my_user_type":1,"my_user_type__str":"SPECTATOR","recap":"<p>\r\nRound 1A started with another problem about a strange sorting algorithm. However, solving\r\n<i>Append Sort</i> was not at all about sorting. A greedy approach was needed instead.\r\nThere was a significant jump in difficulty to <i>Prime Time</i>, which had two accessible\r\ntest sets, but the full problem was quite challenging. It required some math work to be solved.\r\nFinally, <i>Hacked Exam</i> was the odd problem of the round statement-wise.\r\nFramed in the right way, however, it could be approached in typical competitive programming\r\nfashion.\r\n</p><p>\r\n<b>Um_nik</b> was the first one to a perfect score, and that gave them the top position in\r\nthe final standings. <b>Marcin.Smulewicz</b> and <b>semiexp.</b> rounded out the top 3 with\r\nonly a few more minutes of penalty. In total, 49 people managed a perfect score.\r\nMore than 8200 people scored some points out of the more than 10000 that submitted a solution.\r\n</p><p>\r\nWhen the hidden results were revealed, the contestant in 1500th place had 54 points,\r\nwhich is the unofficial cutoff for advancing. Come back once results are finalized\r\nto see the final look of the scoreboard.\r\n</p><p>\r\nCongratulations to all advancers! If you did not advance, you have two more chances\r\nin Round 1B and Round 1C. See the\r\n<a href=\"https://codingcompetitions.withgoogle.com/codejam/schedule\">schedule</a> to find out\r\nwhen and mark your calendar!\r\n</p>\r\n<hr>\r\n<p>\r\n  <b>Cast</b>\r\n</p>\r\n<p>\r\n  Append Sort: Written by Pablo Heiber. Prepared by Artem Iglikov.\r\n</p><p>\r\n  Prime Time: Written by Ian Tullis. Prepared by Petr Mitrichev.\r\n</p><p>\r\n  Hacked Exam: Written by Yui Hosaka. Prepared by Swapnil Gupta and Timothy Buzzelli.\r\n</p><p>\r\nSolutions and other problem preparation and review by Andy Huang, Artem Iglikov,\r\nBir Bahadur Khatri, Darcy Best, Ian Tullis, Liang Bai, Max Ward, Md Mahbubul Hasan, Nafis Sadique,\r\nPablo Heiber, Petr Mitrichev, Pi-Hsun Shih, Sadia Atique, Sean Carpenter, Swapnil Gupta,\r\n Swapnil Mahajan, Timothy Buzzelli, Yeabkal Wubshit and Yui Hosaka.\r\n</p><p>\r\nAnalysis authors:\r\n</p><ul>\r\n  <li>Append Sort: Artem Iglikov.</li>\r\n  <li>Prime Time: Md Mahbubul Hasan.</li>\r\n  <li>Hacked Exam: Pablo Heiber.</li>\r\n</ul>","registration_gives_participant":false,"result_status":30,"result_status__str":"FINALIZED","start_ms":1618016400000,"tasks":[{"analysis":"<h3>Test Set 1</h3>\n<p>\n  In Test Set 1, the total number of cards in the deck is at most $$$10$$$.\n  A small number like $$$10$$$ suggests we can brute force and simulate\n  all possible game scenarios. For each card we can decide whether it belongs to the first group\n  or the second group. Next, we sum up the numbers on the first group cards and compare\n  with the product of the numbers on the second group cards. If they are equal, current sum or\n  product is one of the possible candidate scores. After checking all possible partitions, we output\n  the maximum score or output the score $$$0$$$ if there is no feasible way to partition the cards.\n</p>\n<p>\n  Two things to watch out for. First, each of the groups has to be non-empty. This is easy to\n  handle. Second, the product of all the numbers may overflow the integer type of our choice (in the\n  worst case there may be $$$10$$$ cards, each with $$$499$$$). There are many ways one can\n  avoid this problem.\n  One way can be to first find\n  the sum of the first group numbers and then try to divide it by the second group numbers, one by\n  one. If at some\n  point we are unable to perform the division or if after all the divisions the result is not\n  $$$1$$$, we know current partition candidate can not be\n  good. Another way would be to notice that the sum of the first group can not be very high. A\n  naive upper bound is $$$4990$$$ (all the $$$10$$$ numbers are $$$499$$$ and they are in\n  the first group). Hence we\n  can find the product of the second group numbers in floating point and compare with the sum of\n  the first group numbers. Since the upper bound of the sum of the first group numbers\n  is very low, precision error should not cause any trouble.\n</p>\n<p>\n  There are $$$2^{\\mathbf{N}}$$$ ways to partition the cards where $$$\\mathbf{N}$$$ is the number of cards.\n  After\n  each partition we can find the sum and the product of the groups with a linear loop. Hence the\n  total\n  run time is $$$O(2^{\\mathbf{N}}\\mathbf{N})$$$. We could also get rid of the linear loop but such\n  optimization was not necessary.\n</p>\n\n<h3>Test Set 2</h3>\n<p>\n  In Test Set 2, the total number of cards is at most $$$100$$$. Performing\n  all possible partitions\n  would surely timeout. But notice that we cannot put many numbers into the second group because\n  the product of positive numbers greater than $$$1$$$ quickly increases. This time the upper limit\n  for the sum of the first group numbers is $$$49900$$$. That means, we can not have more\n  than $$$15$$$ numbers\n  in the second group ($$$2^{16} > 49900$$$). We can use this observation to optimize our\n  brute force solution.\n</p>\n<p>\n  Let $$$S$$$ be the set of all possible partitions using the first $$$i$$$ cards for some\n  arbitrary ordering of the cards.\n  Instead of keeping explicit partitions, we will represent the partition as $$$(x, y)$$$ where\n  $$$x$$$ is the sum of the numbers in the first group and $$$y$$$ is the product of the\n  numbers in the\n  second group. This helps us to reduce the state space. Once we partition the first $$$i$$$\n  cards, it does\n  not matter exactly which card went to which group. We just care about the sum and the\n  product of the\n  respective groups. Now let $$$b$$$ be the value of the $$$i+1$$$'th card. Hence for\n  each partition $$$(x, y)$$$\n  in $$$S$$$ we will have two choices: $$$(x + b, y)$$$ and $$$(x, y \\times b)$$$. If this makes\n  the product of the second group numbers larger than $$$49900$$$, we prune this state.\n  After considering\n  all $$$\\mathbf{N}$$$ cards, we check if there is some partition where the sum of the first group numbers\n  is equal to the product of the second group numbers (i.e., a tuple in $$$S$$$ where both\n  values are equal). We output the maximum of these sum or product, or\n  $$$0$$$ if there is no such partition.\n</p>\n<p>\n  We can have at most $$$100$$$ numbers in the input. So it might be tempting to think that\n  there may be $$$100 \\choose 15$$$ possible valid partitions.\n  But the product of the numbers\n  in the second group can be at most $$$49900$$$ and each of these $$$49900$$$ numbers\n  can be uniquely\n  represented as the product of primes. So the remaining numbers will go to the first group.\n  Hence after considering each of the input numbers there can be at most\n  $$$49900$$$ possible partitions ($$$49900$$$ possible second groups and for each of these\n  there is a unique first group). So this naive calculation gives us a limit of\n  $$$49900 \\times 100 \\approx 5 \\times 10^6$$$ operations.\n</p>\n<p>\n  So far we have used the fact that each score can be uniquely represented as a product to prove\n  that our solution is fast enough, but it can also be used to obtain an alternative approach for\n  Test Set 2:\n  we have only $$$49900$$$ candidates for the final score, so we can iterate over them one by one.\n  For each candidate score, there is exactly one way to represent it as\n  a product of primes. Assuming we know the prime factorization of\n  the candidate how can we determine if the candidate is valid?\n  Suppose the prime $$$p$$$ appears in the prime factorization\n  $$$q$$$ times. Then, the prime $$$p$$$ has to be in the input at least $$$q$$$ times. This\n  condition guarantees us\n  that the second group is achievable. Next we need to come up with a condition to check the\n  existence of the first group. If we know the sum of the input numbers and subtract the sum of the\n  numbers in the second group we can get the sum of the first group which has to be equal to\n  our candidate. This guarantees the first group existence. Both of these conditions can be\n  checked very easily given the prime factorization of the candidate score.\n</p>\n<p>\n  It turns out that this approach generalizes very well to Test Set 3.\n</p>\n\n<h3>Test Set 3</h3>\n<p>\n  In Test Set 3, $$$\\mathbf{N}$$$ can be up to $$$10^{15}$$$, which means the sum of the first group can be\n  as high as $$$4.99 \\times 10^{17}$$$. But the number of cards in the second group can not be very\n  high. Since $$$2^{60} > 4.99 \\times 10^{17}$$$, we can consider 60 as the upper bound\n  of number of cards in the second group. Although the product of at most 60 cards in the second\n  group can range from $$$2$$$ to $$$2^{60}$$$, the sum of the second group numbers can be only\n  up to $$$60 \\times 499 = 29940$$$ (the actual maximum possible sum of the second group numbers is\n  $$$3025$$$ under the problem's constraint but even a crude estimate of $$$29940$$$ is enough\n  to get a working solution). Let $$$X$$$ be the sum of all the cards in the input.\n  Then, the sum of the first group numbers must be between $$$X - 29940$$$ and $$$X$$$, inclusive.\n  This means we have only $$$29941$$$ candidates for the final\n  score, so we could apply the second approach from Test Set 2 if only we could factorize those\n  candidates.\n</p>\n<p>\n  Unfortunately factorizing a number as big as $$$10^{17}$$$ is not an easy task. A naive\n  way may be to run a loop up to $$$\\sqrt{10^{17}}$$$. However, in this problem we do not need\n  to care about the primes higher than $$$499$$$. To put it another way, if the candidate has\n  a prime factor\n  other than the input prime numbers, we cannot achieve this score in the second group. Hence,\n  it is enough to try to factorize the $$$29940$$$ candidates with only primes from $$$2$$$\n  to $$$499$$$. It takes about\n  $$$29940 \\times (95 + 60) \\approx 4.6 \\times 10^6$$$ operations to factorize the\n  $$$29940$$$ candidates\n   (there are $$$95$$$ primes between $$$2$$$ and $$$499$$$ and in total there can be\n  at most $$$60$$$ prime factors).\n  We could also do\n  <a href=\"https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\" target=\"_blank\">sieve</a>-like\n  factorization reducing the number of operations to about\n  $$$29940\\log{\\log{499}} \\approx 10^{5}$$$ but this is not necessary.\n  After the factorization, we can run a loop\n  to check if the number of each prime exceeds the input count and also to sum these\n  primes. This takes $$$29940 \\times 95 \\approx 3 \\times 10^6$$$ operations.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0zlGAaUNA2w_LGjbAb3ReRK7RfX89OQe4MetS-2uJ8ZdvAgfKest6W4XP4UrK7bMNvWz9bzTOG/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000007543d8","statement":"<h3>Problem</h3>\n<p>\n  You are playing a new solitaire game called Prime Time.\n  You are given a deck of cards, and each card has a prime number\n  written on it. Multiple cards may have the same\n  number.\n</p>\n<p>\n  Your goal is to divide the cards into two groups in such a way that the sum of the numbers\n  in the first group is equal to the product of the numbers in the second group. Each card\n  must belong to exactly one of the two groups, and each group must contain\n  at least one card. The sum or product of a group that consists of a single card is simply\n  the number on that card.\n</p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1iLxagYCD_ZPGLu4Lc_CMGNWhP3fdJR4JU6Z7LSU3C7eY4hzgqFkOFP1RTniiB_MQ4Id7V5mPvPA/prime_time.png\" style=\"max-width: 100%;\" alt=\"Sample Case #1\"/></p>\n<p>\n  For example, in the image above, the left group has cards whose sum is $$$25$$$ and the right\n  group has cards whose product is $$$25$$$. Therefore, this is a valid split into groups.\n</p>\n<p>\n  Your score is the sum of the numbers in the first group\n  (which is equal to the product of the numbers in the second group),\n  or 0 if you cannot split the cards this way at all. What is the maximum score you can achieve?\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\n  The first line of each test case contains a single integer $$$\\mathbf{M}$$$, representing the number of\n  distinct prime numbers in your deck.\n  Each of the next $$$\\mathbf{M}$$$ lines contains two values: $$$\\mathbf{P_i}$$$ and $$$\\mathbf{N_i}$$$, representing\n  that you have exactly $$$\\mathbf{N_i}$$$ cards with the prime $$$\\mathbf{P_i}$$$ written on them.\n</p>\n<p>\n  Note that the total number of cards in your deck is the sum of all $$$\\mathbf{N_i}$$$s.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>, where $$$x$$$ is the\n  test case number (starting from 1) and $$$y$$$ is the maximum score you can achieve.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 45 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{M} \\le 95$$$. (Note that there are exactly 95 distinct primes between 2 and 499)<br/>\n$$$2 \\le \\mathbf{P_i} \\le 499$$$, for all $$$i$$$.<br/>\nEach $$$\\mathbf{P_i}$$$ is prime.<br/>\n$$$\\mathbf{P_i} \\lt \\mathbf{P_{i+1}}$$$, for all $$$i$$$. (The primes are given in strictly increasing order)<br/>\n$$$1 \\le \\mathbf{N_i}$$$, for all $$$i$$$.\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N_1} + \\mathbf{N_2} + \\cdots + \\mathbf{N_M} \\le 10$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N_1} + \\mathbf{N_2} + \\cdots + \\mathbf{N_M} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 3 (Hidden Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N_1} + \\mathbf{N_2} + \\cdots + \\mathbf{N_M} \\le 10^{15}$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U2pHwl2eIEgTSGRS90i4Uw8qZJbGs88MQ6PpfMfO695DEA_O_oC_oNkpC7TZ7zTqfEWMevCLhjkkV_iCETg6T3QN0eczJyYLy4A/prime_time_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n5\n2 2\n3 1\n5 2\n7 1\n11 1\n1\n17 2\n2\n2 2\n3 1\n1\n2 7\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1QNOPzlaHfV-_-lN44MEE7XUlmJjn7F7aQgcSEwj-njYkl_OhYQwFB2z7xNRzN3FvTrwYpzgHfyNqDQV4KRZuz_UuPQqiuek1lrA/prime_time_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 25\nCase #2: 17\nCase #3: 0\nCase #4: 8\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the optimal split is: $$$11+2+7+3+2=5\\cdot5$$$. Another split is also possible:\n  $$$5+7+3+2+5=11\\cdot2$$$, but it gives a lower score.\n</p><p>\n  In Sample Case #2, note that cards with the same number can be placed in different groups.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":7},{"type":1,"type__str":"VISIBLE","value":13},{"type":2,"type__str":"HIDDEN","value":15}],"title":"Prime Time","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<p>\nIn this problem we want to maximize our expected score.\nLet $$$p_q$$$ be the\nprobability of question $$$q$$$'s answer being <code>T</code>, and let $$$Q_\\mathtt{T}$$$\nand $$$Q_\\mathtt{F}$$$ be the sets of questions we answer with\n<code>T</code> and <code>F</code>, respectively. By\n<a href=\"https://en.wikipedia.org/wiki/Expected_value#Basic_properties\" target=\"_blank\">\nlinearity of expectation</a>, the expected score to maximize can be written as\n$$$$\\left(\\sum_{q \\in Q_\\mathtt{T}} p_q \\right) +\n    \\sum_{q \\in Q_\\mathtt{F}} \\left(1 - p_q \\right).$$$$\nNotice that linearity of expectation\ncan be used regardless of any conditional probability between different questions. In this\ncase, those conditional probabilities can be quite complicated, so being able to ignore them\nand treat each question independently despite them not being\n<a href=\"https://en.wikipedia.org/wiki/Independence_(probability_theory)\" target=\"_blank\">\nindependent in the probability\ntheory sense</a> simplifies the solution process significantly. This is a trick that is important\nin many problems about expected values.\n</p><p>\nWe operate with fractions throughout most of the proposed solutions. As noted in the sample,\nthe needed numbers may exceed 64 bits for Test Set 3, and potentially for Test Set 2 as well,\ndepending on the exact implementation of the algorithm and the fraction operations.\nIt is absolutely possible to solve Test Set 2 with simply 64-bit integers and Test Set 3 with\njust 128-bit integers. Our most popular languages all support this in some way: C and C++\nhave <code>__int128</code> support, Java and C# have <code>BigInteger</code>, JavaScript has\n<code>BigInt</code>, Bash has <code>bc</code>, and Python, Ruby and Haskell have native\nlong integer support. We usually strive to make most of our problems solvable with just\n64-bit integer arithmetic, but in this case, limiting the number of questions so much would\nallow suboptimal solutions in fast languages to pass Test Set 3.\n</p><p>\nNotice that we can have information of $$$1$$$ or $$$2$$$ other students in the first\ntwo test sets, and also $$$3$$$ in the last test set.\nWe could solve each number of students independently, but there is no need for that.\nAdding a student with the same answers and score as a student in the input\nresults in a completely equivalent case, so we can always assume that\nthere are a maximum number of students by copying any student the needed number of times.\n</p>\n\n<h3>Test Set 1</h3>\n<p>\nIn Test Set 1, the number of questions $$$\\mathbf{Q}$$$ is small enough that we can simply enumerate all\npossible $$$2^{\\mathbf{Q}}$$$ sequences of answers, and filter out those who are inconsistent with\nthe input (i.e., those for which one of the students would obtain a different score than they\nactually got). From the consistent ones, we can estimate the $$$p_q$$$s above as the ratio\nbetween the number of sequences that answer <code>T</code> to question $$$q$$$, over the total.\nThen, we can simply choose to answer <code>T</code> to those questions with\n$$$p_q \\gt \\frac{1}{2}$$$ and <code>F</code> to those with $$$p_q \\lt \\frac{1}{2}$$$. We can\nanswer the questions with $$$p_q = \\frac{1}{2}$$$ either way.\n</p>\n<h3>Test Set 2</h3>\n<p>\nIn Test Set 2 $$$\\mathbf{Q}$$$ is large, so we cannot enumerate the sequences of answers.\nWe can, on the other hand, figure out the probabilities $$$p_q$$$ in a different way,\nand then proceed as before with choosing the answers by comparing those values to\n$$$\\frac{1}{2}$$$.\n</p>\n<h4>An insight-based solution</h4>\n<p>\nOne way to solve Test Set 2 is by splitting the questions into types.\nIf two questions $$$q_1$$$ and $$$q_2$$$ received the same answer from each\nstudent, then by symmetry $$$p_{q_1} = p_{q_2}$$$.\nThen, let $$$p_{ab}$$$ be equal to the probability of a question's answer being <code>T</code>\ngiven that the first student answered $$$a$$$ and the second student answered $$$b$$$\nto it. By the first observation, each $$$p_q$$$ is equal to one of the $$$4$$$\nvalues $$$p_{\\mathtt{TT}}$$$, $$$p_{\\mathtt{TF}}$$$, $$$p_{\\mathtt{FT}}$$$ or $$$p_{\\mathtt{FF}}$$$.\nMoreover, by the symmetry of complementing answers,\n$$$p_{\\mathtt{TT}} = 1 - p_{\\mathtt{FF}}$$$ and $$$p_{\\mathtt{TF}} = 1 - p_{\\mathtt{FT}}$$$.\nTherefore, we can express every $$$p_q$$$ as a linear function of up to two variables\n$$$p_{\\mathtt{TT}}$$$ and $$$p_{\\mathtt{TF}}$$$. That means we can express the expected score of\nboth students as linear functions on those two variables too. Given that their expected\nscore should match their actual score, that gives us\ntwo equations with two unknowns. We can derive the real values of $$$p_{\\mathtt{TT}}$$$ and\n$$$p_{\\mathtt{TF}}$$$ from that system of equations.\nWith every $$$p_q$$$ calculated, we can simply choose, for each question,\nan answer that has maximum probability, as in the solution for Test Set 1.\n</p><p>\nNotice that there are $$$4$$$ possible cases depending on how our two variables\ncompare with $$$\\frac{1}{2}$$$ (if one is exactly $$$\\frac{1}{2}$$$ that means two cases\nare equivalent and if both are $$$\\frac{1}{2}$$$ then all cases are equivalent). The\n$$$4$$$ cases exactly match with either answering the same as one of the students,\nor answering the opposite of one of the students.\nWe can use this observation to greatly simplify the implementation\nas the score of a sequence given by a student is given to us, and the score of the complement\nof the answers of student $$$i$$$ is $$$\\mathbf{Q} - \\mathbf{S_i}$$$, so we can easily obtain the scores\nof the $$$4$$$ options and pick a highest one.\n</p>\n<h4>A more competitive-programming-standard solution</h4>\n<p>\nIn case of having $$$2$$$ students, we can use\n<a href=\"https://en.wikipedia.org/wiki/Dynamic_programming\" target=\"_blank\">dynamic programming</a>\nto calculate the probability of each question having a particular answer. We compute the recursive\nfunction $$$f(s_1, s_2, q)$$$ defined as \"how many ways are there to answer questions\n$$$q, q+1, q+2, \\dots, \\mathbf{Q}$$$ such that student $$$1$$$ gets exactly $$$s_1$$$ of them right\nand student $$$2$$$ gets exactly $$$s_2$$$ of them right?\"\nWe can define that function recursively as\n$$$$f(s_1, s_2, q) = f(s_1 - I_1(q, \\mathtt{T}), s_2 - I_2(q, \\mathtt{T}), q+1) +\n                     f(s_1 - I_1(q, \\mathtt{F}), s_2 - I_2(q, \\mathtt{F}), q+1)$$$$\nwhere $$$I_i(q, c)$$$ is $$$1$$$ if student $$$i$$$ answered $$$c$$$ to question $$$q$$$ and\n$$$0$$$ otherwise. The base cases are $$$f(0, 0, \\mathbf{Q}+1) = 1$$$ and\n$$$f(s_1, s_2, \\mathbf{Q}+1) = 0$$$ whenever one of $$$s_1$$$ or $$$s_2$$$ is not $$$0$$$. To simplify\nmemoization, we may want to add a case to simply answer $$$0$$$ whenever $$$s_1$$$ or\n$$$s_2$$$ are negative, but the recursive equation holds as written for those cases.\n</p><p>\nBy memoizing that function, we can compute it in time $$$O(\\mathbf{Q}^3)$$$. We can calculate the\nprobability of question $$$1$$$'s answer being <code>T</code> as\n$$$$\\frac{f(\\mathbf{S_1} - I_1(1, \\mathtt{T}), \\mathbf{S_2} - I_2(1, \\mathtt{T}), 2)}\n         {f(\\mathbf{S_1}, \\mathbf{S_2}, 1)}.$$$$\nThen, by symmetry, we can reorder the questions to make any question the first one and re-run\nto compute the probability for any question. After having all probabilities, we simply\nanswer the most likely answer for each question and sum its probability to our expected\nscore. Since we need to run the probability computation $$$O(\\mathbf{Q})$$$ times (once per question),\nthe overall algorithm takes $$$O(\\mathbf{Q}^4)$$$ time. This can be a little too slow.\n</p><p>\nIf we add only the first observation of the insight-based solution, we can notice that\ntwo questions that were answered the same by both students have identical\nprobabilities. Then, we only need to calculate the probability of up to $$$4$$$ question types\n(in the notation of the previous solution, we use dynamic programming to calculate all the\n$$$p_{ab}$$$s). This improves the overall running time to $$$O(\\mathbf{Q}^3)$$$, which fits\nbetter within the time limit. An observation about complement could further reduce this to\nonly $$$2$$$ question types, but that does not change the time complexity and it is not needed\nto pass this test set.\n</p>\n<h3>Test Set 3</h3>\n<p>\nThe dynamic programming solution for Test Set 2 can be generalized to\nTest Set 3 by adding an additional score as another parameter to the recursive function.\nHowever, the additional dimension and larger limit for $$$\\mathbf{Q}$$$ can easily make such solutions too slow.\n</p><p>\nCombining the full insights of the first solution to Test Set 2 with\nthe solution to Test Set 1 works, though:\nthere are $$$8$$$ probability variables $$$p_{abc}$$$, and pairs of complementary variables have\ncomplementary probabilities, so we only care about $$$4$$$ different ones.\n</p><p>\nLet us call the subindex of the variables (the $$$abc$$$ part)\nthe \"type\" of a question. Let us number the types $$$1$$$ through $$$4$$$ in any order.\nIf there are $$$q_j$$$ questions of type $$$j$$$,\nwe can use quadruples $$$(t_1, t_2, t_3, t_4)$$$ with $$$0 \\le t_j \\le q_j$$$ for\nall $$$j$$$ to represent sequences of answers\nthat answer <code>T</code> to exactly $$$t_j$$$ questions of type $$$j$$$. We know that\nthere are\n$$$${q_1 \\choose t_1} \\cdot {q_2 \\choose t_2} \\cdot {q_3 \\choose t_3} \\cdot {q_4 \\choose t_4}$$$$\nsequences of answers represented by this particular quadruple.\nIf we filter the quadruples by the ones that give each student their actual score,\nwe are effectively enumerating answers that are consistent with the input. This is what\nwe did for Test Set 1! In this\nway, we can count which amount $$$t_j$$$ of questions of type $$$j$$$ has the largest probability\nand choose that one, for each $$$j$$$.\n</p><p>\nThere are at most $$$(\\mathbf{Q} / 4)^4$$$ quadruples to check. This makes the time complexity of\nthe algorithm $$$O(\\mathbf{Q}^4)$$$, but the $$$1/256$$$ constant is pretty significant, and a good\nimplementation runs comfortably in time.\n</p><p>\nBut wait! We can refine this solution even more by using the solution for Test Set 2\nthat ends with solving the system of equations!\nWe can express the score of each student\nas a linear function of $$$t_1, t_2, t_3$$$ and $$$t_4$$$. That gives us a system of\n$$$3$$$ equations and $$$4$$$ unknowns. That means that we only need to try all possible\nvalues for one of the $$$t_j$$$ and then simply solve the system to find unique values\nfor the other three. That refines the solution above to requiring only $$$O(\\mathbf{Q})$$$ time.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1KjlESVHgGGm9TTSMvBh9SSskV-nt0cwo2MligH-I2RPIsuHP-jx7SwzC5X3MgdZYjlbFwuZqK/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"0000000000754750","statement":"<h3>Problem</h3>\n<p>\n  There is an exam with $$$\\mathbf{Q}$$$ true or false questions.\n  The correct answer to each question is either <code>T</code> or <code>F</code>.\n  Each student taking the exam selects either <code>T</code> or <code>F</code> for each question,\n  and the student's score is the number of questions they answer correctly.\n</p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3b2vDpjJRPuQYM_w8gn-5VVZ56VGxkVEgvEEI_hShMFaS5E5FGaZuIjDH66lXOHydSywWeayMPi2U/hacked_exam.png\" style=\"max-width: 100%;\" alt=\"Example Exam\"/></p>\n<p>\n  There are $$$\\mathbf{N}$$$ students who have already taken this exam.\n  For each of those students, you know the answers they gave to each question and their final score.\n  Assuming that any sequence of answers that is consistent with all of those students' scores has\n  the same probability of being the correct sequence of answers, you want to maximize your own expected score.\n  Determine what that expected score is and how to answer the questions so that you achieve\n  it.\n</p>\n\n<h3>Input</h3>\n<p>\n  The first line of the input gives the number of test cases, $$$\\mathbf{T}$$$.\n  $$$\\mathbf{T}$$$ test cases follow.\n  The first line of each test case contains two integers $$$\\mathbf{N}$$$ and $$$\\mathbf{Q}$$$:\n  the number of students and the number of questions, respectively.\n  Each of the next $$$\\mathbf{N}$$$ lines contains a string $$$\\mathbf{A_i}$$$ and an integer $$$\\mathbf{S_i}$$$:\n  the $$$i$$$-th student's answers and their score, respectively.\n  The $$$j$$$-th character of $$$\\mathbf{A_i}$$$ is\n  either <code>T</code> or <code>F</code>, representing the answer the $$$i$$$-th student gave\n  to the $$$j$$$-th question.\n</p>\n\n<h3>Output</h3>\n<p>\n  For each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$ $$$z$$$/$$$w$$$</code>,\n  where $$$x$$$ is the test case number (starting from $$$1$$$),\n  $$$y$$$ is a string representing a sequence of answers that yields the maximum expected score\n  (in the same format as the input),\n  and $$$\\frac{z}{w}$$$ is the maximum expected score as an irreducible fraction\n  (that is, $$$w$$$ must be positive and of minimum possible value).\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 30 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n  $$$1 \\le \\mathbf{T} \\le 2021$$$.<br/>\n  The length of $$$\\mathbf{A_i} = \\mathbf{Q}$$$, for all $$$i$$$.<br/>\n  Each character of $$$\\mathbf{A_i}$$$ is an uppercase <code>T</code> or an uppercase <code>F</code>,\n    for all $$$i$$$.<br/>\n  $$$0 \\le \\mathbf{S_i} \\le \\mathbf{Q}$$$, for all $$$i$$$.<br/>\n  There exists at least one sequence of correct answers consistent with the input.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n  $$$1 \\le \\mathbf{N} \\le 2$$$.<br/>\n  $$$1 \\le \\mathbf{Q} \\le 10$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Hidden Verdict)</h4>\n<p>\n\n  $$$1 \\le \\mathbf{N} \\le 2$$$.<br/>\n  $$$1 \\le \\mathbf{Q} \\le 40$$$.<br/>\n</p>\n\n<h4>Test Set 3 (Hidden Verdict)</h4>\n<p>\n\n  $$$1 \\le \\mathbf{N} \\le 3$$$.<br/>\n  $$$1 \\le \\mathbf{Q} \\le 120$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <i>\n    Note: there are additional samples that are not run on submissions down below.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U31jO7BYnTbn5QM-cR8H9gT0fAJsoP41EU4y5FFUclvzrzHBTsC2wnK8T0cn1j8mNbDK8vtO3TXkCcjjLucgi4xktcqPH5Izp1sUA/hacked_exam_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n1 3\nFFT 3\n1 3\nFFT 2\n2 6\nFFTTTF 2\nFTFTFT 4\n2 2\nFF 1\nTT 1\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1j_YfJ_fvrdEB6zYVLUZQ_QnR3ndxZMSga5kY_Y4xOFEtrd0WpJEH1fgIcr_j9vbUf9MI9E6gDfHJCOgK4F82i08r9ucN5EZTjeYo/hacked_exam_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: FFT 3/1\nCase #2: FFT 2/1\nCase #3: FTFFFT 4/1\nCase #4: TF 1/1\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In Sample Case #1,\n  given that the score for <code>FFT</code> is $$$3$$$,\n  the sequence of correct answers must be <code>FFT</code>.\n</p>\n<p>\n  In Sample Case #2,\n  given that the score for <code>FFT</code> is $$$2$$$,\n  the sequence of correct answers is <code>FFF</code>, <code>FTT</code>, or <code>TFT</code>,\n  each with probability $$$\\frac{1}{3}$$$.\n  Your best strategy is to answer <code>FFT</code>, to achieve the expected score of\n  $$$\\frac{1}{3} \\times 2 + \\frac{1}{3} \\times 2 + \\frac{1}{3} \\times 2 = 2$$$.\n</p>\n<p>\n  In Sample Case #3, there are other answers that also achieve an expected score of $$$4$$$,\n  like <code>FTFTFT</code>.\n</p><p>\n  In Sample Case #4, one of the questions' answer is <code>T</code> and the other one\n  is <code>F</code>, but you do not know which is which. Answering <code>TF</code>\n  or <code>FT</code> scores you $$$2$$$ with probability $$$\\frac{1}{2}$$$ and\n  $$$0$$$ with probability $$$\\frac{1}{2}$$$, yielding an expected score of $$$1$$$.\n  Answering <code>FF</code> or <code>TT</code> guarantees a score of $$$1$$$.\n  Since any sequence of answers gives the same expected score, you can output any of them.\n</p>\n\n\n  <br/>\n  <h3>Additional Sample - Test Set 3</h3>\n  <i>\n    The following additional sample fits the limits of Test Set 3. It will not\n    be run against your submitted solutions.\n  </i>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3-V5-DnoKIfSJ0gxovRPUvKz2vWe--e4ZW0xjJo4FTlUzZ_zyWGfJp6lkPWvGdwHRBFyggo7iQveF-zXxTY3s8sh0r_Zp5YzZeeQ/hacked_exam_sample_ts3_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_2').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_2');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_2\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_2\">1\n3 120\nFFTFFFTFFFTTTTTTTFTFFFFFFTTTFTFFFTFTFFTTFTFFTFFTTTFTFTFFTFTFTTFFFFTFTFFFFTTTFTTFTTTTFFFTTFFFFFTTFFTFFTFFTTTFFFFTTFFTFTTF 55\nFFFTFFTTFFFFTFTFFTFFFTTTTTTFFFTTTFTTTTFFTFTTTFTTFFTTTFTFFFFTFFTTFFTTFTTFFTFTFFTFTTFTFTFFTTTFFTFTFTTFFTFTFTFTTFFTFFFTFTFT 62\nFFFTFTTFFFFFTFTFTTTTTTFFTTFTFFFTFFTTTTTTFFFTTTFFFTTFTFFFFFFTFTTFFTFTTTFTTTTFTTFFFFTFFTTFTFFTTTTTTFTFFFFFTTFFTFTFTFFTTTTT 64\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U3fwS_RRqBOUnvYsdEC_vjz_4rUBhTl9UZUSUFlEMfkd0C_9o2BuB4VCgSbdFLnYbzMTQ-H6JLjCuT5DTceYmbLuVjaMVnyhuvzt20/hacked_exam_sample_ts3_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_2').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_2');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_2\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_2\">Case #1: FFFTFTTTFFFFTFTFFTFTTTTTTTFFFFTTTFTTTTFFTFTTTTTFFFTFTFTFFFFTFFTTFTFTFTTTTTFFTFFFFFFFFTTFTTTTTTFTTTTFFFFTFTFTTFTFFFFTTTFT 189154508532118369075350624633/2901503505434414233388602018\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n<p>\n  In the Sample Case for Test Set 3, you can get an expected score over $$$65$$$,\n  which is higher than the actual score of any of the other students. Notice that\n  both the numerator and denominator of the expected score can be significantly larger\n  than $$$2^{64}$$$ (the numerator in this case actually exceeds $$$2^{97}$$$).\n</p>\n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":8},{"type":2,"type__str":"HIDDEN","value":6},{"type":2,"type__str":"HIDDEN","value":25}],"title":"Hacked Exam","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h3>\n  Test Set 1\n</h3>\n<p>\n  First of all, note that it is never optimal to append anything to the first number. Now, with the\n  low limits we can iterate through all the ways to append digits to the second and third numbers\n  while achieving the problem goal. We should stop once we understand that we cannot do better, for\n  example, when both numbers become longer than 4 digits.\n</p>\n<h3>\n  Test Set 2\n</h3>\n<p>\n  We can use a greedy approach to solve the problem: for every number starting with the second one,\n  make it larger than the previous one but as small as possible. Note that this ensures we use as\n  few digits as possible for the current number and at the same time makes it as easy as possible\n  for the next number. This means the greedy choice is optimal.\n</p>\n<p>\n  So the problem now is how do we compute this efficiently. More formally: given integers\n  $$$A$$$ and $$$B$$$, find the minimum $$$B'$$$ such that $$$B' \\gt A$$$ and $$$B$$$ is a\n  prefix of $$$B'$$$. Let us denote the number of digits in an integer $$$Z$$$ as\n  $$$\\text{len}(Z)$$$.\n</p>\n<p>\n  First of all, if $$$A \\lt B$$$, we can set $$$B' = B$$$.\n</p>\n<p>\n  Now let's consider the case when $$$A \\ge B$$$ and $$$\\text{len}(A) = \\text{len}(B)$$$. Note that\n  appending any digit to $$$B$$$ will make it larger than $$$A$$$. To make it as small as possible\n  we can just append a zero.\n</p>\n<p>\n  The only case that is not considered now is when $$$B$$$ has fewer digits than $$$A$$$.\n  Let $$$k = \\text{len}(A) - \\text{len}(B)$$$.\n</p>\n<p>\n  First, we can try making $$$B'$$$ equal to $$$B \\times 10^k$$$, that is, append $$$k$$$\n  zeroes to the right of $$$B$$$.\n  If such a $$$B'$$$ is larger than $$$A$$$, then this is the optimal solution.\n</p>\n<p>\n  Now, we check if it is possible that $$$B'$$$ is the same length as $$$A$$$.\n  If appending $$$k$$$ nines to $$$B$$$ doesn't result in something larger\n  than $$$A$$$, then $$$B'$$$ will need to have more digits than $$$A$$$.\n  In such a case, we can just make $$$B$$$ exactly $$$1$$$ digit longer $$$A$$$\n  and as small as possible by appending $$$k + 1$$$ zeroes to $$$B$$$.\n</p>\n<p>\n  If appending $$$k$$$ zeroes to $$$B$$$ is too small but appending $$$k$$$\n  nines makes it larger than $$$A$$$, then $$$B$$$ is actually a prefix of $$$A$$$.\n  In such a case $$$B' = A + 1$$$ is the optimal answer.\n</p>\n<p>\n  All the checks performed above are linear in the length of $$$A$$$ and $$$B$$$ and each number in\n  the input is processed at most once as $$$A$$$ and at most once as $$$B$$$. However,\n  numbers may become longer after each operation, but only by $$$1$$$ digit. Therefore, the\n  complexity of the overall algorithm is quadratic in the total number of digits in the input,\n  and linear in the number of digits of the output. As an example, an input\n  of $$$\\mathbf{N}$$$ strictly decreasing integers of the same length yields an output where the $$$i$$$-th\n  integer consists of exactly one more digit than the previous,\n  which needs $$$(\\mathbf{N} \\cdot (\\mathbf{N} - 1)) / 2$$$ operations in total.\n</p>\n\n\n  <div class=\"test-data-download-wrapper\">\n    <div class=\"test-data-download-header\">\n      <div class=\"test-data-download-header-text\">Test Data</div>\n      <div class=\"test-data-download-header-download-button\">\n        <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0jBZ3tuzXCRg3NzJym9xGwYimX1EL9TNH9xzKNmVCFNfsaCRYlDSpvBX2o7ENH9j6QGcEi8R88/test_data.zip?dl=1\" target=\"_blank\">\n          <i class=\"material-icons grey\">save_alt</i>\n        </a>\n      </div>\n    </div>\n    <div class=\"test-data-download-content\">\n      <div class=\"test-data-download-warning\">\n        <span class=\"material-icons\" style=\"color: grey; vertical-align: middle;\">info</span>\n        <span style=\"vertical-align: middle;\">We recommend that you practice debugging solutions without looking at the test data.</span>\n      </div>\n    </div>\n  </div>\n\n","id":"00000000007549e5","statement":"<h3>Problem</h3>\n<p>\nWe have a list of integers $$$\\mathbf{X_1}, \\mathbf{X_2}, \\dots, \\mathbf{X_N}$$$. We would like them to be\nin strictly increasing order, but unfortunately, we cannot reorder them. This means that\nusual sorting algorithms will not work.\n</p><p>\nOur only option is to change them by appending digits $$$0$$$ through $$$9$$$ to their right\n(in base $$$10$$$).\nFor example, if one of the integers is $$$10$$$, you can turn it into $$$10\\textbf{0}$$$ or\n$$$10\\textbf{9}$$$ with a single append operation, or into $$$10\\textbf{34}$$$ with two operations\n(as seen in the image below).\n</p>\n<p>\nGiven the current list, what is the minimum number of single digit append operations\nthat are necessary for the list to be in strictly increasing order?\n</p><p>\nFor example, if the list is $$$100, 7, 10$$$, we can use $$$4$$$ total operations to\nmake it into a sorted list, as the following image shows.\n</p>\n<p align=\"center\"><img src=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U0F2vmICUWZ-xl-FqLXdF-K4KE96ugXCX1Gc7zWjHGhF_SGMYKqwZfBj8Oy6aUbIlPnbW_J_c4_QUA/append_sort.png\" style=\"max-width: 100%;\" alt=\"Sample Case #1\"/></p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, $$$\\mathbf{T}$$$. $$$\\mathbf{T}$$$ test cases follow.\nEach test case is described in two lines. The first line of a test case contains a single\ninteger $$$\\mathbf{N}$$$, the number of integers in the list. The second line contains $$$\\mathbf{N}$$$ integers\n$$$\\mathbf{X_1}, \\mathbf{X_2}, \\dots, \\mathbf{X_N}$$$, the members of the list.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <code>Case #$$$x$$$: $$$y$$$</code>,\nwhere $$$x$$$ is the test case number (starting from 1) and $$$y$$$ is\nthe minimum number of single digit append operations needed for the list to\nbe in strictly increasing order.\n</p>\n\n<h3>Limits</h3>\n<p>\nTime limit: 10 seconds.<br/>\nMemory limit: 1 GB.<br/>\n\n$$$1 \\le \\mathbf{T} \\le 100$$$.<br/>\n</p>\n\n<h4>Test Set 1 (Visible Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N} \\le 3$$$.<br/>\n$$$1 \\le \\mathbf{X_i} \\le 100$$$, for all $$$i$$$.<br/>\n</p>\n\n<h4>Test Set 2 (Visible Verdict)</h4>\n<p>\n\n$$$2 \\le \\mathbf{N} \\le 100$$$.<br/>\n$$$1 \\le \\mathbf{X_i} \\le 10^9$$$, for all $$$i$$$.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper-new\">\n    <div class=\"sampleio-wrapper\">\n      <div class=\"sample-input\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Input</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U1FxesbIrWVK_JqzeLBaQvduPKXXk8nOWTFWpf_OEwOryhax8TAjWCsto5ojZYjGc_8gQTdlJx7aHf-Api_14KXBGQPNRrPKWIOfw/append_sort_sample_ts1_input.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_input_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_input_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_input_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_input_0\">4\n3\n100 7 10\n2\n10 10\n3\n4 19 1\n3\n1 2 3\n</pre>\n        </div>\n      </div>\n      <div class=\"sample-output\">\n        <div class=\"sample-header\">\n          <div class=\"sample-header-text\">Sample Output</div>\n          <div class=\"sample-header-download-button\">\n            <a href=\"https://codejam.googleapis.com/dashboard/get_file/AQj_6U01VdjpbY42JRDoxtliG13c_SibAw8AQA7BiJM5LKI6Zilwb-ZoXMretFnM7fWF2rZXh5sOCy56b61vlKgeRuKgJzA1adgKsrnbtp4/append_sort_sample_ts1_output.txt?dl=1\" target=\"_blank\" aria-label=\"Download\">\n              <i class=\"material-icons grey\">save_alt</i>\n            </a>\n          </div>\n          <div class=\"sample-header-copy-button\" onclick=\"\n              const copyText = document.getElementById('sample_output_0').textContent;\n              const textArea = document.createElement('textarea');\n              textArea.textContent = copyText;\n              textArea.style.position = 'absolute';\n              textArea.style.left = '-100%';\n              document.body.append(textArea);\n              textArea.select();\n              document.execCommand('copy');\n              textArea.remove();\n              const copyPopup = document.getElementById('sample_output_copy_popup_0');\n              copyPopup.classList.add('sample-header-copy-popup-shown');\n              setTimeout(function(){ copyPopup.classList.remove('sample-header-copy-popup-shown'); }, 2000);\n          \" aria-label=\"Copy to clipboard\">\n            <i class=\"material-icons grey\">content_copy</i>\n            <span class=\"sample-header-copy-popup\" id=\"sample_output_copy_popup_0\">\n              Copied!\n            </span>\n          </div>\n        </div>\n        <div class=\"sample-content\">\n          <pre class=\"sample-content-text\" id=\"sample_output_0\">Case #1: 4\nCase #2: 1\nCase #3: 2\nCase #4: 0\n</pre>\n        </div>\n      </div>\n    </div>\n  </div>\n\n\n<p>\n  In Sample Case #1, the input is the same as in the example given in the problem statement. As the\n  image shows, the list can be turned into a sorted list with $$$4$$$ operations. Notice that the\n  last two integers need to end up with at least $$$3$$$ digits (requiring at least $$$3$$$ append\n  operations in total).\n  If all of the final numbers had exactly three digits, the second would be larger than the third\n  because it starts with a $$$7$$$ instead of a $$$1$$$. This means we cannot do it with fewer\n  than $$$4$$$ operations.\n</p><p>\n  In Sample Case #2, notice that the list needs to be in strictly increasing order, so we\n  have to do at least one operation. In this case, any valid append operation to the second\n  integer works.\n</p><p>\n  In Sample Case #3, we can use two append operations to get the list to\n  $$$4, 19, 1\\textbf{93}$$$.\n</p><p>\n  In Sample Case #4, the given list is already in strictly increasing order, so no\n  operations are necessary.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":0},{"type":1,"type__str":"VISIBLE","value":12},{"type":1,"type__str":"VISIBLE","value":14}],"title":"Append Sort","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"000000000043585d","type":1,"type__str":"SPECTATOR"},"title":"Round 1A 2021"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
