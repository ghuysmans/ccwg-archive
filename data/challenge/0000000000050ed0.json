{"challenge":{"announcements":[],"are_results_final":true,"end_ms":1399750200000,"hide_scoreboard":false,"hide_scoreboard_config":{},"id":"0000000000050ed0","is_practice_available":true,"my_user_type":0,"my_user_type__str":"NONE","recap":"<p>\n  This was our first Code Jam to I/O for Women contest. <i>Saturnalia</i> was\n  a simple warm-up problem, <i>Zathras</i> entailed implementing a simulation,\n  and <i>Seating Chart</i> was a more complex exercise in combinatorics.\n  MirandaYang took first place with a perfect score in only 46 minutes! Eight\n  other contestants achieved perfect scores.\n</p>\n","registration_gives_participant":false,"result_status":20,"result_status__str":"FULLY_VISIBLE","start_ms":1399741200000,"tasks":[{"analysis":"<h2>Saturnalia: Analysis</h2>\n<p>\n  The first problem in the first instance of this new Code Jam contest has a\n  very straightforward solution:\n</p>\n<ul>\n  <li>Determine the length of the given string; call it L.</li>\n  <li>Output a line consisting of one <code>+</code> character, L+2\n    <code>-</code> characters, and one more <code>+</code> character.</li>\n  <li>Output a line consisting of one <code>|</code> character, then one space,\n    then the given string, then another space, then one more <code>|</code>\n    character.</li>\n  <li>Output another line identical to the first line described above.</li>\n</ul>\n<p>\n  It is important to avoid reading the input in a way that strips space\n  characters, since those are considered part of the given string. Sample\n  Case #4 calls attention to this issue.\n</p>","id":"0000000000050df2","statement":"<h3>Problem</h3>\n<p>\nIt is the eve of Saturnalia in the Roman Empire, and Caterina is preparing the stables for the next day's chariot race. Part of her job is to write instructions and notes, print them on her printer (she's ahead of her time), and put them on the stable walls. That's simple, but because Saturnalia is an important festival, she wants to make them beautiful. Caterina needs a computer program that reads a message and outputs it back, decorated with a box. The program needs to be able to handle many messages at once. Can you help her?\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>.  <b>T</b> lines follow. Each line contains a text message.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output four lines. The first one should contain \"Case #x:\", where x is the test case number (starting from 1). The next 3 lines should contain the original message surrounded by a box of '+', '-', and '|' characters, with a space character added on each side of the message. See examples below for the exact formatting requirements. Pay special attention to the spaces.\n</p>\n\n<h3>Limits</h3>\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 20 seconds.<br/>\n  Memory limit: 1 GB.<br/>\n  Each input line will contain between 1 and 70 characters.<br/>\n  Each character will either be an English letter, a space, or one of the following punctuation characters: ,?!'. (comma, question mark, exclamation point, apostrophe, or period).\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper\">\n  <table>\n  <tbody><tr>\n  <td>\n  <br>\n  <span class=\"io-table-header\">Input</span>\n  <br>&nbsp;\n  </td>\n  <td>\n  </td></tr>\n  <tr>\n  <td>\n  <pre class=\"io-content\">5\nMerry Saturnalia, Giovanni!\nEquus, you're the best!\nCaballus, you try really hard!\n   \nw\n\n  </pre>\n  </td>\n  </tr>\n  <tr>\n  <td>\n  <br><hr><br>\n  </td>\n  </tr>\n  <tr>\n  <td>\n  <span class=\"io-table-header\">Output</span>\n  <br>&nbsp;\n  </td>\n  </tr>\n  <tr>\n  <td>\n  <pre class=\"io-content\">Case #1:\n+-----------------------------+\n| Merry Saturnalia, Giovanni! |\n+-----------------------------+\nCase #2:\n+-------------------------+\n| Equus, you're the best! |\n+-------------------------+\nCase #3:\n+--------------------------------+\n| Caballus, you try really hard! |\n+--------------------------------+\nCase #4:\n+-----+\n|     |\n+-----+\nCase #5:\n+---+\n| w |\n+---+\n  </pre>\n  </td></tr>\n  </tbody></table>\n  </div>\n  \n<p>\nNote that the input for Case #4 is a line with 3 space characters on it, so the output is a box with five space characters inside.\n</p>\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":15}],"title":"Saturnalia","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Seating Chart: Analysis</h2>\n<p>\n  Before assigning any particular people to particular tables, we can figure\n  out how many people must sit at each table: M = <b>N</b> mod <b>K</b> of the\n  tables will be \"more full\" and will have ceil(<b>N</b> / <b>K</b>) people\n  each, and the other L tables will be \"less full\" and will have\n  floor(<b>N</b> / <b>K</b>) people each.\n</p>\n<h3>Small dataset</h3>\n<p>\n  In the Small dataset, there are at most 8 people, and at most 8 tables.\n  These numbers are small enough that we can try a brute force strategy; here\n  is one example. Number the people from 1 to <b>N</b>, and generate each of\n  the <b>N</b>! permutations of the list [1, ..., <b>N</b>]. Then, for each\n  permutation, proceed left to right through the permutation, filling up the\n  first table in clockwise order with the appropriate number of people, then\n  the second table, and so on. Turn each of these assignments into a sorted\n  list of pairs of people who are sitting next to each other, with the numbers\n  in each pair themselves sorted in ascending order. Maintain a set of all such\n  lists found, discarding any duplicates, and then return the size of that\n  set.\n</p>\n<h3>Large dataset</h3>\n<p>\n  In the Large dataset, <b>N</b> can be as large as 20, so we need to use\n  combinatorics. As in the Small dataset, the tricky part is to avoid\n  counting the same arrangement more than once.\n</p><p>\n  First, let's consider how we assign people to tables. If we have P people who\n  are not yet assigned, and the table requires Q people, there are\n  (P choose Q) ways of selecting those people.\n</p><p>\n  Then, how many ways are there to put those Q people around the table? First,\n  let's dispense with some small cases: for 1 or 2 people, there is only one\n  way. Otherwise, without loss of generality, let's put the first person in our\n  chosen set at the \"top\" of the table. Then, for each of the (Q-1)! possible\n  orders of the remaining people, we can try putting them clockwise around the\n  table, starting from the spot that is directly clockwise from our \"top\"\n  person. Notice that for any one of these orders, using the reverse of that\n  order creates an equivalent arrangement, so there are really only (Q-1)! / 2\n  possibilities.\n</p><p>\n  So, we can start by saying there is 1 possible arrangement, and then, for\n  each table, multiply that number by (P choose Q) and (Q-1)! / 2, to reflect\n  populating that table. The value of P will diminish as we seat more and more\n  people, and the value of Q will depend on whether we are looking at one of\n  our \"more full\" or \"less full\" tables. It does not matter what order we\n  process the tables in.\n</p><p>\n  However, after we have done this, we still need to correct for some\n  overcounting. For any particular arrangement, we have a huge number of\n  duplicates. Specifically, we could have enumerated the M \"more full\" tables\n  in the arrangement in any one of M! possible orders, and the L \"less full\"\n  tables in any one of L! possible orders. Dividing our total by M! and L!\n  eliminates this redundancy and yields the correct answer.\n</p>","id":"0000000000050df3","statement":"<h3>Problem</h3>\n<p>\nSome people believe that the easiest way to ruin a conference is to do a bad job of planning the seating arrangements. The conference's chairperson, Saanvi, is planning seating for the dinner after the keynote address, with <b>N</b> people, and she wants to manually review all possible seating arrangements in order to pick the absolutely best one. To figure out whether that's feasible, she's planning to write a program to compute the number of possible seating arrangements.\n</p>\n\n<p>\nThere are <b>K</b> round tables at the dinner, numbered 1 through <b>K</b>. It is important to have exactly the same number of people sitting at each table. If that is impossible (<b>N</b> is not divisible by <b>K</b>), then the table with the most people must have at most one more person sitting at it than the table with the fewest people.\n</p>\n\n<p>\nEach of the <b>N</b> people will be assigned a unique number between 0 and <nobr><b>N</b> - 1</nobr>. What matters is who is sitting next to whom, and not exactly where they're sitting. In other words, two arrangements, A and B, are considered different if there exists a pair of numbers, &alpha; and &beta;, such that persons &alpha; and &beta; are sitting next to each other at the same table in arrangement A, but they are not sitting next to each other in arrangement B.\n</p>\n\n<p>\nFor example, if <b>N</b> is 5, and <b>K</b> is 2, we must have 3 people seated at one of the tables, and 2 people seated at the other table. Here is the list of all 10 of the possible arrangements:\n<pre>\n[[0, 1, 2], [3, 4]]\n[[0, 1, 3], [2, 4]]\n[[0, 1, 4], [2, 3]]\n[[0, 2, 3], [1, 4]]\n[[0, 2, 4], [1, 3]]\n[[0, 3, 4], [1, 2]]\n[[1, 2, 3], [0, 4]]\n[[1, 2, 4], [0, 3]]\n[[1, 3, 4], [0, 2]]\n[[2, 3, 4], [0, 1]]\n</pre>\nAll other arrangements are similar to one of the arrangements above and are not counted as different. In particular, all of the following arrangements are considered to be the same:\n<pre>\n[[0, 1, 2], [3, 4]]\n[[2, 0, 1], [3, 4]]\n[[1, 2, 0], [4, 3]]\n[[0, 2, 1], [3, 4]]\n[[3, 4], [0, 2, 1]]\n</pre>\nThis is because the following pairs of people (and no other pairs) are sitting next to each other in each of these 5 arrangements:\n<pre>\n0 and 1\n0 and 2\n1 and 2\n3 and 4\n</pre>\n</p>\n\n<p>\nAnother example is <nobr><b>N</b> = 5</nobr> and <nobr><b>K</b> = 3</nobr>, which requires having two tables with two people each, and one table with a single person sitting at it. There are 15 possible arrangements in this case:\n<pre>\n[[0, 1], [2, 3], [4]]\n[[0, 1], [2, 4], [3]]\n[[0, 1], [3, 4], [2]]\n[[0, 2], [1, 3], [4]]\n[[0, 2], [1, 4], [3]]\n[[0, 2], [3, 4], [1]]\n[[0, 3], [1, 2], [4]]\n[[0, 3], [1, 4], [2]]\n[[0, 3], [2, 4], [1]]\n[[0, 4], [1, 2], [3]]\n[[0, 4], [1, 3], [2]]\n[[0, 4], [2, 3], [1]]\n[[1, 2], [3, 4], [0]]\n[[1, 3], [2, 4], [0]]\n[[1, 4], [2, 3], [0]]\n</pre>\n</p>\n\n<p>\nIn this final example, <nobr><b>N</b> = 5</nobr> and <nobr><b>K</b> = 1</nobr>, which means that we only have a single table, seating all 5 guests. Here, the answer is 12:\n<pre>\n[[0, 1, 2, 3, 4]]\n[[0, 1, 2, 4, 3]]\n[[0, 1, 3, 2, 4]]\n[[0, 1, 3, 4, 2]]\n[[0, 1, 4, 2, 3]]\n[[0, 1, 4, 3, 2]]\n[[0, 2, 1, 3, 4]]\n[[0, 2, 1, 4, 3]]\n[[0, 2, 3, 1, 4]]\n[[0, 2, 4, 1, 3]]\n[[0, 3, 1, 2, 4]]\n[[0, 3, 2, 1, 4]]\n</pre>\n</p>\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>.  <b>T</b> lines, each one containing two integers, <b>N</b> and <b>K</b>.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing \"Case #x: y\", where x is the test case number (starting from 1) and y is the number of different possible seating arrangements.\n</p>\n\n<h3>Limits</h3>\n<p>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1 GB.<br/>\n  1 &le; <b>K</b> &le; <b>N</b>.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n1 &le; <b>T</b> &le; 36.<br/>\n1 &le; <b>N</b> &le; 8.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n1 &le; <b>T</b> &le; 210.<br/>\n1 &le; <b>N</b> &le; 20.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper\">\n  <table>\n  <tr>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Input</span>\n  <br/>&nbsp;\n  </td>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Output</span>\n  <br/>&nbsp;\n  </td>\n  </tr>\n  <tr>\n  <td>\n  <pre class=\"io-content\">5\n5 2\n5 3\n5 4\n5 1\n1 1\n\n  </pre>\n  </td>\n  <td>\n  <pre class=\"io-content\">Case #1: 10\nCase #2: 15\nCase #3: 10\nCase #4: 12\nCase #5: 1\n\n  </pre>\n  </td></tr></table>\n  </div>\n  \n\n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":17},{"type":2,"type__str":"HIDDEN","value":28}],"title":"Seating Chart","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"},{"analysis":"<h2>Zathras: Analysis</h2>\n<h3>Small dataset</h3>\n<p>\n  The Small dataset is an exercise in understanding the rules of the described\n  system, and then turning them into code. There are some issues to watch out\n  for:\n</p>\n<ul>\n  <li>If we use floating-point numbers, we must avoid precision issues and\n    ensure that we round down appropriately whenever the rules require it. It\n    is safer to reframe the calculations to use only integers; in most\n    languages, integer division already has the round-down property that the\n    rules require.</li>\n  <li>When determining the types of babies, we must see how many guaranteed\n    babies of each type we get before we can know the size of the pool of\n    remaining babies to divvy up. Suppose we have <b>&alpha;</b> = 40 and\n    <b>&beta;</b> = 20, and 4950 of each type of Zathrinian. Then we must\n    create 99 babies; floor(99 * 0.4) = 39 of them must be acrobots,\n    floor(99 * 0.2) = 19 of them must be bouncoids, and then the remaining 99 -\n    39 - 19 = 41 of them must be 20 acrobots and 21 bouncoids, for a total of\n    59 acrobots and 40 bouncoids. If we had instead tried to directly calculate\n    the number of remaining babies as 100 - 40 - 20 = 40% of 99, we would have\n    gotten 39 or 40 (depending on how we rounded), not 41.</li>\n</ul>\n<p>\n  Since <b>Y</b> &le; 100 in the Small dataset, simulation is fast enough.\n  Note that it is possible for <b>Y</b> to equal 0!\n</p>\n<h3>Large dataset</h3>\n<p>\n  In the Large dataset, <b>Y</b> can be as large as 10<sup>15</sup>; there is\n  not enough time in the submission window to simulate that many steps.\n  (Most contestants who attempted but did not pass this dataset got the \"Time\n  expired\" verdict.) We need another insight.\n</p><p>\n  The example in the problem statement provides a hint:\n  the numbers of acrobots and bouncoids reach stable values that do not change\n  from year to year. If we ever find that those numbers are the same two years\n  in a row, we know they will be the same forever (since the rules do not\n  change), and so we can stop the simulation. But how can we convince ourselves\n  that this will necessarily happen fast enough, or at all? If there is a cycle\n  of length greater than 1 &mdash; that is, if we see the same pair of acrobot\n  and bouncoid population values more than once, but not back-to-back &mdash;\n  then this strategy will fail. It turns out to be difficult to prove that\n  there are no such cycles, or even to set bounds on how long the simulation\n  can go on.\n</p><p>\n  At this point, one option is to just assume that the simulation always\n  reaches a stable point, and this assumption turns out to be correct. Another\n  option is to implement a more cautious simulation that includes a\n  <a href=\"https://en.wikipedia.org/wiki/Cycle_detection#Algorithms\" target=\"_blank\">cycle detection algorithm</a>\n  that uses constant memory; if we detect a cycle, we can then figure out where\n  in the cycle the simulation would end, without actually running the remainder\n  (but, again, this turns out not to happen). Since there are just over\n  10<sup>12</sup> possible ordered pairs of acrobot and bouncoid population\n  values, the simulation cannot possibly take more steps than that, and it is\n  possible to convince yourself that much tighter upper bounds exist. Under the\n  given rules, the percentage of acrobots approaches <b>&alpha;</b> +\n  (100 - <b>&alpha;</b> - <b>&beta;</b>) / 2, and the percentage of bouncoids\n  approaches <b>&beta;</b> + (100 - <b>&alpha;</b> - <b>&beta;</b>) / 2, and\n  these approaches are at more or less exponential speed, although they may\n  oscillate around their final values for a while (and it is even possible for\n  the total population size to increase, up to a point). The behavior of the\n  exponential approach is \"smooth\" &mdash; small changes to a set of initial\n  values do not change the behavior much &mdash; so you can make yourself more\n  confident overall by experimenting with various values. In practice, each\n  simulation takes at most several tens of thousands of steps.\n</p>","id":"0000000000050ed1","statement":"<h3>Problem</h3>\n<p>\nIt is year 2025 on planet Zathras -- a world populated exclusively by semi-sentient robots called Zathrinians. There are two kinds of Zathrinians: acrobots and bouncoids. Once a year, the Great Mind makes its Great Decision for that year, and chooses how the Zathrinians will reproduce and be decommissioned. When it's making the Great Decision, it takes into account two Eternal Parameters: <b>&alpha;</b> and <b>&beta;</b>. These parameters, being Eternal, do not change from year to year.\n</p>\n<p>\n<b>Reproduction:</b> If there are <b>A</b> acrobots and <b>B</b> bouncoids when the Great Mind makes the Great Decision, the Great Mind will create <nobr>K = min(<b>A</b>, <b>B</b>)</nobr> reproductive pairs by pairing together an acrobot and a bouncoid. Any remaining robots will be unpaired. The next day, 2% of those K couples (rounded down) will produce one baby Zathrinian each.\n</p>\n<p>\nOut of all the baby Zathrinians produced, <nobr><b>&alpha;</b>%</nobr> (rounded down) are acrobots, and <nobr><b>&beta;</b>%</nobr> (rounded down) are bouncoids. The remaining baby Zathrinians are split evenly between acrobots and bouncoids; if there's an odd number, the extra baby becomes a bouncoid.\n</p>\n<p>\n<b>Decommissioning:</b> When the Great Mind makes its Great Decision, 1% of acrobots (rounded down) and 1% of bouncoids (rounded down) are marked for decommissioning. Two days later, they will all be disassembled. Note that the 1% figure is calculated on the day of the Great Decision, before the new Zathrinians are born.\n</p>\n<p>\nAfter the Great Decision has been made (day 1), the reproduction has occurred (day 2), and the unlucky Zathrinians have been disassembled (day 3), the entire world continues to function in harmony until next year's Great Decision takes place at the time scheduled in the Eternal Specification.\n</p>\n\n<h3>Example</h3>\n<p>\nIf we start with a population of 12345 acrobots and 12890 bouncoids, 123 acrobots and 128 bouncoids will be marked for decommissioning. The number of couples will be <nobr>min(12345, 12890)</nobr>, which is 12345. This means that 246 offspring will be created that year. Let's say that <nobr><b>&alpha;</b>=10</nobr> and <nobr><b>&beta;</b>=13</nobr>, so more bouncoids than Zathrinians are created each year. This means that 24 offspring will be acrobots (10% of 246, rounded down); 31 will be bouncoids (13% of 246, rounded down); and the remaining 191 will be split between 95 more acrobots and 96 more bouncoids.\n</p>\n<p>\nOverall, we started with 12345 acrobots and 12890 bouncoids. One day later, there will be 12464 acrobots and 13017 bouncoids. The next day, there will be 12341 acrobots and 12889 bouncoids. 99 years later, there will be 11993 acrobots and 12676 bouncoids. After a total of 5049 years, we will be down to only 3099 acrobots and 3199 bouncoids -- a huge drop in total population size. After that, the populations will remain the same forever.\n</p>\n\n<p>\nGiven the values of <b>A</b>, <b>B</b>, <b>&alpha;</b>, <b>&beta;</b>, and <b>Y</b>, can you compute the acrobot and bouncoid population sizes at the end of <b>Y</b> years?\n\n<h3>Input</h3>\n<p>\nThe first line of the input gives the number of test cases, <b>T</b>.  <b>T</b> lines follow.  Each line contains 5 integers: <b>A</b>, <b>B</b>, <b>&alpha;</b>, <b>&beta;</b>, and <b>Y</b>.\n</p>\n\n<h3>Output</h3>\n<p>\nFor each test case, output one line containing <nobr>\"Case #x: A<sub>Y</sub> B<sub>Y</sub>\"</nobr>, where x is the test case number (starting from 1) and (A<sub>Y</sub>, B<sub>Y</sub>) are the populations of acrobots and bouncoids after <b>Y</b> years, respectively.\n</p>\n\n<h3>Limits</h3>\n<p>\n  1 &le; <b>T</b> &le; 100.<br/>\n  Time limit: 20 seconds per test set.<br/>\n  Memory limit: 1 GB.<br/>\n  0 &le; <b>&alpha;</b>.<br/>\n  0 &le; <b>&beta;</b>.<br/>\n  <b>&alpha;</b> + <b>&beta;</b> &le; 100.<br/>\n</p>\n\n<h4>Small dataset (Test set 1 - Visible)</h4>\n<p>\n0 &le; <b>A</b> &le; 20000.<br/>\n0 &le; <b>B</b> &le; 20000.<br/>\n0 &le; <b>Y</b> &le; 100.<br/>\n</p>\n\n<h4>Large dataset (Test set 2 - Hidden)</h4>\n<p>\n0 &le; <b>A</b> &le; 10<sup>6</sup>.<br/>\n0 &le; <b>B</b> &le; 10<sup>6</sup>.<br/>\n0 &le; <b>Y</b> &le; 10<sup>15</sup>.<br/>\n</p>\n\n\n  <h3>Sample</h3>\n  <div class=\"problem-io-wrapper\">\n  <table>\n  <tr>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Input</span>\n  <br/>&nbsp;\n  </td>\n  <td>\n  <br/>\n  <span class=\"io-table-header\">Output</span>\n  <br/>&nbsp;\n  </td>\n  </tr>\n  <tr>\n  <td>\n  <pre class=\"io-content\">4\n12345 12890 10 13 0\n12345 12890 10 13 1\n12345 12890 10 13 100\n12345 12890 10 13 5049\n\n  </pre>\n  </td>\n  <td>\n  <pre class=\"io-content\">Case #1: 12345 12890\nCase #2: 12341 12889\nCase #3: 11993 12676\nCase #4: 3099 3199\n\n  </pre>\n  </td></tr></table>\n  </div>\n  \n","task_type":1,"task_type__str":"CODE_JAM","tests":[{"type":1,"type__str":"VISIBLE","value":16},{"type":2,"type__str":"HIDDEN","value":24}],"title":"Zathras","trial_input_type":1,"trial_input_type__str":"TEXT_FILE"}],"ticket":{"challenge_id":"0000000000050ed0","type":0,"type__str":"NONE"},"title":"Code Jam to I/O for Women 2014"},"languages":[{"id":1,"id__str":"BASH","name":"Bash"},{"id":2,"id__str":"C","name":"C (GCC)"},{"id":11,"id__str":"CSHARP","name":"C# (Mono)"},{"id":3,"id__str":"CPP","name":"C++17 (G++)"},{"id":19,"id__str":"CLOJURE","name":"Clojure"},{"id":24,"id__str":"D","name":"D (GDC)"},{"id":32,"id__str":"DART","name":"Dart"},{"id":28,"id__str":"FSHARP","name":"F# (Mono)"},{"id":6,"id__str":"GO","name":"Go 1.11.6"},{"id":20,"id__str":"GROOVY","name":"Groovy"},{"id":12,"id__str":"HASKELL","name":"Haskell (GHC)"},{"helper_text":"Please name your main class \"Solution\" (uppercase S) and do not declare a package.","id":4,"id__str":"JAVA","name":"Java 11 (OpenJDK)"},{"id":10,"id__str":"JAVASCRIPT","name":"JavaScript (Node.js)"},{"id":29,"id__str":"JULIA","name":"Julia"},{"id":22,"id__str":"KOTLIN","name":"Kotlin"},{"id":23,"id__str":"LISP","name":"Lisp (SBCL)"},{"id":30,"id__str":"LUA","name":"Lua"},{"id":18,"id__str":"OCAML","name":"OCaml"},{"id":31,"id__str":"OBJECTIVEC","name":"Objective-C (GNU)"},{"id":15,"id__str":"OCTAVE","name":"Octave"},{"id":9,"id__str":"PHP","name":"PHP"},{"id":21,"id__str":"PASCAL","name":"Pascal (FPC)"},{"id":14,"id__str":"PERL","name":"Perl"},{"id":34,"id__str":"PYPY3","name":"PyPy 3"},{"id":7,"id__str":"PYTHON3","name":"Python 3.7"},{"id":25,"id__str":"R","name":"R"},{"id":8,"id__str":"RUBY","name":"Ruby"},{"id":17,"id__str":"RUST","name":"Rust"},{"helper_text":"Please name your main class \"Solution\" (uppercase S).","id":13,"id__str":"SCALA","name":"Scala"},{"id":16,"id__str":"SWIFT","name":"Swift"},{"id":33,"id__str":"TYPESCRIPT","name":"TypeScript (Node.js)"},{"id":27,"id__str":"VISUALBASIC","name":"Visual Basic (Mono)"}]}
